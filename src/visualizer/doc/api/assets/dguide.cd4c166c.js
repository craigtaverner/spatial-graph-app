var dguideData={tagname:"root",children:[{tagname:"section",id:"introduction",title:"Introduction",children:[{tagname:"para","class":"dguide-para",id:"introduction-001-simpara-001",content:"yFiles for HTML is an extensive class library that provides algorithms and components for analyzing,\nviewing, editing, and drawing graph and network diagrams.\nIt can be used to develop sophisticated Web applications for HTML5-capable browsers and platforms\npowered by ECMAScript Level 5 and greater engines in general."},{tagname:"para","class":"dguide-para",id:"introduction-001-simpara-002",content:"Graphs and networks commonly comprise entities together with their relationships.\nPresenting such data as a diagram has the benefit that it visualizes complex structures and relationships.\nIt facilitates communication of information by providing a clear picture of the data. On the other hand\ncreating, maintaining, and presenting diagrams are non-trivial tasks which comprise"},{tagname:"para",content:'<ul id="introduction-001-itemizedlist-001"><li id="introduction-001-listitem-001"><p id="introduction-001-simpara-003">the visualization of entities, relations, and labels per se</p></li><li id="introduction-001-listitem-002"><p id="introduction-001-simpara-004">a meaningful arrangement of all elements</p></li><li id="introduction-001-listitem-003"><p id="introduction-001-simpara-005">interactive editing of the diagram</p></li><li id="introduction-001-listitem-004"><p id="introduction-001-simpara-006">persistence</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"introduction-001-simpara-007",content:"yFiles for HTML provides the features which facilitate these tasks."},{tagname:"para","class":"dguide-para",id:"introduction-001-simpara-008",content:"This introduction gives an overview of the kind of purposes the yFiles for HTML library serves,\nand of typical applications and application domains.\nFinally, it provides an outlook of the content of this Developer’s Guide."},{tagname:"para","class":"dguide-para tip",id:"introduction-001-tip-001",content:'<p id="introduction-001-simpara-009">To learn the basic concepts of yFiles for HTML quickly, you can follow the steps of the <a href="#/dguide/getting_started">Getting Started</a> chapter.</p>'},{tagname:"section",id:"introduction-graphs",title:"Graphs and Diagrams",children:[{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-001",content:'In yFiles for HTML, a <span class="def">graph</span> is defined as a set of objects where some pairs of objects might be connected.\nWe call such an object a <span class="def">node</span> (instead of entity, vertex, or element) and a connection an <span class="def">edge</span>\n(instead of link, relation, or arc).\nThe edges might be directed or undirected.'},{tagname:"figure","class":"image",title:"Undirected and directed graphs",id:"introduction-graphs-001-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_example_undirected.c3ed675f.jpg",alt:"",title:'<para class="dguide-para">Undirected Graph</para>'},{tagname:"img",src:"assets/graph_model_example_directed.3da5540c.jpg",alt:"",title:'<para class="dguide-para">Directed Graph</para>'}]},{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-002",content:'A <span class="def">diagram</span> is the visualization of the data represented by a graph. However, we often do not\ndistinguish between the two terms if the meaning is clear from the context.'},{tagname:"para","class":"dguide-para important",id:"introduction-graphs-001-important-001",content:'<p id="introduction-graphs-001-simpara-003">The ambiguity of the terms <span class="def">graph</span> and <span class="def">visualization</span> causes a common misunderstanding of the\npurposes of yFiles for HTML.</p><p id="introduction-graphs-001-simpara-004">In particular, the yFiles for HTML library does not provide any functionality to draw pie charts,\nfunction plots, or anything the like.</p>'},{tagname:"figure","class":"image",title:"Unsupported charts and visualizations",id:"introduction-graphs-001-figure-002","float":0,children:[{tagname:"img",src:"assets/introduction_pie_chart.ccc4c356.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/introduction_function_plot.1067a51f.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-005",content:"Diagrams of any kind naturally arise in a wide variety of application domains.\nOften, a node is represented by a visualization like a shape, icon, or image.\nAn edge is usually represented by a connecting line between its two nodes, with or without some kind\nof decoration at its ends.\nOften, captions or labels provide extra textual information."},{tagname:"figure","class":"image",title:"Example diagrams from various application fields",id:"introduction-graphs-001-figure-003","float":0,children:[{tagname:"img",src:"assets/familytree_example.47895d15.png",alt:"",title:'<para class="dguide-para">Family tree</para>'},{tagname:"img",src:"assets/introduction_semantic.d277d0d1.png",alt:"",title:'<para class="dguide-para">Semantic network</para>'},{tagname:"img",src:"assets/introduction_collaboration.c237d162.png",alt:"",title:'<para class="dguide-para">Process</para>'},{tagname:"img",src:"assets/hierarchical_sample_decision.8476cfd7.jpg",alt:"",title:'<para class="dguide-para">Flow chart</para>'}]},{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-006",content:"The benefits of diagrams can be summarized with the proverb “a diagram is worth a thousand words:”"},{tagname:"para",content:'<ul id="introduction-graphs-001-itemizedlist-001"><li id="introduction-graphs-001-listitem-001"><p id="introduction-graphs-001-simpara-007">Subjects of arbitrary complexity can be arranged to get a clear picture of hidden structures and dependencies.</p></li><li id="introduction-graphs-001-listitem-002"><p id="introduction-graphs-001-simpara-008">Gordian relationships can be clarified in a matter of seconds.</p></li><li id="introduction-graphs-001-listitem-003"><p id="introduction-graphs-001-simpara-009">Information is communicated to a broad audience easily.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-010",content:"However, these properties strongly depend on the quality of a diagram.\nAnd the task of making legible diagrams is often tedious and moreover\nerror-prone when done by hand.\nSketching even small data sets can become awkward enough to forsake entirely."},{tagname:"para","class":"dguide-para",id:"introduction-graphs-001-simpara-011",content:"With large data sets the problem of making high-quality, easy-to-understand diagrams aggravates.\nDoing it by hand is no longer an alternative, so the need for an automatic generation grows."}]},{tagname:"section",id:"introduction-about_yfiles",title:"About yFiles for HTML",children:[{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-001",content:"The most common tasks to be performed with graphs boil down to a handful of things:"},{tagname:"para",content:'<ul id="introduction-about_yfiles-002-itemizedlist-001"><li id="introduction-about_yfiles-002-listitem-001"><p id="introduction-about_yfiles-002-simpara-002">visualization</p></li><li id="introduction-about_yfiles-002-listitem-002"><p id="introduction-about_yfiles-002-simpara-003">(interactive) creation and editing</p></li><li id="introduction-about_yfiles-002-listitem-003"><p id="introduction-about_yfiles-002-simpara-004">automatic element arrangement, i.e., automatic graph layout</p></li><li id="introduction-about_yfiles-002-listitem-004"><p id="introduction-about_yfiles-002-simpara-005">structural analysis</p></li><li id="introduction-about_yfiles-002-listitem-005"><p id="introduction-about_yfiles-002-simpara-006">persistence and image export</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-007",content:'<strong id="introduction-about_yfiles-002-emphasis-001" class="bold" role="bold">Visualization</strong> is the task of actually generating a visual representation of an existing graph.\nNote that this does not necessarily mean the creation of a static picture, but\nmore generally describes forms of representation that could also allow interaction.'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-008",content:'The item <strong id="introduction-about_yfiles-002-emphasis-002" class="bold" role="bold">(interactive) creation and editing</strong> means interacting with a graph like creating\nnodes and connecting them with edges, adding further elements to an existing graph,\nor removing elements from an existing graph.'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-009",content:'<strong id="introduction-about_yfiles-002-emphasis-003" class="bold" role="bold">Automatic element arrangement</strong> or <strong id="introduction-about_yfiles-002-emphasis-004" class="bold" role="bold">automatic graph layout</strong>, as we call it, is the creation of\nhigh-quality, easy-to-understand drawings of a graph to help in communicating information more quickly.'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-010",content:'<span class="def">Structural analysis</span> means solving advanced questions that\nrelate to a graph structure, for instance, determining a shortest path between two nodes.'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-011",content:'<strong id="introduction-about_yfiles-002-emphasis-005" class="bold" role="bold">Persistence</strong> as well as <strong id="introduction-about_yfiles-002-emphasis-006" class="bold" role="bold">image export</strong> and <strong id="introduction-about_yfiles-002-emphasis-007" class="bold" role="bold">printing support</strong> are often summarized under the term <span class="def">input and output</span>,\n<span class="def">I/O</span> for short. Persistence means serializing the diagram (preferably together with all related data)\nand storage to a permanent medium. Image export and printing are also common tasks for storing and presenting\nthe visual information of a diagram.'},{tagname:"para","class":"dguide-para",id:"introduction-about_yfiles-002-simpara-012",content:"The yFiles for HTML diagramming library supports your application with\nstate-of-the-art automatic graph layout, highly efficient implementations of\nadvanced graph analysis algorithms, and excellent graph visualization and\ninteraction capabilities.\nyFiles for HTML is something like a Swiss Army knife that:"},{tagname:"para",content:'<ul id="introduction-about_yfiles-002-itemizedlist-002"><li id="introduction-about_yfiles-002-listitem-006"><p id="introduction-about_yfiles-002-simpara-013">Helps the professional JavaScript programmer building high-quality, graph structure related applications.</p></li><li id="introduction-about_yfiles-002-listitem-007"><p id="introduction-about_yfiles-002-simpara-014">Helps the serious graph worker realizing demanding projects in the JavaScript programming language.</p></li></ul>'}]},{tagname:"section",id:"introduction-product_types",title:"yFiles for HTML Product Types",children:[{tagname:"para","class":"dguide-para",id:"introduction-product_types-003-simpara-001",content:"yFiles for HTML is available in three product types:"},{tagname:"para",content:'<dl id="introduction-product_types-003-variablelist-001"><dt id="introduction-product_types-003-term-001"><strong id="introduction-product_types-003-emphasis-001" class="bold" role="bold">Layout</strong></dt><dd id="introduction-product_types-003-listitem-001"><p id="introduction-product_types-003-simpara-002">contains essential classes and data types for graph\nanalysis tasks and an extensive suite of graph layout algorithms which offer unequaled opportunities.\nIt provides efficient implementations of advanced data types like graph or priority\nqueue and makes available a wide variety of graph and network algorithms which form\nan indispensable toolkit for any network analysis tasks.</p><p id="introduction-product_types-003-simpara-003">The suite of graph layout algorithms supports a multitude of layout styles like hierarchical, orthogonal, or circular.\nAdditionally, edge routing algorithms make it possible to route edges into existing diagrams easily.\nThe algorithms provide a rich API that allows extensive configuration and customization\nto suit most layout demands.</p></dd><dt id="introduction-product_types-003-term-002"><strong id="introduction-product_types-003-emphasis-002" class="bold" role="bold">Viewer</strong></dt><dd id="introduction-product_types-003-listitem-002"><p id="introduction-product_types-003-simpara-004">provides the powerful HTML5 component for displaying graphs and makes available excellent\ngraph interaction capabilities with the component. This part can also be used for exporting\nthe visualization as bitmap images and vector graphics.\nThe component allows flexible customizations of nearly all aspects regarding\nrendering of and interaction with graphical objects.</p></dd><dt id="introduction-product_types-003-term-003"><strong id="introduction-product_types-003-emphasis-003" class="bold" role="bold">Complete</strong></dt><dd id="introduction-product_types-003-listitem-003"><p id="introduction-product_types-003-simpara-005">contains both yFiles for HTML Layout and yFiles for HTML Viewer.\nIn addition, it contains adapter logic that facilitates the usage of automatic layouts and analysis\nalgorithms with the graph of the Viewer’s component.</p></dd></dl>'}]},{tagname:"section",id:"introduction-about_dguide",title:"About this Developer’s Guide",children:[{tagname:"para","class":"dguide-para",id:"introduction-about_dguide-004-simpara-001",content:"This Developer’s Guide provides information for the beginner who wants an introduction to the yFiles for HTML\ndiagramming library as well\nas for the advanced user who wants to know how to customize a certain feature. Below you’ll find\na brief overview of the chapters of this developer’s guide:"},{tagname:"para",content:'<dl id="introduction-about_dguide-004-variablelist-001"><dt id="introduction-about_dguide-004-term-001"><a href="#/dguide/features">yFiles for HTML Features</a></dt><dd id="introduction-about_dguide-004-listitem-001"><p id="introduction-about_dguide-004-simpara-002">contains a comprehensive list of all yFiles for HTML features and links to the relevant chapters\nand sections in this Developer’s Guide. This list can be used as an entry point to quickly find information\nabout specific yFiles for HTML features in this Developer’s Guide.</p></dd><dt id="introduction-about_dguide-004-term-002"><a href="#/dguide/getting_started">Getting Started</a></dt><dd id="introduction-about_dguide-004-listitem-002"><p id="introduction-about_dguide-004-simpara-003">describes how to set up a yFiles for HTML project in your preferred development environment and\nprovides a brief introduction to the most important yFiles for HTML features.\nFirst-time users should read this chapter first to get familiar with the most basic principles.</p><p id="introduction-about_dguide-004-simpara-004">For a very quick start, just read the first few sections.</p></dd><dt id="introduction-about_dguide-004-term-003"><a href="#/dguide/demos">Demos and Tutorials</a></dt><dd id="introduction-about_dguide-004-listitem-003"><p id="introduction-about_dguide-004-simpara-005">introduces the source code programming samples that come with yFiles for HTML and\nshows how to set up a project in your IDE for them.\nAfter reading this chapter you know how to run the demos and can explore its source code in detail using your IDE.</p></dd><dt id="introduction-about_dguide-004-term-004">The main part</dt><dd id="introduction-about_dguide-004-listitem-004"><p id="introduction-about_dguide-004-simpara-006">comprises the chapters that describe the yFiles for HTML features in more detail. Developers should be familiar\nwith <a href="#/dguide/graph">The Graph Model</a> and <a href="#/dguide/view">Displaying the Graph</a>. If your use cases include <a href="#/dguide/interaction">User Interaction</a> and <a href="#/dguide/io">Graph I/O and Printing</a>, read these chapters, too.</p><p id="introduction-about_dguide-004-simpara-007">Of the chapters <a href="#/dguide/layout">Automatic Graph Layout</a> and <a href="#/dguide/analysis">Graph Analysis</a>, consult the introductory sections and then just\nthe sections that cover the features you need.</p></dd><dt id="introduction-about_dguide-004-term-005">The customization part</dt><dd id="introduction-about_dguide-004-listitem-005"><p id="introduction-about_dguide-004-simpara-008">repeats the sectioning of the main part: <a href="#/dguide/customizing_graph">Customizing the Graph</a>,\n<a href="#/dguide/customizing_view">Customizing the View</a>, <a href="#/dguide/customizing_interaction">Customizing User Interaction</a>, <a href="#/dguide/customizing_styles">Customizing Styles</a>,\n<a href="#/dguide/customizing_io">Customizing Graph I/O</a>, and <a href="#/dguide/customizing_layout">Customizing Automatic Layout</a>. Chapter <a href="#/dguide/customizing_concepts">General Concepts for Customization</a>\nexplains the general concepts used in yFiles for HTML for customizations.</p><p id="introduction-about_dguide-004-simpara-009">These chapters mostly show customizations which go beyond simply setting a property.\nThey are meant for developers who want to realize a specific behavior differently from the yFiles for HTML defaults.\nDon’t read them from start to end but rather look for the section that covers your current problem.</p></dd><dt id="introduction-about_dguide-004-term-006"><a href="#/dguide/advanced">Advanced Concepts</a></dt><dd id="introduction-about_dguide-004-listitem-006"><p id="introduction-about_dguide-004-simpara-010">comprises supplemental, more complex yFiles for HTML features, namely <a href="#/dguide/filtering">Filtering</a>,\n<a href="#/dguide/folding">Folding</a>, and <a href="#/dguide/tables">Tables</a>. Read the corresponding chapter if you want to use\none of the concepts shown therein.</p></dd></dl>'}]},{tagname:"section",id:"introduction-modules",title:"yFiles for HTML Modules",children:[{tagname:"para","class":"dguide-para",id:"introduction-modules-005-simpara-001",content:'The yFiles for HTML API is divided into a number of JavaScript modules to improve\nloading performance and modularity of applications.\nThe yFiles for HTML package contains two sets of these modules: one in the\n<a href="https://github.com/umdjs/umd" target="_blank">Universal Module Definition (UMD)</a> format and one in the\n<a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" target="_blank">ES6 Modules</a> format. Both sets provide the same\nfeatures and API.'},{tagname:"para","class":"dguide-para",id:"introduction-modules-005-simpara-002",content:'For details on loading the yFiles for HTML modules in your application, please see <a href="#/dguide/getting_started-module_loading">Module Loading</a>'},{tagname:"section",id:"_umd_modules",title:"UMD Modules",children:[{tagname:"para","class":"dguide-para",id:"_umd_modules-006-simpara-001",content:"These module files all expose the <code>yfiles</code> root namespace through their Universal Module Definition header."},{tagname:"para","class":"dguide-para",id:"_umd_modules-006-simpara-002",content:'<a href="#/dguide/fig_module_dependencies">Module dependencies</a> gives an overview of the dependencies\nbetween these modules.\nNote that module <code>yfiles/lang</code> is omitted from the diagram since all\nmodules depend on that module.\nFor brevity and clarity, the diagram also does not show transitive dependencies.'},{tagname:"figure","class":"image",title:"Module dependencies",id:"fig_module_dependencies","float":0,children:[{tagname:"img",src:"assets/module_dependencies.53f4a0c0.jpg",alt:"module dependencies",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_umd_modules-006-simpara-003",content:"Here is a brief overview of the various modules and their contents:"},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_modules",rowsep:1,content:'<caption>Modules</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="_umd_modules-006-thead-001"><tr id="_umd_modules-006-row-001"><th id="_umd_modules-006-entry-001" align="left" valign="top">\nModule name\n</th><th id="_umd_modules-006-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_umd_modules-006-tbody-001"><tr id="_umd_modules-006-row-002"><td id="_umd_modules-006-entry-003" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-004"><code>yfiles/complete</code></para></td><td id="_umd_modules-006-entry-004" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-005">Depends on all available modules and can thus be used during development to make\n  sure that the complete API is available.\n  It basically bundles the viewer modules together with the layout modules and the\n  bridge module that is used to mediate between the viewer and the layout functionality.</para></td></tr><tr id="_umd_modules-006-row-003"><td id="_umd_modules-006-entry-005" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-006"><code>yfiles/view</code></para></td><td id="_umd_modules-006-entry-006" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-007">Depends on all modules that are used for the visualization and interaction, as\n  well as data import and data export.</para></td></tr><tr id="_umd_modules-006-row-004"><td id="_umd_modules-006-entry-007" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-008"><code>yfiles/layout</code></para></td><td id="_umd_modules-006-entry-008" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-009">Depends on all available layout and algorithm modules.</para></td></tr><tr id="_umd_modules-006-row-005"><td id="_umd_modules-006-entry-009" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-010"><code>yfiles/view-component</code></para></td><td id="_umd_modules-006-entry-010" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-011">Contains the basic visualization infrastructure, styles and support classes for collections, iterations etc.</para></td></tr><tr id="_umd_modules-006-row-006"><td id="_umd_modules-006-entry-011" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-012"><code>yfiles/view-editor</code></para></td><td id="_umd_modules-006-entry-012" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-013">Provides GraphEditorInputMode and related types.</para></td></tr><tr id="_umd_modules-006-row-007"><td id="_umd_modules-006-entry-013" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-014"><code>yfiles/view-folding</code></para></td><td id="_umd_modules-006-entry-014" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-015">Provides folding support for IGraph, most notably the FoldingManager implementation\n  and helpers.</para></td></tr><tr id="_umd_modules-006-row-008"><td id="_umd_modules-006-entry-015" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-016"><code>yfiles/view-table</code></para></td><td id="_umd_modules-006-entry-016" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-017">Provides infrastructure for table node support in IGraph, alongside its styles and input mode.</para></td></tr><tr id="_umd_modules-006-row-009"><td id="_umd_modules-006-entry-017" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-018"><code>yfiles/view-graphml</code></para></td><td id="_umd_modules-006-entry-018" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-019">Provides GraphML input and output via GraphMLIOHandler and the GraphComponent.</para></td></tr><tr id="_umd_modules-006-row-010"><td id="_umd_modules-006-entry-019" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-020"><code>yfiles/view-layout-bridge</code></para></td><td id="_umd_modules-006-entry-020" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-021">Brings LayoutExecutor and integrated layout execution to GraphComponent, as well\n  as layout morphing.</para></td></tr><tr id="_umd_modules-006-row-011"><td id="_umd_modules-006-entry-021" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-022"><code>yfiles/algorithms</code></para></td><td id="_umd_modules-006-entry-022" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-023">Provides the basic graph structure for layout and a couple of core analytic and\n  layout algorithms.</para></td></tr><tr id="_umd_modules-006-row-012"><td id="_umd_modules-006-entry-023" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-024"><code>yfiles/layout-tree</code></para></td><td id="_umd_modules-006-entry-024" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-025">Provides tree layouts like TreeLayout and AspectRatioTreeLayout.</para></td></tr><tr id="_umd_modules-006-row-013"><td id="_umd_modules-006-entry-025" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-026"><code>yfiles/layout-organic</code></para></td><td id="_umd_modules-006-entry-026" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-027">Provides the OrganicLayout and InteractiveOrganicLayout algorithms. Also provides CircularLayout and helper types.</para></td></tr><tr id="_umd_modules-006-row-014"><td id="_umd_modules-006-entry-027" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-028"><code>yfiles/layout-hierarchic</code></para></td><td id="_umd_modules-006-entry-028" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-029">Provides the set of hierarchic layout algorithms, most notably HierarchicLayout.</para></td></tr><tr id="_umd_modules-006-row-015"><td id="_umd_modules-006-entry-029" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-030"><code>yfiles/layout-orthogonal</code></para></td><td id="_umd_modules-006-entry-030" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-031">Provides the OrthogonalLayout algorithm.</para></td></tr><tr id="_umd_modules-006-row-016"><td id="_umd_modules-006-entry-031" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-032"><code>yfiles/layout-orthogonal-compact</code></para></td><td id="_umd_modules-006-entry-032" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-033">Provides the CompactOrthogonalLayout algorithm.</para></td></tr><tr id="_umd_modules-006-row-017"><td id="_umd_modules-006-entry-033" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-034"><code>yfiles/layout-familytree</code></para></td><td id="_umd_modules-006-entry-034" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-035">Provides the FamilyTreeLayout algorithm.</para></td></tr><tr id="_umd_modules-006-row-018"><td id="_umd_modules-006-entry-035" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-036"><code>yfiles/layout-multipage</code></para></td><td id="_umd_modules-006-entry-036" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-037">Provides multi-page layout algorithm and its infrastructure.</para></td></tr><tr id="_umd_modules-006-row-019"><td id="_umd_modules-006-entry-037" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-038"><code>yfiles/layout-radial</code></para></td><td id="_umd_modules-006-entry-038" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-039">Provides the radial layout algorithm.</para></td></tr><tr id="_umd_modules-006-row-020"><td id="_umd_modules-006-entry-039" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-040"><code>yfiles/layout-seriesparallel</code></para></td><td id="_umd_modules-006-entry-040" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-041">Provides the SeriesParallelLayout algorithm.</para></td></tr><tr id="_umd_modules-006-row-021"><td id="_umd_modules-006-entry-041" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-042"><code>yfiles/router-polyline</code></para></td><td id="_umd_modules-006-entry-042" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-043">Provides the polyline edge routing algorithm.</para></td></tr><tr id="_umd_modules-006-row-022"><td id="_umd_modules-006-entry-043" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-044"><code>yfiles/router-other</code></para></td><td id="_umd_modules-006-entry-044" align="left" valign="top"><para class="dguide-para" id="_umd_modules-006-simpara-045">Provides orthogonal and organic edge routing algorithms.</para></td></tr></tbody>'}]},{tagname:"section",id:"_es6_modules",title:"ES6 Modules",children:[{tagname:"para","class":"dguide-para",id:"_es6_modules-007-simpara-001",content:"The yFiles for HTML package also contains a version of the library in ES6 module format.\nThese modules can be loaded in browsers that support the <code>import</code> statement and used with tools that expect ES6 modules\nas input."},{tagname:"para","class":"dguide-para",id:"_es6_modules-007-simpara-002",content:"<a href=\"#/dguide/fig_module_dependencies_es6\">ES6 Module dependencies</a> gives an overview of the dependencies\nbetween these modules.\nNote that the <code>yfiles/lang</code> and <code>yfiles/core</code> modules are omitted from the diagram\nsince all modules depend on these modules.\nFor brevity and clarity, the diagram also does not show transitive dependencies and omits\nthe 'yfiles/' prefix in modules names."},{tagname:"figure","class":"image",title:"ES6 Module dependencies",id:"fig_module_dependencies_es6","float":0,children:[{tagname:"img",src:"assets/module_dependencies_es6.0bb9dd5b.jpg",alt:"module dependencies es6",title:'<para class="dguide-para"></para>'}]}]}]}]},{tagname:"section",id:"features",title:"yFiles for HTML Features",children:[{tagname:"heading",id:"_efficient_fully_observable_graph_data_model",renderas:"sect2",content:"Efficient, Fully Observable Graph Data Model"},{tagname:"para",content:'<dl id="features-002-variablelist-001"><dt id="features-002-term-001">Unrestricted Number of Graph Elements</dt><dd id="features-002-listitem-001"><p id="features-002-simpara-001"><a href="#/dguide/graph">The graph model</a> supports an unrestricted number of nodes, edges, labels, and ports.</p></dd><dt id="features-002-term-002">Universal Nodes</dt><dd id="features-002-listitem-002"><p id="features-002-simpara-002"><a href="#/dguide/graph_model-nodes">Nodes</a> are the central elements of the graph and can model all kinds of business data.</p></dd><dt id="features-002-term-003">All Kinds of Edges</dt><dd id="features-002-listitem-003"><p id="features-002-simpara-003">The graph model supports both directed and undirected <a href="#/dguide/graph_model-edges">edges</a>,\nself-loops (edges starting and ending at the same node),\nmultiple edges between the same pair of nodes,\nand any number of bends per edge.</p></dd><dt id="features-002-term-004">Rich Rotatable Labels</dt><dd id="features-002-listitem-004"><p id="features-002-simpara-004"><a href="#/dguide/graph_model-labels">Labels</a> may contain text and icons at the same time.\nA label can have <a href="#/dguide/view_item-layout_labels">any size and orientation</a>, for example to perfectly align\nitself with an edge segment.</p></dd><dt id="features-002-term-005">Optional Port Elements</dt><dd id="features-002-listitem-005"><p id="features-002-simpara-005"><a href="#/dguide/graph_model-ports">Ports</a> model the connecting points of edges to other graph items.\nPorts can be used to specify the exact location an edge connects to another graph item.\nThey can also be used to restrict the possible connection points for edges in an interactive scenario.</p></dd><dt id="features-002-term-006">Unlimited Nested Graph Hierarchies</dt><dd id="features-002-listitem-006"><p id="features-002-simpara-006">Nodes that belong together can be part of a <a href="#/dguide/graph_model-grouping">group</a>.\nGroups are nodes, too, and thus, a group can be part of another group, potentially forming a nested\nhierarchy of arbitrary depth.</p></dd><dt id="features-002-term-007">Storing Business Data</dt><dd id="features-002-listitem-007"><p id="features-002-simpara-007"><a href="#/dguide/graph_model-connecting_business_models">Bind related business data</a> to each element\nand access it whenever needed.</p></dd><dt id="features-002-term-008">Custom Graph Filtering</dt><dd id="features-002-listitem-008"><p id="features-002-simpara-008">Make large graphs more comprehensible by <a href="#/dguide/filtering">dynamically filtering</a> the important\nparts and showing them to the user.</p></dd><dt id="features-002-term-009">Sophisticated Graph API</dt><dd id="features-002-listitem-009"><p id="features-002-simpara-009"><a href="#/dguide/graph">The graph model</a> supports you in all graph-related tasks.\nYou can easily navigate through the graph structure:\ndetermine <a href="#/dguide/graph_model-neighbors">neighbors</a>, <a href="#/dguide/graph_model-neighbors">outgoing edges</a>,\n<a href="#/dguide/graph_model-nodes">the labels of an element</a>, etc.</p></dd><dt id="features-002-term-010">Easy Import of Data Sources</dt><dd id="features-002-listitem-010"><p id="features-002-simpara-010">Using <a href="#/dguide/graph_builder">data-binding</a>\nto external or in-memory data-sources, graph structures can easily be\nparsed and imported into yFiles for HTML.</p></dd><dt id="features-002-term-011">Comprehensive Events for Graph Changes</dt><dd id="features-002-listitem-011"><p id="features-002-simpara-011">Clear notifications of structural changes to the graph via a\n<a href="#/dguide/customizing_graph-graph_events">fine-grained event framework</a>\nmake it easy to react and execute custom code.</p></dd></dl>'},{tagname:"heading",id:"_versatile_component_for_graph_visualization",renderas:"sect2",content:"Versatile Component for Graph Visualization"},{tagname:"para",content:'<dl id="features-002-variablelist-002"><dt id="features-002-term-012">Creating, Editing, and Viewing Graphs Interactively</dt><dd id="features-002-listitem-012"><p id="features-002-simpara-012">yFiles for HTML comes with pre-configured sophisticated user interaction for\n<a href="#/dguide/interaction-geim">editable</a> and <a href="#/dguide/interaction-gvim">non-editable</a> diagrams.\nSince one size rarely fits all, you can fit (almost) all\n<a href="#/dguide/interaction-support">aspects of user interaction</a> to your needs.</p></dd><dt id="features-002-term-013">An Overview Component for Quick Navigation</dt><dd id="features-002-listitem-013"><p id="features-002-simpara-013"><a href="#/dguide/view_overview">The overview</a> displays a simplified version of the whole graph\nand highlights the currently visible area.</p></dd><dt id="features-002-term-014">Infinite Panning and Configurable Viewport Limitations</dt><dd id="features-002-listitem-014"><p id="features-002-simpara-014"><a href="#/dguide/view_graphcontrol_managing-the-view">The drawing area</a> of the graph component is unlimited by default.\nYou can easily <a href="#/dguide/customizing_view_limit_viewport">restrict the accessible viewport</a>, though,\nfor example to the content bounds.</p></dd><dt id="features-002-term-015">Mouse Wheel Zoom and Panning</dt><dd id="features-002-listitem-015"><p id="features-002-simpara-015">Zooming and/or scrolling with <a href="#/dguide/interaction-navigation">the mouse wheel</a> is supported by default.</p></dd><dt id="features-002-term-016">Touch Interaction Gestures</dt><dd id="features-002-listitem-016"><p id="features-002-simpara-016">Zooming and panning as well as multi-touch pinch-zoom and swipe is supported <a href="#/dguide/interaction-navigation">out of the box</a>. All major\nuser interaction gestures for viewing, modifying and creating graphs are also available via intuitive and configurable\ntouch interaction gestures.</p></dd><dt id="features-002-term-017">Keyboard Navigation and Editing Commands</dt><dd id="features-002-listitem-017"><p id="features-002-simpara-017">Most user actions can be triggered with both the mouse and <a href="#/dguide/interaction-keyboard">the keyboard</a>.\nWell-established shortcuts are already predefined, for example for Cut, Copy, Paste.</p></dd><dt id="features-002-term-018">Unlimited Undo Stack</dt><dd id="features-002-listitem-018"><p id="features-002-simpara-018"><a href="#/dguide/interaction-undo">Undoing and redoing all modifications</a> is readily available.\nThe undo engine can be easily configured to support custom user interactions\nor to merge multiple operations into one step.\nThe only limit for the number of undo steps is the available memory.</p></dd><dt id="features-002-term-019">Versatile Clipboard</dt><dd id="features-002-listitem-019"><p id="features-002-simpara-019"><a href="#/dguide/interaction-clipboard">Cut, copy, and paste</a> both arbitrary parts of a graph as well as\nindividual elements.\nSophisticated logic makes sure that pasting just works, for example when pasting nodes into a group.</p></dd><dt id="features-002-term-020">Drag and Drop Across Components</dt><dd id="features-002-listitem-020"><p id="features-002-simpara-020"><a href="#/dguide/interaction-drag_drop">Drag and drop</a> data from other components of your app, or even other apps,\nto your graph. With that, integrating a palette component is no big deal.</p></dd><dt id="features-002-term-021">Flexible GraphML Support</dt><dd id="features-002-listitem-021"><p id="features-002-simpara-021"><a href="#/dguide/io-loading_saving">GraphML</a> is the default implementation for serializing and deserializing\ngraphs of yFiles for HTML to an XML-based representation. All aspects of\nyour diagram, its structure, the visualizations, and custom data, can be stored in GraphML. Of course,\nyou can also use your own format instead, if desired. GraphML support is mainly used for interoperability\nwith other products that use this format. For communication with the server or short-term storage, other, more\nlightweight techniques can and often should be used.</p></dd><dt id="features-002-term-022">Image Export</dt><dd id="features-002-listitem-022"><p id="features-002-simpara-022">Diagrams can be exported to <a href="#/dguide/io-image_export">bitmap or vector based images</a>.</p></dd><dt id="features-002-term-023">Printing Facilities</dt><dd id="features-002-listitem-023"><p id="features-002-simpara-023"><a href="#/dguide/io-printing">A diagram can be printed</a> after export to an image or vector graphic\nand making use of the browsers\' printing capabilities.</p></dd><dt id="features-002-term-024">Tooltip Facility</dt><dd id="features-002-listitem-024"><p id="features-002-simpara-024"><a href="#/dguide/interaction-tooltips">Tooltips</a> can be shown for any kind of graph element.</p></dd><dt id="features-002-term-025">Context Menu Support</dt><dd id="features-002-listitem-025"><p id="features-002-simpara-025"><a href="#/dguide/interaction-context_menu">Context menus</a> can be implemented easily, reusing third party context menu\ntoolkit implementations. The yFiles for HTML library detects the corresponding user gestures and forwards the display\nof the menu to the third party toolkit. This results in a seemless integration with the look and feel of the rest\nof the HTML5 application. Context menus can be shown for any combination of selected or unselected elements.</p></dd><dt id="features-002-term-026">Selection, Focus, and Highlighting of Graph Elements</dt><dd id="features-002-listitem-026"><p id="features-002-simpara-026">The graph component provides three different ways to <a href="#/dguide/view_selection">accentuate graph elements</a>:\n select elements, focus an element, and a generic highlighting of arbitrary sets of elements.</p></dd><dt id="features-002-term-027">Predefined Visualizations for Elements</dt><dd id="features-002-listitem-027"><p id="features-002-simpara-027">The most common, frequently used <a href="#/dguide/view_visualization-graph-elements">visualizations for graph elements</a>\nare readily usable. This includes straight or polygon lines for edges (with and without arrows)\ntext rendering for labels (with and without frames), and premade WebGL node and edge styles.</p></dd><dt id="features-002-term-028">Customizable Element Visualization</dt><dd id="features-002-listitem-028"><p id="features-002-simpara-028">If the desired visualization is not covered by the predefined visualizations,\nyFiles for HTML supports <a href="#/dguide/customizing_styles">custom visualizations</a>.\nThe extensive API supports full customization as well as re-using parts of existing implementations.</p></dd><dt id="features-002-term-029">Visualize Crossing Edges as Bridges/Jumps/Hops</dt><dd id="features-002-listitem-029"><p id="features-002-simpara-029"><a href="#/dguide/bridges">Bridges</a>, or <span class="def">line jumps</span>, illustrate the paths of edges at crossings. yFiles for HTML includes common\nbridge styles like gap, arc, and rectangle.</p></dd><dt id="features-002-term-030">Arrows and Other Edge Decorators</dt><dd id="features-002-listitem-030"><p id="features-002-simpara-030"><a href="#/dguide/view_arrows">Arrows</a> can be shown at each end of an edge. Besides arrowheads, circles, crosses, and custom\nvisualizations are supported.</p></dd><dt id="features-002-term-031">Level of Detail Rendering</dt><dd id="features-002-listitem-031"><p id="features-002-simpara-031">The graph component supports level of detail rendering:\nYou can display a coarse overview of the graph at low zoom levels and present more details when zooming in.</p></dd><dt id="features-002-term-032">Customizable Hover Effects</dt><dd id="features-002-listitem-032"><p id="features-002-simpara-032">Hover effects are easy to implement and supported for all graph element types. Where available platform support for\nSVG animations and CSS transitions can be leveraged to get great looks and performance at the same time.</p></dd><dt id="features-002-term-033">Interactive Label Editing</dt><dd id="features-002-listitem-033"><p id="features-002-simpara-033"><a href="#/dguide/interaction-labels">Label text is edited in place</a>. Users may move labels freely or to\n<a href="#/dguide/view_item-layout_labels">restricted locations only</a>.</p></dd><dt id="features-002-term-034">Interactive Node and Edge Creation</dt><dd id="features-002-listitem-034"><p id="features-002-simpara-034">Adding new elements to the graph is very easy with the mouse. By default,\n<a href="#/dguide/interaction-creating_nodes">nodes</a> are created with a single mouse click,\n<a href="#/dguide/interaction-creating_edges">edges</a> by dragging from the source to the target node.</p></dd><dt id="features-002-term-035">Interactive Moving and Resizing of Elements</dt><dd id="features-002-listitem-035"><p id="features-002-simpara-035"><a href="#/dguide/interaction-moving">Drag and move</a> all kinds of elements with the mouse.\n<a href="#/dguide/interaction-resizing">Drag a resize handle</a> to change the size of nodes.</p></dd><dt id="features-002-term-036">Magnetic and Snapping Editing Gestures</dt><dd id="features-002-listitem-036"><p id="features-002-simpara-036"><a href="#/dguide/interaction-snapping">Snap lines</a>, or <span class="def">guides</span>, help users to align and arrange the elements\nof a diagram. You can specify <a href="#/dguide/customizing_interaction_snapping">which elements should snap</a> and\neven define custom snap locations.</p></dd><dt id="features-002-term-037">Grid Display and Grid Snapping</dt><dd id="features-002-listitem-037"><p id="features-002-simpara-037">The graph component can display a <a href="#/dguide/interaction-grid_snapping">grid</a> and elements snap to the grid\npoints if desired.</p></dd><dt id="features-002-term-038">Orthogonal (Right Angle) Edge Editing</dt><dd id="features-002-listitem-038"><p id="features-002-simpara-038"><a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal edge editing</a> facilitates\ncreating and editing orthogonal diagrams.</p></dd><dt id="features-002-term-039">Expand/Collapse Operations for Groups</dt><dd id="features-002-listitem-039"><p id="features-002-simpara-039">yFiles for HTML supports <a href="#/dguide/folding">collapse and expand actions for groups</a>. Collapsing a group hides away\nits content in a single node, and expanding restores that content.</p><p id="features-002-simpara-040">Combined with an automatic layout or edge routing and animations, this creates a beautiful\ntransition effect.</p></dd><dt id="features-002-term-040">Comprehensive Events for User Interaction</dt><dd id="features-002-listitem-040"><p id="features-002-simpara-041">Events for all kinds of\n<a href="#/dguide/customizing_interaction">user interactions</a> allow you to react to user induced changes and run custom code whenever required.</p></dd><dt id="features-002-term-041">Custom Animations</dt><dd id="features-002-listitem-041"><p id="features-002-simpara-042">yFiles for HTML includes an <a href="#/dguide/customizing_view_animations">extensible animation framework</a>.\nAnimations for typical actions like changing the viewport, translating graph elements, and\napplying an automatic layout or edge routing are ready to use.</p></dd></dl>'},{tagname:"heading",id:"_high_quality_automatic_layout",renderas:"sect2",content:"High-Quality Automatic Layout"},{tagname:"para",content:'<dl id="features-002-variablelist-003"><dt id="features-002-term-042">Automatic Layout Styles</dt><dd id="features-002-listitem-042"><p id="features-002-simpara-043">yFiles for HTML features efficient and highly customizable <a href="#/dguide/layout-layout_styles">algorithms for automatic layout</a>.\nA variety of layout styles are included:\nHierarchic, organic (force-directed), tree, orthogonal, circular, radial, and series-parallel style.</p><p id="features-002-simpara-044">All of these styles can be applied to your diagram in an <a href="#/dguide/layout-applying_a_layout">animated fashion</a>.</p></dd><dt id="features-002-term-043">Automatic Edge Routing</dt><dd id="features-002-listitem-043"><p id="features-002-simpara-045">Let yFiles for HTML <a href="#/dguide/layout-edge_routing_styles">route the edges</a> for your self-defined arrangement of nodes!\nEdge routing styles to choose from: polyline (orthogonal), orthogonal bus-like, and organic.</p><p id="features-002-simpara-046">Again, all of these styles can be applied to your diagram in an <a href="#/dguide/layout-applying_a_layout">animated fashion</a>.</p></dd><dt id="features-002-term-044">Automatic Label Placement</dt><dd id="features-002-listitem-044"><p id="features-002-simpara-047"><a href="#/dguide/label_placement">Automatic label placement</a> strives for a label arrangement without overlaps.\nOptionally, you can specify placement preferences for the elements and customize various aspects of\nthe algorithm.</p></dd><dt id="features-002-term-045">Extensive Graph Analysis Algorithms</dt><dd id="features-002-listitem-045"><p id="features-002-simpara-048">yFiles for HTML contains sophisticated algorithms for <a href="#/dguide/analysis">analyzing graphs</a>, including\nclustering, centrality, shortest paths, and more.</p></dd></dl>'},{tagname:"heading",id:"_extensive_development_utilities",renderas:"sect2",content:"Extensive Development Utilities"},{tagname:"para",content:'<dl id="features-002-variablelist-004"><dt id="features-002-term-046">Language Support</dt><dd id="features-002-listitem-046"><p id="features-002-simpara-049">Write your code using <a href="#/dguide/framework_extending_classes">ECMAScript Level 5, ECMAScript Level 6</a>, <a href="#/dguide/getting_started-typescript">TypeScript</a>,\nor CoffeeScript or any other language that can compile to\nECMAScript Level 5 or ECMAScript Level 6 compatible code. We provide <a href="#/dguide/getting_started-ide">code completion and library definition files</a>\nfor major IDEs for JavaScript and TypeScript.</p></dd><dt id="features-002-term-047">Optional Runtime Type Checking</dt><dd id="features-002-listitem-047"><p id="features-002-simpara-050">An <a href="#/dguide/DevelopmentSupport">optional JavaScript module</a> can be loaded to check API calls at runtime for the correct number of arguments, the correct\nargument types, and return types. Also type construction can be validated at type creation time, detecting missing members\nfor implemented interface members and abstract base type members.</p></dd><dt id="features-002-term-048">Platform Support</dt><dd id="features-002-listitem-048"><p id="features-002-simpara-051">yFiles for HTML is platform and framework agnostic. It does not depend on any third party library or framework but integrates\nwell with all major JavaScript frameworks.</p></dd><dt id="features-002-term-049">Native Performance</dt><dd id="features-002-listitem-049"><p id="features-002-simpara-052">For the core rendering performance yFiles for HTML can make direct use of the browsers\' SVG and HTML5 Canvas implementations\n(either/or and both at the same time). No wrapping code is required and adding third-party libraries for rendering\nitem visualizations is easy. This makes available hardware accelerated graphics performance using CSS3 animations and\ntransitions on SVG elements.</p></dd></dl>'}]},{tagname:"section",id:"getting_started",title:"Getting Started",children:[{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-001",content:"This chapter is a short tutorial which is meant to familiarize you with the most basic concepts in yFiles for HTML."},{tagname:"para","class":"dguide-para note",id:"getting_started-003-note-001",content:'<p id="getting_started-003-simpara-002">At the start of each section a note like this will summarize the main topics of that step.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-003",content:"This tutorial starts with setting up the IDE for a new yFiles for HTML project. Then, it describes creating a base\nyFiles for HTML web application, a simple HTML <code>div</code>-element containing the main diagram component."},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-004",content:"In its next sections, it extends this web app step by step with new features. In particular,\nyou will learn how to create a simple graph and how to customize its visual appearance. Enabling user\ninteraction will extend your web app into a simple graph editor. Enabling automatic graph layout\nwill conclude this tutorial."},{tagname:"para","class":"dguide-para tip",id:"getting_started-003-tip-001",content:'<p id="getting_started-003-simpara-005">We strongly recommend to create a separate IDE project for the <a href="#/dguide/demos">programming samples</a>.\nBesides the obvious benefit of being able to run the samples, you’ll also be able to easily find, and\nlearn from, demo usages of the yFiles for HTML API you want to use.</p>'},{tagname:"heading",id:"videos-and-source-code-tutorials",renderas:"sect2",content:"Videos and Source Code Tutorials"},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-006",content:'Our <a href="https://docs.yworks.com/yfileshtml/index.html#/kb/article/759" target="_blank">introductive videos</a> provide a quick\nstart with tutorials about working and developing with yFiles for HTML.'},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-007",content:'<a href="tutorial01_GettingStarted/README.html" target="_blank">The Getting Started source code tutorial</a>\nis a more comprehensive step-by-step introduction of the topics of this tutorial and other features\nof yFiles for HTML. Read this chapter to quickly learn the most basic concepts and have a look at the comprehensive\nsource code tutorial for more details and features not covered here.'},{tagname:"heading",id:"yeoman-generator",renderas:"sect2",content:"Yeoman Generator"},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-008",content:'We also provide a <a href="https://github.com/yWorks/generator-yfiles-app" target="_blank">Yeoman generator for yFiles</a> which you can use to\nquickly scaffold a yFiles for HTML application. To get started, install <a href="http://yeoman.io/" target="_blank">yo</a> and\n<a href="https://github.com/yWorks/generator-yfiles-app" target="_blank">generator-yfiles-app</a> using npm:'},{tagname:"example",id:"getting_started-003-informalexample-001",content:'<pre class="programlisting bash" id="getting_started-003-programlisting-001" language="bash" linenumbering="unnumbered" format="linespecific"><code>npm install -g yo\nnpm install -g generator-yfiles-app</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-009",content:"Then run the generator and answer a few questions:"},{tagname:"example",id:"getting_started-003-informalexample-002",content:'<pre class="programlisting bash" id="getting_started-003-programlisting-002" language="bash" linenumbering="unnumbered" format="linespecific"><code>yo yfiles-app</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-010",content:"This will create a project structure that serves as a starting point for your application."},{tagname:"para","class":"dguide-para",id:"getting_started-003-simpara-011",content:'For a more detailed description and an overview of the available options, please visit the <a href="https://github.com/yWorks/generator-yfiles-app" target="_blank">GitHub page</a>.'},{tagname:"section",id:"getting_started-ide",title:"Setting up Your Development Environment",children:[{tagname:"section",id:"getting_started-jetbrains",title:"JetBrains IDEs with JavaScript Support",children:[{tagname:"para","class":"dguide-para",id:"getting_started-jetbrains-009-simpara-001",content:"If you’re developing with as IDE from JetBrains (e.g. WebStorm), we recommend to always use the latest version. While yFiles for HTML has no\nspecific requirements, some features for effective development are only available, or at least work much\nbetter, in newer versions."},{tagname:"para","class":"dguide-para note",id:"getting_started-jetbrains-009-note-001",content:'<p id="getting_started-jetbrains-009-simpara-002">Make sure that the <code>JavaScript Support</code> plugin is installed and enabled. While some JetBrains IDEs come with the plugin\npre-installed (e.g. WebStorm), others might not, and you have install the plugin manually.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-jetbrains-009-simpara-003",content:"The following instructions are for WebStorm, but are applicable to any JetBrains IDE that supports JavaScript."},{tagname:"section",id:"_creating_a_project",title:"Creating a Project",children:[{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-001",content:'Open your IDE and select <span class="menuitem">File</span><span class="menuseparator">▸</span><span class="menuitem">New</span><span class="menuseparator">▸</span><span class="menuitem">Project</span>. In the\n<strong id="_creating_a_project-010-emphasis-001" class="bold" role="bold">New Project</strong> dialog, choose your project name and location and\nselect <strong id="_creating_a_project-010-emphasis-002" class="bold" role="bold">Empty project</strong> as the project type.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project-010-figure-001","float":0,children:[{tagname:"img",src:"assets/webstorm-new-project1.35faafa7.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-002",content:"WebStorm will now open your new project and display the project structure."},{tagname:"figure","class":"image",title:"",id:"_creating_a_project-010-figure-002","float":0,children:[{tagname:"img",src:"assets/webstorm-new-project2.c2d909ad.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-003",content:'Next, you need to add the yFiles for HTML library and the license file to your project.\nThe yFiles for HTML library consists of a number of JavaScript files and a single CSS file called <code>yfiles.css</code>, all of them are located\nin the <code>lib</code> directory of the yFiles package.\nYou can either copy this directory into your\nproject folder or add it as additional content root to your project with the <strong id="_creating_a_project-010-emphasis-003" class="bold" role="bold">Directories</strong>\nsetting (select <span class="menuitem">File</span><span class="menuseparator">▸</span><span class="menuitem">Settings…​</span><span class="menuseparator">▸</span><span class="menuitem">Directories</span>).'},{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-004",content:"If you’re using an evaluation version of yFiles for HTML, an evaluation license is part of the yFiles package and\nlocated at <code>demos/resources/license.js</code>. Otherwise, include the license that was sent to you separately."},{tagname:"figure","class":"image",title:"",id:"_creating_a_project-010-figure-003","float":0,children:[{tagname:"img",src:"assets/webstorm-new-project3.831047b0.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-005",content:"For reference during development, we recommend to create a project for the demos that come\nwith yFiles for HTML as well, or even add them to your project. Thereby, you can easily search for usages\nof specific classes and methods in their source code and run them as needed."},{tagname:"para","class":"dguide-para",id:"_creating_a_project-010-simpara-006",content:"The library references in the demos expect the library directory <code>lib</code>\nat the same level as the <code>demos</code> directory.\nYou can, for example, place this directory at the top-level of your project."}]},{tagname:"section",id:"webstorm_auto_completion",title:"Enabling Auto-Completion",children:[{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-001",content:"The files <code>ide-support/yfiles-api-umd-webstorm.d.ts</code> and <code>ide-support/yfiles-api-es6-modules-webstorm.d.ts</code> of the\nyFiles for HTML distribution are TypeScript declaration files of the library in UMD and ES6 module formats, respectively.\nThey can be used to enable code completion (<kbd>Ctrl</kbd>+<kbd>Space</kbd>), parameter info (<kbd>Ctrl</kbd>+<kbd>P</kbd>), code inspections, and\nquick documentation lookup (<kbd>Ctrl</kbd>+<kbd>Q</kbd>) for the yFiles API. We highly recommend using this powerful feature."},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-002",content:"To enable auto-completion, include the TypeScript declaration file <code>ide-support/yfiles-api-umd-webstorm.d.ts</code> or\n<code>ide-support/yfiles-api-es6-modules-webstorm.d.ts</code> in your project, either by specifying it as JavaScript Library in the\nWebStorm settings or by copying it into your project."},{tagname:"para","class":"dguide-para note",id:"webstorm_auto_completion-011-note-001",content:'<p id="webstorm_auto_completion-011-simpara-003">WebStorm automatically uses all source code files that are in your project directories as source for the auto-completion.\nUnfortunately, if it finds several definitions for the same API member, it shows less completion information than\nshould be available. Therefore it is important to include only one source for the auto-completion.</p><p id="webstorm_auto_completion-011-simpara-004">In particular, we recommend that you don’t include the <code>ide-support/yfiles-api.js</code>\nand <code>ide-support/yfiles-api-*.d.ts</code> files at the same time, and that you invalidate WebStorm’s\ncaches (in <span class="menuitem">File</span><span class="menuseparator">▸</span><span class="menuitem">Invalidate Caches</span>) whenever you update the file with a new version.</p><p id="webstorm_auto_completion-011-simpara-005">Be sure to mark those directories as "excluded" which contain code that should\n <strong id="webstorm_auto_completion-011-emphasis-001" class="bold" role="bold">not</strong> be analyzed by the IDE. This massively improves IDE performance and code completion intelligence.</p><p id="webstorm_auto_completion-011-simpara-006">This can be done using the context menu in the project view: <span class="menuitem">Context Menu</span><span class="menuseparator">▸</span><span class="menuitem">Mark Directory as…​</span><span class="menuseparator">▸</span><span class="menuitem">Excluded</span>.</p><p id="webstorm_auto_completion-011-simpara-007">Apart from the <code>ide-support</code> directory this is especially true for the <code>doc</code>, <code>tools</code>, <code>migration</code>,\nand most importantly the <code>lib</code> directories. If you are using npm packages in your project, you probably want to exclude\nthe corresponding <code>node-modules</code> directories, too.</p>'},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-008",content:'To specify a new JavaScript Library for your project, open the <strong id="webstorm_auto_completion-011-emphasis-002" class="bold" role="bold">Settings</strong>\ndialog and select <span class="menuitem">Languages & Frameworks</span><span class="menuseparator">▸</span><span class="menuitem">JavaScript</span><span class="menuseparator">▸</span><span class="menuitem">Libraries</span> on the left.\nYou can use the search field in the top left corner of the dialog to narrow down the visible settings.\nThen, click the <strong id="webstorm_auto_completion-011-emphasis-003" class="bold" role="bold">Add…​</strong> button.'},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-001","float":0,children:[{tagname:"img",src:"assets/webstorm-js-lib-settings1.13465b90.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-009",content:'In the New Library dialog that opens, enter a descriptive name like <code>yfiles-api</code>,\nselect visibility <strong id="webstorm_auto_completion-011-emphasis-004" class="bold" role="bold">Global</strong>, and click the plus icon to attach the file\n<code>ide-support/yfiles-api-umd-webstorm.d.ts</code>.\nFinally, press <strong id="webstorm_auto_completion-011-emphasis-005" class="bold" role="bold">OK</strong> to finish the addition of the library.'},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-002","float":0,children:[{tagname:"img",src:"assets/webstorm-js-lib-settings2.0ba3357c.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-010",content:'The libraries table in the dialog will now contain an entry\nlabeled <code>yfiles-api</code> of type <strong id="webstorm_auto_completion-011-emphasis-006" class="bold" role="bold">Global</strong>.\nMake sure that it is <strong id="webstorm_auto_completion-011-emphasis-007" class="bold" role="bold">enabled</strong> and save your changes by\nclicking <strong id="webstorm_auto_completion-011-emphasis-008" class="bold" role="bold">OK</strong>.'},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-003","float":0,children:[{tagname:"img",src:"assets/webstorm-js-lib-settings3.1f0e7caf.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-011",content:"Auto-completion (<kbd>Ctrl</kbd>+<kbd>Space</kbd>), parameter info (<kbd>Ctrl</kbd>+<kbd>P</kbd>), code inspections, and quick documentation lookup\n(<kbd>Ctrl</kbd>+<kbd>Q</kbd>) should now work for all yFiles for HTML API members."},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-004","float":0,children:[{tagname:"img",src:"assets/webstorm-autocompletion.d61ecdf0.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-012",content:'If you are using the ES6 module version of the library, WebStorm can automatically add the required imports to your\nsource code. For this to work, the <code>lib/es6-modules</code> directory must <strong id="webstorm_auto_completion-011-emphasis-009" class="bold" role="bold">not</strong> be excluded!\nBy default, WebStorm uses paths relative to the file containing the import.'},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-005","float":0,children:[{tagname:"img",src:"assets/webstorm-auto-import1.005dad08.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"webstorm_auto_completion-011-simpara-013",content:'If you want WebStorm to use a symbolic name (e.g. <code>yfiles/view-component</code>) instead, mark the <code>lib/es6-modules</code> directory\nas a "resource root", and make sure the setting "Use paths relative to the project, resource or source roots" is\nenabled under <span class="menuitem">Editor</span><span class="menuseparator">▸</span><span class="menuitem">Code Style</span><span class="menuseparator">▸</span><span class="menuitem">JavaScript</span><span class="menuseparator">▸</span><span class="menuitem">Imports</span>.'},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-006","float":0,children:[{tagname:"img",src:"assets/webstorm-auto-import2.23ce4611.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"figure","class":"image",title:"",id:"webstorm_auto_completion-011-figure-007","float":0,children:[{tagname:"img",src:"assets/webstorm-auto-import3.1ee21609.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_adding_yfiles_developer_tools",title:"Adding yFiles Developer Tools",children:[{tagname:"para","class":"dguide-para",id:"_adding_yfiles_developer_tools-012-simpara-001",content:'The file <code>ide-support/yfiles-typeinfo.js</code> contains the type information for all\nyFiles for HTML types, their members, the parameters of all methods, etc. and a special development version of\nthe class framework.\nCopy this file into your project to enable various convenient <a href="#/dguide/DevelopmentSupport">assistance\nfeatures during application development</a>.'}]},{tagname:"section",id:"_including_the_license",title:"Including the License",children:[{tagname:"para","class":"dguide-para",id:"_including_the_license-013-simpara-001",content:"If you’re using an evaluation version of yFiles for HTML, an evaluation license is part of the yFiles distribution and\nlocated in <code>demos/resources/license.js</code>. Otherwise, use the license that was separately\nprovided to you.\nYou need to include the license file in every page that uses the yFiles for HTML library."}]},{tagname:"section",id:"_creating_a_web_app",title:"Creating a Web App",children:[{tagname:"para","class":"dguide-para",id:"_creating_a_web_app-014-simpara-001",content:'Now that the project has been set up, continue with <a href="#/dguide/getting_started-application">your first yFiles for HTML\napplication</a>. This section introduces basic yFiles features that you’ll use in almost all of your yFiles projects.'}]}]},{tagname:"section",id:"getting_started-vscode",title:"Visual Studio Code",children:[{tagname:"para","class":"dguide-para",id:"getting_started-vscode-015-simpara-001",content:"If you are developing with Visual Studio Code, we recommend to always use the latest version.\nWhile yFiles for HTML has no specific requirements, some features for effective development are only available, or at least\nwork much better, in newer versions."},{tagname:"section",id:"_creating_a_project_2",title:"Creating a Project",children:[{tagname:"para","class":"dguide-para",id:"_creating_a_project_2-016-simpara-001",content:"Create a new folder in the filesystem with a suitable name. This will be the project root folder."},{tagname:"para","class":"dguide-para",id:"_creating_a_project_2-016-simpara-002",content:'Then install the\n<a href="https://github.com/yWorks/generator-yfiles-app" target="_blank">yFiles Yeoman generator</a> following the instructions of its\n<a href="https://github.com/yWorks/generator-yfiles-app/blob/master/README.md" target="_blank">README</a>.\nScaffold your project by running <code>yo yfiles-app</code> in a terminal.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_2-016-figure-001","float":0,children:[{tagname:"img",src:"assets/generator-yfiles-app.1d4fda09.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_2-016-simpara-003",content:'Open VS Code and select <strong id="_creating_a_project_2-016-emphasis-001" class="bold" role="bold">File > Open Folder…​.</strong> Open the folder you created earlier. VS Code will now display the\nfolder structure in the pane to the left. As you see, everything you need is already in place.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_2-016-figure-002","float":0,children:[{tagname:"img",src:"assets/vscode-explorer.8762dc45.jpg",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_enabling_intellisense",title:"Enabling IntelliSense",children:[{tagname:"para","class":"dguide-para",id:"_enabling_intellisense-017-simpara-001",content:'To enable type information and intelligent code completion, create a new file by selecting <strong id="_enabling_intellisense-017-emphasis-001" class="bold" role="bold">File > New File</strong>. Type {}\nand save as "jsconfig.json". This file will be interpreted as project configuration file. See\n<a href="https://code.visualstudio.com/docs/languages/javascript#_javascript-projects-jsconfigjson" target="_blank">here</a> for more\ninformation. It is important, that <strong id="_enabling_intellisense-017-emphasis-002" class="bold" role="bold">no "files"</strong> property is specified. Otherwise, you would have to list every single\nfile in your project.'},{tagname:"figure","class":"image",title:"",id:"_enabling_intellisense-017-figure-001","float":0,children:[{tagname:"img",src:"assets/vscode-jsconfig.c86ed615.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_enabling_intellisense-017-simpara-002",content:'Now copy the <strong id="_enabling_intellisense-017-emphasis-003" class="bold" role="bold">ide-support/yfiles-api-umd-vscode.d.ts</strong> into the project.'},{tagname:"para","class":"dguide-para",id:"_enabling_intellisense-017-simpara-003",content:'In callbacks of <strong id="_enabling_intellisense-017-emphasis-004" class="bold" role="bold">AMD</strong> and <strong id="_enabling_intellisense-017-emphasis-005" class="bold" role="bold">CommonJS</strong> modules, a locally defined <code>yfiles</code> variable will shadow the globally defined\n<code>yfiles</code> root namespace. This impairs the code completion within an AMD or CommonJS module.\nSpecify the following JSDoc comment as hint when requiring <code>yfiles</code> to solve this problem:'},{tagname:"para",content:'<pre class="programlisting javascript" id="_enabling_intellisense-017-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>require(["lib/umd/yfiles/complete"], (/**@type {yfiles_namespace}*/yfiles) => { /* application code */ });</code></pre>'},{tagname:"para","class":"dguide-para",id:"_enabling_intellisense-017-simpara-004",content:"It is also recommended to exclude the directories <code>lib</code> and <code>ide-support</code> since they contain large files.\nHowever make sure you copied the <code>ide-support/yfiles-api-umd-vscode.d.ts</code> file into your project."},{tagname:"para","class":"dguide-para note",id:"_enabling_intellisense-017-note-001",content:'<p id="_enabling_intellisense-017-simpara-005">tsconfig files that are not named <code>tsconfig.json</code> are not recognized in VSCode, which means it doesn’t consider\nthe paths you specified in your tsconfig.app.json file. Supporting differently named tsconfig files is an ongoing\n<a href="https://github.com/Microsoft/vscode/issues/12463" target="_blank">issue</a>. Simply rename the <code>tsconfig.app.json</code> file to\n<code>tsconfig.json</code> as a workaround.</p>'}]}]},{tagname:"section",id:"getting_started-netbeans",title:"NetBeans",children:[{tagname:"section",id:"_creating_a_project_3",title:"Creating a Project",children:[{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-001",content:'Open your IDE and select <span class="menuitem">File</span><span class="menuseparator">▸</span><span class="menuitem">New Project…​</span>.\nIn the <strong id="_creating_a_project_3-019-emphasis-001" class="bold" role="bold">New Project</strong> wizard, choose the <strong id="_creating_a_project_3-019-emphasis-002" class="bold" role="bold">HTML category</strong>,\nselect <strong id="_creating_a_project_3-019-emphasis-003" class="bold" role="bold">HTML5 Application</strong>, and continue with the\n<strong id="_creating_a_project_3-019-emphasis-004" class="bold" role="bold">Next</strong> button.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_3-019-figure-001","float":0,children:[{tagname:"img",src:"assets/netbeans-new-project1.ceb8dfff.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-002",content:'In the next screen, choose your project name and location.\nAll of the next configuration steps are optional.\nYou can create your project by clicking the <strong id="_creating_a_project_3-019-emphasis-005" class="bold" role="bold">Finish</strong>\nbutton.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_3-019-figure-002","float":0,children:[{tagname:"img",src:"assets/netbeans-new-project2.3186d2ca.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-003",content:"NetBeans will now open your new project and display the project structure."},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_3-019-figure-003","float":0,children:[{tagname:"img",src:"assets/netbeans-new-project3.2987fa47.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-004",content:"Next, you need to copy the yFiles for HTML library and the license file into your project.\nThe yFiles for HTML library consists of a number of JavaScript files and a single CSS file called <code>yfiles.css</code>, all of them are located\nin the <code>lib</code> directory of the yFiles package."},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-005",content:"If you’re using an evaluation version of yFiles for HTML, an evaluation license is part of the yFiles package and\nlocated at <code>demos/resources/license.js</code>. Otherwise, include the license that was separately\nsent to you."},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_3-019-figure-004","float":0,children:[{tagname:"img",src:"assets/netbeans-new-project4.97c6a64d.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-006",content:"For reference during development, we recommend to create a project for the demos that come\nwith yFiles for HTML as well, or even add them to your project. Thereby, you can easily search for usages\nof specific classes and methods in their source code and run them as needed."},{tagname:"para","class":"dguide-para",id:"_creating_a_project_3-019-simpara-007",content:"The library references in the demos expect the library directory <code>lib</code>\nat the same level as the <code>demos</code> directory.\nYou can, for example, place this directory at the top-level of your project."}]},{tagname:"section",id:"netbeans_auto_completion",title:"Enabling Auto-Completion",children:[{tagname:"para","class":"dguide-para",id:"netbeans_auto_completion-020-simpara-001",content:"The file <code>ide-support/yfiles-api.js</code> of the yFiles for HTML distribution\nis a JavaScript stub file of the library. It can be used to enable code completion for the yFiles API.\nWe highly recommend using this powerful feature."},{tagname:"para","class":"dguide-para",id:"netbeans_auto_completion-020-simpara-002",content:"To enable auto-completion, copy the JavaScript stub file <code>ide-support/yfiles-api.js</code>\nin your project."},{tagname:"para","class":"dguide-para note",id:"netbeans_auto_completion-020-note-001",content:'<p id="netbeans_auto_completion-020-simpara-003">The JavaScript stub file is too large to be handled correctly by NetBeans and therefore it ignores its content.\nTo enable auto-completion in NetBeans, split the file into chunks that are no larger than 2MB. The\nfile can be split at after any line of code. (Each comment block must remain in the same file as its corresponding\nline of code.)</p>'}]},{tagname:"section",id:"_adding_yfiles_developer_tools_2",title:"Adding yFiles Developer Tools",children:[{tagname:"para","class":"dguide-para",id:"_adding_yfiles_developer_tools_2-021-simpara-001",content:'The file <code>ide-support/yfiles-typeinfo.js</code> contains the type information for all\nyFiles for HTML types, their members, the parameters of all methods, etc. and a special development version of\nthe class framework.\nCopy this file into your project to enable various convenient <a href="#/dguide/DevelopmentSupport">assistance\nfeatures during application development</a>.'}]},{tagname:"section",id:"_including_the_license_2",title:"Including the License",children:[{tagname:"para","class":"dguide-para",id:"_including_the_license_2-022-simpara-001",content:"If you’re using an evaluation version of yFiles for HTML, an evaluation license is part of the yFiles distribution and\nlocated in <code>demos/resources/license.js</code>. Otherwise, use the license that was separately\nprovided to you.\nYou need to include the license file in every page that uses the yFiles for HTML library."}]},{tagname:"section",id:"_creating_an_application",title:"Creating an Application",children:[{tagname:"para","class":"dguide-para",id:"_creating_an_application-023-simpara-001",content:'Now that the project has been set up, continue with your <a href="#/dguide/getting_started-application">first yFiles for HTML application</a>.'}]}]},{tagname:"section",id:"getting_started-eclipse",title:"Eclipse",children:[{tagname:"section",id:"_creating_a_project_4",title:"Creating a Project",children:[{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-001",content:'To create your new project, select File[New > Project] from the menu. Choose <strong id="_creating_a_project_4-025-emphasis-001" class="bold" role="bold">Static Web Project</strong> as the project type.'},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-002",content:'On the next screen, enable the "Use default location" option and press the <strong id="_creating_a_project_4-025-emphasis-002" class="bold" role="bold">Modify</strong> button in the <strong id="_creating_a_project_4-025-emphasis-003" class="bold" role="bold">Configuration</strong> section.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_4-025-figure-001","float":0,children:[{tagname:"img",src:"assets/eclipse-new-project1.5234d75b.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-003",content:'In the new dialog that opens, make sure that the <strong id="_creating_a_project_4-025-emphasis-004" class="bold" role="bold">JavaScript</strong> facet is enabled.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_4-025-figure-002","float":0,children:[{tagname:"img",src:"assets/eclipse-new-project2.1736d6ef.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-004",content:'Continue with the <strong id="_creating_a_project_4-025-emphasis-005" class="bold" role="bold">Next</strong> button and create the new project with the <strong id="_creating_a_project_4-025-emphasis-006" class="bold" role="bold">Finish</strong> button.\nEclipse will now open your new project and display the project structure.'},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-005",content:"Lastly, you need to copy the yFiles for HTML library and the license file into your\nproject.\nyFiles for HTML consists of a single CSS file called <code>yfiles.css</code>\n(located at <code>lib/yfiles.css</code>) and a number\nof JavaScript files (in the <code>lib</code> directory).\nThe license file is located at <code>demos/resources/license.js</code>."},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-006",content:"To summarize, you need to copy the file <code>demos/resources/license.js</code>\nand the <code>lib</code> directory into your project."},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-007",content:'In some Eclipse distributions, you might get an <strong id="_creating_a_project_4-025-emphasis-007" class="bold" role="bold">Internal Validation Error</strong>\nwhen adding the <code>lib</code> directory to your project.\nThis is caused by the Eclipse JavaScript validation, which can’t deal with files\nlarger than a certain size.\nIt does not mean that there is an error in the JavaScript code.'},{tagname:"para","class":"dguide-para",id:"_creating_a_project_4-025-simpara-008",content:'To get rid of the error message, right-click your project and select\n<span class="menuitem">Properties</span><span class="menuseparator">▸</span><span class="menuitem">JavaScript</span><span class="menuseparator">▸</span><span class="menuitem">Include Path</span><span class="menuseparator">▸</span><span class="menuitem">Source</span><span class="menuseparator">▸</span><span class="menuitem">Excluded</span>.\nClick <strong id="_creating_a_project_4-025-emphasis-008" class="bold" role="bold">Edit</strong> and add the files in <code>lib</code> to the exclusion patterns.'},{tagname:"figure","class":"image",title:"",id:"_creating_a_project_4-025-figure-003","float":0,children:[{tagname:"img",src:"assets/eclipse-config1.ea19c47d.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"eclipse_auto_completion",title:"Enabling Auto-Completion",children:[{tagname:"para","class":"dguide-para note",id:"eclipse_auto_completion-026-note-001",content:'<p id="eclipse_auto_completion-026-simpara-001">At the time of writing Eclipse’s Javascript Content Assist feature seems buggy and inferior compared to the other solutions. We recommend using one of the alternatives presented here.</p>'},{tagname:"para","class":"dguide-para",id:"eclipse_auto_completion-026-simpara-002",content:"To enable Eclipse’s Content Assist feature (<kbd>Ctrl</kbd>+<kbd>Space</kbd>) for yFiles for HTML the following steps are required:"},{tagname:"para",content:'<ul id="eclipse_auto_completion-026-itemizedlist-001"><li id="eclipse_auto_completion-026-listitem-001"><p id="eclipse_auto_completion-026-simpara-003">Copy the JavaScript stub file  <code>ide-support/yfiles-api.js</code> in your project.</p></li><li id="eclipse_auto_completion-026-listitem-002"><p id="eclipse_auto_completion-026-simpara-004">Open the <strong id="eclipse_auto_completion-026-emphasis-001" class="bold" role="bold">Project Properties</strong> by right clicking on your project and selecting Properties.</p></li><li id="eclipse_auto_completion-026-listitem-003"><p id="eclipse_auto_completion-026-simpara-005">Navigate to Javascript section and select Include Path.</p></li><li id="eclipse_auto_completion-026-listitem-004"><p id="eclipse_auto_completion-026-simpara-006">Click <strong id="eclipse_auto_completion-026-emphasis-002" class="bold" role="bold">Add JavaScript Library…​</strong></p></li><li id="eclipse_auto_completion-026-listitem-005"><p id="eclipse_auto_completion-026-simpara-007">Choose User Library and click Next.</p></li><li id="eclipse_auto_completion-026-listitem-006"><p id="eclipse_auto_completion-026-simpara-008"><strong id="eclipse_auto_completion-026-emphasis-003" class="bold" role="bold">Click Configure User Libraries…​</strong></p></li></ul>'},{tagname:"figure","class":"image",title:"",id:"eclipse_auto_completion-026-figure-001","float":0,children:[{tagname:"img",src:"assets/eclipse-config2.045a4fc9.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para",content:'<ul id="eclipse_auto_completion-026-itemizedlist-002"><li id="eclipse_auto_completion-026-listitem-007"><p id="eclipse_auto_completion-026-simpara-009">Click <strong id="eclipse_auto_completion-026-emphasis-004" class="bold" role="bold">New…​</strong> and enter a name, e.g. “yFiles Autocompletion”</p></li><li id="eclipse_auto_completion-026-listitem-008"><p id="eclipse_auto_completion-026-simpara-010">Click <strong id="eclipse_auto_completion-026-emphasis-005" class="bold" role="bold">Add .js file…​</strong> and locate the file yfiles-api.js</p></li><li id="eclipse_auto_completion-026-listitem-009"><p id="eclipse_auto_completion-026-simpara-011">Checkmark the user library just created and click Finish\nEclipse’s Content assist should offer code completion and help when pressing Ctrl+Space.</p></li></ul>'},{tagname:"figure","class":"image",title:"",id:"eclipse_auto_completion-026-figure-002","float":0,children:[{tagname:"img",src:"assets/eclipse-autocompletion.363a8bf7.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_adding_yfiles_developer_tools_3",title:"Adding yFiles Developer Tools",children:[{tagname:"para","class":"dguide-para",id:"_adding_yfiles_developer_tools_3-027-simpara-001",content:'The file <code>ide-support/yfiles-typeinfo.js</code> contains the type information for all\nyFiles for HTML types, their members, the parameters of all methods, etc. and a special development version of\nthe class framework.\nCopy this file into your project to enable various convenient <a href="#/dguide/DevelopmentSupport">assistance\nfeatures during application development</a>.'}]},{tagname:"section",id:"_including_the_license_3",title:"Including the License",children:[{tagname:"para","class":"dguide-para",id:"_including_the_license_3-028-simpara-001",content:"If you’re using an evaluation version of yFiles for HTML, an evaluation license is part of the yFiles distribution and\nlocated in <code>demos/resources/license.js</code>. Otherwise, use the license that was separately\nprovided to you.\nYou need to include the license file in every page that uses the yFiles for HTML library."}]},{tagname:"section",id:"_creating_an_application_2",title:"Creating an Application",children:[{tagname:"para","class":"dguide-para",id:"_creating_an_application_2-029-simpara-001",content:'Now that the project has been set up, continue with <a href="#/dguide/getting_started-application">your first yFiles for HTML\napplication</a>. This section introduces basic yFiles features that you’ll use in almost all of your yFiles projects.'}]}]},{tagname:"section",id:"getting_started-typescript",title:"TypeScript Support",children:[{tagname:"para","class":"dguide-para",id:"getting_started-typescript-030-simpara-001",content:'<a href="http://www.typescriptlang.org/" target="_blank">TypeScript</a> is a typed superset of JavaScript\nthat compiles to plain JavaScript.\nyFiles for HTML comes with several library definition files:'},{tagname:"para",content:'<dl id="getting_started-typescript-030-variablelist-001"><dt id="getting_started-typescript-030-term-001"><code>ide-support/yfiles-api-umd-webstorm.d.ts</code></dt><dd id="getting_started-typescript-030-listitem-001"><p id="getting_started-typescript-030-simpara-002">Typings for the UMD module version of the library. The JSDoc comments use HTML tags and are optimized for WebStorm.</p></dd><dt id="getting_started-typescript-030-term-002"><code>ide-support/yfiles-api-umd-vscode.d.ts</code></dt><dd id="getting_started-typescript-030-listitem-002"><p id="getting_started-typescript-030-simpara-003">Typings for the UMD module version of the library. The JSDoc comments use markdown and are optimized for Visual Studio Code.</p></dd><dt id="getting_started-typescript-030-term-003"><code>ide-support/yfiles-api-es6-modules-webstorm.d.ts</code></dt><dd id="getting_started-typescript-030-listitem-003"><p id="getting_started-typescript-030-simpara-004">Typings for the ES6 module version of the library. The JSDoc comments use HTML tags and are optimized for WebStorm.</p></dd><dt id="getting_started-typescript-030-term-004"><code>ide-support/yfiles-api-es6-modules-vscode.d.ts</code></dt><dd id="getting_started-typescript-030-listitem-004"><p id="getting_started-typescript-030-simpara-005">Typings for the ES6 module version of the library. The JSDoc comments use markdown and are optimized for Visual Studio Code.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"getting_started-typescript-030-simpara-006",content:"These definition files allows you to use yFiles for HTML as an external library in TypeScript applications."},{tagname:"para","class":"dguide-para note",id:"getting_started-typescript-030-note-001",content:'<p id="getting_started-typescript-030-simpara-007">The yFiles for HTML definition files require TypeScript version 2.0 or newer.</p>'},{tagname:"para","class":"dguide-para note",id:"getting_started-typescript-030-note-002",content:'<p id="getting_started-typescript-030-simpara-008">Even if you do <strong id="getting_started-typescript-030-emphasis-001" class="bold" role="bold">not</strong> want to develop in TypeScript, including a TypeScript definition file alone will substantially improve\nyour JavaScript development experience, since you will get improved IntelliSense and documentation support <strong id="getting_started-typescript-030-emphasis-002" class="bold" role="bold">for plain JavaScript projects</strong>, too.</p>'},{tagname:"section",id:"_general_setup",title:"General Setup",children:[{tagname:"para","class":"dguide-para",id:"_general_setup-031-simpara-001",content:"In order to use yFiles for HTML in a TypeScript application, you need to reference the library\ndefinition file, e.g. by including it in the <code>files</code> property of your tsconfig.json file"},{tagname:"example",id:"_general_setup-031-informalexample-001",content:'<pre class="programlisting javascript" id="_general_setup-031-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>{\n  "files": [\n    "ide-support/yfiles-api-umd-webstorm.d.ts",\n    ...\n  ]\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"_general_setup-031-simpara-002",content:"where the path <code>ide-support/yfiles-api-umd-webstorm.d.ts</code> should be replaced by the actual path to\nthe yFiles for HTML TypeScript definition file."},{tagname:"para","class":"dguide-para",id:"_general_setup-031-simpara-003",content:'To generate an example project, you can use our <a href="https://www.npmjs.com/package/generator-yfiles-app" target="_blank">Yeoman generator</a>.'}]},{tagname:"section",id:"typescript_visualstudio",title:"Visual Studio",children:[{tagname:"para","class":"dguide-para",id:"typescript_visualstudio-032-simpara-001",content:'The latest Visual Studio releases include TypeScript in the box.\nThe <a href="http://www.typescriptlang.org/#download-links" target="_blank">TypeScript home page</a> also offers download links for\nvarious Visual Studio versions.'}]},{tagname:"section",id:"typescript_webstorm",title:"WebStorm",children:[{tagname:"para","class":"dguide-para",id:"typescript_webstorm-033-simpara-001",content:"If you are planning to develop with WebStorm or other JetBrains IDEs that support TypeScript, we highly recommend to\nalways use the latest version."},{tagname:"para","class":"dguide-para",id:"typescript_webstorm-033-simpara-002",content:'For detailed instructions on working with TypeScript in WebStorm, see\n<a href="http://www.jetbrains.com/webstorm/webhelp/typescript-support.html" target="_blank">TypeScript Support in WebStorm</a>.'}]},{tagname:"section",id:"typescipt_vscode",title:"Visual Studio Code",children:[{tagname:"para","class":"dguide-para",id:"typescipt_vscode-034-simpara-001",content:'Visual Studio Code offers extensive support for TypeScript projects. Detailed documentation is available on the\n<a href="https://code.visualstudio.com/docs/languages/typescript" target="_blank">Visual Studio web site</a>.'}]}]}]},{tagname:"section",id:"DevelopmentSupport",title:"yFiles Developer Tools",children:[{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-035-simpara-001",content:"yFiles for HTML comes with powerful tools and assistance features that make your development process more efficient,\nsimplify debugging sessions, and help you to better understand the yFiles for HTML API in general."},{tagname:"section",id:"DevelopmentSupport-Setup",title:"Setup",children:[{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Setup-036-simpara-001",content:"Some of the yFiles developer tools require that the file <code>ide-support/yfiles-typeinfo.js</code>\nis loaded. This file contains the type information for all yFiles for HTML types, their members, the parameters of all\nmethods, etc, and other auxiliary functions."},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Setup-036-simpara-002",content:"Copy this file into your project and reference it in your application’s page(s) during development.\nTo ensure that the type information is in place when the class initializations are performed,\nload it before any of the regular yFiles for HTML library modules."},{tagname:"example",id:"DevelopmentSupport-Setup-036-informalexample-001",content:'<pre class="programlisting html" id="DevelopmentSupport-Setup-036-programlisting-001" language="html" linenumbering="unnumbered" format="linespecific"><code>&lt;!-- Adding type information support during application development. -->\n&lt;script src="yfiles-typeinfo.js">&lt;/script></code></pre>'},{tagname:"para","class":"dguide-para important",id:"DevelopmentSupport-Setup-036-important-001",content:'<p id="DevelopmentSupport-Setup-036-simpara-003">It is highly recommended that you add the file <code>yfiles-typeinfo.js</code>\nto your project and, during application development, include it in every page that\nuses the yFiles for HTML API.</p><p id="DevelopmentSupport-Setup-036-simpara-004">However, due to the performance penalty introduced with each method call, make sure\nthe file is not included in the final application’s page(s).</p>'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Setup-036-simpara-005",content:"Note that some tools work without this file and therefore can be used in any environment, for example even on a\nproduction web server."}]},{tagname:"section",id:"DevelopmentSupport-Checks",title:"Type Checking",children:[{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-001",content:"If the file <code>yfiles-typeinfo.js</code> is loaded,\nthe following tests are enabled with each method call and each invocation of a constructor or property:"},{tagname:"para",content:'<ol id="DevelopmentSupport-Checks-037-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="DevelopmentSupport-Checks-037-listitem-001"><p id="DevelopmentSupport-Checks-037-simpara-002">proper number of arguments?</p></li><li id="DevelopmentSupport-Checks-037-listitem-002"><p id="DevelopmentSupport-Checks-037-simpara-003">any argument undefined?</p></li><li id="DevelopmentSupport-Checks-037-listitem-003"><p id="DevelopmentSupport-Checks-037-simpara-004">proper types of arguments?</p></li><li id="DevelopmentSupport-Checks-037-listitem-004"><p id="DevelopmentSupport-Checks-037-simpara-005">explicit constructor implementation calls a base class constructor?</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-006",content:"The following tests are enabled when a class or interface is actually used the first time:"},{tagname:"para",content:'<ol id="DevelopmentSupport-Checks-037-orderedlist-002" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="DevelopmentSupport-Checks-037-listitem-005"><p id="DevelopmentSupport-Checks-037-simpara-007">class extends an interface instead of implementing it</p></li><li id="DevelopmentSupport-Checks-037-listitem-006"><p id="DevelopmentSupport-Checks-037-simpara-008">class implements an actual class instead of extending it</p></li><li id="DevelopmentSupport-Checks-037-listitem-007"><p id="DevelopmentSupport-Checks-037-simpara-009">class overrides a method or property that is not meant to be overridden</p></li><li id="DevelopmentSupport-Checks-037-listitem-008"><p id="DevelopmentSupport-Checks-037-simpara-010">cyclic class or interface inheritance</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-011",content:"Note that these tests will increase the runtime of your application."},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-012",content:"By default, type checking is configured to instantly throw a genuine JavaScript error for\nany found problem.\nThis avoids any delayed failures of your application, which, in JavaScript, can happen\nliterally anywhere."},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-013",content:"In demos that use the yFiles demo framework, these errors are typically shown in an error dialog like this:"},{tagname:"figure","class":"image",title:"",id:"DevelopmentSupport-Checks-037-figure-001","float":0,children:[{tagname:"img",src:"assets/debug-error-dialog.84cd2c5d.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-014",content:"Alternatively, type checking can be configured to report found problems as JavaScript console warnings\nby setting the property <code>yfiles.help.logTypeInfoErrors</code> to <code>true</code>:"},{tagname:"example",id:"DevelopmentSupport-Checks-037-informalexample-001",content:'<pre class="programlisting javascript" id="DevelopmentSupport-Checks-037-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>/* Enable logging of type checking errors. */\nyfiles.help.logTypeInfoErrors = true;</code></pre>'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-Checks-037-simpara-015",
content:"This will allow the application to continue after non-fatal problems and\nwill help to detect several problems in a single run."}]},{tagname:"section",id:"DevelopmentSupport-GraphInspection",title:"Interactive Graph Inspection and Status Information",children:[{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-GraphInspection-038-simpara-001",content:"A common task during development and debugging is the inspection and modification of the graph and the graph component\nfrom the JavaScript console of the browser. This can be useful, for example, to check the number of nodes and edges in\nthe graph or to experiment with different settings for the user interaction."},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-GraphInspection-038-simpara-002",content:"The tool <code>yfiles.debug</code> simplifies this task. It sets the properties <code>window.gc</code> and <code>window.g</code> to a graph component\nand its graph, respectively, and makes the last clicked item available in <code>window.gc.clickedItem</code> if possible.\nAdditionally, it shows details about the yFiles for HTML version and the license, and disables <code>catchErrors</code> in the yFiles\nerror handling. Without the yFiles error handling, most errors become uncaught errors and are easier to debug in\nthe JavaScript debugger of the browser."},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-GraphInspection-038-simpara-003",content:"Its syntax is as follows:"},{tagname:"example",id:"DevelopmentSupport-GraphInspection-038-informalexample-001",content:'<pre class="programlisting javascript" id="DevelopmentSupport-GraphInspection-038-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.debug(/**?(string|Element)*/ id)</code></pre>'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-GraphInspection-038-simpara-004",content:'The optional parameter <code>id</code> identifies the graph component. If it is a string, the graph component is looked up\nwith the methods <code>document.getElementById(id)</code> and <code>document.querySelector(id)</code>.\nIf it is undefined, the string <code>"graphComponent"</code> is used instead.\nIf it is already an element, the DOM hierarchy is traversed from this element on upwards in order to locate the graph\ncomponent. This is especially useful in conjunction with the variable <code>$0</code> that is available in the debugging\ntools of some browsers.'},{tagname:"para","class":"dguide-para",id:"DevelopmentSupport-GraphInspection-038-simpara-005",content:"Note that the <code>clickedItem</code> is only available if the input mode of the graph component supports adding\na clicked listener."}]}]},{tagname:"section",id:"getting_started-application",title:"Creating the Web Application",children:[{tagname:"para","class":"dguide-para",id:"getting_started-application-039-simpara-001",content:'In this section we will create a very basic yFiles for HTML web application, a single page that contains\na <span class="api">GraphComponent</span>, the main component for displaying graphs.'},{tagname:"para","class":"dguide-para note",id:"getting_started-application-039-note-001",content:'<p id="getting_started-application-039-simpara-002">The <api-link id="getting_started-application-039-api-link-001" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link> is the main Component in yFiles for HTML.\nIt displays the graph and provides rich means of interaction with the diagram.</p>'},{tagname:"para","class":"dguide-para important",id:"getting_started-application-039-important-001",content:'<p id="getting_started-application-039-simpara-003">Make sure that the license is properly added to your project.</p>'},{tagname:"section",id:"_creating_the_gui",title:"Creating the GUI",children:[{tagname:"para","class":"dguide-para",id:"_creating_the_gui-040-simpara-001",content:"Start by creating a blank html page using a HTML5 page template."},{tagname:"para","class":"dguide-para",id:"_creating_the_gui-040-simpara-002",content:"Then, we add a simple empty <code>div</code> element to the page which will later show the component."},{tagname:"para","class":"dguide-para",id:"_creating_the_gui-040-simpara-003",content:"The yFiles for HTML consists of a set of JavaScript files and a CSS file. The CSS rules defined in that file must be used in\nall yFiles for HTML applications. Here, we include the file with a standard <code>&lt;link></code> element."},{tagname:"para","class":"dguide-para",id:"_creating_the_gui-040-simpara-004",content:"In this example, we use an AMD loader in order to load the JavaScript library files into the browser, and load the\nloader itself via a <code>&lt;script></code> tag."},{tagname:"para","class":"dguide-para",id:"_creating_the_gui-040-simpara-005",content:"Finally, in an inline script, we tell the AMD loader where to locate the JavaScript library files and start loading\n them."},{tagname:"example",id:"_creating_the_gui-040-example-001",title:"Boilerplate of the example application",content:'<pre class="programlisting html" id="_creating_the_gui-040-programlisting-001" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n  &lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    // this is where the application code can be placed in\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"_creating_the_gui-040-note-001",content:'<p id="_creating_the_gui-040-simpara-006">A valid license needs to be present in the <code>yfiles</code> root namespace object in order to use yFiles for HTML modules.</p><p id="_creating_the_gui-040-simpara-007">In this chapter and in the demos, the license is placed a separate file for the sake of simplicity.\nAs described in <a href="#/dguide/licensing">Licensing</a>, you can place the actual license data object in one of your JavaScript files instead.</p>'}]},{tagname:"section",id:"getting_started-module_loading",title:"Module Loading",children:[{tagname:"para","class":"dguide-para",id:"getting_started-module_loading-041-simpara-001",content:'yFiles for HTML consists of several JavaScript modules\nand the yFiles for HTML package contains two sets of these modules: one in the\n<a href="https://github.com/umdjs/umd" target="_blank">Universal Module Definition (UMD)</a> format and one in the\n<a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" target="_blank">ES6 Modules</a> format. Both sets provide the same\nfeatures and API but the names and structuring of the modules os slightly different.'},{tagname:"para","class":"dguide-para",id:"getting_started-module_loading-041-simpara-002",content:"In both cases, each module provides certain distinct features and specifies the other modules it depends on."},{tagname:"para","class":"dguide-para",id:"getting_started-module_loading-041-simpara-003",content:"For example, the UMD module 'yfiles/view-table' provides the table support for the graph and the\n<span class=\"api\">GraphComponent</span>, and makes sure that the <span class=\"api\">GraphComponent</span> and all other features of the UMD module 'yfiles/view-component' are\navailable, too, via its dependencies."},{tagname:"para","class":"dguide-para",id:"getting_started-module_loading-041-simpara-004",content:"The name of the module(s) a type is available with is listed in the API documentation."},{tagname:"para","class":"dguide-para note",id:"getting_started-module_loading-041-note-001",content:'<p id="getting_started-module_loading-041-simpara-005">The following sections describe how to load yFiles for HTML using the UMD modules and the ES6 modules instead. You can\nskip the one you’re not interested in.</p>'},{tagname:"section",id:"_loading_the_umd_modules_of_yfiles_for_html",title:"Loading the UMD Modules of yFiles for HTML",children:[{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-001",content:"Modules that make use of the UMD API can be loaded in various environments:"},{tagname:"para",content:'<ul id="_loading_the_umd_modules_of_yfiles_for_html-042-itemizedlist-001"><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-001"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-002"><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank">Asynchronous Module Definition (AMD)</a> -\nModules are loaded lazily using an AMD loader like <a href="http://requirejs.org/" target="_blank">RequireJS</a>.</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-002"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-003"><a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank">CommonJS</a> - Used in\n<a href="https://nodejs.org/" target="_blank">Node.js</a> applications, and in <a href="http://browserify.org/" target="_blank">Browserify</a>\nweb projects.</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-003"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-004">Browser Globals - Simply access the yFiles functionality through the global yfiles root namespace.</p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"_loading_the_umd_modules_of_yfiles_for_html-042-note-001",content:'<p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-005">Different module headers can be generated using the yFiles for HTML <a href="#/dguide/generate_different_module_headers">deployment tool</a>.</p>'},{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-006",content:"The yFiles for HTML package contains various demos that show different ways of loading and bundling the yFiles modules in\nweb or Node.js applications:"},{tagname:"para",content:'<ul id="_loading_the_umd_modules_of_yfiles_for_html-042-itemizedlist-002"><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-004"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-007"><a href="loading/amdloading" target="_blank">loading/amdloading</a> - Asynchronous loading using an AMD loader.</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-005"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-008"><a href="loading/browserify" target="_blank">loading/browserify</a> - CommonJS loading using a Browserify build step.</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-006"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-009"><a href="loading/nodejs" target="_blank">loading/nodejs</a> - CommonJS loading in Node.js Server.</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-007"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-010"><a href="loading/scriptloading" target="_blank">loading/scriptloading</a> - Plain &lt;script> loading (browser globals).</p></li><li id="_loading_the_umd_modules_of_yfiles_for_html-042-listitem-008"><p id="_loading_the_umd_modules_of_yfiles_for_html-042-simpara-011"><a href="loading/es6modules" target="_blank">loading/es6modules</a> - Loading using <code>import</code> statements.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-012",content:"Using an AMD loader is the preferred way of loading yFiles for HTML, since it resolves the dependencies between the\nmodules automatically and allows asynchronous loading.\nA basic implementation of an AMD loader that comes with a reduced feature set is part of the demo applications included\nin this product."},{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-013",content:'To use it, copy the <em id="_loading_the_umd_modules_of_yfiles_for_html-042-emphasis-001">demos/resources/require.js</em> script to your project and include it in your document.'},{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-014",content:'Once the loader is available, you can call the <em id="_loading_the_umd_modules_of_yfiles_for_html-042-emphasis-002">require</em> function which loads the\ndesired yFiles for HTML modules and their dependencies and then executes a provided callback function.'},{tagname:"example",id:"_loading_the_umd_modules_of_yfiles_for_html-042-example-001",title:"Using an AMD loader",content:'<pre class="programlisting html" id="_loading_the_umd_modules_of_yfiles_for_html-042-programlisting-001" language="html" format="linespecific"><code>&lt;script src="./demos/resources/require.js">&lt;/script>\r\n&lt;script>\r\nrequire.config({baseUrl: \'./lib/umd/\'});\r\nrequire([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n  // this is where the application code can be placed in\r\n});\r\n&lt;/script>\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_loading_the_umd_modules_of_yfiles_for_html-042-simpara-015",content:"The usage of an AMD loader can be seen in most demos.\nOther AMD loaders can be used with yFiles for HTML modules as well, but may require additional configuration."}]},{tagname:"section",id:"es6-modules-loading",title:"Importing the ES6 Modules of yFiles for HTML",children:[{tagname:"para","class":"dguide-para",id:"es6-modules-loading-043-simpara-001",content:"You can load yFiles for HTML by using the ES6 module variant of the library and <code>import</code> statements:"},{tagname:"example",id:"es6-modules-loading-043-example-001",title:"Importing ES6 modules",content:'<pre class="programlisting html" id="es6-modules-loading-043-programlisting-001" language="html" format="linespecific"><code>&lt;script type="module" crossorigin="anonymous">\r\nimport { GraphComponent } from \'../../../lib/es6-modules/yfiles/view-component.js\';\r\nconst graphComponent = new GraphComponent();\r\n&lt;/script>\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"es6-modules-loading-043-simpara-002",content:'The <a href="..\\..\\demos\\loading\\es6modules\\README.html" target="blank" class="demo-link" title="Loads the yFiles module resources using ES6 module imports.">ES6 Module Loading</a> demo shows how to import yFiles modules, and\nhow to benefit from this loading mechanism by omitting the fully qualified namespace for types.'},{tagname:"para","class":"dguide-para important",id:"es6-modules-loading-043-important-001",content:'<p id="es6-modules-loading-043-simpara-003">You need to explicitly import <code>yfiles/view-layout-bridge</code> if you want to use the\n<api-link id="es6-modules-loading-043-api-link-001" data-member="applyLayout(yfiles.layout.ILayoutAlgorithm,yfiles.layout.LayoutData)" data-text="applyLayout" data-type="yfiles.graph.IGraph"></api-link> or\n<api-link id="es6-modules-loading-043-api-link-002" data-member="morphLayout(yfiles.layout.ILayoutAlgorithm,yfiles.lang.TimeSpan,yfiles.layout.LayoutData)" data-text="morphLayout" data-type="yfiles.view.GraphComponent"></api-link> convenience function.</p><p id="es6-modules-loading-043-simpara-004">However, no specific type from <code>yfiles/view-layout-bridge</code> needs to be imported for the above convenience functions\nto work.</p>'},{tagname:"para","class":"dguide-para",id:"es6-modules-loading-043-simpara-005",content:'Our <a href="https://github.com/yWorks/generator-yfiles-app" target="_blank">Yeoman generator for yFiles</a> can be used to scaffold a\nyFiles for HTML project with the ES6 module loading approach. For more details about the Yeoman generator please see the\n<a href="#/dguide/yeoman-generator">Yeoman Generator</a> section.'}]}]},{tagname:"section",id:"_adding_the_main_component",title:"Adding the Main Component",children:[{tagname:"para","class":"dguide-para",id:"_adding_the_main_component-044-simpara-001",content:'Continue by adding a <api-link id="_adding_the_main_component-044-api-link-001" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link> instance to the top-level container. The\n<span class="api">GraphComponent</span> is one of the most central classes of yFiles for HTML and used for displaying and editing graphs.'},{tagname:"para","class":"dguide-para",id:"_adding_the_main_component-044-simpara-002",content:'Initialize the <span class="api">GraphComponent</span> using a CSS selector or id to tell it which existing <code>div</code> element to use:'},{tagname:"example",id:"_adding_the_main_component-044-example-001",title:"Initialization of GraphComponent, the Main Component",content:'<pre class="programlisting javascript" id="_adding_the_main_component-044-programlisting-001" language="javascript" format="linespecific"><code>let graphComponent = new yfiles.view.GraphComponent(\'#graphComponent\')\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_adding_the_main_component-044-simpara-003",content:"The basic yFiles for HTML application is complete now. The source of this application should\nlook like the code below."},{tagname:"example",id:"_adding_the_main_component-044-example-002",title:"Basic yFiles for HTML application",content:'<pre class="programlisting html" id="_adding_the_main_component-044-programlisting-002" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n  &lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    let graphComponent = new yfiles.view.GraphComponent("#graphComponent");\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_adding_the_main_component-044-simpara-004",content:"Now open the web page in your browser. You should see an empty white canvas, filling the complete display area.\nIt will probably look like an empty web page, however it may display a license notice at the bottom left and if\nyou use the mouse wheel in the empty area you will see that scroll bars will appear."},{tagname:"para","class":"dguide-para tip",id:"_adding_the_main_component-044-tip-001",content:'<p id="_adding_the_main_component-044-simpara-005">In anticipation of the tutorial step <a href="#/dguide/getting_started-user_interaction">User Interaction</a>:\nyou can enable graph editing by inserting this line of code:\n<code>graphComponent.inputMode = new yfiles.input.GraphEditorInputMode();</code></p>'},{tagname:"para","class":"dguide-para note",id:"_adding_the_main_component-044-note-001",content:'<p id="_adding_the_main_component-044-simpara-006">In the following sections, we’ll insert code snippets into the application step-by-step.\nAt the end of each section, we’ll summarize the source code created so far.</p>'}]}]},{tagname:"section",id:"getting_started-creating_graph_elements",title:"Creating Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"getting_started-creating_graph_elements-045-simpara-001",content:'In this section we will learn how to create graph elements in yFiles for HTML. We’ll create a small sample\ngraph which will be displayed immediately after the application has started.\nThe graph class and its features are discussed thoroughly in the chapter <a href="#/dguide/graph">The Graph Model</a>.'},{tagname:"para","class":"dguide-para note",id:"getting_started-creating_graph_elements-045-note-001",content:'<p id="getting_started-creating_graph_elements-045-simpara-002">The graph is modeled by interface <api-link id="getting_started-creating_graph_elements-045-api-link-001" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link>. Instances of this interface hold the graph\nmodel itself but also provide methods to create, change, and remove graph elements. An instance of <span class="api">IGraph</span>\ncan be obtained from the <span class="api">GraphComponent</span>.</p><p id="getting_started-creating_graph_elements-045-simpara-003">A graph consists of different types of elements. Nodes and edges are modeled by instances of <api-link id="getting_started-creating_graph_elements-045-api-link-002" data-member="" data-text="INode" data-type="yfiles.graph.INode"></api-link> and\n<api-link id="getting_started-creating_graph_elements-045-api-link-003" data-member="" data-text="IEdge" data-type="yfiles.graph.IEdge"></api-link>, respectively. Further element types are labels (<api-link id="getting_started-creating_graph_elements-045-api-link-004" data-member="" data-text="ILabel" data-type="yfiles.graph.ILabel"></api-link>) which add textual\ninformation to nodes and edges. Finally, ports (<api-link id="getting_started-creating_graph_elements-045-api-link-005" data-member="" data-text="IPort" data-type="yfiles.graph.IPort"></api-link>) serve as connection points\nof edges to nodes or other edges, and bends (<api-link id="getting_started-creating_graph_elements-045-api-link-006" data-member="" data-text="IBend" data-type="yfiles.graph.IBend"></api-link>) provide control points for edges.</p><p id="getting_started-creating_graph_elements-045-simpara-004">All kinds of graph elements are created with factory methods of <span class="api">IGraph</span>.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-creating_graph_elements-045-simpara-005",content:'A new <span class="api">GraphComponent</span> instance holds already an implementation of the <api-link id="getting_started-creating_graph_elements-045-api-link-007" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> interface.\nThis instance is the graph which will be displayed by the <span class="api">GraphComponent</span>.\nYou can access it via the <api-link id="getting_started-creating_graph_elements-045-api-link-008" data-member="graph" data-text="graph" data-type="yfiles.view.GraphComponent"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"getting_started-creating_graph_elements-045-simpara-006",content:'Insert the following line after the initialization of the <span class="api">GraphComponent</span>:'},{tagname:"example",id:"getting_started-creating_graph_elements-045-example-001",title:"Getting the graph of a GraphComponent",content:'<pre class="programlisting javascript" id="getting_started-creating_graph_elements-045-programlisting-001" language="javascript" format="linespecific"><code>let graph = graphComponent.graph\n</code></pre>'},{tagname:"section",id:"_creating_nodes",title:"Creating Nodes",children:[{tagname:"para","class":"dguide-para",id:"_creating_nodes-046-simpara-001",content:'The only way to create new nodes is using <span class="api">IGraph</span>’s <api-link id="_creating_nodes-046-api-link-001" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode" data-type="yfiles.graph.IGraph"></api-link> method.\nLet’s create some nodes at different locations and with different sizes:'},{tagname:"example",id:"_creating_nodes-046-example-001",title:"Creating nodes",content:'<pre class="programlisting javascript" id="_creating_nodes-046-programlisting-001" language="javascript" format="linespecific"><code>let node1 = graph.createNode(new yfiles.geometry.Rect(0, 0, 30, 30))\r\nlet node2 = graph.createNode(new yfiles.geometry.Rect(100, 0, 30, 30))\r\nlet node3 = graph.createNode(new yfiles.geometry.Rect(300, 300, 60, 30))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_creating_nodes-046-simpara-002",content:"It’s time to reload the browser page."},{tagname:"para","class":"dguide-para",id:"_creating_nodes-046-simpara-003",content:'Hm, neat but it could be better. At least, the graph should be centered in the display. Fortunately, <span class="api">GraphComponent</span>\nprovides a method to fit the graph so it is centered in the display: <api-link id="_creating_nodes-046-api-link-002" data-member="fitGraphBounds(yfiles.geometry.Insets)" data-text="fitGraphBounds" data-type="yfiles.view.GraphComponent"></api-link>.\nCall this method after creating all graph elements and after the GUI was created:'},{tagname:"example",id:"_creating_nodes-046-example-002",title:"Fitting the graph in the visible area",content:'<pre class="programlisting javascript" id="_creating_nodes-046-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.fitGraphBounds()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_creating_nodes-046-simpara-004",content:"By default, a node is displayed as white rectangle with a black border. Thus, the diagram with three\nnodes looks currently like this:"},{tagname:"figure","class":"image",title:"",id:"_creating_nodes-046-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_graph_nodes.cfe44a1b.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_creating_edges",title:"Creating Edges",children:[{tagname:"para","class":"dguide-para",id:"_creating_edges-047-simpara-001",content:'A graph is defined by a set of nodes and a set of edges which define the relations between the nodes.\nSo, let’s connect the nodes by some edges. To do so, use <span class="api">IGraph</span>’s\n<api-link id="_creating_edges-047-api-link-001" data-member="createEdge(yfiles.graph.INode,yfiles.graph.INode,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge" data-type="yfiles.graph.IGraph"></api-link> method to\nconnect <code>node1</code> with <code>node2</code> and <code>node2</code> with <code>node3</code>:'},{tagname:"example",id:"_creating_edges-047-example-001",title:"Creating edges",content:'<pre class="programlisting javascript" id="_creating_edges-047-programlisting-001" language="javascript" format="linespecific"><code>let edge1 = graph.createEdge(node1, node2)\r\nlet edge2 = graph.createEdge(node2, node3)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_creating_edges-047-simpara-002",content:'The first node of an edge is called <span class="def">source</span> node of the edge and the second node is called\n<span class="def">target</span> node.'},{tagname:"para","class":"dguide-para",id:"_creating_edges-047-simpara-003",content:"Now we have a graph with three nodes and two edges connecting them. An edge is drawn with black,\nstraight line segments by default. The result should look like this:"},{tagname:"figure","class":"image",title:"",id:"_creating_edges-047-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_graph_edges.1c81bcdd.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_using_bends",title:"Using Bends",children:[{tagname:"para","class":"dguide-para",id:"_using_bends-048-simpara-001",content:'Right now, the edges are represented by straight lines. yFiles for HTML supports the insertion\nof <span class="def">bends</span> to draw complex edge paths. Bends are points that subdivide edges into segments.\nThese points are modeled by interface <api-link id="_using_bends-048-api-link-001" data-member="" data-text="IBend" data-type="yfiles.graph.IBend"></api-link>.'},{tagname:"para","class":"dguide-para",id:"_using_bends-048-simpara-002",content:'Bends are created for a specific edge using <span class="api">IGraph</span>’s\n<api-link id="_using_bends-048-api-link-002" data-member="addBend(yfiles.graph.IEdge,yfiles.geometry.Point,number)" data-text="addBend(IEdge, Point, number)" data-type="yfiles.graph.IGraph"></api-link> method.\nAn edge can have an arbitrary number of bends.'},{tagname:"para","class":"dguide-para",id:"_using_bends-048-simpara-003",content:"The following line adds a bend to the edge <code>edge2</code>, its coordinates are chosen to result in an orthogonal\nbend at this location."},{tagname:"example",id:"_using_bends-048-example-001",title:"Adding bends",content:'<pre class="programlisting javascript" id="_using_bends-048-programlisting-001" language="javascript" format="linespecific"><code>let bend1 = graph.addBend(edge2, new yfiles.geometry.Point(330, 15))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_using_bends-048-simpara-004",content:"Our diagram looks like this now:"},{tagname:"figure","class":"image",title:"",id:"_using_bends-048-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_graph_bends.49877ce5.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_using_ports",title:"Using Ports",children:[{tagname:"para","class":"dguide-para",id:"_using_ports-049-simpara-001",content:'A <span class="def">port</span> is a graph element to which edges can connect. Ports can be added to nodes or edges (although ports on edges are\nsomewhat rare).'},{tagname:"para","class":"dguide-para",id:"_using_ports-049-simpara-002",content:'In fact, edges always connect to ports, not directly to nodes. Wait — a few lines above we connected two\nnodes using <api-link id="_using_ports-049-api-link-001" data-member="createEdge(yfiles.graph.INode,yfiles.graph.INode,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge(INode, INode, IEdgeStyle, Object)" data-type="yfiles.graph.IGraph"></api-link>, didn’t we?\nActually, we didn’t. Rather, the <span class="api">createEdge</span> method implicitly\ncreated two ports at the center of the source and target node first, then connected these ports with the edge.'},{tagname:"para","class":"dguide-para tip",id:"_using_ports-049-tip-001",content:'<p id="_using_ports-049-simpara-003">If your use case does not require dedicated port objects, you can simply ignore <span class="api">IPort</span>s and just work\nwith nodes. In this case, yFiles for HTML takes care to create and remove <span class="api">IPort</span>s as needed.</p>'},{tagname:"para","class":"dguide-para",id:"_using_ports-049-simpara-004",content:'If necessary, you can manually create ports at nodes and let the edges connect to these. <span class="api">IGraph</span>’s\n<api-link id="_using_ports-049-api-link-002" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort" data-type="yfiles.graph.IGraph"></api-link> method creates a port for the given owner.\nIn this example we use two ways of specifying its arguments:'},{tagname:"para",content:'<ul id="_using_ports-049-itemizedlist-001"><li id="_using_ports-049-listitem-001"><p id="_using_ports-049-simpara-005"><api-link id="_using_ports-049-api-link-003" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort" data-type="yfiles.graph.IGraph"></api-link>(owner, parameter)\ncreates a port for the given node or edge at the location defined by the <span class="def">port location parameter</span>.\nPlacing ports is described in more detail later in this tutorial in section <a href="#/dguide/getting_started-placing_ports">Placing Ports</a>.</p></li><li id="_using_ports-049-listitem-002"><p id="_using_ports-049-simpara-006"><api-link id="_using_ports-049-api-link-004" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort" data-type="yfiles.graph.IGraph"></api-link>(owner) creates a new port for the\ngiven owner node or edge with the default port location parameter (i.e. the port is located at the center of the node).</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_using_ports-049-simpara-007",content:"Finally, we create a new edge between the newly created ports:"},{tagname:"example",id:"_using_ports-049-example-001",title:"Adding ports",content:'<pre class="programlisting javascript" id="_using_ports-049-programlisting-001" language="javascript" format="linespecific"><code>let portAtNode1 = graph.addPort(node1)\r\nlet portAtNode3 = graph.addPort(node3, yfiles.graph.FreeNodePortLocationModel.NODE_LEFT_ANCHORED)\r\nlet edgeAtPorts = graph.createEdge(portAtNode1, portAtNode3)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_using_ports-049-simpara-008",content:"By default, ports are invisible. However, due to the dedicated port location parameter of port <code>portAtNode3</code>,\nthe new edge points to the middle of the left side of its target node instead of its center:"},{tagname:"figure","class":"image",title:"",id:"_using_ports-049-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_graph_ports.20ffc400.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_adding_labels",title:"Adding Labels",children:[{tagname:"para","class":"dguide-para",id:"_adding_labels-050-simpara-001",content:'Usually, one has to add supplemental information to a graph and its elements.\nTextual information can be represented by labels, which are implementations of <api-link id="_adding_labels-050-api-link-001" data-member="" data-text="ILabel" data-type="yfiles.graph.ILabel"></api-link>.\nSimilar to bends and ports, labels are added to nodes, edges, and ports via the graph, using <span class="api">IGraph</span>’s\n<api-link id="_adding_labels-050-api-link-002" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel" data-type="yfiles.graph.IGraph"></api-link> method,\nand every label owner can have more than one label.'},{tagname:"para","class":"dguide-para",id:"_adding_labels-050-simpara-002",content:"Now we add some labels to our graph items. Add the following lines to your initialization code and reload the page:"},{tagname:"example",id:"_adding_labels-050-example-001",title:"Adding labels",content:"<pre class=\"programlisting javascript\" id=\"_adding_labels-050-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>let ln1 = graph.addLabel(node1, 'n1')\r\nlet ln2 = graph.addLabel(node2, 'n2')\r\nlet ln3 = graph.addLabel(node3, 'n3')\r\nlet le3 = graph.addLabel(edgeAtPorts, 'edgeAtPorts')\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"_adding_labels-050-simpara-003",content:'Similar to ports, labels are typically placed relative to their owner element by specifying a\nspecific <span class="def">label model parameter</span>. This is described later in this tutorial in section\n<a href="#/dguide/getting_started-placing_labels">Placing Labels</a>.'},{tagname:"figure","class":"image",title:"",id:"_adding_labels-050-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_graph_labels.287b691d.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_removing_elements",title:"Removing Elements",children:[{tagname:"para","class":"dguide-para",id:"_removing_elements-051-simpara-001",content:'Any element can be removed from the graph using its <api-link id="_removing_elements-051-api-link-001" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(IModelItem)" data-type="yfiles.graph.IGraph"></api-link> method.\nNote that when an element is removed all dependent elements will be removed, too.'},{tagname:"para","class":"dguide-para",id:"_removing_elements-051-simpara-002",content:"For example, when a node is removed, all edges which connect to that node will be removed as well.\nAlso, all its labels and ports will be removed, too."},{tagname:"para","class":"dguide-para",id:"_removing_elements-051-simpara-003",content:'The dependent elements are removed <strong id="_removing_elements-051-emphasis-001" class="bold" role="bold">before</strong> the element they depend on — that way the graph will always be in a\nconsistent state.'}]},{tagname:"section",id:"_summary_of_creating_elements",title:"Summary of Creating Elements",children:[{tagname:"para","class":"dguide-para",id:"_summary_of_creating_elements-052-simpara-001",content:"With all code snippets of this section, the source code of the example page looks like this:"},{tagname:"example",id:"_summary_of_creating_elements-052-example-001",title:"The example web page after creating graph elements",content:'<pre class="programlisting html" id="_summary_of_creating_elements-052-programlisting-001" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n&lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    let graphComponent = new yfiles.view.GraphComponent("#graphComponent");\r\n    let graph = graphComponent.graph;\r\n\r\n    let node1 = graph.createNode(new yfiles.geometry.Rect(0, 0, 30, 30));\r\n    let node2 = graph.createNode(new yfiles.geometry.Rect(100, 0, 30, 30));\r\n    let node3 = graph.createNode(new yfiles.geometry.Rect(300, 300, 60, 30));\r\n\r\n    let edge1 = graph.createEdge(node1, node2);\r\n    let edge2 = graph.createEdge(node2, node3);\r\n\r\n    let bend1 = graph.addBend(edge2, new yfiles.geometry.Point(330, 15));\r\n\r\n    let portAtNode1 = graph.addPort(node1);\r\n    let portAtNode3 = graph.addPort(node3, yfiles.graph.FreeNodePortLocationModel.NODE_LEFT_ANCHORED);\r\n    let edgeAtPorts = graph.createEdge(portAtNode1, portAtNode3);\r\n\r\n    let ln1 = graph.addLabel(node1, "n1");\r\n    let ln2 = graph.addLabel(node2, "n2");\r\n    let ln3 = graph.addLabel(node3, "n3");\r\n    let le3 = graph.addLabel(edgeAtPorts, "edgeAtPorts");\r\n\r\n    graphComponent.fitGraphBounds();\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'}]}]},{tagname:"section",id:"getting_started-setting_styles",title:"Setting Styles",children:[{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-001",content:'In this section we will learn how to change the visual appearance of graph elements.\nThis is discussed thoroughly in the sections <a href="#/dguide/view_visualization-graph-elements">Visualization of Graph Elements</a> and <a href="#/dguide/customizing_styles">Customizing Styles</a>.'},{tagname:"para","class":"dguide-para note",id:"getting_started-setting_styles-053-note-001",content:'<p id="getting_started-setting_styles-053-simpara-002">The rendering of graph elements of all kinds except bends is handled by <span class="def">styles</span>. Style implementations\nare type-specific, for example a node is rendered by an <api-link id="getting_started-setting_styles-053-api-link-001" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link>, an edge by an\n<api-link id="getting_started-setting_styles-053-api-link-002" data-member="" data-text="IEdgeStyle" data-type="yfiles.styles.IEdgeStyle"></api-link>.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-003",content:"In a typical diagram, the visualization of the nodes and the other elements must be customized to\nconvey some kind of information or to be more attractive than the monochrome shapes we used so far."},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-004",content:'In yFiles for HTML all kinds of graph elements (nodes, edges, labels, ports, but not bends) have a so-called <span class="def">style</span>\nwhich is responsible for the rendering of the element. For example, for nodes, the interface <span class="api">INode</span> has a\n<api-link id="getting_started-setting_styles-053-api-link-003" data-member="style" data-text="style" data-type="yfiles.graph.INode"></api-link> property with the type <api-link id="getting_started-setting_styles-053-api-link-004" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link>.'},{tagname:"figure","class":"image",title:"Different node styles",id:"getting_started-setting_styles-053-figure-001","float":0,children:[{tagname:"img",src:"assets/gs_node_style_default.d3fb6052.png",alt:"",title:'<para class="dguide-para">The default node style</para>'},{tagname:"img",src:"assets/gs_node_style_rect.70998091.png",alt:"",title:'<para class="dguide-para">A simple colored rectangle</para>'},{tagname:"img",src:"assets/gs_node_style_image.84eeb1e2.png",alt:"",title:'<para class="dguide-para">An image</para>'},{tagname:"img",src:"assets/gs_node_style_complex.b5edfb26.png",alt:"",title:'<para class="dguide-para">A complex style used in an organization chart</para>'}]},{tagname:"para","class":"dguide-para note",id:"getting_started-setting_styles-053-note-002",content:'<p id="getting_started-setting_styles-053-simpara-005">You don’t have to rely on the predefined styles. yFiles for HTML makes it rather easy to implement\nyour own style that perfectly fits your needs. See chapter <a href="#/dguide/customizing_styles">Customizing Styles</a> to learn more about this.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-006",content:'The style of a graph element can be set at creation time, and/or changed at any time afterwards with\nthe <api-link id="getting_started-setting_styles-053-api-link-005" data-member="setStyle" data-text="setStyle" data-type="yfiles.graph.IGraph"></api-link> methods of <span class="api">IGraph</span>. In any case, graph elements\nalways <strong id="getting_started-setting_styles-053-emphasis-001" class="bold" role="bold">must</strong> have a non-null style.'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-007",content:"All creation methods support a style parameter:"},{tagname:"para",content:'<ul id="getting_started-setting_styles-053-itemizedlist-001"><li id="getting_started-setting_styles-053-listitem-001"><p id="getting_started-setting_styles-053-simpara-008"><api-link id="getting_started-setting_styles-053-api-link-006" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode(layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></p></li><li id="getting_started-setting_styles-053-listitem-002"><p id="getting_started-setting_styles-053-simpara-009"><api-link id="getting_started-setting_styles-053-api-link-007" data-member="createEdge(yfiles.graph.INode,yfiles.graph.INode,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge(source:&#xA0;INode, target:&#xA0;INode, style:&#xA0;IEdgeStyle, tag:&#xA0;Object):&#xA0;IEdge" data-type="yfiles.graph.IGraph"></api-link></p></li><li id="getting_started-setting_styles-053-listitem-003"><p id="getting_started-setting_styles-053-simpara-010"><api-link id="getting_started-setting_styles-053-api-link-008" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel(owner:&#xA0;ILabelOwner, text:&#xA0;string, layoutParameter:&#xA0;ILabelModelParameter, style:&#xA0;ILabelStyle, preferredSize:&#xA0;Size, tag:&#xA0;Object):&#xA0;ILabel" data-type="yfiles.graph.IGraph"></api-link></p></li><li id="getting_started-setting_styles-053-listitem-004"><p id="getting_started-setting_styles-053-simpara-011"><api-link id="getting_started-setting_styles-053-api-link-009" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort(owner:&#xA0;IPortOwner, locationParameter:&#xA0;IPortLocationModelParameter, style:&#xA0;IPortStyle, tag:&#xA0;Object):&#xA0;IPort" data-type="yfiles.graph.IGraph"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-012",content:"For example, to set the style of some nodes to a flat orange rectangle without border we can use the following lines:"},{tagname:"example",id:"getting_started-setting_styles-053-example-001",title:"Setting a node style",content:'<pre class="programlisting javascript" id="getting_started-setting_styles-053-programlisting-001" language="javascript" format="linespecific"><code>// create a style which draws a node as a geometric shape with a fill and a transparent border color\r\nlet orangeNodeStyle = new yfiles.styles.ShapeNodeStyle({\r\n  shape: yfiles.styles.ShapeNodeShape.RECTANGLE,\r\n  fill: yfiles.view.Fill.ORANGE,\r\n  stroke: yfiles.view.Stroke.TRANSPARENT\r\n})\r\n\r\n// change the style of an already created node\r\ngraph.setStyle(node3, orangeNodeStyle)\r\n\r\n// set a custom style at node creation\r\nlet node4 = graph.createNode(new yfiles.geometry.Rect(200, 80, 60, 30), orangeNodeStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-013",content:"Now, the diagram has two orange nodes:"},{tagname:"figure","class":"image",title:"",id:"getting_started-setting_styles-053-figure-002","float":0,children:[{tagname:"img",src:"assets/gs_node_style_some.e567f281.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-014",content:'If the style of an element is not specified explicitly, a default style will be used.\nThe default is not hard-coded in the library.\nRather, it can be set as a part of a number of default properties for each kind of graph item.\nThis is discussed in detail in the section <a href="#/dguide/graph_model-item_defaults">Setting Defaults for new Items</a>.'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-015",content:'For nodes the default style can be set using the <api-link id="getting_started-setting_styles-053-api-link-010" data-member="" data-text="NodeDefaults" data-type="yfiles.graph.NodeDefaults"></api-link> class\nin the following way:'},{tagname:"example",id:"getting_started-setting_styles-053-example-002",title:"Changing the default node style",content:'<pre class="programlisting javascript" id="getting_started-setting_styles-053-programlisting-002" language="javascript" format="linespecific"><code>let blueNodeStyle = new yfiles.styles.ShapeNodeStyle()\r\nblueNodeStyle.fill = yfiles.view.Fill.CORNFLOWER_BLUE\r\nblueNodeStyle.stroke = yfiles.view.Stroke.TRANSPARENT\r\n\r\ngraph.nodeDefaults.style = blueNodeStyle\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-016",content:"Changing the default style will not affect already created nodes, therefore this line should be\ninserted before the creation of the nodes."},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-017",content:"As a result, we get two blue nodes and two orange nodes:"},{tagname:"figure","class":"image",title:"",id:"getting_started-setting_styles-053-figure-003","float":0,children:[{tagname:"img",src:"assets/gs_node_style_full.c0f313e2.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"getting_started-setting_styles-053-simpara-018",content:"With the additions for setting the node styles, the source code of the example web page is this:"},{tagname:"example",id:"getting_started-setting_styles-053-example-003",title:"The example web page after changing node styles",content:'<pre class="programlisting html" id="getting_started-setting_styles-053-programlisting-003" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n  &lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    let graphComponent = new yfiles.view.GraphComponent("#graphComponent");\r\n    let graph = graphComponent.graph;\r\n\r\n    let blueNodeStyle = new yfiles.styles.ShapeNodeStyle();\r\n    blueNodeStyle.fill = yfiles.view.Fill.CORNFLOWER_BLUE;\r\n    blueNodeStyle.stroke = yfiles.view.Stroke.TRANSPARENT;\r\n\r\n    // newly, interactively created nodes will be blue\r\n    graph.nodeDefaults.style = blueNodeStyle;\r\n\r\n    let node1 = graph.createNode(new yfiles.geometry.Rect(0, 0, 30, 30));\r\n    let node2 = graph.createNode(new yfiles.geometry.Rect(100, 0, 30, 30));\r\n    let node3 = graph.createNode(new yfiles.geometry.Rect(300, 300, 60, 30));\r\n\r\n    let edge1 = graph.createEdge(node1, node2);\r\n    let edge2 = graph.createEdge(node2, node3);\r\n\r\n    let bend1 = graph.addBend(edge2, new yfiles.geometry.Point(330, 15));\r\n\r\n    let portAtNode1 = graph.addPort(node1);\r\n    let portAtNode3 = graph.addPort(node3, yfiles.graph.FreeNodePortLocationModel.NODE_LEFT_ANCHORED);\r\n    let edgeAtPorts = graph.createEdge(portAtNode1, portAtNode3);\r\n\r\n    let ln1 = graph.addLabel(node1, "n1");\r\n    let ln2 = graph.addLabel(node2, "n2");\r\n    let ln3 = graph.addLabel(node3, "n3");\r\n    let le3 = graph.addLabel(edgeAtPorts, "edgeAtPorts");\r\n\r\n    graphComponent.fitGraphBounds();\r\n    graphComponent.inputMode = new yfiles.input.GraphEditorInputMode();\r\n\r\n    // create a style which draws a node as a geometric shape with a fill and a transparent border color\r\n    let orangeNodeStyle = new yfiles.styles.ShapeNodeStyle({\r\n      shape: yfiles.styles.ShapeNodeShape.RECTANGLE,\r\n      fill: yfiles.view.Fill.ORANGE,\r\n      stroke: yfiles.view.Stroke.TRANSPARENT\r\n    });\r\n\r\n    // change the style of an already created node\r\n    graph.setStyle(node3, orangeNodeStyle);\r\n\r\n    // set a custom style at node creation\r\n    let node4 = graph.createNode(new yfiles.geometry.Rect(200, 80, 60, 30), orangeNodeStyle);\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'}]},{tagname:"section",id:"getting_started-placing_elements",title:"Placing Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"getting_started-placing_elements-054-simpara-001",content:'In this section we will learn how to explicitly place individual graph elements at certain locations.\nAll details about placing graph elements are provided in section <a href="#/dguide/view_item-layout">Item Layout</a>.'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_elements-054-simpara-002",content:'The outstanding automatic graph layout features of yFiles for HTML are discussed later in section\n<a href="#/dguide/getting_started-layout">Automatic Graph Layout</a>.'},{tagname:"para","class":"dguide-para note",id:"getting_started-placing_elements-054-note-001",content:'<p id="getting_started-placing_elements-054-simpara-003">A node’s geometry, its <span class="def">layout</span>, is described by a rectangle which defines the position and size of the node.</p><p id="getting_started-placing_elements-054-simpara-004">An edge has no information about its geometry by itself. Its path is defined by the location of its\nsource and target ports and the number and location of its bends.</p><p id="getting_started-placing_elements-054-simpara-005">A label’s geometry is described by a so-called label model parameter which usually defines its position\nrelative to the label’s owner, see also section <a href="#/dguide/view_item-layout_labels">Labels</a>. Similarly, a port’s position\nis described by a so-called port location model parameter (see section <a href="#/dguide/view_item-layout_ports">Ports</a>).</p>'},{tagname:"section",id:"getting_started-placing_nodes",title:"Placing Nodes",children:[{tagname:"para","class":"dguide-para",id:"getting_started-placing_nodes-055-simpara-001",content:'A node’s size and location — its <span class="def">layout</span> or bounding box — is defined by <span class="api">INode</span>’s\n<span class="api">layout</span>, which represents a rectangle.'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_nodes-055-simpara-002",content:'With regards to the node layout, there are three different ways of specifying the node layout\nwhen using the <api-link id="getting_started-placing_nodes-055-api-link-001" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode" data-type="yfiles.graph.IGraph"></api-link> method:'},{tagname:"para",content:'<dl id="getting_started-placing_nodes-055-variablelist-001"><dt id="getting_started-placing_nodes-055-term-001"><api-link id="getting_started-placing_nodes-055-api-link-002" data-member="createNodeAt(yfiles.geometry.Point,yfiles.styles.INodeStyle,Object)" data-text="IGraph.createNodeAt" data-type="yfiles.graph.IGraph"></api-link>(point)</dt><dd id="getting_started-placing_nodes-055-listitem-001"><p id="getting_started-placing_nodes-055-simpara-003">Creates a node at the provided location with the\n<a href="#/dguide/graph_model-item_defaults">default size</a>. Note that the point specifies\nthe location of the center of the node, not the top left corner.</p></dd><dt id="getting_started-placing_nodes-055-term-002"><api-link id="getting_started-placing_nodes-055-api-link-003" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="IGraph.createNode" data-type="yfiles.graph.IGraph"></api-link>()</dt><dd id="getting_started-placing_nodes-055-listitem-002"><p id="getting_started-placing_nodes-055-simpara-004">Creates a node at the\ndefault location (0,0) with the <a href="#/dguide/graph_model-item_defaults">default size</a>. This is mainly useful\nin combination with an automatic layout which calculates better locations for nodes.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_nodes-055-simpara-005",content:"To change the location or size of existing nodes, you can use the following methods:"},{tagname:"para",content:'<dl id="getting_started-placing_nodes-055-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="getting_started-placing_nodes-055-term-003"><api-link id="getting_started-placing_nodes-055-api-link-004" data-member="setNodeCenter(yfiles.graph.INode,yfiles.geometry.Point)" data-text="IGraph.setNodeCenter(INode, Point)" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="getting_started-placing_nodes-055-listitem-003">\n<p id="getting_started-placing_nodes-055-simpara-006">Sets the center of the provided node to the provided location.</p>\n</dd>\n<dt id="getting_started-placing_nodes-055-term-004"><api-link id="getting_started-placing_nodes-055-api-link-005" data-member="setNodeLayout(yfiles.graph.INode,yfiles.geometry.Rect)" data-text="IGraph.setNodeLayout(INode, Rect)" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="getting_started-placing_nodes-055-listitem-004">\n<p id="getting_started-placing_nodes-055-simpara-007">Sets the location and size of the provided node to the provided rectangle.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"getting_started-placing_bends",title:"Placing Bends",children:[{tagname:"para","class":"dguide-para",id:"getting_started-placing_bends-056-simpara-001",content:'A bend’s location is defined by <span class="api">IBend</span>’s <code>Location</code> property as a point with absolute coordinates.'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_bends-056-simpara-002",content:"The bend location can be set"},{tagname:"para",content:'<ul id="getting_started-placing_bends-056-itemizedlist-001"><li id="getting_started-placing_bends-056-listitem-001"><p id="getting_started-placing_bends-056-simpara-003">for a new bend by providing its initial absolute coordinates to\n<api-link id="getting_started-placing_bends-056-api-link-001" data-member="addBend(yfiles.graph.IEdge,yfiles.geometry.Point,number)" data-text="IGraph.addBend(edge:&#xA0;IEdge, location:&#xA0;Point, index:&#xA0;number):&#xA0;IBend" data-type="yfiles.graph.IGraph"></api-link></p></li><li id="getting_started-placing_bends-056-listitem-002"><p id="getting_started-placing_bends-056-simpara-004">for an existing bend by providing its new absolute coordinates to\n<api-link id="getting_started-placing_bends-056-api-link-002" data-member="setBendLocation(yfiles.graph.IBend,yfiles.geometry.Point)" data-text="IGraph.setBendLocation(bend:&#xA0;IBend, location:&#xA0;Point):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></p></li></ul>'}]},{tagname:"section",id:"getting_started-placing_labels",title:"Placing Labels",children:[{tagname:"para","class":"dguide-para",id:"getting_started-placing_labels-057-simpara-001",content:'Usually, the location of a label is not specified by coordinates. Instead, its location is defined\nrelative to its owner element with the help of a <span class="def">label model parameter</span>.\nDifferent label model parameters and their usage is discussed thoroughly in section <a href="#/dguide/view_item-layout_labels">Labels</a>.'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_labels-057-simpara-002",content:"Label model parameters can be set"},{tagname:"para",content:'<ul id="getting_started-placing_labels-057-itemizedlist-001"><li id="getting_started-placing_labels-057-listitem-001"><p id="getting_started-placing_labels-057-simpara-003">for a new label by providing a label model parameter to\n<api-link id="getting_started-placing_labels-057-api-link-001" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="IGraph.addLabel(ILabelOwner, string, ILabelModelParameter, ILabelStyle, Size, Object)" data-type="yfiles.graph.IGraph"></api-link>.</p></li><li id="getting_started-placing_labels-057-listitem-002"><p id="getting_started-placing_labels-057-simpara-004">for an existing label by providing a label model parameter to\n<api-link id="getting_started-placing_labels-057-api-link-002" data-member="setLabelLayoutParameter(yfiles.graph.ILabel,yfiles.graph.ILabelModelParameter)" data-text="IGraph.setLabelLayoutParameter(ILabel, ILabelModelParameter)" data-type="yfiles.graph.IGraph"></api-link>.</p></li><li id="getting_started-placing_labels-057-listitem-003"><p id="getting_started-placing_labels-057-simpara-005">by changing the defaults. Note that the defaults for labels, modeled by <api-link id="getting_started-placing_labels-057-api-link-003" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link>, are not\nprovided as property of <span class="api">IGraph</span> but as property of the node defaults and edge defaults.</p></li></ul>'}]},{tagname:"section",id:"getting_started-placing_ports",title:"Placing Ports",children:[{tagname:"para","class":"dguide-para",id:"getting_started-placing_ports-058-simpara-001",content:'Similar to labels, ports are also typically placed relative to their owner, and their location is determined\nby a <span class="def">port location model parameter</span>.\nDifferent port location parameters and their usage is discussed thoroughly in section <a href="#/dguide/view_item-layout_ports">Ports</a>.'},{tagname:"para","class":"dguide-para",id:"getting_started-placing_ports-058-simpara-002",content:"Port location model parameters can be set"},{tagname:"para",content:'<ul id="getting_started-placing_ports-058-itemizedlist-001"><li id="getting_started-placing_ports-058-listitem-001"><p id="getting_started-placing_ports-058-simpara-003">for a new node by providing a port location model parameter to\n<api-link id="getting_started-placing_ports-058-api-link-001" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="IGraph.addPort(IPortOwner, IPortLocationModelParameter, IPortStyle, Object)" data-type="yfiles.graph.IGraph"></api-link>.</p></li><li id="getting_started-placing_ports-058-listitem-002"><p id="getting_started-placing_ports-058-simpara-004">for an existing port by providing a port location model parameter to\n<api-link id="getting_started-placing_ports-058-api-link-002" data-member="setPortLocationParameter(yfiles.graph.IPort,yfiles.graph.IPortLocationModelParameter)" data-text="IGraph.setPortLocationParameter(IPort, IPortLocationModelParameter)" data-type="yfiles.graph.IGraph"></api-link>.</p></li><li id="getting_started-placing_ports-058-listitem-003"><p id="getting_started-placing_ports-058-simpara-005">by changing the defaults. Note that the defaults for ports, modeled by <api-link id="getting_started-placing_ports-058-api-link-003" data-member="" data-text="IPortDefaults" data-type="yfiles.graph.IPortDefaults"></api-link>, are not\nprovided as property of <span class="api">IGraph</span> but as property of the node defaults and edge defaults.</p></li></ul>'}]}]},{tagname:"section",id:"getting_started-user_interaction",title:"User Interaction",children:[{tagname:"para","class":"dguide-para",id:"getting_started-user_interaction-059-simpara-001",content:'In this section we will learn how to enable the default user interaction capabilities.\nAlmost every aspect of user interacting can be configured and customized to fit your needs.\nThis is discussed thoroughly in the chapters <a href="#/dguide/interaction">User Interaction</a> and <a href="#/dguide/customizing_interaction">Customizing User Interaction</a>.'},{tagname:"para","class":"dguide-para note",id:"getting_started-user_interaction-059-note-001",content:'<p id="getting_started-user_interaction-059-simpara-002">User interaction is enabled by setting an <span class="def">input mode</span> to the <span class="api">GraphComponent</span>.\nyFiles for HTML provides a comprehensive input mode which enables the most common tasks for\nediting graphs, the <api-link id="getting_started-user_interaction-059-api-link-001" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link>.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-user_interaction-059-simpara-003",content:"If you already had a look at the demos that come with yFiles for HTML, you may have noticed that often the user can drag nodes around\nwith the mouse, and can add and remove nodes, edges, and bends. If you tried to click and drag in the example web page,\nnothing happened. This will change now."},{tagname:"para","class":"dguide-para",id:"getting_started-user_interaction-059-simpara-004",content:'Create a new instance of the <api-link id="getting_started-user_interaction-059-api-link-002" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> class and set it as\nthe <span class="api">GraphComponent</span>’s input mode using the <api-link id="getting_started-user_interaction-059-api-link-003" data-member="inputMode" data-text="inputMode" data-type="yfiles.view.CanvasComponent"></api-link> property.\nIn the example web page, add the following line after the instantiation of the <span class="api">GraphComponent</span>:'},{tagname:"example",id:"getting_started-user_interaction-059-example-001",title:"Enabling default user interaction features",content:'<pre class="programlisting javascript" id="getting_started-user_interaction-059-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.inputMode = new yfiles.input.GraphEditorInputMode()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-user_interaction-059-simpara-005",content:'In yFiles for HTML, interaction is handled by <span class="def">input modes</span>.\nClass <api-link id="getting_started-user_interaction-059-api-link-004" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> is the main input mode and already configured to\nhandle the most common tasks, such as moving, deleting, creating, and resizing graph elements.\nAlthough there are much more input modes, these are mostly tailored for specific tasks and often\nautomatically invoked by <span class="api">GraphEditorInputMode</span> when needed.'},{tagname:"para","class":"dguide-para",id:"getting_started-user_interaction-059-simpara-006",content:'Adding <span class="api">GraphEditorInputMode</span> enables the following features and more:'},{tagname:"para",content:'<ul id="getting_started-user_interaction-059-itemizedlist-001"><li id="getting_started-user_interaction-059-listitem-001"><p id="getting_started-user_interaction-059-simpara-007">Selecting a single element by just clicking it. Hold <kbd>Alt</kbd> to step through\ndifferent elements at the same location, e.g. a node label inside its owner.\nTo select multiple elements, either extend an existing selection by pressing <kbd>Ctrl</kbd> while clicking,\nor drag a selection rectangle over all graph elements that you want in your selection.\n<kbd>Ctrl</kbd>+<kbd>A</kbd> selects all elements.</p></li><li id="getting_started-user_interaction-059-listitem-002"><p id="getting_started-user_interaction-059-simpara-008">Resizing nodes. Drag one of the handles that appear when a node is selected.</p></li><li id="getting_started-user_interaction-059-listitem-003"><p id="getting_started-user_interaction-059-simpara-009">Moving a node or a bend by dragging it when it is selected.</p></li><li id="getting_started-user_interaction-059-listitem-004"><p id="getting_started-user_interaction-059-simpara-010">Creating an edge. Start dragging anywhere on an unselected source node and stop dragging on the target node.</p></li><li id="getting_started-user_interaction-059-listitem-005"><p id="getting_started-user_interaction-059-simpara-011">Creating a bend in an edge. Click and drag the edge at the desired bend location.</p></li><li id="getting_started-user_interaction-059-listitem-006"><p id="getting_started-user_interaction-059-simpara-012">Creating or editing a label. Press <kbd>F2</kbd> when the label’s owner is selected.</p></li><li id="getting_started-user_interaction-059-listitem-007"><p id="getting_started-user_interaction-059-simpara-013">Moving a label. Select it and drag it to the desired location. Note that the valid positions are restricted\nby the label model of a label. These positions show up as empty rectangles when you start dragging the label.\nYou can only move a label to one of these positions.</p></li></ul>'}]},{tagname:"section",id:"getting_started-layout",title:"Automatic Graph Layout",children:[{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-001",content:'In this section we will learn how to automatically arrange the graph with one of the automatic graph layout\nstyles provided by yFiles for HTML.\nThe chapter <a href="#/dguide/layout">Automatic Graph Layout</a> introduces all layout styles of yFiles for HTML and thoroughly explains their configuration options.'},{tagname:"para","class":"dguide-para note",id:"getting_started-layout-060-note-001",content:'<p id="getting_started-layout-060-simpara-002">yFiles for HTML can automatically arrange your diagram in all major graph layout styles including hierarchical,\norganic, tree, orthogonal, and circular style. <api-link id="getting_started-layout-060-api-link-001" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> and <api-link id="getting_started-layout-060-api-link-002" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link> provide\nconvenient methods to apply these algorithms to the graph in a single method call.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-003",content:"An important part of diagram creation is the arrangement of its elements in a way that not only presents the\nelements in a clear and easily readable way but also emphasizes their structural characteristics like clustering or a\nflow direction. yFiles for HTML provides a wide range of different layout styles, suitable for different\napplication fields."},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-004",content:"The most important layout styles are shown below:"},{tagname:"figure","class":"image",title:"",id:"getting_started-layout-060-figure-001","float":0,children:[{tagname:"img",src:"assets/hierarchical_sample_entity.ffaba429.gif",alt:"",title:'<para class="dguide-para">Hierarchical</para>'},{tagname:"img",src:"assets/organic_sample1-thumb.6c32c9ca.jpg",alt:"",title:'<para class="dguide-para">Organic</para>'},{tagname:"img",src:"assets/intro_tree_01.40e12118.gif",alt:"",title:'<para class="dguide-para">Tree</para>'},{tagname:"img",src:"assets/orthogonal_sample_automaton.f6dd7c3f.gif",alt:"",title:'<para class="dguide-para">Orthogonal</para>'}]},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-005",content:'Besides these layout styles yFiles for HTML offers <a href="#/dguide/layout-layout_styles">further layout algorithms</a> as well as\nalgorithms to <a href="#/dguide/layout-edge_routing_styles">route edges</a> and <a href="#/dguide/label_placement">place labels</a> without\naltering the node layout.'},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-006",content:'In this example we use the a force-directed layout, implemented by the\n<api-link id="getting_started-layout-060-api-link-003" data-member="" data-text="OrganicLayout" data-type="yfiles.organic.OrganicLayout"></api-link> class, and alter its default settings slightly:'},{tagname:"example",id:"getting_started-layout-060-example-001",title:"Initialization of an organic layout",content:'<pre class="programlisting javascript" id="getting_started-layout-060-programlisting-001" language="javascript" format="linespecific"><code>let layout = new yfiles.organic.OrganicLayout()\r\nlayout.considerNodeSizes = true\r\nlayout.minimumNodeDistance = 50\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-007",content:"The easiest way to automatically layout a diagram is to use one of the following methods:"},{tagname:"para",content:'<ul id="getting_started-layout-060-itemizedlist-001"><li id="getting_started-layout-060-listitem-001"><p id="getting_started-layout-060-simpara-008"><api-link id="getting_started-layout-060-api-link-004" data-member="applyLayout(yfiles.layout.ILayoutAlgorithm,yfiles.layout.LayoutData)" data-text="applyLayout(ILayoutAlgorithm, LayoutData)" data-type="yfiles.graph.IGraph"></api-link>\nworks on an <span class="api">IGraph</span> and applies the layout in a blocking call. When the method returns all elements in the\ngraph are already arranged at their final coordinates.</p></li><li id="getting_started-layout-060-listitem-002"><p id="getting_started-layout-060-simpara-009"><api-link id="getting_started-layout-060-api-link-005" data-member="morphLayout(yfiles.layout.ILayoutAlgorithm,yfiles.lang.TimeSpan,yfiles.layout.LayoutData)" data-text="morphLayout(ILayoutAlgorithm, TimeSpan, LayoutData)" data-type="yfiles.view.GraphComponent"></api-link>:\nworks on a <span class="api">GraphComponent</span> (to be precise, the <span class="api">GraphComponent</span>’s graph) and offers some more\nfeatures: The new layout is calculated in a non-blocking way in a separate thread,\n(optionally) applied in an animated fashion,\nand the final arrangement is centered in the <span class="api">GraphComponent</span> similar to the\n<api-link id="getting_started-layout-060-api-link-006" data-member="fitGraphBounds(yfiles.geometry.Insets)" data-text="fitGraphBounds" data-type="yfiles.view.GraphComponent"></api-link> method.</p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"getting_started-layout-060-note-002",content:'<p id="getting_started-layout-060-simpara-010">To customize the animation from old to new layout, use the <api-link id="getting_started-layout-060-api-link-007" data-member="" data-text="LayoutExecutor" data-type="yfiles.layout.LayoutExecutor"></api-link> class\ninstead of <span class="api">morphLayout</span>. See section <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>\nfor details.</p>'},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-011",content:"Add the following line of code at the end of the constructor to layout the example diagram once during\ninitialization of the web app."},{tagname:"example",id:"getting_started-layout-060-example-002",title:"Calculating and applying an automatic layout",content:'<pre class="programlisting javascript" id="getting_started-layout-060-programlisting-002" language="javascript" format="linespecific"><code>graphComponent\r\n  .morphLayout(layout)\r\n  .then(() => alert(\'Done!\'))\r\n  .catch(e => alert(\'An error occurred during layout \' + e))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-layout-060-simpara-012",content:'In the next subsection, we create a toolbar button that calculates a layout on demand. Skip to the\nnext section <a href="#/dguide/getting_started-io">Loading and Saving Graphs</a> if you don’t need this.'},{tagname:"section",id:"_adding_a_layout_button",title:"Adding a Layout Button",children:[{tagname:"para","class":"dguide-para",id:"_adding_a_layout_button-061-simpara-001",content:"In this section we will provide a simple HTML button interface to the web page which executes the\nautomatic layout."},{tagname:"para","class":"dguide-para",id:"_adding_a_layout_button-061-simpara-002",content:'First, we add a button to the page.\nSince <span class="api">morphLayout</span>\ncalculates and morphs the layout asynchronously,\nwe disable the button before the calculation starts and re-enable it after the layout (and the subsequent\nanimation) has finished. Invoking code after the layout — that’s where return type <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">Promise</a> of\n<span class="api">morphLayout</span>\nmethod comes in handy:'},{tagname:"example",id:"_adding_a_layout_button-061-example-001",title:"An procedure for applying an automatic arrangement",content:"<pre class=\"programlisting javascript\" id=\"_adding_a_layout_button-061-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// perform layout on button click\r\nlet layoutButton = document.querySelector('#layoutButton')\r\nlayoutButton.addEventListener('click', () => {\r\n  // disable and reenable the button before and after morphing the layout\r\n  layoutButton.setAttribute('disabled', 'disabled')\r\n  graphComponent\r\n    .morphLayout(layout)\r\n    .then(() => layoutButton.removeAttribute('disabled'))\r\n    .catch(e => {\r\n      layoutButton.removeAttribute('disabled')\r\n      alert('An error occurred during layout ' + e)\r\n    })\r\n})\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"_adding_a_layout_button-061-simpara-003",content:"Then, we add this code to the button and get the following web page:"},{tagname:"example",id:"_adding_a_layout_button-061-example-002",title:"The example web page with the layout button",content:'<pre class="programlisting html" id="_adding_a_layout_button-061-programlisting-002" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n  &lt;button id="layoutButton">Layout&lt;/button>\r\n  &lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    let graphComponent = new yfiles.view.GraphComponent("#graphComponent");\r\n    let graph = graphComponent.graph;\r\n\r\n    let node1 = graph.createNode(new yfiles.geometry.Rect(0, 0, 30, 30));\r\n    let node2 = graph.createNode(new yfiles.geometry.Rect(100, 0, 30, 30));\r\n    let node3 = graph.createNode(new yfiles.geometry.Rect(300, 300, 60, 30));\r\n\r\n    let edge1 = graph.createEdge(node1, node2);\r\n    let edge2 = graph.createEdge(node2, node3);\r\n\r\n    let bend1 = graph.addBend(edge2, new yfiles.geometry.Point(330, 15));\r\n\r\n    let portAtNode1 = graph.addPort(node1);\r\n    let portAtNode3 = graph.addPort(node3, yfiles.graph.FreeNodePortLocationModel.NODE_LEFT_ANCHORED);\r\n    let edgeAtPorts = graph.createEdge(portAtNode1, portAtNode3);\r\n\r\n    let ln1 = graph.addLabel(node1, "n1");\r\n    let ln2 = graph.addLabel(node2, "n2");\r\n    let ln3 = graph.addLabel(node3, "n3");\r\n    let le3 = graph.addLabel(edgeAtPorts, "edgeAtPorts");\r\n\r\n    graphComponent.fitGraphBounds();\r\n    graphComponent.inputMode = new yfiles.input.GraphEditorInputMode();\r\n\r\n    let layout = new yfiles.organic.OrganicLayout();\r\n    layout.considerNodeSizes = true;\r\n    layout.minimumNodeDistance = 50;\r\n\r\n    // run layout immediately\r\n    graphComponent.morphLayout(layout)\r\n      .then(() => alert("Done!"))\r\n      .catch((e) => alert("An error occurred during layout " + e));\r\n\r\n    // perform layout on button click\r\n    let layoutButton = document.querySelector("#layoutButton");\r\n    layoutButton.addEventListener("click", () => {\r\n      // disable and reenable the button before and after morphing the layout\r\n      layoutButton.setAttribute(\'disabled\', \'disabled\');\r\n      graphComponent.morphLayout(layout)\r\n        .then(() => layoutButton.removeAttribute(\'disabled\'))\r\n        .catch((e) => {\r\n          layoutButton.removeAttribute(\'disabled\');\r\n          alert("An error occurred during layout " + e);\r\n        });\r\n    });\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'}]}]},{tagname:"section",id:"getting_started-io",title:"Loading and Saving Graphs",children:[{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-001",content:'In this section we will learn how to load and save graphs.\nDetails of loading and saving as well as image export and printing are discussed thoroughly in the chapter <a href="#/dguide/io">Graph I/O and Printing</a>.'},{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-002",content:"yFiles for HTML has built-in support for saving and loading diagrams in the GraphML format.\nGraphML is an XML-based format that stores all aspects of a diagram, especially the graph elements,\ntheir appearance, and optionally any custom data."},{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-003",content:'Before you can interactively save and load the diagram shown in a <span class="api">GraphComponent</span>, these file operations\nmust be enabled:'},{tagname:"example",id:"getting_started-io-062-example-001",title:"Enabling loading and saving",content:'<pre class="programlisting javascript" id="getting_started-io-062-programlisting-001" language="javascript" format="linespecific"><code>let support = new yfiles.graphml.GraphMLSupport(graphComponent)\r\nsupport.storageLocation = yfiles.graphml.StorageLocation.FILE_SYSTEM\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-004",content:"Once file operations have been enabled on the graph control, the following commands can be used:"},{tagname:"table","class":"",id:"getting_started-io-062-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>File operation commands</caption><colgroup><col style="width:17%;"><col style="width:67%;"><col style="width:17%;"></colgroup><thead id="getting_started-io-062-thead-001"><tr id="getting_started-io-062-row-001"><th id="getting_started-io-062-entry-001" align="left" valign="top">\nCommand\n</th><th id="getting_started-io-062-entry-002" align="left" valign="top">\nDescription\n</th><th id="getting_started-io-062-entry-003" align="left" valign="top">\nKeyboard Shortcut\n</th></tr></thead><tbody id="getting_started-io-062-tbody-001"><tr id="getting_started-io-062-row-002"><td id="getting_started-io-062-entry-004" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-005"><api-link id="getting_started-io-062-api-link-001" data-member="SAVE" data-text="SAVE" data-type="yfiles.input.ICommand"></api-link></para></td><td id="getting_started-io-062-entry-005" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-006">Possibly opens a file dialog that lets the user choose where to save the graph.</para></td><td id="getting_started-io-062-entry-006" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-007"><kbd>Ctrl</kbd>+<kbd>S</kbd></para></td></tr><tr id="getting_started-io-062-row-003"><td id="getting_started-io-062-entry-007" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-008"><api-link id="getting_started-io-062-api-link-002" data-member="OPEN" data-text="OPEN" data-type="yfiles.input.ICommand"></api-link></para></td><td id="getting_started-io-062-entry-008" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-009">Shows an open file dialog and loads the chosen file into the <span class="api">GraphComponent</span>.</para></td><td id="getting_started-io-062-entry-009" align="left" valign="top"><para class="dguide-para" id="getting_started-io-062-simpara-010"><kbd>Ctrl</kbd>+<kbd>O</kbd></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-011",content:'Commands are discussed thoroughly in chapter <a href="#/dguide/customizing_concepts_commands">Commands</a>. For now, it should be\nsufficient to know that you can easily simply <code>execute</code> a command:'},{tagname:"example",id:"getting_started-io-062-example-002",title:"Buttons for loading and saving",content:"<pre class=\"programlisting javascript\" id=\"getting_started-io-062-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>// execute open and save commands on button click\r\ndocument.querySelector('#openButton').addEventListener('click', () => {\r\n  yfiles.input.ICommand.OPEN.execute({ target: graphComponent })\r\n})\r\ndocument.querySelector('#saveButton').addEventListener('click', () => {\r\n  yfiles.input.ICommand.SAVE.execute({ target: graphComponent })\r\n})\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"getting_started-io-062-simpara-012",content:"With these two code snippets, we get the final example web page:"},{tagname:"example",id:"getting_started-io-062-example-003",title:"The final example web page",content:'<pre class="programlisting html" id="getting_started-io-062-programlisting-003" language="html" format="linespecific"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n&lt;head>\r\n  &lt;meta charset="utf-8">\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\r\n  &lt;title>yFiles for HTML Sample Web App&lt;/title>\r\n  &lt;link type="text/css" rel="stylesheet" href="./lib/yfiles.css">\r\n  &lt;!-- supply some sane defaults for the graph component and page -->\r\n  &lt;style>html, body, #graphComponent { width: 100%; height: 100%; padding: 0; margin: 0; }&lt;/style>\r\n  &lt;!-- enable runtime type information for debugging (this is optional) -->\r\n  &lt;script src="./ide-support/yfiles-typeinfo.js">&lt;/script>\r\n&lt;/head>\r\n&lt;body>\r\n  &lt;button id="openButton">Open&lt;/button>\r\n  &lt;button id="saveButton">Save&lt;/button>\r\n  &lt;button id="layoutButton">Layout&lt;/button>\r\n  &lt;div id="graphComponent">&lt;/div>\r\n  &lt;script src="./demos/resources/require.js">&lt;/script>\r\n  &lt;script>\r\n  require.config({baseUrl: \'./lib/umd/\'});\r\n  require([\'yfiles/complete\', \'./demos/resources/license.js\'], (yfiles) => {\r\n    let graphComponent = new yfiles.view.GraphComponent("#graphComponent");\r\n    let graph = graphComponent.graph;\r\n\r\n    let node1 = graph.createNode(new yfiles.geometry.Rect(0, 0, 30, 30));\r\n    let node2 = graph.createNode(new yfiles.geometry.Rect(100, 0, 30, 30));\r\n    let node3 = graph.createNode(new yfiles.geometry.Rect(300, 300, 60, 30));\r\n\r\n    let edge1 = graph.createEdge(node1, node2);\r\n    let edge2 = graph.createEdge(node2, node3);\r\n\r\n    let bend1 = graph.addBend(edge2, new yfiles.geometry.Point(330, 15));\r\n\r\n    let portAtNode1 = graph.addPort(node1);\r\n    let portAtNode3 = graph.addPort(node3, yfiles.graph.FreeNodePortLocationModel.NODE_LEFT_ANCHORED);\r\n    let edgeAtPorts = graph.createEdge(portAtNode1, portAtNode3);\r\n\r\n    let ln1 = graph.addLabel(node1, "n1");\r\n    let ln2 = graph.addLabel(node2, "n2");\r\n    let ln3 = graph.addLabel(node3, "n3");\r\n    let le3 = graph.addLabel(edgeAtPorts, "edgeAtPorts");\r\n\r\n    graphComponent.fitGraphBounds();\r\n    graphComponent.inputMode = new yfiles.input.GraphEditorInputMode();\r\n\r\n    let layout = new yfiles.organic.OrganicLayout();\r\n    layout.considerNodeSizes = true;\r\n    layout.minimumNodeDistance = 50;\r\n\r\n    // perform layout on button click\r\n    let layoutButton = document.querySelector("#layoutButton");\r\n    layoutButton.addEventListener("click", () => {\r\n      layoutButton.setAttribute(\'disabled\', \'disabled\');\r\n      graphComponent.morphLayout(layout)\r\n          .then(() => layoutButton.removeAttribute(\'disabled\'))\r\n          .catch((e) => {\r\n            layoutButton.removeAttribute(\'disabled\');\r\n            alert("An error occurred during layout " + e);\r\n          });\r\n    });\r\n\r\n    // get a helper class that deals with the UI for loading and saving\r\n    let support = new yfiles.graphml.GraphMLSupport(graphComponent);\r\n    support.storageLocation = yfiles.graphml.StorageLocation.FILE_SYSTEM;\r\n\r\n    // and bind the commands to buttons\r\n    document.querySelector("#openButton").addEventListener("click", () => {\r\n      yfiles.input.ICommand.OPEN.execute({target: graphComponent});\r\n    });\r\n    document.querySelector("#saveButton").addEventListener("click", () => {\r\n      yfiles.input.ICommand.SAVE.execute({target: graphComponent});\r\n    });\r\n  });\r\n  &lt;/script>\r\n&lt;/body>\r\n&lt;/html>\n</code></pre>'}]}]},{tagname:"section",id:"demos",title:"Demos and Tutorials",children:[{tagname:"para","class":"dguide-para",id:"demos-004-simpara-001",content:"yFiles for HTML comes with a large number of source code programming samples to help you getting started."},{tagname:"para",content:'<ul id="demos-004-itemizedlist-001"><li id="demos-004-listitem-001"><p id="demos-004-simpara-002"><a href="../../demos/README.html" target="_blank">The demo applications</a> present the library’s range\nof features in concise, self-contained JavaScript applications.</p></li><li id="demos-004-listitem-002"><p id="demos-004-simpara-003"><a href="../../demos/01-tutorial-getting-started/README.html" target="_blank">The Getting Started tutorial</a>\nis a step-by-step introduction to the concepts and the features of yFiles for HTML.</p></li><li id="demos-004-listitem-003"><p id="demos-004-simpara-004"><a href="../../demos/02-tutorial-custom-styles/README.html" target="_blank">The Custom Styles tutorial</a>\nis a step-by-step introduction to customizing the visual representation of graph elements.\nyFiles for HTML already provides a number of styles for typical visualizations.\nFollow this tutorial if you need to create a custom style that perfectly fits your needs.</p></li><li id="demos-004-listitem-004"><p id="demos-004-simpara-005"><a href="../../demos/03-tutorial-application-features/README.html" target="_blank">The Application Features tutorial</a>\ncovers a broad range of topics for building a yFiles for HTML application, including\nbuilding graphs from JSON data, drag and drop, tooltips, snapping (guide lines), and more.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"demos-004-simpara-006",content:"In the course of this Developer’s Guide, many sections will contain links to\ncorresponding demo applications and tutorials."},{tagname:"para","class":"dguide-para note",id:"demos-004-note-001",content:'<p id="demos-004-simpara-007">The source code of the demos and tutorials uses ECMAScript 6 (ES6) syntax. This means that they\nwill work out-of-the-box in modern browsers, but will require transpilation in order to run in older\nbrowsers.</p><p id="demos-004-simpara-008">Also, the yFiles for HTML library uses ECMAScript 5 (ES5) features that are not supported in some older browsers.\nTherefore, an additional shim file has to be referenced in order to make these features available.</p><p id="demos-004-simpara-009">The yFiles for HTML package contains a convenient npm/Grunt script that will transpile all ES6 demos\nto ES5, and reference an ES5 polyfill.</p><p id="demos-004-simpara-010">To try the demos and tutorials in older browsers, navigate to the <code>deployment</code> folder, and\nrun the following commands:</p><pre class="programlisting JavaScript" id="demos-004-programlisting-001" language="JavaScript" linenumbering="unnumbered" format="linespecific"><code>npm install\nnpm run-script demos-es5</code></pre><p id="demos-004-simpara-011">This will create an additional top-level <code>demos-es5</code> folder containing the transpiled demos.</p>'},{tagname:"para","class":"dguide-para",id:"demos-004-simpara-012",content:'Most of the demos and tutorials can be run by opening their respective\n<code>index.html</code> from the file system. However, due to the strict cross domain\npolicies in both <strong id="demos-004-emphasis-001" class="bold" role="bold">Internet Explorer</strong> and <strong id="demos-004-emphasis-002" class="bold" role="bold">Google Chrome</strong>, demos that load GraphML\nfiles do not work correctly when launched from the file system. Therefore, it is\nrecommended to access the demos through a <a href="#/dguide/demos-server">Web server</a>. <strong id="demos-004-emphasis-003" class="bold" role="bold">Firefox</strong>\nhas a more tolerant cross domain policy with which the demos should run well from\na file system location.'},{tagname:"para","class":"dguide-para tip",id:"demos-004-tip-001",content:'<p id="demos-004-simpara-013">Google Chrome can also be instructed to use a more tolerant policy by starting\n<code>chrome.exe</code> with the <code>--allow-file-access-from-files</code> command line option.</p>'},{tagname:"para","class":"dguide-para",id:"demos-004-simpara-014",content:'In addition, all demos are <a href="http://live.yworks.com/yfiles-for-html/" target="_blank">available online</a>.'},{tagname:"para","class":"dguide-para",id:"demos-004-simpara-015",content:'Many modern IDEs come with a built in server support. Therefore creating a project\nfor the programming samples in the IDE and running them from the\nIDE is often times more convenient than using the demo server. Please follow\nthe instructions in the <a href="#/dguide/getting_started-ide">Setting up you Development Environment</a>\nchapter on how to set up your IDE for the programming samples.'},{tagname:"para","class":"dguide-para tip",id:"demos-004-tip-002",content:'<p id="demos-004-simpara-016">We recommend to create a project for the programming samples or even include them in your\nmain development project.\nBesides the obvious benefit of being able to run the samples without cross domain\nissues, you’ll be able to easily find, and learn from, demo usages of\nthe yFiles for HTML API you want to use.</p>'},{tagname:"para","class":"dguide-para",id:"demos-004-simpara-017",content:'The remainder of this chapter describes how to use the <a href="#/dguide/demos-server">demo server</a>\nthat comes with yFiles for HTML to avoid cross domain problems.'},{tagname:"section",id:"demos-server",title:"Demo Server",children:[{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-001",content:"Due to the strict cross domain policies of some browsers, some demos do not work\ncorrectly when launched from the file system in these browsers. In particular,\nthis applies to all demos that load GraphML files, for example as initial graph."},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-002",content:'Therefore, we recommended to access the demos through a Web server. yFiles for HTML\nincludes a local <a href="https://nodejs.org/" target="_blank">Node.js</a> <a href="http://expressjs.com/" target="_blank">Express</a> server\nwhich can be used to serve the demo applications.'},{tagname:"heading",id:"demos-server-prerequisites",renderas:"sect3",content:"Prerequisites"},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-003",content:'The demo server requires <a href="https://nodejs.org/" target="_blank">Node.js</a> to be installed. If Node.js\nis installed, the command <code>npm</code> should be available in your <code>PATH</code> environment\nvariable.'},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-004",content:'To install Node.js got to <a href="https://nodejs.org/" target="_blank">https://nodejs.org/</a> and download the installer that is\nsuitable for your system.'},{tagname:"heading",id:"demos-server-running",renderas:"sect3",content:"Running the Demo Server"},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-005",content:"To start the demo server, open a command-line interface and run the following\ncommands:"},{tagname:"para",content:'<pre class="programlisting JavaScript" id="demos-server-063-programlisting-001" language="JavaScript" linenumbering="unnumbered" format="linespecific"><code>> cd %YFILES_HTML_DISTRIBUTION_DIR%/demos/demo-server/\n> npm install\n> npm start</code></pre>'},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-006",content:'This installs the necessary dependencies in <code>node_modules</code> and starts the server.\nWhen the server is up and running, its welcome page should open in your browser.\nIf it doesn’t, please direct your browser to <a href="http://localhost:3000/doc/readme/documentation.html" target="_blank">http://localhost:3000/doc/readme/documentation.html</a>.'},{tagname:"para","class":"dguide-para",id:"demos-server-063-simpara-007",content:"To start a demo or tutorial, follow the links in the landing page. Because the\ndemo server serves all application files, they reside in the same domain which\nresolves the cross domain issue that some demos suffer in certain browsers."}]}]},{tagname:"section",id:"class_framework_usage",title:"Working with the yFiles Class Framework",children:[{tagname:"para","class":"dguide-para",id:"class_framework_usage-005-simpara-001",content:"yFiles for HTML comes with its own class framework implementation\nthat provides various utility methods for writing robust JavaScript code.\nIt provides a complete type system including classes, interfaces, basic reflection and meta-programming, and modules\nfor building a namespaced class hierarchy, as well as other utilities."},{tagname:"para","class":"dguide-para",id:"class_framework_usage-005-simpara-002",content:"The framework is built on ECMAScript Level 5 and has been designed to be compatible with and behave similar to the ECMAScript Level 6 <code>class</code>\nkeyword. Apart from a few exceptions you can treat the yFiles for HTML class system as if it had been created using\nECMAScript Level 6 classes."},{tagname:"para","class":"dguide-para note",id:"class_framework_usage-005-note-001",content:'<p id="class_framework_usage-005-simpara-003">There are only very few cases where you will actually need to use the yFiles class framework. The framework should be\n  compatible with all major popular techniques of creating classes and instances. You may use prototypal inheritance,\n  ECMAScript Level 6 classes, TypeScript classes and other techniques that use the same mechanics for inheritance.</p>'},{tagname:"para","class":"dguide-para important",id:"class_framework_usage-005-important-001",content:'<p id="class_framework_usage-005-simpara-004">The public yFiles for HTML API does not play well with the techniques of “hacking the prototype” or “hacking POJO instances”.\n  You cannot expect your code to be correctly called by the framework if you modify the implementation of a public API\n  member using either of these techniques. This does not affect members that you have declared\n  and which you use yourself, of course.</p>'},{tagname:"para","class":"dguide-para",id:"class_framework_usage-005-simpara-005",content:"The API is built around the principles of classes the way most Java and C# developers\nare already comfortable with. These classes are very similar to classes that can be declared using the ECMAScript Level 6\n<code>class</code> keyword and TypeScript. The type system in yFiles for HTML adds to this the concepts of interfaces\nthe way they are know from Java and C# and to a certain degree from TypeScript. Also there is support for\nbuilding enumerations, attribute classes, and structures."},{tagname:"para","class":"dguide-para tip",id:"class_framework_usage-005-tip-001",content:'<p id="class_framework_usage-005-simpara-006">From a developer’s point of view the API feels like a coherent set of classes. The fact that there are other types\n  involved only plays a role when there is the need to do <a href="#/dguide/customizing_concepts">more sophisticated customizations</a>.\n  For an introductory read you may very well skip the remainder of this chapter and come back later once you find\n  that you need to dig deeper into the API and need to apply those more sophisticated customization techniques.</p>'
},{tagname:"section",id:"framework_class_usage",title:"Classes",children:[{tagname:"para","class":"dguide-para",id:"framework_class_usage-064-simpara-001",content:"Classes in yFiles for HTML behave like most developers would expect them to. They have the same semantics that ECMAScript Level 6 classes,\nC# classes, TypeScript classes, and Java classes use.\nClasses in the public API can have a constructor and if they don’t have a public constructor they cannot be\ninstantiated by custom code. Class instances may have instance members like methods, which are just functions on the\nprototype of the class, properties with either or both of setter and getter accessors, as well as simple fields."},{tagname:"example",id:"framework_class_usage-064-example-001",title:"Instance member usage",content:'<pre class="programlisting javascript" id="framework_class_usage-064-programlisting-001" language="javascript" format="linespecific"><code>// call the constructor of the class\r\nlet inputMode = new yfiles.input.GraphEditorInputMode()\r\n// use the instance\r\ngraphComponent.inputMode = inputMode\r\n\r\n// now use functionality available on the instance of the class\r\n\r\n// call methods that are declared on the type of the instance\r\ninputMode.editLabel(label)\r\n// call methods that are declared on the super type of the instance\r\ninputMode.selectAll()\r\n// call methods that are declared on an interface of the instance\r\ninputMode.cancel()\r\n// use properties declared on the type of the instance\r\ninputMode.clickableItems = yfiles.graph.GraphItemTypes.NODE\r\n// use properties that are declared on the super type of the instance\r\ninputMode.allowClipboardOperations = true\r\n// use properties that are defined on an interface of the instance\r\ninputMode.inputModeContext.canvasComponent.zoom = 2\r\n// register event listeners\r\ninputMode.addNodeCreatedListener(() => console.log("Node Created!"))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_class_usage-064-simpara-002",content:"Classes can have static members, too. Static members are available on the class itself."},{tagname:"example",id:"framework_class_usage-064-example-002",title:"Static member usage",content:'<pre class="programlisting javascript" id="framework_class_usage-064-programlisting-002" language="javascript" format="linespecific"><code>// call static methods of a type:\r\nlet greenishColor = yfiles.view.Color.fromArgb(100, 10, 255, 10)\r\n\r\n// access static fields and properties of a type\r\nlet blueColor = yfiles.view.Color.LIGHT_BLUE\r\n\r\n// static fields are not available on the instance\r\nconsole.log(blueColor.LIGHT_BLUE === undefined) // logs true\r\nconsole.log(greenishColor.fromArgb === undefined) // logs true\n</code></pre>'},{tagname:"section",id:"framework_extending_classes",title:"Extending Classes",children:[{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-001",content:"Extending a class from the yFiles for HTML API is straightforward and does not require using the class framework\ninfrastructure. In order to derive a custom subclass from a yFiles for HTML API class, different well-known and\nestablished techniques can be used. Which one works best for you depends on what language level you are targeting and\nwhat tools you are using for authoring your code."},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-002",content:"yFiles for HTML supports these techniques for subclassing as well as all technologies that are based on\nthem:"},{tagname:"para",content:'<ul id="framework_extending_classes-065-itemizedlist-001"><li id="framework_extending_classes-065-listitem-001"><p id="framework_extending_classes-065-simpara-003">ECMAScript Level 6 <code>class</code> keyword style inheritance</p></li><li id="framework_extending_classes-065-listitem-002"><p id="framework_extending_classes-065-simpara-004">TypeScript <code>class</code> keyword inheritance</p></li><li id="framework_extending_classes-065-listitem-003"><p id="framework_extending_classes-065-simpara-005">Using the yFiles for HTML class framework</p></li><li id="framework_extending_classes-065-listitem-004"><p id="framework_extending_classes-065-simpara-006">prototypal inheritance known from ECMAScript Level 5 and older “classy frameworks”</p></li></ul>'},{tagname:"para","class":"dguide-para tip",id:"framework_extending_classes-065-tip-001",content:'<p id="framework_extending_classes-065-simpara-007">We recommend using the <code>class</code> keyword support for concise subclassing code. If your application needs to target ECMAScript Level 5 browser\nimplementations, take a look at the various available source-code transpiler options that let you author code using\nECMAScript Level 6 and run on ECMAScript Level 5-compatible browsers.</p><p id="framework_extending_classes-065-simpara-008">Using ECMAScript Level 6 classes at development time has the advantage that you can run your code without a transpiler step in all\nmodern browsers during development.</p>'},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-009",content:"Extending an existing class using ECMAScript Level 6 <code>class</code> works just as you would expect it to work:"},{tagname:"example",id:"framework_extending_classes-065-example-001",title:"Subclassing using ECMAScript Level 6 class",content:'<pre class="programlisting javascript" id="framework_extending_classes-065-programlisting-001" language="javascript" format="linespecific"><code>class CustomGraphEditorInputMode extends yfiles.input.GraphEditorInputMode {\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  marqueeSelect(marqueeRectangle) {\r\n    if (marqueeRectangle.width > 20) {\r\n      super.marqueeSelect(marqueeRectangle)\r\n    }\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-010",content:"This is almost identical to extending a class using TypeScript’s <code>class</code> keyword:"},{tagname:"example",id:"framework_extending_classes-065-example-002",title:"Subclassing using TypeScript’s class",content:'<pre class="programlisting javascript" id="framework_extending_classes-065-programlisting-002" language="javascript" format="linespecific"><code>import { GraphEditorInputMode } from \'yfiles/view-editor\';\r\nimport { Rect } from \'yfiles/view-component\';\r\n\r\nclass CustomGraphEditorInputMode extends GraphEditorInputMode {\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  marqueeSelect(marqueeRectangle: Rect): void {\r\n    if (marqueeRectangle.width > 20) {\r\n      super.marqueeSelect(marqueeRectangle)\r\n    }\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"framework_extending_classes-065-tip-002",content:'<p id="framework_extending_classes-065-simpara-011">Starting with yFiles for HTML 2.0.0.1 the TypeScript compiler can be set to either target ECMAScript Level 5 or ECMAScript Level 6.</p>'},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-012",content:'Using the <a href="#/dguide/framework_classes">class support from the yFiles for HTML class framework</a> is compatible with ECMAScript Level 5 and also\nresults in a concise declaration:'},{tagname:"example",id:"framework_extending_classes-065-example-003",title:"Subclassing using the yFiles for HTML class framework",content:"<pre class=\"programlisting javascript\" id=\"framework_extending_classes-065-programlisting-003\" language=\"javascript\" format=\"linespecific\"><code>const CustomGraphEditorInputMode = yfiles.lang.Class('CustomGraphEditorInputMode', {\r\n  '$extends': yfiles.input.GraphEditorInputMode,\r\n\r\n  'constructor': function() {\r\n    yfiles.input.GraphEditorInputMode.call(this)\r\n  },\r\n\r\n  'marqueeSelect': function(marqueeRectangle) {\r\n    if (marqueeRectangle.width > 20) {\r\n      super.marqueeSelect(marqueeRectangle)\r\n    }\r\n  }\r\n})\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-013",content:'For more detailed background information about class declarations in the class framework, please see\n<a href="#/dguide/framework_classes">the section about classes in the class framework</a>.'},{tagname:"para","class":"dguide-para",id:"framework_extending_classes-065-simpara-014",content:"Since the underlying technology is compatible with ECMAScript Level 5 prototypal inheritance, this is also an option:"},{tagname:"example",id:"framework_extending_classes-065-example-004",title:"Subclassing using prototypal inheritance",content:'<pre class="programlisting javascript" id="framework_extending_classes-065-programlisting-004" language="javascript" format="linespecific"><code>function CustomGraphEditorInputMode() {\r\n  yfiles.input.GraphEditorInputMode.call(this)\r\n}\r\n\r\nCustomGraphEditorInputMode.prototype = Object.create(yfiles.input.GraphEditorInputMode.prototype)\r\nCustomGraphEditorInputMode.prototype.constructor = CustomGraphEditorInputMode\r\nCustomGraphEditorInputMode.prototype.marqueeSelect = function(rect) {\r\n  if (rect.width > 20) {\r\n    yfiles.input.GraphEditorInputMode.prototype.marqueeSelect.call(this, rect)\r\n  }\r\n}\n</code></pre>'}]}]},{tagname:"section",id:"framework_basic_interfaces",title:"Interfaces",children:[{tagname:"para","class":"dguide-para",id:"framework_basic_interfaces-066-simpara-001",content:"Interfaces declare what functionality a type provides. A type or class is said to implement a certain interface if it provides\nall the functionality that is defined in that interface. Types can implement any number of interfaces, but they can\nonly ever extend one other class at the maximum. This is similar to the behavior of interfaces in languages\nlike Java, C#, and TypeScript."},{tagname:"para","class":"dguide-para",id:"framework_basic_interfaces-066-simpara-002",content:"In yFiles for HTML however interfaces can also carry additional functionality that can be mixed-in into classes without\nthem having to implement that behavior themselves. This feature is known as “mixins” or “trait inheritance” from other\nlanguages and is similar to what Java programmers can do with default implementations in interfaces and what C#\nprogrammers can achieve with extension methods that work on interfaces."},{tagname:"para","class":"dguide-para",id:"framework_basic_interfaces-066-simpara-003",content:"This means that for a class to successfully implement an interface it needs to provide all the implementations of the\ninstance methods and instance properties that are declared as <code>abstract</code> by the interface. For all non-abstract\ninterface members the default implementation of the functionality available on the interface can be reused. For the\nconsumers of an API this means that the available functionality on a type is a lot more than just the implementations\nthat the type directly provides."},{tagname:"section",id:"framework_implementing_interfaces",title:"Implementing Interfaces",children:[{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-001",content:"For this “mixin” and trait-inheritance feature to work as well as to properly declare the interface implementation to\n the class framework with the JavaScript type system, the yFiles for HTML class framework needs to be used."},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-002",content:"Depending on whether you are authoring your JavaScript code using TypeScript, ECMAScript Level 6 or ECMAScript Level 5,\ndifferent options exist."},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-003",content:"For ECMAScript Level 6 implementing an interface so that it correctly works with the yFiles for HTML API is easy:"},{tagname:"example",id:"framework_implementing_interfaces-067-example-001",title:"Implementing a yFiles interface using ES6",content:'<pre class="programlisting javascript" id="framework_implementing_interfaces-067-programlisting-001" language="javascript" format="linespecific"><code>class CustomHitTestable extends yfiles.lang.Class(yfiles.input.IHitTestable) {\r\n  isHit(context, location) {\r\n    return location.x > 25\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-004",content:"This is very similar to the way TypeScript works:"},{tagname:"example",id:"framework_implementing_interfaces-067-example-002",title:"Implementing a yFiles interface using TypeScript",content:'<pre class="programlisting javascript" id="framework_implementing_interfaces-067-programlisting-002" language="javascript" format="linespecific"><code>import { BaseClass } from \'yfiles/lang\';\r\nimport { IVisualCreator, IRenderContext, Visual, SvgVisual } from \'yfiles/view-component\';\r\n\r\nclass CustomVisualCreator extends BaseClass(IVisualCreator) implements IVisualCreator {\r\n\r\n  createVisual(context: IRenderContext): Visual {\r\n    return new SvgVisual(document.createElementNS("http://www.w3.org/2000/svg", "g"))\r\n  }\r\n\r\n  updateVisual(context: IRenderContext, oldVisual: Visual): Visual {\r\n    return oldVisual\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-005",content:"Using the yFiles class framework, interfaces can be implemented like this:"},{tagname:"example",id:"framework_implementing_interfaces-067-example-003",title:"Implementing a yFiles interface using the class framework",content:'<pre class="programlisting javascript" id="framework_implementing_interfaces-067-programlisting-003" language="javascript" format="linespecific"><code>const CustomHitTestable = yfiles.lang.Class(\'CustomHitTestable\', {\r\n  \'$with\': yfiles.input.IHitTestable,\r\n\r\n  \'isHit\': function(context, location) {\r\n    return location.x > 25\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"framework_implementing_interfaces-067-note-001",content:'<p id="framework_implementing_interfaces-067-simpara-006"><code>yfiles.lang.Class</code> and its alias <code>yfiles.lang.BaseClass</code> both take as arguments an optional base-class and any number\n  of interfaces. The base-class argument may <em id="framework_implementing_interfaces-067-emphasis-001">only</em> reference a yFiles for HTML class or a class that inherits from\n  such a class using prototypal inheritance. ECMAScript Level 6 classes as base-classes are not supported.</p>'},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-007",content:'For more detailed background information about interfaces in the class framework, please see <a href="#/dguide/framework_interfaces">the section about\ninterfaces</a>.'},{tagname:"para","class":"dguide-para",id:"framework_implementing_interfaces-067-simpara-008",content:"With pure ECMAScript Level 5 the same can be achieved in a little more verbose manner:"},{tagname:"example",id:"framework_implementing_interfaces-067-example-004",title:"Implementing a yFiles interface using pure ES5",content:'<pre class="programlisting javascript" id="framework_implementing_interfaces-067-programlisting-004" language="javascript" format="linespecific"><code>function CustomVisualCreator() {}\r\n\r\nCustomVisualCreator.prototype = Object.create(yfiles.lang.Class(yfiles.view.IVisualCreator).prototype)\r\nCustomVisualCreator.prototype.constructor = CustomVisualCreator\r\nCustomVisualCreator.prototype.createVisual = function(context) {\r\n  return new yfiles.view.SvgVisual(document.createElementNS("http://www.w3.org/2000/svg", "g"))\r\n}\r\nCustomVisualCreator.prototype.updateVisual = function(context, oldVisual) {\r\n  return oldVisual\r\n}\n</code></pre>'}]},{tagname:"section",id:"framework_quick_interface_implementation",title:"Quick Interface Implementation",children:[{tagname:"para","class":"dguide-para",id:"framework_quick_interface_implementation-068-simpara-001",content:"For cases where a class declaration is not required and all that is needed is an instance\nthat implements a certain interface, there is a\nshort-hand syntax available that works for all levels and variants of JavaScript. If the interface only contains\na single abstract method, the function definition for that method can be directly passed to the interface type if\ninvoked as a constructor:"},{tagname:"example",id:"framework_quick_interface_implementation-068-example-001",title:"Quick simple interface implementation in ECMAScript Level 6",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-001" language="javascript" format="linespecific"><code>const customHitTestable = new yfiles.input.IHitTestable((context, location) => location.x > 25)\n</code></pre>'},{tagname:"example",id:"framework_quick_interface_implementation-068-example-002",title:"Quick simple interface implementation in ECMAScript Level 5",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-002" language="javascript" format="linespecific"><code>const customHitTestable = new yfiles.input.IHitTestable(function(context, location) { return location.x > 25 })\n</code></pre>'},{tagname:"example",id:"framework_quick_interface_implementation-068-example-003",title:"Quick simple interface implementation in TypeScript",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-003" language="javascript" format="linespecific"><code>import { IHitTestable } from \'yfiles/view-component\';\r\nconst customHitTestable = new IHitTestable((context, location) => location.x > 25)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_quick_interface_implementation-068-simpara-002",content:"If the interface contains more than one abstract member or abstract properties, an options argument has to be used instead."},{tagname:"para","class":"dguide-para important",id:"framework_quick_interface_implementation-068-important-001",content:'<p id="framework_quick_interface_implementation-068-simpara-003">The options argument needs to contain exactly the abstract members of the interface. No member may be omitted and\n  no additional members can be added. While additional custom members can later be added directly on the instance, this\n  is discouraged.</p>'},{tagname:"example",id:"framework_quick_interface_implementation-068-example-004",title:"Quick interface implementation in ECMAScript Level 6",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-004" language="javascript" format="linespecific"><code>const customVisualCreator = new yfiles.view.IVisualCreator({\r\n  createVisual(context) {\r\n    return new yfiles.view.SvgVisual(document.createElementNS("http://www.w3.org/2000/svg", "g"))\r\n  },\r\n  updateVisual(context, oldVisual) {\r\n    return oldVisual\r\n  }\r\n})\n</code></pre>'},{tagname:"example",id:"framework_quick_interface_implementation-068-example-005",title:"Quick interface implementation in ECMAScript Level 5",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-005" language="javascript" format="linespecific"><code>const customVisualCreator = new yfiles.view.IVisualCreator({\r\n  createVisual: function(context) {\r\n    return new yfiles.view.SvgVisual(document.createElementNS("http://www.w3.org/2000/svg", "g"))\r\n  },\r\n  updateVisual: function(context, oldVisual) {\r\n    return oldVisual\r\n  }\r\n})\n</code></pre>'},{tagname:"example",id:"framework_quick_interface_implementation-068-example-006",title:"Quick interface implementation in TypeScript",content:'<pre class="programlisting javascript" id="framework_quick_interface_implementation-068-programlisting-006" language="javascript" format="linespecific"><code>import { IVisualCreator, IRenderContext, Visual, SvgVisual } from \'yfiles/view-component\';\r\n\r\nconst customVisualCreator = new IVisualCreator({\r\n  createVisual(context: IRenderContext): Visual {\r\n    return new SvgVisual(document.createElementNS("http://www.w3.org/2000/svg", "g"))\r\n  },\r\n  updateVisual(context: IRenderContext, oldVisual: Visual): Visual {\r\n    return oldVisual\r\n  }\r\n})\n</code></pre>'}]},{tagname:"section",id:"framework_complex_inheritance",title:"Extending Classes and Implementing Interfaces",children:[{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-001",content:"Sometimes it is necessary to both extend from an existing API class and at the same time add new interfaces\nto the newly created subclass."},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-002",content:'This can be done using a variant of the techniques shown in <a href="#/dguide/framework_implementing_interfaces">Implementing Interfaces</a>:'},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-003",content:"For ECMAScript Level 6 extending a class and implementing an interface so that it correctly works with the yFiles for HTML API looks like this:"},{tagname:"example",id:"framework_complex_inheritance-069-example-001",title:"Complex inheritance case using ECMAScript Level 6",content:'<pre class="programlisting javascript" id="framework_complex_inheritance-069-programlisting-001" language="javascript" format="linespecific"><code>class CustomLayout extends yfiles.lang.Class(\r\n  yfiles.layout.LayoutStageBase,\r\n  yfiles.hierarchic.ILayerer,\r\n  yfiles.hierarchic.ISequencer) {\r\n\r\n  constructor() {\r\n    super(new yfiles.hierarchic.HierarchicLayout())\r\n    let hl = super.coreLayout\r\n    // assign custom instances for the sequencer and layerer implemented directly by this type\r\n    hl.hierarchicLayoutCore.sequencer = this\r\n    hl.hierarchicLayoutCore.layerer = this\r\n  }\r\n\r\n  applyLayout(graph) {\r\n    super.applyLayoutCore(graph)\r\n  }\r\n\r\n  assignLayers(graph, layers, layoutDataProvider) {\r\n    // this implementation just delegates to another implementation\r\n    new yfiles.hierarchic.BFSLayerer().assignLayers(graph, layers, layoutDataProvider)\r\n  }\r\n\r\n  sequenceNodeLayers(graph, layers, layoutDataProvider, itemFactory) {\r\n    // this implementation is a void implementation of the interface - no sequencing will be performed.\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-004",content:"This is very similar to the way TypeScript works:"},{tagname:"example",id:"framework_complex_inheritance-069-example-002",title:"Complex inheritance case using TypeScript",content:'<pre class="programlisting javascript" id="framework_complex_inheritance-069-programlisting-002" language="javascript" format="linespecific"><code>import { BaseClass } from "yfiles/lang";\r\nimport { LayoutStageBase, LayoutGraph } from "yfiles/layout-core";\r\nimport {\r\n  ILayerer,\r\n  ISequencer,\r\n  HierarchicLayout,\r\n  ILayers,\r\n  ILayoutDataProvider,\r\n  BFSLayerer,\r\n  IItemFactory\r\n} from "yfiles/layout-hierarchic";\r\n\r\nclass CustomLayout\r\n  extends BaseClass&lt;LayoutStageBase>(LayoutStageBase, ILayerer, ISequencer)\r\n  implements ILayerer, ISequencer {\r\n  constructor() {\r\n    super(new HierarchicLayout());\r\n    let hl = super.coreLayout as HierarchicLayout;\r\n    // assign custom instances for the sequencer and layerer implemented directly by this type\r\n    hl.hierarchicLayoutCore.sequencer = this;\r\n    hl.hierarchicLayoutCore.layerer = this;\r\n  }\r\n\r\n  applyLayout(graph: LayoutGraph): void {\r\n    super.applyLayoutCore(graph);\r\n  }\r\n\r\n  assignLayers(\r\n    graph: LayoutGraph,\r\n    layers: ILayers,\r\n    layoutDataProvider: ILayoutDataProvider\r\n  ): void {\r\n    // this implementation just delegates to another implementation\r\n    new BFSLayerer().assignLayers(graph, layers, layoutDataProvider);\r\n  }\r\n\r\n  sequenceNodeLayers(\r\n    graph: LayoutGraph,\r\n    layers: ILayers,\r\n    ldp: ILayoutDataProvider,\r\n    itemFactory: IItemFactory\r\n  ): void {\r\n    // this implementation is a void implementation of the interface - no sequencing will be performed.\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-005",content:"Using the yFiles class framework, interfaces can be implemented like this:"},{tagname:"example",id:"framework_complex_inheritance-069-example-003",title:"Complex inheritance case using the yFiles class framework",content:"<pre class=\"programlisting javascript\" id=\"framework_complex_inheritance-069-programlisting-003\" language=\"javascript\" format=\"linespecific\"><code>const CustomLayout = yfiles.lang.Class('CustomLayout', {\r\n  '$extends': yfiles.layout.LayoutStageBase,\r\n  '$with': [yfiles.hierarchic.ILayerer, yfiles.hierarchic.ISequencer],\r\n\r\n  'constructor': function() {\r\n    yfiles.layout.LayoutStageBase.call(this, new yfiles.hierarchic.HierarchicLayout())\r\n    const hl = this.coreLayout\r\n    // assign custom instances for the sequencer and layerer implemented directly by this type\r\n    hl.hierarchicLayoutCore.sequencer = this\r\n    hl.hierarchicLayoutCore.layerer = this\r\n  },\r\n\r\n  'applyLayout': function(graph) {\r\n    yfiles.layout.LayoutStageBase.prototype.applyLayoutCore.call(this, graph)\r\n  },\r\n\r\n  'assignLayers': function(graph, layers, layoutDataProvider) {\r\n    // this implementation just delegates to another implementation\r\n    new yfiles.hierarchic.BFSLayerer().assignLayers(graph, layers, layoutDataProvider)\r\n  },\r\n\r\n  'sequenceNodeLayers': function(graph, layers, layoutDataProvider, itemFactory) {\r\n    // this implementation is a void implementation of the interface - no sequencing will be performed.\r\n  }\r\n})\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-006",content:'For more detailed background information about interfaces in the class framework, please see <a href="#/dguide/framework_interfaces">the section about\ninterfaces</a>.'},{tagname:"para","class":"dguide-para",id:"framework_complex_inheritance-069-simpara-007",content:"With pure ECMAScript Level 5 the same can be achieved in a more verbose manner:"},{tagname:"example",id:"framework_complex_inheritance-069-example-004",title:"Complex inheritance case using ECMAScript Level 5",content:'<pre class="programlisting javascript" id="framework_complex_inheritance-069-programlisting-004" language="javascript" format="linespecific"><code>function CustomLayout() {\r\n  yfiles.layout.LayoutStageBase.call(this, new yfiles.hierarchic.HierarchicLayout())\r\n  const hl = this.coreLayout\r\n  // assign custom instances for the sequencer and layerer implemented directly by this type\r\n  hl.hierarchicLayoutCore.sequencer = this\r\n  hl.hierarchicLayoutCore.layerer = this\r\n}\r\n\r\nCustomLayout.prototype = Object.create(yfiles.lang.Class(\r\n  yfiles.layout.LayoutStageBase,\r\n  yfiles.hierarchic.ILayerer,\r\n  yfiles.hierarchic.ISequencer)\r\n  .prototype)\r\n\r\nCustomLayout.prototype.constructor = CustomLayout\r\nCustomLayout.prototype.applyLayout = function(graph) {\r\n  yfiles.layout.LayoutStageBase.prototype.applyLayoutCore.call(this, graph)\r\n}\r\n\r\nCustomLayout.prototype.assignLayers = function(graph, layers, layoutDataProvider) {\r\n  // this implementation just delegates to another implementation\r\n  new yfiles.hierarchic.BFSLayerer().assignLayers(graph, layers, layoutDataProvider)\r\n}\r\n\r\nCustomLayout.prototype.sequenceNodeLayers = function(graph, layers, layoutDataProvider, itemFactory) {\r\n  // this implementation is a void implementation of the interface - no sequencing will be performed.\r\n};\n</code></pre>'}]}]},{tagname:"section",id:"framework_modules_usage",title:"Modules and Namespaces",children:[{tagname:"para","class":"dguide-para",id:"framework_modules_usage-070-simpara-001",content:"In the yFiles for HTML API, types are organized into namespaces which are called yFiles modules.\nThey correspond roughly to namespaces or packaged in languages like Java and C#. In\nJavaScript nested objects hierarchies are used instead."},{tagname:"para","class":"dguide-para note",id:"framework_modules_usage-070-note-001",content:'<p id="framework_modules_usage-070-simpara-002">The modules here should not be confused with ECMAScript Level 6 modules or <a href="#/dguide/getting_started-module_loading">AMD modules</a>.\n These concepts can be used independently of each other.</p>'},{tagname:"para","class":"dguide-para tip",id:"framework_modules_usage-070-tip-001",content:'<p id="framework_modules_usage-070-simpara-003">As a user of the API you don’t need to declare yFiles for HTML modules. You also aren’t required to put your own\n types into yFiles modules. You may safely skip to the end of this section if you don’t know that you <strong id="framework_modules_usage-070-emphasis-001" class="bold" role="bold">need</strong> to\n create yFiles modules for your application.</p>'}]},{tagname:"section",id:"framework_events",title:"Events",children:[{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-001",content:"The yFiles Class Framework is complemented by further support that provides convenience\nfunctionality around event handling."},{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-002",content:"Events can be easily subscribed to and unsubscribed from through associated methods\nfor adding and removing listener callbacks.\nThese methods take an event handler function as their parameter."},{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-003",content:'For example, the <api-link id="framework_events-071-api-link-001" data-member="QueryItemToolTip" data-text="QueryItemToolTip" data-type="yfiles.input.GraphViewerInputMode"></api-link>\nevent of class <span class="api">GraphViewerInputMode</span> can be easily subscribed to and unsubscribed\nfrom through the <code>addQueryItemToolTipListener</code> and <code>removeQueryItemToolTipListener</code>\nmethod, respectively.'},{tagname:"para","class":"dguide-para note",id:"framework_events-071-note-001",content:'<p id="framework_events-071-simpara-004">In the yFiles for HTML API documentation, the associated methods to add and remove\nlistener callbacks to events are currently listed along with the corresponding event.</p>'},{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-005",content:"By means of the <code>yfiles.lang.delegate</code> factory method, appropriate event\nhandler functions can be conveniently registered as implicit closures.\nThe <code>yfiles.lang.delegate</code> method wraps a given function together with\na target object which serves as the caller context for when the given function actually\ngets invoked."},{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-006",content:"The following code snippet shows how an event handler function is registered as a\nclosure with the current <code>this</code> context:"},{tagname:"example",id:"framework_events-071-example-001",title:"Registering and deregistering an event listener ECMAScript Level 5 style",content:'<pre class="programlisting javascript" id="framework_events-071-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var graphViewerInputMode = new yfiles.input.GraphViewerInputMode();\n\ngraphViewerInputMode.addQueryItemToolTipListener(\n    yfiles.lang.delegate(this.$onQueryItemToolTip, this)\n);\n\n//... and later\n\ngraphViewerInputMode.removeQueryItemToolTipListener(\n    yfiles.lang.delegate(this.$onQueryItemToolTip, this)\n);</code></pre>'},{tagname:"example",id:"framework_events-071-example-002",title:"Registering an event listener ECMAScript Level 6 style",content:'<pre class="programlisting javascript" id="framework_events-071-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var graphViewerInputMode = new yfiles.input.GraphViewerInputMode();\n\ngraphViewerInputMode.addQueryItemToolTipListener((source, evt) => this.$onQueryItemToolTip(source, evt));</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_events-071-simpara-007",content:'When, in response to the <span class="api">QueryItemToolTip</span> event, the <code>$onQueryItemToolTip</code>\nlistener callback gets invoked, all uses of <code>this</code> within the callback’s\nbody actually access the object that the <code>this</code> referenced at invocation\ntime of the <code>yfiles.lang.delegate</code> factory method.'},{tagname:"para","class":"dguide-para tip",id:"framework_events-071-tip-001",content:'<p id="framework_events-071-simpara-008">The advantage of using <code>yfiles.lang.delegate</code> over Ecmascript’s <code>bind</code> function is that although both implementations\nwill yield fresh instances every time they are called, <code>yfiles.lang.delegate</code> adds an <code>equals</code> functionality to\nthe function that will be used during event registration and deregistration.</p><p id="framework_events-071-simpara-009">Thus the same construct can be used for removing the event subscription to successfully remove a previously\nadded event listener.</p><p id="framework_events-071-simpara-010">Using <code>bind</code> would not work in this case because these are two different instances and the remove operation becomes a no-op.</p>'}]},{tagname:"section",id:"framework_option_overloads",title:"Option Overloads",children:[{tagname:"para","class":"dguide-para",id:"framework_option_overloads-072-simpara-001",content:"The yFiles Class Framework provides option overloads, also known as option objects for comfortably\npassing complex sets of parameters to methods and constructors.\nWith many API methods, instead of passing a list of multiple parameters, a plain parameter object can be passed as the sole parameter."},{tagname:"para","class":"dguide-para",id:"framework_option_overloads-072-simpara-002",content:'The object’s properties need to have the names of the parameters. For some APIs, additional "extra" options that are described in the API\ndocumentation can be provided. In contrast to parameter lists, not all properties need to be provided in case of optional parameters:\n Default values will be used instead where available.\nExtra properties offer a way to pass further information and enable more concise object creation code that doesn’t require temporary variables.'},{tagname:"para","class":"dguide-para",id:"framework_option_overloads-072-simpara-003",content:'Parameter objects can contain complex types such as other yFiles types, or\n<a href="#/dguide/framework_converters">convertible types</a>.'},{tagname:"para","class":"dguide-para note",id:"framework_option_overloads-072-note-001",content:'<p id="framework_option_overloads-072-simpara-004">Option overloads cannot always be used in the library. Methods and constructors that accept a parameter object are\n  annotated as such in the API documentation. Toggle the checkbox named <strong id="framework_option_overloads-072-emphasis-001" class="bold" role="bold">Option Overload</strong>, to see which options are\n  available. See the documentation of <api-link id="framework_option_overloads-072-api-link-001" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> for a more complex example.\n  Whenever extra properties are available, a small exclamation mark will be shown in the documentation for the parameters.</p>'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_option_overloads-072-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const node = graph.createNode({\n  layout: new yfiles.geometry.Rect(10, 10, 100, 60),\n  style: new yfiles.styles.ShapeNodeStyle({\n    shape: yfiles.styles.ShapeNodeShape.HEXAGON,\n    fill: yfiles.view.Fill.BLUE,\n    stroke: new yfiles.view.Stroke({\n      fill: yfiles.view.Fill.DARK_BLUE,\n      thickness: 3\n    })\n  }),\n  labels: [\'label1\'],\n  ports: [\n    {\n      style: new yfiles.styles.NodeStylePortStyleAdapter({\n        nodeStyle: new yfiles.styles.ShapeNodeStyle({shape: yfiles.styles.ShapeNodeShape.ELLIPSE}),\n        renderSize: new yfiles.geometry.Size(5, 5)\n      }),\n      locationParameter: yfiles.graph.FreeNodePortLocationModel.NODE_TOP_ANCHORED\n    },\n    {\n      style: yfiles.styles.VoidPortStyle.INSTANCE,\n      locationParameter: yfiles.graph.FreeNodePortLocationModel.NODE_BOTTOM_ANCHORED\n    }\n  ],\n  tag: { data: \'data\' }\n});</code></pre>'},{tagname:"section",id:"framework_option_overloads_extra_properties",title:"Extra Properties in Option Overloads",children:[{tagname:"para","class":"dguide-para",id:"framework_option_overloads_extra_properties-073-simpara-001",content:"Basically there are two major types of extra properties:"},{tagname:"para","class":"dguide-para",id:"framework_option_overloads_extra_properties-073-simpara-002",content:"For many of the frequently used properties of a type, the constructor of that type has an extra property of the same name\navailable with the option object parameter:"},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_option_overloads_extra_properties-073-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>new yfiles.input.GraphEditorInputMode({movableItems: yfiles.graph.GraphItemTypes.NONE});\n\n// equivalent to\nconst geim = new yfiles.input.GraphEditorInputMode();\ngeim.movableItems = yfiles.graph.GraphItemTypes.NONE;</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_option_overloads_extra_properties-073-simpara-003",content:"For factory methods there is a variant where more complex properties of the resulting element\ncan be specified using option objects.\nInstead of calling methods on or for the resulting object, an array of invocations of that\nmethod may be specified in option object parameter syntax:"},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_option_overloads_extra_properties-073-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>graph.createNode({\n  labels: [\'MyLabel\', {text: "My Label", style: style}]\n});\n\n// is equivalent to\nconst node = graph.createNode();\ngraph.addLabel(node, \'My Label\');\ngraph.addLabel({owner: node, text: \'My Label\', style: style});</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_option_overloads_extra_properties-073-simpara-004",content:'If the method to be called accepts a list of parameters, the entries in the array need to be arrays of values, too.\nFor single parameter methods, it suffices to put the single parameter into the top-level array.\nLike-wise, if the method accepts option objects, the option object may be put directly into the array.\nFor each element in the array, the method will be called and if required, the necessary relating "owner" item will be\nautomatically injected into the invocation.'}]}]},{tagname:"section",id:"framework_converters",title:"Automatic Type Conversion",children:[{tagname:"para","class":"dguide-para",id:"framework_converters-074-simpara-001",content:"With automatic type conversion the yFiles Class Framework offers a convenient way to specify complex yFiles types\nwith a short-hand syntax. When using these\nconvertible types in parameter lists, parameter objects, or setter assignments, they can be replaced with a substitute type, e.g. a simple string.\nThe substitute type is then converted into the actual type when the code is executed."},{tagname:"para","class":"dguide-para",id:"framework_converters-074-simpara-002",content:"That way, it is often possible to write more compact code especially in style initialization. The code also becomes more\nreadable because a lot of the replacement strings are similar to well-known CSS declarations. This comes at the cost of\ncode completion and compile-time type-checking, though."},{tagname:"para","class":"dguide-para tip",id:"framework_converters-074-tip-001",content:'<p id="framework_converters-074-simpara-003">If a property or method takes a convertible type, it is marked with <code>CONVERSION</code> in the API documentation,\n  e.g. <api-link id="framework_converters-074-api-link-001" data-member="fill" data-text="fill" data-type="yfiles.styles.ShapeNodeStyle"></api-link>. There is also a paragraph in the class description of each convertible\n  type on the specific conversions (enums excluded).</p>'},{tagname:"para","class":"dguide-para note",id:"framework_converters-074-note-001",content:'<p id="framework_converters-074-simpara-004">Most types that support automatic type conversion will work for all public properties, and arguments to constructors\n  and factory methods. For performance reasons, some protected methods and less-frequently called but performance critical methods,\n  don’t allow automatic type conversion. If in doubt, consult the documentation and look for the <code>CONVERSION</code> tag.\n  Be aware that you cannot put short-hand variants of convertible types into collections. They will only be converted\n  automatically if passed directly as arguments to the yFiles API. The <a href="#/dguide/DevelopmentSupport-Checks">runtime type checks</a>\n  should detect most invalid usages, but without debugging checks, runtime behavior can be undefined.</p>'},{tagname:"section",id:"framework_converters_enums",title:"Enums",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_enums-075-simpara-001",content:"Enum types in general are convertible. Almost everywhere where enums values are expected, they can be substituted with\na simple string consisting\nof the enum value’s name. The name is accepted in uppercase and lowercase letters. In case a name consists of\nseveral words, they can be separated with the <code>-</code> or <code>_</code> character."},{tagname:"para","class":"dguide-para",id:"framework_converters_enums-075-simpara-002",content:"When enum values can be combined bit-wise, you can either use the <code>|</code>, <code>+</code>, and <code>,</code> characters to combine the\nthe string representations of several enum values in a single string or specify them in an array of strings,\nlike in the following example:"},{tagname:"para",content:"<pre class=\"programlisting javascript\" id=\"framework_converters_enums-075-programlisting-001\" language=\"javascript\" linenumbering=\"unnumbered\" format=\"linespecific\"><code>const labelStyle = new yfiles.styles.DefaultLabelStyle({\n  horizontalTextAlignment: 'center',\n  verticalTextAlignment: 'CENTER'\n});\n\ngraphComponent.inputMode.selectableItems = 'node,edge';\ngraphComponent.inputMode.selectableItems = 'NODE|EDGE';\ngraphComponent.inputMode.selectableItems = ['NODE', 'EDGE'];</code></pre>"}]},{tagname:"section",id:"framework_converters_colors",title:"Colors, Fills, and Strokes",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_colors-076-simpara-001",content:'<api-link id="framework_converters_colors-076-api-link-001" data-member="" data-text="Color" data-type="yfiles.view.Color"></api-link>s and <api-link id="framework_converters_colors-076-api-link-002" data-member="" data-text="Fill" data-type="yfiles.view.Fill"></api-link>s can be defined as <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value" target="_blank">CSS color strings</a>.\n<api-link id="framework_converters_colors-076-api-link-003" data-member="" data-text="Stroke" data-type="yfiles.view.Stroke"></api-link>s are converted from strings adhering to the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties" target="_blank">CSS shorthand properties for border definition</a>.\nNumber values are also supported to conveniently use hexadecimal notations and numeric calculations.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_colors-076-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const nodeStyle = new yfiles.styles.ShapeNodeStyle({\n  fill: \'blue\',\n  stroke: "3px dashed red"\n});\nnodeStyle.fill = \'hsl(225, 98%, 60%)\';\nnodeStyle.fill = \'rgba(255, 255, 0, 0.5)\';\nnodeStyle.fill = new yfiles.view.SolidColorFill(\'rgb(255, 255, 0)\');\nnodeStyle.stroke = \'#336699\';\nnodeStyle.stroke = 0xff00ff;</code></pre>'}]},{tagname:"section",id:"framework_converters_fonts",title:"Fonts",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_fonts-077-simpara-001",content:'<api-link id="framework_converters_fonts-077-api-link-001" data-member="" data-text="Font" data-type="yfiles.view.Font"></api-link>s can be converted from strings that adhere to the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font" target="_blank">CSS shorthand property for fonts</a>.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_fonts-077-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const labelStyle = new yfiles.styles.DefaultLabelStyle({\n  font: \'bold 16px sans-serif\'\n});\nlabelStyle.font = \'italic Tahoma\';\nlabelStyle.font = \'normal xx-large Arial\';</code></pre>'}]},{tagname:"section",id:"framework_converters_geometry",title:"Rectangles, Points, Sizes, and Insets",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_geometry-078-simpara-001",content:'Geometric classes like <api-link id="framework_converters_geometry-078-api-link-001" data-member="" data-text="IRectangle" data-type="yfiles.geometry.IRectangle"></api-link>, <api-link id="framework_converters_geometry-078-api-link-002" data-member="" data-text="IPoint" data-type="yfiles.geometry.IPoint"></api-link>, and <api-link id="framework_converters_geometry-078-api-link-003" data-member="" data-text="ISize" data-type="yfiles.geometry.ISize"></api-link>\nare defined using numbers for <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>. Instead of using the constructor, they can be converted from\nArrays or plain objects.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_geometry-078-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>graph.createNode([10, 10, 50, 20]);\ngraph.createNode({ layout: { x: 10, y: 10, width: 50, height: 20 }});\n\ngraph.createNodeAt([10, 10]);\ngraph.createNodeAt({ location: { x: 10, y: 10 }});\n\ngraphComponent.doubleClickSize = [20, 20];\ngraphComponent.doubleClickSize = { width: 20, height: 30 };</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_converters_geometry-078-simpara-002",content:'<api-link id="framework_converters_geometry-078-api-link-004" data-member="" data-text="Insets" data-type="yfiles.geometry.Insets"></api-link> can either be substituted with a single number that describes the insets for all sides,\nan array, or a plain object. They work similar to the short-hand for CSS margins.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_geometry-078-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const rectangle = new yfiles.geometry.Rect(0, 0, 10, 10);\nrectangle.getEnlarged(10);               // horizontal and vertical\nrectangle.getEnlarged([5, 10]);          // vertical, horizontal\nrectangle.getEnlarged([15, 10, 5]);      // top, horizontal, bottom\nrectangle.getEnlarged([5, 10, 15, 20]);  // top, right, bottom, left\n\nrectangle.getEnlarged({ left: 5, top: 10, bottom: 5, right: 10 });</code></pre>'},{tagname:"para","class":"dguide-para important",id:"framework_converters_geometry-078-important-001",content:'<p id="framework_converters_geometry-078-simpara-003">When using plain objects to describe a convertible type, they may not work together with overloads. That is\n  because if the substitute object is the only parameter, it creates an ambiguous overload with the parameter object notation.\n  Also it may not be possible to determine the right overload at runtime if there are multiple real overloads.\n  However, using a substitute object in a parameter list or as a named option argument in a parameter object is valid\n  unless the resulting type is ambiguous.</p>'}]},{tagname:"section",id:"framework_converters_arrows",title:"Arrows",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_arrows-079-simpara-001",content:'Most <api-link id="framework_converters_arrows-079-api-link-001" data-member="" data-text="Arrow" data-type="yfiles.styles.Arrow"></api-link>s are described by a shape, a scale, and a color. A string which provides\nsome or all of these values can be used to define an <span class="api">Arrow</span>.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_arrows-079-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const edgeStyle = new yfiles.styles.PolylineEdgeStyle({\n  sourceArrow: \'circle\',\n  targetArrow: \'green xx-large diamond\',\n});\nedgeStyle.sourceArrow = \'blue simple\';\nedgeStyle.targetArrow = \'rgb(200, 200, 0) simple\';</code></pre>'}]},{tagname:"section",id:"framework_converters_cursors",title:"Cursors",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_cursors-080-simpara-001",content:'To set one of the default <api-link id="framework_converters_cursors-080-api-link-001" data-member="" data-text="Cursor" data-type="yfiles.view.Cursor"></api-link>s, it is possible to use the name of the constant as a string.\nSimilar to enum values, the name is accepted in uppercase and lowercase letters, and in case a name consists of\nseveral words, they can be separated with the <code>-</code> or <code>_</code> character.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_cursors-080-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const itemHoverInputMode = graphComponent.inputMode.itemHoverInputMode;\nitemHoverInputMode.hoverCursor = \'grab\';\nitemHoverInputMode.hoverCursor = \'MOVE\';</code></pre>'}]},{tagname:"section",id:"framework_converters_timespan",title:"Timespan",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_timespan-081-simpara-001",content:'<api-link id="framework_converters_timespan-081-api-link-001" data-member="" data-text="TimeSpan" data-type="yfiles.lang.TimeSpan"></api-link> is defined using a simple number representing the duration in milliseconds, or through\none of the static factory methods. A more convenient and readable way is to use strings that are converted into\n<span class="api">TimeSpan</span> objects.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_timespan-081-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>graphComponent.doubleClickTime = 300;\ngraphComponent.doubleClickTime = \'4s\';\ngraphComponent.doubleClickTime = \'250ms\';\ngraphComponent.doubleClickTime = \'0:23:10\';\ngraphComponent.doubleClickTime = \'1m 0.5s\';</code></pre>'}]},{tagname:"section",id:"framework_converters_enumerables",title:"Enumerables, Collections, and Lists",children:[{tagname:"para","class":"dguide-para",id:"framework_converters_enumerables-082-simpara-001",content:'Arrays can be converted to <api-link id="framework_converters_enumerables-082-api-link-001" data-member="" data-text="IEnumerable&lt;T&gt;" data-type="yfiles.collections.IEnumerable"></api-link>, <api-link id="framework_converters_enumerables-082-api-link-002" data-member="" data-text="ICollection&lt;T&gt;" data-type="yfiles.collections.ICollection"></api-link>, and\n<api-link id="framework_converters_enumerables-082-api-link-003" data-member="" data-text="IList&lt;T&gt;" data-type="yfiles.collections.IList"></api-link>.'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_enumerables-082-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>graph.groupNodes([child1, child2, child3]);</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_converters_enumerables-082-simpara-002",content:'If the substitute adheres to the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank">\'iterable\' protocol</a>\nit will also be converted automatically:'},{tagname:"para",content:'<pre class="programlisting javascript" id="framework_converters_enumerables-082-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>let node = graph.createNode();\n\nfunction* getNodesToGroup(){\n  yield node;\n  let i = 0;\n  for (let n of graphComponent.graph.nodes) {\n    if (i++ %2 === 1) yield n;\n  }\n}\n\ngraph.groupNodes(getNodesToGroup());</code></pre>'}]}]}]},{tagname:"section",id:"graph",title:"The Graph Model",children:[{tagname:"para","class":"dguide-para",id:"graph-006-simpara-001",content:'In yFiles for HTML the graph is centered around interface <api-link id="graph-006-api-link-001" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link>.\nIt serves as a comprehensive representation of the mathematical notion of a directed graph\nand provides geometry as well as rendering support for the items it contains.'},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-002",content:"In discrete mathematics, a graph is defined by two sets, a node set and an edge set. A node represents any kind\nof entity and an edge represents a relation between any two nodes. In yFiles for HTML the graph is directed\nwhich means that all edges from the edge set have a direction, i.e. a distinct source node and a distinct target node."},{tagname:"para","class":"dguide-para note",id:"graph-006-note-001",content:'<p id="graph-006-simpara-003">Undirected graphs can be modeled as well. For undirected graphs the direction can be seen as\nextra information which can be ignored, e.g. by choosing a visualization which doesn’t\nemphasize direction (omitting the arrows).</p><p id="graph-006-simpara-004">Apart from visualization, direction doesn’t matter most of the time and is mainly relevant for\nsome layout and analysis features.</p>'},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-005",content:"The yFiles for HTML graph model adds further elements to this concept: labels can be added to nodes and edges\nto provide text information for these elements. Also, edges do not connect directly to nodes but use so-called\nports as linking elements between nodes and edges. Ports can also be used to link edges to other edges.\nThe edge geometry is defined using so-called bends, which are part of an edge."},{tagname:"figure","class":"image",title:"Elements of a graph in yFiles for HTML",id:"graph-006-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_basics_01.253beb8d.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-006",content:'<a href="#/dguide/graph_model-nodes">Nodes</a> and <a href="#/dguide/graph_model-edges">edges</a> of a graph are modeled by interfaces\n<span class="api">INode</span> and <span class="api">IEdge</span>.\nThe <a href="#/dguide/graph_model-ports">ports</a> that link nodes and edges (or edges to other edges)\nare defined by interface <span class="api">IPort</span>,\nthe <a href="#/dguide/graph_model-bends">bends</a> that an edge can contain are defined by interface <span class="api">IBend</span>.\nFinally, interface <span class="api">ILabel</span> defines generic\n<a href="#/dguide/graph_model-labels">labels</a> for both nodes and edges.\nThe <a href="#/dguide/graph_model-graph">graph</a> itself is modeled by interface <span class="api">IGraph</span>.'},{tagname:"para","class":"dguide-para",id:"graph_model-grouping",xreflabel:"Grouping",content:'A further enrichment for the common graph model is the concept of <span class="def">grouping</span>. Grouping adds hierarchical structure\nto a graph by allowing you to put together related nodes: Nodes can have other nodes as <span class="def">parent</span>.\nNodes with a common parent are considered as being in a <span class="def">group</span> where the parent node is referred to as the\n<span class="def">group node</span>. The nodes with the common parent can be referred to as <span class="def">child nodes</span> or <span class="def">children</span>\nof the <span class="def">parent</span> or <span class="def">group</span>.'},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-008",content:'Group nodes can also have other group nodes as children, leading to a complex hierarchy. In this hierarchy we refer\nto non-group nodes (nodes without children) as <span class="def">leaf nodes</span> or <span class="def">leaves</span>. The <span class="def">root</span> of the hierarchy\nis <code>null</code>.'},{tagname:"figure","class":"image",title:"Grouping",id:"graph-006-figure-002","float":0,children:[{tagname:"img",src:"assets/graph_model_grouping_concept.eb1ce223.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-009",content:'In the above figure the two nodes 1 and 2 are <span class="def">children</span> of their common <span class="def">parent</span>, the node <strong id="graph-006-emphasis-001" class="bold" role="bold">Group</strong>, whereas\nthe nodes 3 and 4 do not belong to that group. Since nodes 3 and 4 don’t have a parent, they can be referred to as\n<span class="def">top level</span> nodes. One might also call them children of the <span class="def">root</span> where the root is the graph itself.'},{tagname:"para","class":"dguide-para",id:"graph-006-simpara-010",content:"In an interactive scenario a group node can be used to deal with the set of child nodes as a unit.\nFor example, moving a group node moves all of its children. Additionally, the minimum size of a group node\nis constrained to the union of the bounds of its children."},{tagname:"para","class":"dguide-para tip",id:"graph-006-tip-001",content:'<p id="graph-006-simpara-011">An extension to the grouping concept is the concept of <span class="def">folding</span>, i.e. expanding (opening) and collapsing\n(closing) group nodes. Folding is also supported by yFiles for HTML, see chapter <a href="#/dguide/folding">Folding</a> for more details.</p>'},{tagname:"section",id:"graph_model-graph",title:"IGraph",children:[{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-001",content:'The central interface <api-link id="graph_model-graph-083-api-link-001" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> defines fundamental graph structure-related functionality including\ncreation and deletion of graph elements, or querying of structural aspects, like, e.g., adjacency lists.\nProvided is also support for modifying the geometry of graph elements, i.e., their location and size,\nand for modifications to the visual appearance of model items.\nFinally, it provides access to the graph items it contains and dispatches events for all kinds of structural changes.'},{tagname:"figure","class":"image",title:"Graph structure",id:"graph_model-graph-083-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_igraph_structure.a8a23392.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-002",content:'The graph elements <api-link id="graph_model-graph-083-api-link-002" data-member="" data-text="INode" data-type="yfiles.graph.INode"></api-link>, <api-link id="graph_model-graph-083-api-link-003" data-member="" data-text="IEdge" data-type="yfiles.graph.IEdge"></api-link>, <api-link id="graph_model-graph-083-api-link-004" data-member="" data-text="ILabel" data-type="yfiles.graph.ILabel"></api-link>,\n<api-link id="graph_model-graph-083-api-link-005" data-member="" data-text="IPort" data-type="yfiles.graph.IPort"></api-link>, and <api-link id="graph_model-graph-083-api-link-006" data-member="" data-text="IBend" data-type="yfiles.graph.IBend"></api-link> consistently provide read-only views of their data.\nAll graph elements are created using the factory pattern, i.e. via corresponding <strong id="graph_model-graph-083-emphasis-001" class="bold" role="bold">create</strong> or <strong id="graph_model-graph-083-emphasis-002" class="bold" role="bold">add</strong> methods\non <span class="api">IGraph</span> which do not only return the newly created instance but also register the new item properly\nat the graph and dispatch the proper <strong id="graph_model-graph-083-emphasis-003" class="bold" role="bold">creation</strong> event.'},{tagname:"para","class":"dguide-para note",id:"graph_model-graph-083-note-001",content:'<p id="graph_model-graph-083-simpara-003">Neither <api-link id="graph_model-graph-083-api-link-007" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> nor the model item interfaces are meant to be implemented by\napplication programmers. Instead you should use the implementations provided by yFiles for HTML. In most cases you just\nwork with the <span class="api">IGraph</span> instance which is provided by the <api-link id="graph_model-graph-083-api-link-008" data-member="graph" data-text="graph" data-type="yfiles.view.GraphComponent"></api-link>\nproperty of the <span class="api">GraphComponent</span> class.</p>'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-004",content:'To change a graph element’s properties, methods defined in <api-link id="graph_model-graph-083-api-link-009" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> need to be used.\n<span class="api">IGraph</span> holds responsibility for all changes to the graph model,\nbe it of structural nature, changes of geometry, or regarding the visual appearance of graph elements.\nConsequently, instances of the graph elements can only be created via <span class="api">IGraph</span>’s\ncreation methods.'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-005",content:'Accordingly, elements are removed from the graph using the <span class="api">IGraph</span>’s\n<span class="api">remove</span> method which removes the items in a consistent order.\nBefore it removes the item itself, all dependent items are removed.\n<strong id="graph_model-graph-083-emphasis-004" class="bold" role="bold">Removed</strong> events are dispatched for all items in the order they are removed.'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-006",content:"Removes the given edge from the graph.  Before the edge is removed all dependent items (the edge’s labels and ports,\nalso the adjacent edges) are removed."},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-007",content:'All items can be removed at once using the <api-link id="graph_model-graph-083-api-link-010" data-member="clear()" data-text="clear" data-type="yfiles.graph.IGraph"></api-link> method, which leaves an empty graph\nafter use. Like the <span class="api">remove</span> method\n<span class="api">clear</span> removes all items in a consistent order, dispatching <strong id="graph_model-graph-083-emphasis-005" class="bold" role="bold">Removed</strong> events for\nall items in the order they are removed.'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-008",content:'As stated above a graph is defined as consisting of a node set and an edge set.\n<span class="api">IGraph</span> provides a read-only access to its nodes and edges via properties\n<api-link id="graph_model-graph-083-api-link-011" data-member="nodes" data-text="nodes" data-type="yfiles.graph.IGraph"></api-link> and <api-link id="graph_model-graph-083-api-link-012" data-member="edges" data-text="edges" data-type="yfiles.graph.IGraph"></api-link>. The graph item collections are Iterables\nwhich provide a fail fast Iterator, i.e. an iterator which breaks upon concurrent modifications.'},{tagname:"example",id:"graph_model-graph-083-example-001",title:"Iterating over nodes",content:'<pre class="programlisting javascript" id="graph_model-graph-083-programlisting-001" language="javascript" format="linespecific"><code>// iterating over nodes\r\nfor (const node of graph.nodes) {\r\n  // do something with the node\r\n}\r\n\r\n// ES-5 style\r\ngraph.nodes.forEach((node, index) => {\r\n  // do something with the node\r\n})\r\n\r\n// more verbose non-functional style:\r\nfor (const en = graph.nodes.getEnumerator(); en.moveNext(); ) {\r\n  const node = en.current\r\n  // do something with the node\r\n}\r\n\r\n// avoiding concurrent modifications: iterate over copy\r\ngraph.nodes.toList().forEach(node => {\r\n  // removing a node will modify graph.nodes\r\n  graph.remove(node)\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-009",content:'<span class="api">IGraph</span> dispatches a number of events to report all changes to the graph and its items.\nMore information about the graph events can be found in section <a href="#/dguide/customizing_graph-graph_events">Reacting to Graph Changes</a>.'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-010",content:'<span class="api">IGraph</span> provides default values for properties which are not explicitly specified\nat the creation time of a graph item. These are provided in the properties\n<api-link id="graph_model-graph-083-api-link-013" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link> or <api-link id="graph_model-graph-083-api-link-014" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link>.\nSee section <a href="#/dguide/graph_model-item_defaults">Setting Defaults for new Items</a>.'},{tagname:"para","class":"dguide-para",id:"graph_model-graph-083-simpara-011",content:'The default implementation of <api-link id="graph_model-graph-083-api-link-015" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> is class <api-link id="graph_model-graph-083-api-link-016" data-member="" data-text="DefaultGraph" data-type="yfiles.graph.DefaultGraph"></api-link>.\nAn instance of <span class="api">DefaultGraph</span> can be created using its default constructor.\nAlso, an instance of <span class="api">DefaultGraph</span> is provided by default in the <api-link id="graph_model-graph-083-api-link-017" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link>’s\n<api-link id="graph_model-graph-083-api-link-018" data-member="graph" data-text="graph" data-type="yfiles.view.GraphComponent"></api-link> property.'}]},{tagname:"section",id:"graph_model-nodes",title:"Nodes",children:[{tagname:"para","class":"dguide-para",id:"graph_model-nodes-084-simpara-001",content:'A node is a graph item which represents an entity. It is modeled by the interface <api-link id="graph_model-nodes-084-api-link-001" data-member="" data-text="INode" data-type="yfiles.graph.INode"></api-link>.\n<span class="api">INode</span> provides a number of properties which define the node’s characteristics.\nAll properties (except <span class="api">tag</span>) are read-only. You can set their values\nusing the corresponding methods on <span class="api">IGraph</span>.'},{tagname:"table","class":"",id:"graph_model-nodes-084-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:17%;"><col style="width:17%;"><col style="width:67%;"></colgroup><thead id="graph_model-nodes-084-thead-001"><tr id="graph_model-nodes-084-row-001"><th id="graph_model-nodes-084-entry-001" align="left" valign="top">\nProperty\n</th><th id="graph_model-nodes-084-entry-002" align="left" valign="top">\nSetter\n</th><th id="graph_model-nodes-084-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="graph_model-nodes-084-tbody-001"><tr id="graph_model-nodes-084-row-002"><td id="graph_model-nodes-084-entry-004" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-002"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-002" data-member="layout" data-text="layout" data-type="yfiles.graph.INode"></api-link></para></td><td id="graph_model-nodes-084-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-003"><span class="api">IGraph</span>.<api-link id="graph_model-nodes-084-api-link-003" data-member="setNodeLayout(yfiles.graph.INode,yfiles.geometry.Rect)" data-text="setNodeLayout(node:&#xA0;INode, layout:&#xA0;Rect)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-nodes-084-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-004">The node’s layout, i.e. its location and size. See the section <a href="#/dguide/view_item-layout_nodes">about node layout</a>.</para></td></tr><tr id="graph_model-nodes-084-row-003"><td id="graph_model-nodes-084-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-005"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-004" data-member="style" data-text="style" data-type="yfiles.graph.INode"></api-link></para></td><td id="graph_model-nodes-084-entry-008" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-006"><span class="api">IGraph</span>.<api-link id="graph_model-nodes-084-api-link-005" data-member="setStyle(yfiles.graph.INode,yfiles.styles.INodeStyle)" data-text="setStyle(node:&#xA0;INode, style:&#xA0;INodeStyle)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-nodes-084-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-007">The visual appearance of the node. See section <a href="#/dguide/view_visualization-graph-elements_styles">Styles</a>.</para></td></tr><tr id="graph_model-nodes-084-row-004"><td id="graph_model-nodes-084-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-008"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-006" data-member="labels" data-text="labels" data-type="yfiles.graph.ILabelOwner"></api-link></para></td><td id="graph_model-nodes-084-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-009"><span class="api">IGraph</span>.<api-link id="graph_model-nodes-084-api-link-007" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-nodes-084-entry-012" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-010">The collection of <a href="#/dguide/graph_model-labels">labels</a> which are associated with this node.</para></td></tr><tr id="graph_model-nodes-084-row-005"><td id="graph_model-nodes-084-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-011"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-008" data-member="ports" data-text="ports" data-type="yfiles.graph.IPortOwner"></api-link></para></td><td id="graph_model-nodes-084-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-012"><span class="api">IGraph</span>.<api-link id="graph_model-nodes-084-api-link-009" data-member="addPort" data-text="addPort" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-nodes-084-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-013">The collection of <a href="#/dguide/graph_model-ports">ports</a> which are associated with this node.</para></td></tr><tr id="graph_model-nodes-084-row-006"><td id="graph_model-nodes-084-entry-016" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-014"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-010" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-nodes-084-entry-017" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-015"><span class="api">INode</span>.<api-link id="graph_model-nodes-084-api-link-011" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-nodes-084-entry-018" align="left" valign="top"><para class="dguide-para" id="graph_model-nodes-084-simpara-016">An object of arbitrary type which can be used to bind user data to this node.\n  See <a href="#/dguide/graph_model-connecting_business_models">Storing Business Data for Graph Elements</a>. Note that this is the only\n  property which provides both getter and setter.</para></td></tr></tbody>'},{tagname:"figure","class":"image",title:"Node properties",id:"graph_model-nodes-084-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_node_bounds.e5d0b2ef.png",alt:"",title:'<para class="dguide-para">Layout</para>'},{tagname:"img",src:"assets/graph_model_node_styles.0c2c30ea.png",alt:"",title:'<para class="dguide-para">Style</para>'},{tagname:"img",src:"assets/graph_model_node_labels.eb04d556.png",alt:"",title:'<para class="dguide-para">Labels</para>'},{tagname:"img",src:"assets/graph_model_node_ports.fbd2e9ea.png",alt:"",title:'<para class="dguide-para">Ports</para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-nodes-084-simpara-017",content:'A node cannot be simply created with a constructor. Instead, you can create nodes as well as\nremove them from the graph using <span class="api">IGraph</span>’s methods:'},{tagname:"para",content:'<dl id="graph_model-nodes-084-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-nodes-084-term-001"><api-link id="graph_model-nodes-084-api-link-012" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode(layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-nodes-084-term-002"><api-link id="graph_model-nodes-084-api-link-013" data-member="createNodeAt(yfiles.geometry.Point,yfiles.styles.INodeStyle,Object)" data-text="createNodeAt(location:&#xA0;Point, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-nodes-084-term-003"><api-link id="graph_model-nodes-084-api-link-014" data-member="createNode(yfiles.graph.INode,yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode(parent:&#xA0;INode, layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-nodes-084-listitem-001">\n<p id="graph_model-nodes-084-simpara-018">Creates a node. The various overloads allow setting the new node’s properties at creation time.\nValues which are not passed as parameters will be set to the default values as defined in the\n<a href="#/dguide/graph_model-item_defaults">node defaults</a>.</p>\n</dd>\n<dt id="graph_model-nodes-084-term-004"><api-link id="graph_model-nodes-084-api-link-015" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-nodes-084-listitem-002">\n<p id="graph_model-nodes-084-simpara-019">Removes the given node from the graph. Before the node is removed all dependent items (the node’s labels and ports,\nalso adjacent edges) are removed.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"graph_model-nodes-084-important-001",content:'<p id="graph_model-nodes-084-simpara-020">You can only modify or remove nodes which are part of the current graph instance.\nTrying to modify or remove a node which\nalready has been removed will result in an exception.\nAlso, if your use case involves several <span class="api">IGraph</span> instances (especially if you are using filtering or folding)\ntake care to modify and remove nodes only with the graph the node belongs to.</p>'}]},{tagname:"section",id:"graph_model-edges",title:"Edges",children:[{tagname:"para","class":"dguide-para",id:"graph_model-edges-085-simpara-001",content:'An edge is a graph element that represents a connection between two entities. It is modeled by the interface\n<api-link id="graph_model-edges-085-api-link-001" data-member="" data-text="IEdge" data-type="yfiles.graph.IEdge"></api-link>. An edge always has a source port and a target port which link the edge to their owners,\nthe source and target node or edge. Furthermore, the source and target port’s locations provide the geometric\ninformation for the edge’s start and end point.'},{tagname:"para","class":"dguide-para",id:"graph_model-edges-085-simpara-002",content:'Interface <span class="api">IEdge</span> provides a number of read-only properties which define the edge’s characteristics.\nYou can set their values using <span class="api">IGraph</span>’s methods.'},{tagname:"table","class":"",id:"graph_model-edges-085-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:17%;"><col style="width:17%;"><col style="width:67%;"></colgroup><thead id="graph_model-edges-085-thead-001"><tr id="graph_model-edges-085-row-001"><th id="graph_model-edges-085-entry-001" align="left" valign="top">\nProperty\n</th><th id="graph_model-edges-085-entry-002" align="left" valign="top">\nSetter Method\n</th><th id="graph_model-edges-085-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="graph_model-edges-085-tbody-001"><tr id="graph_model-edges-085-row-002"><td id="graph_model-edges-085-entry-004" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-003"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-002" data-member="sourcePort" data-text="sourcePort" data-type="yfiles.graph.IEdge"></api-link></para></td><td id="graph_model-edges-085-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-004"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-003" data-member="setEdgePorts(yfiles.graph.IEdge,yfiles.graph.IPort,yfiles.graph.IPort)" data-text="setEdgePorts(edge:&#xA0;IEdge, sourcePort:&#xA0;IPort, targetPort:&#xA0;IPort)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-005">The <a href="#/dguide/graph_model-ports">port</a> to which the edge is connected at its start.</para></td></tr><tr id="graph_model-edges-085-row-003"><td id="graph_model-edges-085-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-006"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-004" data-member="targetPort" data-text="targetPort" data-type="yfiles.graph.IEdge"></api-link></para></td><td id="graph_model-edges-085-entry-008" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-007"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-005" data-member="setEdgePorts(yfiles.graph.IEdge,yfiles.graph.IPort,yfiles.graph.IPort)" data-text="setEdgePorts(edge:&#xA0;IEdge, sourcePort:&#xA0;IPort, targetPort:&#xA0;IPort)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-008">The <a href="#/dguide/graph_model-ports">port</a> to which the edge is connected at its end.</para></td></tr><tr id="graph_model-edges-085-row-004"><td id="graph_model-edges-085-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-009"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-006" data-member="bends" data-text="bends" data-type="yfiles.graph.IEdge"></api-link></para></td><td id="graph_model-edges-085-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-010"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-007" data-member="addBend(yfiles.graph.IEdge,yfiles.geometry.Point,number)" data-text="addBend" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-012" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-011">The collection of bends which define the control points of the edge.</para></td></tr><tr id="graph_model-edges-085-row-005"><td id="graph_model-edges-085-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-012"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-008" data-member="style" data-text="style" data-type="yfiles.graph.IEdge"></api-link></para></td><td id="graph_model-edges-085-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-013"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-009" data-member="setStyle(yfiles.graph.IEdge,yfiles.styles.IEdgeStyle)" data-text="setStyle(edge:&#xA0;IEdge, style:&#xA0;IEdgeStyle)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-014">The style of the edge. See section <a href="#/dguide/view_visualization-graph-elements_styles">Styles</a>.</para></td></tr><tr id="graph_model-edges-085-row-006"><td id="graph_model-edges-085-entry-016" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-015"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-010" data-member="labels" data-text="labels" data-type="yfiles.graph.ILabelOwner"></api-link></para></td><td id="graph_model-edges-085-entry-017" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-016"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-011" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-018" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-017">The collection of <a href="#/dguide/graph_model-labels">labels</a> which are associated with this edge.</para></td></tr><tr id="graph_model-edges-085-row-007"><td id="graph_model-edges-085-entry-019" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-018"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-012" data-member="ports" data-text="ports" data-type="yfiles.graph.IPortOwner"></api-link></para></td><td id="graph_model-edges-085-entry-020" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-019"><span class="api">IGraph</span>.<api-link id="graph_model-edges-085-api-link-013" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-edges-085-entry-021" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-020">The collection of <a href="#/dguide/graph_model-ports">ports</a> which are associated with this edge.</para></td></tr><tr id="graph_model-edges-085-row-008"><td id="graph_model-edges-085-entry-022" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-021"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-014" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-edges-085-entry-023" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-022"><span class="api">IEdge</span>.<api-link id="graph_model-edges-085-api-link-015" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-edges-085-entry-024" align="left" valign="top"><para class="dguide-para" id="graph_model-edges-085-simpara-023">An object of arbitrary type which can be used to bind user data to this edge.\n  See <a href="#/dguide/graph_model-connecting_business_models">Storing Business Data for Graph Elements</a>.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"graph_model-edges-085-simpara-024",content:'Don’t confuse the edge’s <api-link id="graph_model-edges-085-api-link-016" data-member="sourcePort" data-text="sourcePort" data-type="yfiles.graph.IEdge"></api-link> and <api-link id="graph_model-edges-085-api-link-017" data-member="targetPort" data-text="targetPort" data-type="yfiles.graph.IEdge"></api-link> with\nthe edge’s <api-link id="graph_model-edges-085-api-link-018" data-member="ports" data-text="ports" data-type="yfiles.graph.IPortOwner"></api-link>: the source and target port connect the edge with\nthe nodes or edges which are the owners of these ports. For the edge’s ports on the other hand the edge itself is the\nowner. These ports can be connection points (i.e. source and target ports) for other edges.'},{tagname:"para","class":"dguide-para tip",id:"graph_model-edges-085-tip-001",content:'<p id="graph_model-edges-085-simpara-025">You don’t have to explicitly create or remove ports.\nFor use cases which don’t require explicit port objects\nyFiles for HTML can automatically create and remove ports as required:\nCreating an edge using <api-link id="graph_model-edges-085-api-link-019" data-member="createEdge(yfiles.graph.INode,yfiles.graph.INode,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge(INode, INode, IEdgeStyle, Object)" data-type="yfiles.graph.IGraph"></api-link>\nwill implicitly create ports at the source and target nodes.\nEnabling the <a href="#/dguide/graph_model-auto_cleanup_ports">auto-cleanup feature</a> for ports\nwill automatically remove a port if the last edge connecting to it has been\n<api-link id="graph_model-edges-085-api-link-020" data-member="remove(yfiles.graph.IModelItem)" data-text="removed" data-type="yfiles.graph.IGraph"></api-link>.</p>'},{tagname:"figure","class":"image",title:"Edge properties",id:"graph_model-edges-085-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_edge_source_target.ecee11e4.png",alt:"",title:'<para class="dguide-para">Source and target port</para>'},{tagname:"img",src:"assets/graph_model_edge_style.8b6a225f.png",alt:"",title:'<para class="dguide-para">Style</para>'},{tagname:"img",src:"assets/graph_model_edge_labels.77a22526.png",alt:"",title:'<para class="dguide-para">Labels</para>'},{tagname:"img",src:"assets/graph_model_edge_ports.d0c561de.png",alt:"",title:'<para class="dguide-para">Ports</para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-edges-085-simpara-026",content:'You can create or remove edges using <span class="api">IGraph</span>’s\nmethods. Furthermore, you can re-connect an existing edge to new source and target ports:'},{tagname:"para",content:'<dl id="graph_model-edges-085-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-edges-085-term-001"><api-link id="graph_model-edges-085-api-link-021" data-member="createEdge(yfiles.graph.IPort,yfiles.graph.IPort,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge(sourcePort:&#xA0;IPort, targetPort:&#xA0;IPort, style:&#xA0;IEdgeStyle, tag:&#xA0;Object):&#xA0;IEdge" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-edges-085-term-002"><api-link id="graph_model-edges-085-api-link-022" data-member="createEdge" data-text="createEdge" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-edges-085-listitem-001">\n<p id="graph_model-edges-085-simpara-027">Creates a new edge between two ports. The new edge’s properties will get the default values as defined in the\n<a href="#/dguide/graph_model-item_defaults">edge defaults</a> if they are not passed as parameters.</p>\n</dd>\n<dt id="graph_model-edges-085-term-003"><api-link id="graph_model-edges-085-api-link-023" data-member="createEdge(yfiles.graph.INode,yfiles.graph.INode,yfiles.styles.IEdgeStyle,Object)" data-text="createEdge(source:&#xA0;INode, target:&#xA0;INode, style:&#xA0;IEdgeStyle, tag:&#xA0;Object):&#xA0;IEdge" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-edges-085-listitem-002">\n<p id="graph_model-edges-085-simpara-028">Creates a new edge between two nodes. Since an edge always connects to ports this method will add a new port\nto each of the source and target node, first, then create the new edge between the new ports.</p>\n</dd>\n<dt id="graph_model-edges-085-term-004"><api-link id="graph_model-edges-085-api-link-024" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-edges-085-listitem-003">\n<p id="graph_model-edges-085-simpara-029">Removes the given edge from the graph.  Before the edge is removed all dependent items (the edge’s labels and ports,\nalso the adjacent edges) are removed.</p>\n</dd>\n<dt id="graph_model-edges-085-term-005"><api-link id="graph_model-edges-085-api-link-025" data-member="setEdgePorts(yfiles.graph.IEdge,yfiles.graph.IPort,yfiles.graph.IPort)" data-text="setEdgePorts(edge:&#xA0;IEdge, sourcePort:&#xA0;IPort, targetPort:&#xA0;IPort):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-edges-085-listitem-004">\n<p id="graph_model-edges-085-simpara-030">Re-connects an edge to new source and target ports.</p>\n</dd>\n</dl>'},{tagname:"section",id:"graph_model-bends",title:"Bends",children:[{tagname:"figure","class":"image",title:"Edges with and without bends",id:"graph_model-bends-086-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_edge.38213d41.png",alt:"",title:'<para class="dguide-para">Straight edge</para>'},{tagname:"img",src:"assets/graph_model_edge_bends.ade28805.png",alt:"",title:'<para class="dguide-para">Edge with bends</para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-bends-086-simpara-001",content:'An edge does not necessarily have to be a straight line between its source and target port.\nIt can have an arbitrary number of bends. Bends are points that subdivide edges into segments.\nAn edge’s path is the sum of all of its segments.\nA bend is defined by the interface <api-link id="graph_model-bends-086-api-link-001" data-member="" data-text="IBend" data-type="yfiles.graph.IBend"></api-link>.\nAlthough <span class="api">IBend</span> also extends <api-link id="graph_model-bends-086-api-link-002" data-member="" data-text="IModelItem" data-type="yfiles.graph.IModelItem"></api-link> like the other graph items,\na bend is more limited. It can only exist as part of an edge, and it has no own style.\nLike the other model items, though, you can only add, remove, or modify bends using\n<span class="api">IGraph</span>’s methods:'},{tagname:"para",content:'<dl id="graph_model-bends-086-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-bends-086-term-001"><api-link id="graph_model-bends-086-api-link-003" data-member="addBend(yfiles.graph.IEdge,yfiles.geometry.Point,number)" data-text="addBend(edge:&#xA0;IEdge, location:&#xA0;Point, index:&#xA0;number):&#xA0;IBend" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-bends-086-listitem-001">\n<p id="graph_model-bends-086-simpara-002">Adds a new bend to the given edge at the given location.</p>\n</dd>\n<dt id="graph_model-bends-086-term-002"><api-link id="graph_model-bends-086-api-link-004" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-bends-086-listitem-002">\n<p id="graph_model-bends-086-simpara-003">Removes a bend from the edge.</p>\n</dd>\n<dt id="graph_model-bends-086-term-003"><api-link id="graph_model-bends-086-api-link-005" data-member="setBendLocation(yfiles.graph.IBend,yfiles.geometry.Point)" data-text="setBendLocation(bend:&#xA0;IBend, location:&#xA0;Point):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-bends-086-listitem-003">\n<p id="graph_model-bends-086-simpara-004">Moves the given bend to the new location.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"graph_model-bends-086-important-001",content:'<p id="graph_model-bends-086-simpara-005">You can only modify or remove edges or bends which are part of the current graph instance.\nTrying to modify or remove an edge or bend which\nalready has been removed will result in an exception.\nAlso, if your use case involves several <span class="api">IGraph</span> instances (especially if you are using filtering or folding)\ntake care to modify and remove edges or bends only with the graph they belong to.</p>'}]},{tagname:"section",id:"_edge_to_edge_connections",title:"Edge to Edge Connections",children:[{tagname:"para","class":"dguide-para",id:"_edge_to_edge_connections-087-simpara-001",content:'An <span class="api">IEdge</span> is also an <span class="api">IPortOwner</span>. Since an edge’s source or target port can be an arbitrary port\n(contained in the same graph as the edge, of course) it does not necessarily have to be owned by a node. Thus,\nit is possible to let an edge start and/or end at other edges. There are some limitations, however:'},{tagname:"para",content:'<ul id="_edge_to_edge_connections-087-itemizedlist-001"><li id="_edge_to_edge_connections-087-listitem-001"><p id="_edge_to_edge_connections-087-simpara-002">The <a href="#/dguide/layout">automatic layout algorithms</a> don’t support edge-to-edge connections.</p></li><li id="_edge_to_edge_connections-087-listitem-002"><p id="_edge_to_edge_connections-087-simpara-003">Edge-to-edge connections are not supported if <a href="#/dguide/folding">folding</a> is enabled.</p></li><li id="_edge_to_edge_connections-087-listitem-003"><p id="_edge_to_edge_connections-087-simpara-004">A graph which consists only of edges is not possible. All edges must at least indirectly connect to a node.</p></li></ul>'}]}]},{tagname:"section",id:"graph_model-labels",title:"Labels",children:[{tagname:"para","class":"dguide-para",id:"graph_model-labels-088-simpara-001",content:'A label adds information to a graph element by providing a caption. It is modeled by interface\n<api-link id="graph_model-labels-088-api-link-001" data-member="" data-text="ILabel" data-type="yfiles.graph.ILabel"></api-link>. It has to belong to (i.e. added to) a <span class="def">label owner</span>, modeled by the\n<api-link id="graph_model-labels-088-api-link-002" data-member="" data-text="ILabelOwner" data-type="yfiles.graph.ILabelOwner"></api-link> interface. The three interfaces <span class="api">INode</span>, <span class="api">IEdge</span>,\nand <span class="api">IPort</span>\nextend this interface. In this manual we sometimes refer to labels at nodes, edges, and ports as <span class="def">node labels</span>,\n<span class="def">edge labels</span>,\nand <span class="def">port labels</span>, respectively. Note that a label owner can have an arbitrary number of labels.'},{tagname:"para","class":"dguide-para",id:"graph_model-labels-088-simpara-002",content:'Interface <span class="api">ILabel</span> exposes the following read-only properties which can be modified by\n<span class="api">IGraph</span>’s methods:'},{tagname:"table","class":"",id:"graph_model-labels-088-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:17%;"><col style="width:17%;"><col style="width:67%;"></colgroup><thead id="graph_model-labels-088-thead-001"><tr id="graph_model-labels-088-row-001"><th id="graph_model-labels-088-entry-001" align="left" valign="top">\nProperty\n</th><th id="graph_model-labels-088-entry-002" align="left" valign="top">\nSetter Method\n</th><th id="graph_model-labels-088-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="graph_model-labels-088-tbody-001"><tr id="graph_model-labels-088-row-002"><td id="graph_model-labels-088-entry-004" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-003"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-003" data-member="text" data-text="text" data-type="yfiles.graph.ILabel"></api-link></para></td><td id="graph_model-labels-088-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-004"><span class="api">IGraph</span>.<api-link id="graph_model-labels-088-api-link-004" data-member="setLabelText(yfiles.graph.ILabel,string)" data-text="setLabelText(label:&#xA0;ILabel, text:&#xA0;string)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-labels-088-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-005">The text which is displayed by the label.</para></td></tr><tr id="graph_model-labels-088-row-003"><td id="graph_model-labels-088-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-006"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-005" data-member="owner" data-text="owner" data-type="yfiles.graph.ILabel"></api-link></para></td><td id="graph_model-labels-088-entry-008" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-007">cannot be changed after creation</para></td><td id="graph_model-labels-088-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-008">The node, edge, or port this label belongs to.</para></td></tr><tr id="graph_model-labels-088-row-004"><td id="graph_model-labels-088-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-009"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-006" data-member="layoutParameter" data-text="layoutParameter" data-type="yfiles.graph.ILabel"></api-link></para></td><td id="graph_model-labels-088-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-010"><span class="api">IGraph</span>.<api-link id="graph_model-labels-088-api-link-007" data-member="setLabelLayoutParameter(yfiles.graph.ILabel,yfiles.graph.ILabelModelParameter)" data-text="setLabelLayoutParameter(label:&#xA0;ILabel, layoutParameter:&#xA0;ILabelModelParameter)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-labels-088-entry-012" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-011">An <span class="api">ILabelModelParameter</span> which defines the location of the label.\nSee the section <a href="#/dguide/view_item-layout_labels">about label models</a>.</para></td></tr><tr id="graph_model-labels-088-row-005"><td id="graph_model-labels-088-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-012"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-008" data-member="style" data-text="style" data-type="yfiles.graph.ILabel"></api-link></para></td><td id="graph_model-labels-088-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-013"><span class="api">IGraph</span>.<api-link id="graph_model-labels-088-api-link-009" data-member="setStyle(yfiles.graph.ILabel,yfiles.styles.ILabelStyle)" data-text="setStyle(label:&#xA0;ILabel, style:&#xA0;ILabelStyle)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-labels-088-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-014">The label’s style. See section <a href="#/dguide/view_visualization-graph-elements_styles">Styles</a>.</para></td></tr><tr id="graph_model-labels-088-row-006"><td id="graph_model-labels-088-entry-016" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-015"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-010" data-member="preferredSize" data-text="preferredSize" data-type="yfiles.graph.ILabel"></api-link></para></td><td id="graph_model-labels-088-entry-017" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-016"><span class="api">IGraph</span>.<api-link id="graph_model-labels-088-api-link-011" data-member="setLabelPreferredSize(yfiles.graph.ILabel,yfiles.geometry.Size)" data-text="setLabelPreferredSize(label:&#xA0;ILabel, preferredSize:&#xA0;Size)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-labels-088-entry-018" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-017">The label’s <strong id="graph_model-labels-088-emphasis-001" class="bold" role="bold">preferred</strong> size. The actual size of the label might differ depending on the\n  <span class="api">layoutParameter</span></para></td></tr><tr id="graph_model-labels-088-row-007"><td id="graph_model-labels-088-entry-019" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-018"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-012" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-labels-088-entry-020" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-019"><span class="api">ILabel</span>.<api-link id="graph_model-labels-088-api-link-013" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-labels-088-entry-021" align="left" valign="top"><para class="dguide-para" id="graph_model-labels-088-simpara-020">An object of arbitrary type which can be used to bind user data to this label.\n  See <a href="#/dguide/graph_model-connecting_business_models">Storing Business Data for Graph Elements</a>.</para></td></tr></tbody>'
},{tagname:"para","class":"dguide-para",id:"graph_model-labels-088-simpara-021",content:'The following image shows labels at nodes and edges with different styles and location model parameters.\nNote that edge labels can be axis-aligned or rotated with the edge, depending on their label model.\nSee the section <a href="#/dguide/view_item-layout_labels">about label models</a>.'},{tagname:"figure","class":"image",title:"Node labels and edge labels",id:"graph_model-labels-088-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_labels_example.00ca0ea4.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-labels-088-simpara-022",content:'Even though labels are kept in their owner’s labels collection, you can only add or remove them by using\n<span class="api">IGraph</span>’s methods.'},{tagname:"para",content:'<dl id="graph_model-labels-088-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-labels-088-term-001"><api-link id="graph_model-labels-088-api-link-014" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel(owner:&#xA0;ILabelOwner, text:&#xA0;string, layoutParameter:&#xA0;ILabelModelParameter, style:&#xA0;ILabelStyle, preferredSize:&#xA0;Size, tag:&#xA0;Object):&#xA0;ILabel" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-labels-088-listitem-001">\n<p id="graph_model-labels-088-simpara-023">Creates a new label for the given owner. The new label’s properties will get the default values as defined in the\n<a href="#/dguide/graph_model-item_defaults">label defaults</a> if they are not passed as parameters.</p>\n</dd>\n<dt id="graph_model-labels-088-term-002"><api-link id="graph_model-labels-088-api-link-015" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-labels-088-listitem-002">\n<p id="graph_model-labels-088-simpara-024">Removes the given label from the graph.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"graph_model-labels-088-important-001",content:'<p id="graph_model-labels-088-simpara-025">You can only modify or remove labels which are part of the current graph instance.\nTrying to modify or remove a label which\nalready has been removed will result in an exception.\nAlso, if your use case involves several <span class="api">IGraph</span> instances (especially if you are using filtering or folding)\ntake care to modify and remove labels only with the graph the label belongs to.</p>'}]},{tagname:"section",id:"graph_model-ports",title:"Ports",children:[{tagname:"para","class":"dguide-para",id:"graph_model-ports-089-simpara-001",content:'Ports are structural elements since edges connect to ports at their source and\ntarget end. They always have to belong to a node or edge, or, more generally, to a port owner.\nThe port owner is modeled by the <api-link id="graph_model-ports-089-api-link-001" data-member="" data-text="IPortOwner" data-type="yfiles.graph.IPortOwner"></api-link> interface which is a super\ninterface for both\n<span class="api">INode</span> and <span class="api">IEdge</span>.'},{tagname:"figure","class":"image",title:"IPorts and IPortOwner",id:"graph_model-ports-089-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_iportowner.7d5a6768.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-ports-089-simpara-002",content:"Note that a port owner can hold an arbitrary number of ports. Also note\nthat ports can exist without edges linking to them, e.g. to provide potential connection points\nin an interactive scenario."},{tagname:"para","class":"dguide-para",id:"graph_model-ports-089-simpara-003",content:"Besides their structural role they also provide a geometry, i.e. a location, and a style (i.e. a visual information,\nalthough ports are invisible by default):"},{tagname:"table","class":"",id:"graph_model-ports-089-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:17%;"><col style="width:17%;"><col style="width:67%;"></colgroup><thead id="graph_model-ports-089-thead-001"><tr id="graph_model-ports-089-row-001"><th id="graph_model-ports-089-entry-001" align="left" valign="top">\nProperty\n</th><th id="graph_model-ports-089-entry-002" align="left" valign="top">\nSetter Method\n</th><th id="graph_model-ports-089-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="graph_model-ports-089-tbody-001"><tr id="graph_model-ports-089-row-002"><td id="graph_model-ports-089-entry-004" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-004"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-002" data-member="owner" data-text="owner" data-type="yfiles.graph.IPort"></api-link></para></td><td id="graph_model-ports-089-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-005">cannot be modified after creation</para></td><td id="graph_model-ports-089-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-006">The node or edge with which this port is associated.</para></td></tr><tr id="graph_model-ports-089-row-003"><td id="graph_model-ports-089-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-007"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-003" data-member="locationParameter" data-text="locationParameter" data-type="yfiles.graph.IPort"></api-link></para></td><td id="graph_model-ports-089-entry-008" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-008"><span class="api">IGraph</span>.<api-link id="graph_model-ports-089-api-link-004" data-member="setPortLocationParameter(yfiles.graph.IPort,yfiles.graph.IPortLocationModelParameter)" data-text="setPortLocationParameter(port:&#xA0;IPort, locationParameter:&#xA0;IPortLocationModelParameter)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-ports-089-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-009">The <span class="api">IPortLocationModelParameter</span> which defines the location of the port.\n  See the section <a href="#/dguide/view_item-layout_ports">about port location models</a>.</para></td></tr><tr id="graph_model-ports-089-row-004"><td id="graph_model-ports-089-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-010"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-005" data-member="style" data-text="style" data-type="yfiles.graph.IPort"></api-link></para></td><td id="graph_model-ports-089-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-011"><span class="api">IGraph</span>.<api-link id="graph_model-ports-089-api-link-006" data-member="setStyle(yfiles.graph.IPort,yfiles.styles.IPortStyle)" data-text="setStyle(port:&#xA0;IPort, style:&#xA0;IPortStyle)" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-ports-089-entry-012" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-012">The port’s style. See section <a href="#/dguide/view_visualization-graph-elements_styles">Styles</a>.</para></td></tr><tr id="graph_model-ports-089-row-005"><td id="graph_model-ports-089-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-013"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-007" data-member="labels" data-text="labels" data-type="yfiles.graph.ILabelOwner"></api-link></para></td><td id="graph_model-ports-089-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-014"><span class="api">IGraph</span>.<api-link id="graph_model-ports-089-api-link-008" data-member="addLabel(yfiles.graph.ILabelOwner,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-ports-089-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-015">The collection of <a href="#/dguide/graph_model-labels">labels</a> which are associated with this port.</para></td></tr><tr id="graph_model-ports-089-row-006"><td id="graph_model-ports-089-entry-016" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-016"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-009" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-ports-089-entry-017" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-017"><span class="api">IPort</span>.<api-link id="graph_model-ports-089-api-link-010" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link></para></td><td id="graph_model-ports-089-entry-018" align="left" valign="top"><para class="dguide-para" id="graph_model-ports-089-simpara-018">An object of arbitrary type which can be used to bind user data to this port.\n  See <a href="#/dguide/graph_model-connecting_business_models">Storing Business Data for Graph Elements</a>.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"graph_model-ports-089-simpara-019",content:'Similar to the other graph items, you can only create or remove ports using methods provided by\n<api-link id="graph_model-ports-089-api-link-011" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link>.'},{tagname:"para",content:'<dl id="graph_model-ports-089-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-ports-089-term-001"><api-link id="graph_model-ports-089-api-link-012" data-member="addPortAt(yfiles.graph.IPortOwner,yfiles.geometry.Point,yfiles.styles.IPortStyle,Object)" data-text="addPortAt(owner:&#xA0;IPortOwner, location:&#xA0;Point, style:&#xA0;IPortStyle, tag:&#xA0;Object):&#xA0;IPort" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-ports-089-term-002"><api-link id="graph_model-ports-089-api-link-013" data-member="addPort(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,yfiles.styles.IPortStyle,Object)" data-text="addPort(owner:&#xA0;IPortOwner, locationParameter:&#xA0;IPortLocationModelParameter, style:&#xA0;IPortStyle, tag:&#xA0;Object):&#xA0;IPort" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-ports-089-listitem-001">\n<p id="graph_model-ports-089-simpara-020">Creates a new port for the given owner. The new port’s properties will get the default values as defined in the\n<a href="#/dguide/graph_model-item_defaults">port defaults</a> if they are not passed as parameters.</p>\n</dd>\n<dt id="graph_model-ports-089-term-003"><api-link id="graph_model-ports-089-api-link-014" data-member="remove(yfiles.graph.IModelItem)" data-text="remove(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-ports-089-listitem-002">\n<p id="graph_model-ports-089-simpara-021">Removes the given port from the graph. Before the port is removed all adjacent edges are removed, too.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"graph_model-ports-089-important-001",content:'<p id="graph_model-ports-089-simpara-022">You can only modify or remove ports which are part of the current graph instance.\nTrying to modify or remove a port which\nalready has been removed will result in an exception.\nAlso, if your use case involves several <span class="api">IGraph</span> instances (especially if you are using filtering or folding)\ntake care to modify and remove ports only with the graph the port belongs to.</p>'}]},{tagname:"section",id:"graph_model-grouping",title:"Grouping Nodes",children:[{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-001",content:'The classic graph model is extended so that nodes can have other nodes as <span class="def">parent</span>.\nThe parent of a node is referred to as a <span class="def">group node</span>, nodes with a common parent are considered as being\nin the same <span class="def">group</span> or being <span class="def">grouped</span>.'},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-002",content:"All nodes have a parent. This can either be another node or <code>null</code> if the node is top-level and not\ncontained in any group node."},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-003",content:'<span class="api">IGraph</span> provides methods to create new nodes as group nodes. It also supports creating new nodes\nas child nodes of a given group node.'},{tagname:"para",content:'<dl id="graph_model-grouping-090-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-grouping-090-term-001"><api-link id="graph_model-grouping-090-api-link-001" data-member="createNode(yfiles.graph.INode,yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode(parent:&#xA0;INode, layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-001">\n<p id="graph_model-grouping-090-simpara-004">Creates a new node as child of an existing group node.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-002"><api-link id="graph_model-grouping-090-api-link-002" data-member="createGroupNode(yfiles.graph.INode,yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createGroupNode(parent:&#xA0;INode, layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-002">\n<p id="graph_model-grouping-090-simpara-005">Creates a new group node. Setting the <code>parent</code> parameter to an existing node will create the new node as child of the\ngiven parent node whereas setting it to <code>null</code> will create the new node top-level, i.e. as direct child of the graph.\nThe new node’s properties will get the default values as defined in the\n<a href="#/dguide/graph_model-item_defaults">groupNodeDefaults</a> if they are not passed as parameters.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"graph_model-grouping-090-note-001",content:'<p id="graph_model-grouping-090-simpara-006">Grouping nodes doesn’t affect the group node’s or child node’s layout.</p>'},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-007",content:"A group node is defined as a node which is capable to have children. It does not necessarily have to have children,\nthough. You can query and also set whether a node is a group node using the following methods."},{tagname:"para",content:'<dl id="graph_model-grouping-090-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="graph_model-grouping-090-term-003"><api-link id="graph_model-grouping-090-api-link-003" data-member="isGroupNode(yfiles.graph.INode)" data-text="isGroupNode(node:&#xA0;INode):&#xA0;boolean" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-003">\n<p id="graph_model-grouping-090-simpara-008">Determines whether a node is a normal node or a group node.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-004"><api-link id="graph_model-grouping-090-api-link-004" data-member="setIsGroupNode(yfiles.graph.INode,boolean)" data-text="setIsGroupNode(node:&#xA0;INode, isGroupNode:&#xA0;boolean):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-004">\n<p id="graph_model-grouping-090-simpara-009">Converts a normal node into a group node and vice versa.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-010",content:"Note that turning a group node into a normal node will fail if the node has child nodes. The other way around,\nif you set a normal node as a parent of another node, it will automatically become a group node."},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-011",content:'You can still change the parent of a node after creation. Setting a node’s parent to <code>null</code> will place the node\n<span class="def">top-level</span> into the graph. <span class="api">IGraph</span> supports setting the parent for one or more nodes at the\nsame time:'},{tagname:"para",content:'<dl id="graph_model-grouping-090-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="graph_model-grouping-090-term-005"><api-link id="graph_model-grouping-090-api-link-005" data-member="setParent(yfiles.graph.INode,yfiles.graph.INode)" data-text="setParent(node:&#xA0;INode, parent:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-005">\n<p id="graph_model-grouping-090-simpara-012">Sets the given node as new parent of the child node. Setting <code>null</code> as parent will re-parent the node to the root,\ni.e. as not in a group.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-006"><api-link id="graph_model-grouping-090-api-link-006" data-member="groupNodes(yfiles.graph.INode,yfiles.collections.IEnumerable)" data-text="groupNodes(parent:&#xA0;INode, children:&#xA0;IEnumerable&lt;INode&gt;):&#xA0;void" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-006">\n<p id="graph_model-grouping-090-simpara-013">Sets the given node as parent for all nodes in the given <code>Iterable</code>.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-007"><api-link id="graph_model-grouping-090-api-link-007" data-member="groupNodes(yfiles.collections.IEnumerable)" data-text="groupNodes(children:&#xA0;IEnumerable&lt;INode&gt;):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-007">\n<p id="graph_model-grouping-090-simpara-014">Creates a new group node and sets it as parent for the given nodes.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"graph_model-grouping-090-note-002",content:'<p id="graph_model-grouping-090-simpara-015">Removing a group node removes the group node but not its children. Instead, the children move one level up in\nthe hierarchy by automatically setting their parent to the removed node’s parent.</p>'},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-016",content:"You can easily query the node’s parent and children:"},{tagname:"para",content:'<dl id="graph_model-grouping-090-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="graph_model-grouping-090-term-008"><api-link id="graph_model-grouping-090-api-link-008" data-member="getParent(yfiles.graph.INode)" data-text="getParent(node:&#xA0;INode):&#xA0;INode" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-008">\n<p id="graph_model-grouping-090-simpara-017">Returns the node’s parent group node or <code>null</code> if the node is not in a group.\nIn the example below <span class="api">getParent</span> returns\n<code>Inner Group</code> for node <code>2</code> and <code>null</code> for <code>Outer Group</code>.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-009"><api-link id="graph_model-grouping-090-api-link-009" data-member="getChildren(yfiles.graph.INode)" data-text="getChildren(node:&#xA0;INode):&#xA0;IListEnumerable&lt;INode&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-009">\n<p id="graph_model-grouping-090-simpara-018">Returns an Iterable of the node’s child nodes. This method only returns the direct children. If the node has another\ngroup as child node only that group node will be returned, not its children.</p>\n<p id="graph_model-grouping-090-simpara-019">In the example below <span class="api">getChildren</span> returns\n<code>Inner Group</code> node <code>3</code> for <code>Outer Group</code>. Note that you can query the <span class="api">getChildren</span>\nmethod for <code>null</code>, too. In this case it returns the direct children of the graph (the top-level nodes),\n<code>Outer Group</code> and <code>Independent Group</code> in the example.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Grouping Hierarchy",id:"graph_model-grouping-090-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_grouping_hierarchy.5c40e440.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-grouping-090-simpara-020",content:'Class <api-link id="graph_model-grouping-090-api-link-010" data-member="" data-text="GroupingSupport" data-type="yfiles.graph.GroupingSupport"></api-link> provides a number of methods which support a more complex analysis\nof the node hierarchy:'},{tagname:"para",content:'<dl id="graph_model-grouping-090-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="graph_model-grouping-090-term-010"><api-link id="graph_model-grouping-090-api-link-011" data-member="groupingSupport" data-text="groupingSupport:&#xA0;GroupingSupport" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-grouping-090-listitem-010">\n<p id="graph_model-grouping-090-simpara-021">Retrieves an instance of <span class="api">GroupingSupport</span> for the graph.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-011"><api-link id="graph_model-grouping-090-api-link-012" data-member="getDescendants(yfiles.graph.INode)" data-text="getDescendants(node:&#xA0;INode):&#xA0;IEnumerable&lt;INode&gt;" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dd id="graph_model-grouping-090-listitem-011">\n<p id="graph_model-grouping-090-simpara-022">Gets all descendants of a group node, i.e. its children and recursively their children.\nThe enumeration will be top-down, i.e. all of a node’s ancestors will be enumerated before the respective node.</p>\n<p id="graph_model-grouping-090-simpara-023">In the example <span class="api">getDescendants</span> will yield\n<code>3</code>, <code>Inner Group</code>, <code>2</code>, <code>1</code>.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-012"><api-link id="graph_model-grouping-090-api-link-013" data-member="getDescendantsBottomUp(yfiles.graph.INode)" data-text="getDescendantsBottomUp(node:&#xA0;INode):&#xA0;IEnumerable&lt;INode&gt;" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dd id="graph_model-grouping-090-listitem-012">\n<p id="graph_model-grouping-090-simpara-024">Gets all descendants of a group node, i.e. its children and recursively their children.\nThe enumeration will be bottom-up, i.e. all of a node’s ancestors will be enumerated after the respective node.</p>\n<p id="graph_model-grouping-090-simpara-025">In the example <span class="api">getDescendantsBottomUp</span> will yield\n<code>1</code>, <code>2</code>, <code>Inner Group</code>, <code>3</code>.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-013"><api-link id="graph_model-grouping-090-api-link-014" data-member="isDescendant(yfiles.graph.INode,yfiles.graph.INode)" data-text="isDescendant(node:&#xA0;INode, ancestor:&#xA0;INode):&#xA0;boolean" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dd id="graph_model-grouping-090-listitem-013">\n<p id="graph_model-grouping-090-simpara-026">Whether the node is a descendant of the given group, i.e. a child of the given node or a child of its children.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-014"><api-link id="graph_model-grouping-090-api-link-015" data-member="getPathToRoot(yfiles.graph.INode)" data-text="getPathToRoot(node:&#xA0;INode):&#xA0;IList&lt;INode&gt;" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dd id="graph_model-grouping-090-listitem-014">\n<p id="graph_model-grouping-090-simpara-027">A list which includes the given node and all its parents up to the root, but not the root itself.</p>\n</dd>\n<dt id="graph_model-grouping-090-term-015"><api-link id="graph_model-grouping-090-api-link-016" data-member="getNearestCommonAncestor(Array)" data-text="getNearestCommonAncestor(nodes:&#xA0;Array):&#xA0;INode" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dt id="graph_model-grouping-090-term-016"><api-link id="graph_model-grouping-090-api-link-017" data-member="getNearestCommonAncestor(yfiles.collections.IEnumerable)" data-text="getNearestCommonAncestor(nodes:&#xA0;IEnumerable&lt;INode&gt;):&#xA0;INode" data-type="yfiles.graph.GroupingSupport"></api-link></dt><dd id="graph_model-grouping-090-listitem-015">\n<p id="graph_model-grouping-090-simpara-028">Gets the nearest common ancestor of the provided nodes. Can be <code>null</code> if there is none.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para tip",id:"graph_model-grouping-090-tip-001",content:'<p id="graph_model-grouping-090-simpara-029">A further extension to the grouping concept is the concept of <span class="def">folding</span>, i.e. expanding (opening) and collapsing\n(closing) group nodes. Folding is also supported by yFiles for HTML, see chapter <a href="#/dguide/folding">Folding</a> for more details.</p>'}]},{tagname:"section",id:"graph_model-item_defaults",title:"Setting Defaults for new Items",children:[{tagname:"para","class":"dguide-para",id:"graph_model-item_defaults-091-simpara-001",content:'<span class="api">IGraph</span>’s creation methods for elements allow creation of elements without explicitly\nspecifying initial properties like a style or an initial geometry. If an initial value is not explicitly specified,\na default value which is defined on <span class="api">IGraph</span>’s <api-link id="graph_model-item_defaults-091-api-link-001" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link>\nor <api-link id="graph_model-item_defaults-091-api-link-002" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link> properties is used.'},{tagname:"table","class":"",id:"graph_model-item_defaults-091-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Defaults for graph elements</caption><colgroup><col style="width:25%;"><col style="width:50%;"><col style="width:25%;"></colgroup><thead id="graph_model-item_defaults-091-thead-001"><tr id="graph_model-item_defaults-091-row-001"><th id="graph_model-item_defaults-091-entry-001" align="left" valign="top">\nGraph Item\n</th><th id="graph_model-item_defaults-091-entry-002" align="left" valign="top">\nProperty\n</th><th id="graph_model-item_defaults-091-entry-003" align="left" valign="top">\nType\n</th></tr></thead><tbody id="graph_model-item_defaults-091-tbody-001"><tr id="graph_model-item_defaults-091-row-002"><td id="graph_model-item_defaults-091-entry-004" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-002">nodes (not group nodes)</para></td><td id="graph_model-item_defaults-091-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-003"><api-link id="graph_model-item_defaults-091-api-link-003" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-item_defaults-091-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-004"><api-link id="graph_model-item_defaults-091-api-link-004" data-member="" data-text="INodeDefaults" data-type="yfiles.graph.INodeDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-003"><td id="graph_model-item_defaults-091-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-005">edges</para></td><td id="graph_model-item_defaults-091-entry-008" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-006"><api-link id="graph_model-item_defaults-091-api-link-005" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-item_defaults-091-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-007"><api-link id="graph_model-item_defaults-091-api-link-006" data-member="" data-text="IEdgeDefaults" data-type="yfiles.graph.IEdgeDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-004"><td id="graph_model-item_defaults-091-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-008">node labels (not at groups)</para></td><td id="graph_model-item_defaults-091-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-009"><api-link id="graph_model-item_defaults-091-api-link-007" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-008" data-member="labels" data-text="labels" data-type="yfiles.graph.INodeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-012" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-010"><api-link id="graph_model-item_defaults-091-api-link-009" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-005"><td id="graph_model-item_defaults-091-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-011">edge labels</para></td><td id="graph_model-item_defaults-091-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-012"><api-link id="graph_model-item_defaults-091-api-link-010" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-011" data-member="labels" data-text="labels" data-type="yfiles.graph.IEdgeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-013"><api-link id="graph_model-item_defaults-091-api-link-012" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-006"><td id="graph_model-item_defaults-091-entry-016" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-014">ports at nodes (not at groups)</para></td><td id="graph_model-item_defaults-091-entry-017" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-015"><api-link id="graph_model-item_defaults-091-api-link-013" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-014" data-member="ports" data-text="ports" data-type="yfiles.graph.INodeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-018" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-016"><api-link id="graph_model-item_defaults-091-api-link-015" data-member="" data-text="IPortDefaults" data-type="yfiles.graph.IPortDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-007"><td id="graph_model-item_defaults-091-entry-019" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-017">labels of ports at nodes (not at groups)</para></td><td id="graph_model-item_defaults-091-entry-020" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-018"><api-link id="graph_model-item_defaults-091-api-link-016" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-017" data-member="ports" data-text="ports" data-type="yfiles.graph.INodeDefaults"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-018" data-member="labels" data-text="labels" data-type="yfiles.graph.IPortDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-021" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-019"><api-link id="graph_model-item_defaults-091-api-link-019" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-008"><td id="graph_model-item_defaults-091-entry-022" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-020">ports at edges</para></td><td id="graph_model-item_defaults-091-entry-023" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-021"><api-link id="graph_model-item_defaults-091-api-link-020" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-021" data-member="ports" data-text="ports" data-type="yfiles.graph.IEdgeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-024" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-022"><api-link id="graph_model-item_defaults-091-api-link-022" data-member="" data-text="IPortDefaults" data-type="yfiles.graph.IPortDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-009"><td id="graph_model-item_defaults-091-entry-025" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-023">labels of ports at edges</para></td><td id="graph_model-item_defaults-091-entry-026" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-024"><api-link id="graph_model-item_defaults-091-api-link-023" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-024" data-member="ports" data-text="ports" data-type="yfiles.graph.IEdgeDefaults"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-025" data-member="labels" data-text="labels" data-type="yfiles.graph.IPortDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-027" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-025"><api-link id="graph_model-item_defaults-091-api-link-026" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-010"><td id="graph_model-item_defaults-091-entry-028" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-026">group nodes</para></td><td id="graph_model-item_defaults-091-entry-029" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-027"><api-link id="graph_model-item_defaults-091-api-link-027" data-member="groupNodeDefaults" data-text="groupNodeDefaults" data-type="yfiles.graph.IGraph"></api-link></para></td><td id="graph_model-item_defaults-091-entry-030" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-028"><api-link id="graph_model-item_defaults-091-api-link-028" data-member="" data-text="INodeDefaults" data-type="yfiles.graph.INodeDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-011"><td id="graph_model-item_defaults-091-entry-031" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-029">labels at group nodes</para></td><td id="graph_model-item_defaults-091-entry-032" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-030"><api-link id="graph_model-item_defaults-091-api-link-029" data-member="groupNodeDefaults" data-text="groupNodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-030" data-member="labels" data-text="labels" data-type="yfiles.graph.INodeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-033" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-031"><api-link id="graph_model-item_defaults-091-api-link-031" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-012"><td id="graph_model-item_defaults-091-entry-034" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-032">ports at group nodes</para></td><td id="graph_model-item_defaults-091-entry-035" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-033"><api-link id="graph_model-item_defaults-091-api-link-032" data-member="groupNodeDefaults" data-text="groupNodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-033" data-member="ports" data-text="ports" data-type="yfiles.graph.INodeDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-036" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-034"><api-link id="graph_model-item_defaults-091-api-link-034" data-member="" data-text="IPortDefaults" data-type="yfiles.graph.IPortDefaults"></api-link></para></td></tr><tr id="graph_model-item_defaults-091-row-013"><td id="graph_model-item_defaults-091-entry-037" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-035">labels of ports at group nodes</para></td><td id="graph_model-item_defaults-091-entry-038" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-036"><api-link id="graph_model-item_defaults-091-api-link-035" data-member="groupNodeDefaults" data-text="groupNodeDefaults" data-type="yfiles.graph.IGraph"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-036" data-member="ports" data-text="ports" data-type="yfiles.graph.INodeDefaults"></api-link>.<api-link id="graph_model-item_defaults-091-api-link-037" data-member="labels" data-text="labels" data-type="yfiles.graph.IPortDefaults"></api-link></para></td><td id="graph_model-item_defaults-091-entry-039" align="left" valign="top"><para class="dguide-para" id="graph_model-item_defaults-091-simpara-037"><api-link id="graph_model-item_defaults-091-api-link-038" data-member="" data-text="ILabelDefaults" data-type="yfiles.graph.ILabelDefaults"></api-link></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"graph_model-item_defaults-091-simpara-038",content:'Note that the defaults for labels and ports are not defined in a property of <span class="api">IGraph</span>\nbut in properties of the <span class="api">INodeDefaults</span> and <span class="api">IEdgeDefaults</span>, respectively.\nThis allows different default configurations for node and edge labels and ports. Similarly,\nthe defaults for port labels are defined in the <span class="api">IPortDefaults</span> which themselves are defined\nin the defaults of the port’s owner.'},{tagname:"example",id:"graph_model-item_defaults-091-example-001",title:"Set the default values for newly created nodes and their labels",content:'<pre class="programlisting javascript" id="graph_model-item_defaults-091-programlisting-001" language="javascript" format="linespecific"><code>// Get the node defaults\r\nconst nodeDefaults = graph.nodeDefaults\r\n// define a new default style\r\nconst style = new yfiles.styles.ShapeNodeStyle({\r\n  fill: yfiles.view.Fill.ORANGE,\r\n  shape: yfiles.styles.ShapeNodeShape.ELLIPSE\r\n})\r\n\r\n// set a new default style\r\nnodeDefaults.style = style\r\n// set a new default size\r\nnodeDefaults.size = new yfiles.geometry.Size(40, 40)\r\n// set a new default label model parameter\r\nnodeDefaults.labels.layoutParameter = yfiles.graph.ExteriorLabelModel.SOUTH\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"graph_model-item_defaults-091-simpara-039",content:'If no style is provided upon creation the <span class="api">IGraph</span> implementations delegate to the\n<api-link id="graph_model-item_defaults-091-api-link-039" data-member="getStyleInstance()" data-text="getStyleInstance" data-type="yfiles.graph.INodeDefaults"></api-link> method to get the style instance to use for the newly created item.\nDepending on the value of <api-link id="graph_model-item_defaults-091-api-link-040" data-member="shareStyleInstance" data-text="shareStyleInstance" data-type="yfiles.graph.INodeDefaults"></api-link> this method either returns the\nstyle instance provided by <api-link id="graph_model-item_defaults-091-api-link-041" data-member="style" data-text="style" data-type="yfiles.graph.INodeDefaults"></api-link> or a clone thereof.'},{tagname:"para",content:'<dl id="graph_model-item_defaults-091-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-item_defaults-091-term-001"><api-link id="graph_model-item_defaults-091-api-link-042" data-member="shareStyleInstance" data-text="shareStyleInstance" data-type="yfiles.graph.INodeDefaults"></api-link></dt><dd id="graph_model-item_defaults-091-listitem-001">\n<p id="graph_model-item_defaults-091-simpara-040">If set to <code>true</code> the same style instance is used as style for each newly created element. Otherwise, a clone\nof the default style is used. Default is <code>true</code>.</p>\n</dd>\n<dt id="graph_model-item_defaults-091-term-002"><api-link id="graph_model-item_defaults-091-api-link-043" data-member="getStyleInstance()" data-text="getStyleInstance():&#xA0;INodeStyle" data-type="yfiles.graph.INodeDefaults"></api-link></dt><dd id="graph_model-item_defaults-091-listitem-002">\n<p id="graph_model-item_defaults-091-simpara-041">Queried to return a default style instance for a newly created graph item. Depending on the value of\n<span class="api">shareStyleInstance</span> this is either the instance provided by\n<span class="api">style</span> or a clone of it.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"graph_model-item_defaults-091-simpara-042",content:'Note that although shown for <span class="api">INodeDefaults</span> the above methods are defined\non <span class="api">IEdgeDefaults</span>, <span class="api">ILabelDefaults</span>, and <span class="api">IPortDefaults</span>, too.'},{tagname:"para","class":"dguide-para",id:"graph_model-item_defaults-091-simpara-043",content:'A special role plays the <api-link id="graph_model-item_defaults-091-api-link-044" data-member="autoCleanUp" data-text="autoCleanUp" data-type="yfiles.graph.IPortDefaults"></api-link> property in the port defaults which\ncontrols a behavior rather than providing a default value:'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="graph_model-auto_cleanup_ports">\n<dt id="graph_model-item_defaults-091-term-003"><api-link id="graph_model-item_defaults-091-api-link-045" data-member="autoCleanUp" data-text="autoCleanUp" data-type="yfiles.graph.IPortDefaults"></api-link></dt><dd id="graph_model-item_defaults-091-listitem-003">\n<p id="graph_model-item_defaults-091-simpara-044">If set to <code>true</code> a port is automatically removed when the last edge connected to it is removed.\nThat means that ports can implicitly get removed. Default is <code>true</code>.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"graph_model-neighbors",title:"Finding Adjacent Nodes and Edges",children:[{tagname:"para","class":"dguide-para",id:"graph_model-neighbors-092-simpara-001",content:"It is often important to find the edges which connect to a given node\nand the nodes which connect to the opposite ends of these edges."},{tagname:"figure","class":"image",title:"Example graph",id:"graph_model-neighbors-092-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_neighborhood.36c9566b.jpg",alt:"graph model neighborhood",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-neighbors-092-simpara-002",content:'<api-link id="graph_model-neighbors-092-api-link-001" data-member="" data-text="IGraph" data-type="yfiles.graph.IGraph"></api-link> provides a set of methods for counting and finding both incoming and outgoing edges\nof a port owner as well as all incident edges without respect to their direction.'},{tagname:"para",content:'<dl id="graph_model-neighbors-092-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="graph_model-neighbors-092-term-001"><api-link id="graph_model-neighbors-092-api-link-002" data-member="degree(yfiles.graph.IPortOwner)" data-text="degree(owner:&#xA0;IPortOwner):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-001">\n<p id="graph_model-neighbors-092-simpara-003">Counts the edges which start or end at the given port owner (node or edge).\nIn the example node A has a degree of 3.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-002"><api-link id="graph_model-neighbors-092-api-link-003" data-member="edgesAt(yfiles.graph.IPortOwner,yfiles.graph.AdjacencyTypes)" data-text="edgesAt(owner:&#xA0;IPortOwner, type:&#xA0;AdjacencyTypes):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-002">\n<p id="graph_model-neighbors-092-simpara-004">Returns an Iterable with all edges which start or end at the given port owner (node or edge).\nIn the example edges at node A are Edge 1, Edge 2, and Edge 3.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-003"><api-link id="graph_model-neighbors-092-api-link-004" data-member="inDegree(yfiles.graph.IPortOwner)" data-text="inDegree(owner:&#xA0;IPortOwner):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-003">\n<p id="graph_model-neighbors-092-simpara-005">Counts the edges which end at the given port owner (node or edge).\nIn the example node A has an in-degree of 1.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-004"><api-link id="graph_model-neighbors-092-api-link-005" data-member="inEdgesAt(yfiles.graph.IPortOwner)" data-text="inEdgesAt(owner:&#xA0;IPortOwner):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-004">\n<p id="graph_model-neighbors-092-simpara-006">Returns an Iterable with all edges which end at the given port owner (node or edge).\nIn the example the incoming edge of node A is Edge 1.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-005"><api-link id="graph_model-neighbors-092-api-link-006" data-member="outDegree(yfiles.graph.IPortOwner)" data-text="outDegree(owner:&#xA0;IPortOwner):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-005">\n<p id="graph_model-neighbors-092-simpara-007">Counts the edges which start at the given port owner (node or edge).\nIn the example node A has an out-degree of 2.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-006"><api-link id="graph_model-neighbors-092-api-link-007" data-member="outEdgesAt(yfiles.graph.IPortOwner)" data-text="outEdgesAt(owner:&#xA0;IPortOwner):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-006">\n<p id="graph_model-neighbors-092-simpara-008">Returns an Iterable with all edges which start at the given port owner (node or edge).\nIn the example the outgoing edges at node A are Edge 2 and Edge 3.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"graph_model-neighbors-092-simpara-009",content:"The same methods are available for ports, too:"},{tagname:"para",content:'<dl id="graph_model-neighbors-092-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="graph_model-neighbors-092-term-007"><api-link id="graph_model-neighbors-092-api-link-008" data-member="outDegree(yfiles.graph.IPort)" data-text="outDegree(port:&#xA0;IPort):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-neighbors-092-term-008"><api-link id="graph_model-neighbors-092-api-link-009" data-member="inDegree(yfiles.graph.IPort)" data-text="inDegree(port:&#xA0;IPort):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-neighbors-092-term-009"><api-link id="graph_model-neighbors-092-api-link-010" data-member="degree(yfiles.graph.IPort)" data-text="degree(port:&#xA0;IPort):&#xA0;number" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-007">\n<p id="graph_model-neighbors-092-simpara-010">Counts the edges which start, end, or start or end at the given port.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-010"><api-link id="graph_model-neighbors-092-api-link-011" data-member="outEdgesAt(yfiles.graph.IPort)" data-text="outEdgesAt(port:&#xA0;IPort):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-neighbors-092-term-011"><api-link id="graph_model-neighbors-092-api-link-012" data-member="inEdgesAt(yfiles.graph.IPort)" data-text="inEdgesAt(port:&#xA0;IPort):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dt id="graph_model-neighbors-092-term-012"><api-link id="graph_model-neighbors-092-api-link-013" data-member="edgesAt(yfiles.graph.IPort,yfiles.graph.AdjacencyTypes)" data-text="edgesAt(port:&#xA0;IPort, type:&#xA0;AdjacencyTypes):&#xA0;IListEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-008">\n<p id="graph_model-neighbors-092-simpara-011">Returns an Iterable with all edges which start, end, or start or end at the given port owner (node or edge).</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"graph_model-neighbors-092-simpara-012",content:'You can do further analysis using the following methods which find the nodes that connect to the <strong id="graph_model-neighbors-092-emphasis-001" class="bold" role="bold">other end</strong>\nof incident edges at a given node:'},{tagname:"para",content:'<dl id="graph_model-neighbors-092-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="graph_model-neighbors-092-term-013"><api-link id="graph_model-neighbors-092-api-link-014" data-member="neighbors(yfiles.graph.INode)" data-text="neighbors(node:&#xA0;INode):&#xA0;IEnumerable&lt;INode&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-009">\n<p id="graph_model-neighbors-092-simpara-013">Returns an Iterable with the owners of the opposite ports of all edges which start or end at the given port owner.\nThe neighbors of node A are the nodes B, C, and D.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-014"><api-link id="graph_model-neighbors-092-api-link-015" data-member="successors(yfiles.graph.INode)" data-text="successors(node:&#xA0;INode):&#xA0;IEnumerable&lt;INode&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-010">\n<p id="graph_model-neighbors-092-simpara-014">Returns an Iterable with the owners of the target ports of all edges which start at the given port owner.\nThe successors of node A are the nodes C and D.</p>\n</dd>\n<dt id="graph_model-neighbors-092-term-015"><api-link id="graph_model-neighbors-092-api-link-016" data-member="predecessors(yfiles.graph.INode)" data-text="predecessors(node:&#xA0;INode):&#xA0;IEnumerable&lt;INode&gt;" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="graph_model-neighbors-092-listitem-011">\n<p id="graph_model-neighbors-092-simpara-015">Returns an Iterable with the owners of the source ports of all edges which end at the given port owner.\nThe predecessor of node A is node B.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para tip",id:"graph_model-neighbors-092-tip-001",content:'<p id="graph_model-neighbors-092-simpara-016">yFiles for HTML Complete provides support for more sophisticated graph analysis like DFS and connectivity analysis.\nChapter <a href="#/dguide/analysis">Graph Analysis</a> introduces the graph analysis algorithms provided by yFiles for HTML.</p>'}]},{tagname:"section",id:"graph_model-connecting_business_models",title:"Storing Business Data for Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"graph_model-connecting_business_models-093-simpara-001",content:'It is a common task to connect the graph items with the data model they actually represent, i.e. the <strong id="graph_model-connecting_business_models-093-emphasis-001" class="bold" role="bold">business data</strong>.\nFor this use case all model items provide a so-called <span class="def">user tag</span> property. This property is readable and writable\nand can take arbitrary objects.'},{tagname:"figure","class":"image",title:"Organization chart as example where business data and graph items are closely connected",id:"graph_model-connecting_business_models-093-figure-001","float":0,children:[{tagname:"img",src:"assets/graph_model_orgchart.5ce56d82.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"graph_model-connecting_business_models-093-simpara-002",content:"In an organization chart, for example, nodes would represent employees and edges would represent the relations between them.\nYou can assign the business data that is behind an employee to the tag of the node instance representing\nthat employee in the graph. The same way you can store the information about the relation between two employees\nin the tag of the edge which connects the nodes representing these employees."},{tagname:"example",id:"graph_model-connecting_business_models-093-example-001",title:"Setting and retrieving user tags",content:"<pre class=\"programlisting javascript\" id=\"graph_model-connecting_business_models-093-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// creating a new node with an initial tag\r\nnode = graph.createNode(\r\n  new yfiles.geometry.Rect(0, 0, 30, 30),\r\n  new yfiles.styles.ShapeNodeStyle(),\r\n  new Employee('Mildred', 'Shark')\r\n)\r\n\r\n// alternative using options\r\nnode = graph.createNode({ tag: new Employee('Mildred', 'Spark') })\r\n\r\n// setting the user tag to an existing node\r\nnode.tag = new Employee('Marta', 'Barnes')\r\n\r\n// retrieving the user tag\r\nif (node.tag instanceof Employee) {\r\n  const employee = node.tag\r\n  console.log(employee.firstName + ', ' + employee.lastName)\r\n}\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_model-connecting_business_models-093-simpara-003",content:'Note that you can also set user tags at creation time: all create methods, e.g.\n<api-link id="graph_model-connecting_business_models-093-api-link-001" data-member="createNode(yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createNode(layout:&#xA0;Rect, style:&#xA0;INodeStyle, tag:&#xA0;Object)" data-type="yfiles.graph.IGraph"></api-link>\nfor nodes, have an overload which allows you to set the initial user tag. Setting user tags at creation time should be\npreferred to avoid unnecessary changes.\nSetting the user tag after creation will then dispatch a <strong id="graph_model-connecting_business_models-093-emphasis-002" class="bold" role="bold">TagChanged</strong> event for the corresponding item. For changes\nto node tags a listener can be registered with <api-link id="graph_model-connecting_business_models-093-api-link-002" data-member="NodeTagChanged" data-text="NodeTagChanged" data-type="yfiles.graph.IGraph"></api-link>, for example.'},{tagname:"para","class":"dguide-para",id:"graph_model-connecting_business_models-093-simpara-004",content:'Another means to associate data with graph elements are specialized maps, as handled in\nsection <a href="#/dguide/customizing_graph-binding_data">Associating Data with Graph Elements</a>.'},{tagname:"para","class":"dguide-para",id:"graph_model-connecting_business_models-093-simpara-005",content:'The <a href="..\\..\\demos\\complete\\orgchart\\index.html" target="blank" class="demo-link" title="An interactive viewer for organization charts with automatic layout updates.">Organization Chart</a> demo shows how to create a graph according to business data,\nhow to store the data in the user tags of graph elements, and how to create visual representations\nwhich use the data stored in the user tags for visualization.'}]}]},{tagname:"section",id:"view",title:"Displaying the Graph",children:[{tagname:"para","class":"dguide-para",id:"view-007-simpara-001",content:'In the previous chapter we have shown what the graph model in yFiles for HTML looks like. This\nchapter describes the means that yFiles for HTML provides to <strong id="view-007-emphasis-001" class="bold" role="bold">display</strong> this graph model in your\napplication. In an MVC/MVVM pattern, this would be the view.'},{tagname:"section",id:"view_graphcontrol",title:"The Component for Displaying Graphs",children:[{tagname:"para","class":"dguide-para",id:"view_graphcontrol-094-simpara-001",content:'yFiles for HTML ships with a powerful tool for graph visualization: The class <strong id="view_graphcontrol-094-emphasis-001" class="bold" role="bold"><span class="api">GraphComponent</span></strong>.\nThis component is one of yFiles for HTML’s most prominent features and specifically designed to\ncombine the various parts of yFiles for HTML to visualize and interact with graphs.'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol-094-simpara-002",content:'The <span class="api">GraphComponent</span> centralizes all of yFiles for HTML’s functionality and is our recommended way to display\nyFiles for HTML graphs. This component displays and wires up the graph model with the interaction\nfunctionality and is highly flexible and customizable in doing so.'},{tagname:"figure","class":"image",title:"The GraphComponent links the graph model with the application logic (user interaction)",id:"fig_displaying-the-graph_graphcontrol","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_graphcontrol.5e74604d.png",alt:"displaying the graph graphcontrol",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_graphcontrol-094-simpara-003",content:'The <span class="api">GraphComponent</span> also serves as an entry point to the complete yFiles for HTML functionality.\nUsing the <span class="api">GraphComponent</span> you have access to all other parts of the library like the graph\nmodel, the user interaction, graph I/O, layout, and many more.\nIt is also directly responsible for managing the view and displaying the elements as well\nas propagating events.'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol-094-simpara-004",content:"In particular, its core features are:"},{tagname:"para",content:'<ul id="view_graphcontrol-094-itemizedlist-001"><li id="view_graphcontrol-094-listitem-001"><p id="view_graphcontrol-094-simpara-005">Propagating the native HTML5 events to the proper parties in the library or dealing with\nthem by itself.</p></li><li id="view_graphcontrol-094-listitem-002"><p id="view_graphcontrol-094-simpara-006">Managing the visual representation of the elements displayed in it, for example graph\nelements and decorations like selection, focus, and highlighting.</p></li><li id="view_graphcontrol-094-listitem-003"><p id="view_graphcontrol-094-simpara-007">Presenting a view on the underlying graph model which supports scrolling, zooming, panning,\nand other navigational core features needed for an explorational application.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol-094-simpara-008",content:"The following chapters give a brief introduction to some of the core features and how to\nwork with them."},{tagname:"section",id:"view_graphcontrol_managing-the-view",title:"Managing the View",children:[{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-001",content:"The view refers to what the user can see. Users might look at an entire graph, or zoom in\nto focus on smaller sections of the graph. To present the user with the information they\nwant as they zoom and pan around the graph, you will need to manage the view."},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-002",content:"It consists of two parts:"},{tagname:"para",content:'<ul id="view_graphcontrol_managing-the-view-095-itemizedlist-001"><li id="view_graphcontrol_managing-the-view-095-listitem-001"><p id="view_graphcontrol_managing-the-view-095-simpara-003">The <span class="def">viewport</span> is the rectangle that defines the part of the graph that is currently visible.\nThe point in the graph that is visible in the upper left corner of the viewport is called the <span class="def">view point</span>.</p></li><li id="view_graphcontrol_managing-the-view-095-listitem-002"><p id="view_graphcontrol_managing-the-view-095-simpara-004">The <span class="def">content rectangle</span> is the rectangle which is defined by the bounds of the graph.</p></li></ul>'},{tagname:"figure","class":"image",title:"Viewport and content rectangle",id:"fig_displaying-the-graph_view_viewport","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_view_viewport.d49e8b01.png",alt:"displaying the graph view viewport",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-005",content:'At this point it is crucial to understand that there are two different coordinate systems\nneeded to achieve this displaying system. One is the coordinate system in which the graph\nand its elements are defined, the other is the coordinate system which is native to the\ncomponent itself. The former is called the <span class="def">world coordinate system</span> while the latter is\ncalled the <span class="def">view coordinate system</span>.'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-006",content:'Both systems are logically connected through the view point. It is the point in world\ncoordinates that is the upper left corner of the viewport rectangle, the area\nthat the <span class="api">GraphComponent</span> displays. In this regard, the upper left corner of the viewport\nis also regarded as the origin (0, 0) of the view coordinate system.'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-007",content:'The viewport’s <strong id="view_graphcontrol_managing-the-view-095-emphasis-001" class="bold" role="bold">width</strong> and <strong id="view_graphcontrol_managing-the-view-095-emphasis-002" class="bold" role="bold">height</strong> are determined by the <span class="api">GraphComponent</span>’s physical size\nscaled by the value of its <strong id="view_graphcontrol_managing-the-view-095-emphasis-003" class="bold" role="bold">zoom</strong> property. The area in world coordinates that is shown\nin the viewport is the rectangle that has its upper left corner at the view point and\nthe bounds of the <span class="api">GraphComponent</span>’s physical size scaled by the zoom property. So for\nexample, if the view point is at the origin in world coordinates, the <span class="api">GraphComponent</span>’s\nphysical size is (100, 100) and the zoom value is 0.5, then the depicted area of the\nworld coordinates in the <span class="api">GraphComponent</span> is a rectangle with its upper left corner\nat (0, 0) and a width and height of 50 units. This means that the viewport is <strong id="view_graphcontrol_managing-the-view-095-emphasis-004" class="bold" role="bold">zoomed in</strong>\non the particular area.'},{tagname:"figure","class":"image",title:"Illustration of the two coordinate systems with a zoomed viewport. The view coordinate system is depicted in orange, the world coordinate system uses a black axis.",id:"fig_displaying-the-graph_view_coordinates","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_view_coordinates.8269ed31.png",alt:"displaying the graph view coordinates",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-008",content:'To change the visible area of the graph programmatically, you can simply adjust the view\npoint and zoom properties on the <span class="api">GraphComponent</span>.'},{tagname:"para",content:'<dl id="view_graphcontrol_managing-the-view-095-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="view_graphcontrol_managing-the-view-095-term-001"><api-link id="view_graphcontrol_managing-the-view-095-api-link-001" data-member="viewPoint" data-text="viewPoint:&#xA0;Point" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="view_graphcontrol_managing-the-view-095-listitem-003">\n<p id="view_graphcontrol_managing-the-view-095-simpara-009">Provides the current view point in world coordinates.</p>\n</dd>\n<dt id="view_graphcontrol_managing-the-view-095-term-002"><api-link id="view_graphcontrol_managing-the-view-095-api-link-002" data-member="zoom" data-text="zoom:&#xA0;number" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="view_graphcontrol_managing-the-view-095-listitem-004">\n<p id="view_graphcontrol_managing-the-view-095-simpara-010">Provides the current zoom factor of the <span class="api">GraphComponent</span>.</p>\n</dd>\n<dt id="view_graphcontrol_managing-the-view-095-term-003"><api-link id="view_graphcontrol_managing-the-view-095-api-link-003" data-member="zoomTo(yfiles.geometry.Rect)" data-text="zoomTo(bounds:&#xA0;Rect):&#xA0;void" data-type="yfiles.view.CanvasComponent"></api-link></dt><dt id="view_graphcontrol_managing-the-view-095-term-004"><api-link id="view_graphcontrol_managing-the-view-095-api-link-004" data-member="zoomTo(yfiles.geometry.Point,number)" data-text="zoomTo(center:&#xA0;Point, zoom:&#xA0;number):&#xA0;void" data-type="yfiles.view.CanvasComponent"></api-link></dt><dt id="view_graphcontrol_managing-the-view-095-term-005"><api-link id="view_graphcontrol_managing-the-view-095-api-link-005" data-member="zoomToAnimated(yfiles.geometry.Rect)" data-text="zoomToAnimated(bounds:&#xA0;Rect):&#xA0;Promise&lt;Object&gt;" data-type="yfiles.view.CanvasComponent"></api-link></dt><dt id="view_graphcontrol_managing-the-view-095-term-006"><api-link id="view_graphcontrol_managing-the-view-095-api-link-006" data-member="zoomToAnimated(yfiles.geometry.Point,number)" data-text="zoomToAnimated(center:&#xA0;Point, zoom:&#xA0;number):&#xA0;Promise&lt;Object&gt;" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="view_graphcontrol_managing-the-view-095-listitem-005">\n<p id="view_graphcontrol_managing-the-view-095-simpara-011">Methods to change the zoom factor and viewport immediately or in an animated fashion.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-012",content:'Moving the viewport interactively\nor zooming using the mouse wheel is automatically supported by the <span class="api">GraphComponent</span> and its input\nmodes (see also the chapter <a href="#/dguide/interaction">User Interaction</a>).'},{tagname:"para","class":"dguide-para note",id:"view_graphcontrol_managing-the-view-095-note-001",content:'<p id="view_graphcontrol_managing-the-view-095-simpara-013">There are methods on <span class="api">GraphComponent</span> and other types that conveniently convert from one coordinate\nsystem to the other. These methods are most useful when you want to implement your own\nvisualization. Most issues that arise when defining custom visualizations are caused by\nusing the wrong coordinate system.</p>'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-014",content:'The <span class="def">content rectangle</span> on the other hand is a rectangular area in the world coordinate\nsystem that encompasses all elements in the graph model. It is not updated automatically.\nThe reason for this is that there are too many atomic changes that would cause unnecessary\ntriggers. Rather, it is updated on interactive changes to the graph structure that will\nmost probably expand the rectangle (like node creation) or when the application programmer\ncalls the update method <api-link id="view_graphcontrol_managing-the-view-095-api-link-007" data-member="updateContentRect(yfiles.geometry.Insets,yfiles.view.ICanvasObjectGroup)" data-text="updateContentRect" data-type="yfiles.view.CanvasComponent"></api-link>. Therefore, the content rectangle is guaranteed\nto always encompass all graph elements, but not that it is always the smallest possible\nrectangle to do so.'},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-015",content:'The content rectangle defines merely the logical bounds of the graph and does not limit the\nviewport in any way. Rather, it can be used to comfortably acquire the graph bounds. For\nexample, the <api-link id="view_graphcontrol_managing-the-view-095-api-link-008" data-member="fitContent()" data-text="fitContent" data-type="yfiles.view.CanvasComponent"></api-link> method will automatically adjust the view point and zoom property\nof the <span class="api">GraphComponent</span> in such a way that the viewport fully contains the content rectangle\nin an optimal way.'},{tagname:"figure","class":"image",title:"A sample application with a GraphComponent after a call to fitGraphBounds with the content rectangle visualized.",id:"fig_displaying-the-graph_graphcomponent_contentrect","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_graphcomponent_contentrect.e46d86c7.png",alt:"displaying the graph graphcomponent contentrect",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_graphcontrol_managing-the-view-095-simpara-016",content:'The part of the world bounds to which you can zoom or scroll is theoretically unlimited.\nThis means that, by default, a user can zoom and scroll to any location in the\nworld coordinate system. Of course, there are ways to restrict the visible area, these are\ndiscussed in the section <a href="#/dguide/customizing_view_limit_viewport">Restricting the Viewport</a>.'}]}]},{tagname:"section",id:"view_visualization-graph-elements",title:"Visualization of Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements-096-simpara-001",content:'The overall look of the graph is determined by two factors:\nFirst, the location of the graph elements, which we call the <span class="def">layout</span> of the graph.'},{tagname:"para","class":"dguide-para tip",id:"view_visualization-graph-elements-096-tip-001",content:'<p id="view_visualization-graph-elements-096-simpara-002">The location of the graph elements can be specified\n<a href="#/dguide/view_item-layout">programmatically</a> by the developer,\n<a href="#/dguide/interaction-geim">interactively</a> by the user, or\n<a href="#/dguide/layout">automatically</a> by one of yFiles for HTML’s many advanced layout algorithms.</p>'},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements-096-simpara-003",content:'Second, the individual look of the elements themselves. The visual appearance for the\ngraph elements is created by so-called <strong id="view_visualization-graph-elements-096-emphasis-001" class="bold" role="bold">styles</strong> in yFiles for HTML, which are responsible for\nthe rendering of the elements at the specified location.'},{tagname:"section",id:"view_visualization-graph-elements_styles",title:"Styles",children:[{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-001",content:'Before the <span class="api">GraphComponent</span> can display an object on the canvas, it needs to know what it should\nlook like. In the case of graph items, styles are the managing entities for\n<strong id="view_visualization-graph-elements_styles-097-emphasis-001" class="bold" role="bold">creating the visual appearance</strong> as well as for <strong id="view_visualization-graph-elements_styles-097-emphasis-002" class="bold" role="bold">updating them when the model has changed</strong>.\nEach type of graph element (except for bends) has an appropriate style interface. For example,\nthe style interface for nodes is <api-link id="view_visualization-graph-elements_styles-097-api-link-001" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link>.'},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-002",content:"Even though the style is a property of the model item itself, the model is independent from the\nvisualization. For example, the same graph model can be visualized using completely different\nstyles without affecting the model at all."},{tagname:"para","class":"dguide-para tip",id:"view_visualization-graph-elements_styles-097-tip-001",content:'<p id="view_visualization-graph-elements_styles-097-simpara-003">As with all model item properties, the graph that the items reside in is responsible for\nmanaging those items. This means that the properties on the items are read-only and can <strong id="view_visualization-graph-elements_styles-097-emphasis-003" class="bold" role="bold">only</strong>\nbe set via the graph instance.</p>'},{tagname:"figure","class":"image",title:"Two different styles for the same graph model",id:"fig_displaying-the-graph_styles_intro","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_styles_intro.ac96d05e.png",alt:"displaying the graph styles intro",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-004",content:'In the process of the visualization, the style receives the item that the visual appearance is\nto be created for, the bounds within which the visualization should be painted, and some\nmore contextual information. It does not hold any information about the item itself and thus\ninstances of styles are generally meant to be <strong id="view_visualization-graph-elements_styles-097-emphasis-004" class="bold" role="bold">shareable</strong> among various items.'},{tagname:"para","class":"dguide-para tip",id:"view_visualization-graph-elements_styles-097-tip-002",content:'<p id="view_visualization-graph-elements_styles-097-simpara-005">The graph has default settings for styles that are applied when items are created for which\nno specific style was given. In the default configuration, this default style is a single instance that\nis shared among all items created in such a way.</p>'},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-006",content:"Sharing styles has the advantage of a better memory usage, but also the trait that every change\nto a property of a shared style is immediately reflected in all items that share this style."},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-007",content:'yFiles for HTML comes with a wide array of predefined styles for all styleable graph elements. You can\nuse these styles out-of-the-box. Some of the most prominent ones for nodes are the\n<api-link id="view_visualization-graph-elements_styles-097-api-link-002" data-member="" data-text="ShapeNodeStyle" data-type="yfiles.styles.ShapeNodeStyle"></api-link> for basic geometric shapes and the <api-link id="view_visualization-graph-elements_styles-097-api-link-003" data-member="" data-text="ShinyPlateNodeStyle" data-type="yfiles.styles.ShinyPlateNodeStyle"></api-link> for a more modern looking style.'},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-008",content:'Only graph elements have styles associated, other elements in the view (for example the\nselection markers or handles) are visualized using a different mechanism as described in the\nsection <a href="#/dguide/customizing_indicators">Customizing Selection, Focus, and Highlight</a>.'},{tagname:"para","class":"dguide-para note",id:"view_visualization-graph-elements_styles-097-note-001",content:'<p id="view_visualization-graph-elements_styles-097-simpara-009">Bends do not have an associated style interface because they are visualized as part of the edge\nvisualization.</p>'},{tagname:"para","class":"dguide-para",id:"view_visualization-graph-elements_styles-097-simpara-010",content:"Instead of overburdened interfaces, the common interfaces for the styles are very small and each\nstyle implementation has its own set of properties to configure the resulting visual\n(for example the colors)."}]},{tagname:"section",id:"view_arrows",title:"Arrows",children:[{tagname:"para","class":"dguide-para",id:"view_arrows-098-simpara-001",content:"Arrows are visual decorations that can be placed at an edge’s ends.\nNormally, this decoration is some kind of arrowhead that is used to indicate\nthe edge’s direction."},{tagname:"para","class":"dguide-para important",id:"view_arrows-098-important-001",content:'<p id="view_arrows-098-simpara-002">Arrows <strong id="view_arrows-098-emphasis-001" class="bold" role="bold">do not define</strong> the direction of an edge. They only <strong id="view_arrows-098-emphasis-002" class="bold" role="bold">indicate</strong> it.</p>'},{tagname:"para","class":"dguide-para",id:"view_arrows-098-simpara-003",content:'As visual decorations they are used with <span class="api">IEdgeStyle</span>\nimplementations which supports arrows.\nIn yFiles for HTML, these are <api-link id="view_arrows-098-api-link-001" data-member="" data-text="PolylineEdgeStyle" data-type="yfiles.styles.PolylineEdgeStyle"></api-link>\nand <api-link id="view_arrows-098-api-link-002" data-member="" data-text="ArcEdgeStyle" data-type="yfiles.styles.ArcEdgeStyle"></api-link>.'},{tagname:"para","class":"dguide-para",id:"view_arrows-098-simpara-004",content:'The <api-link id="view_arrows-098-api-link-003" data-member="" data-text="IArrow" data-type="yfiles.styles.IArrow"></api-link> interface provides a number of predefined arrowhead renderings which\ncan be directly used with the\n<api-link id="view_arrows-098-api-link-004" data-member="sourceArrow" data-text="sourceArrow" data-type="yfiles.styles.PolylineEdgeStyle"></api-link>\nand\n<api-link id="view_arrows-098-api-link-005" data-member="targetArrow" data-text="targetArrow" data-type="yfiles.styles.PolylineEdgeStyle"></api-link>\nproperties of these styles.'},{tagname:"example",id:"view_arrows-098-example-001",title:"Specifying source and target arrows",content:'<pre class="programlisting javascript" id="view_arrows-098-programlisting-001" language="javascript" format="linespecific"><code>const edgeStyle = new yfiles.styles.PolylineEdgeStyle({\r\n  sourceArrow: yfiles.styles.IArrow.CIRCLE,\r\n  targetArrow: yfiles.styles.IArrow.DIAMOND,\r\n  stroke: yfiles.view.Stroke.BLUE,\r\n  smoothingLength: 5\r\n})\n</code></pre>'},{tagname:"table","class":"",id:"view_arrows-098-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Predefined arrows</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="view_arrows-098-thead-001"><tr id="view_arrows-098-row-001"><th id="view_arrows-098-entry-001" align="left" valign="top">\nName\n</th><th id="view_arrows-098-entry-002" align="left" valign="top">\nVisualization\n</th></tr></thead><tbody id="view_arrows-098-tbody-001"><tr id="view_arrows-098-row-002"><td id="view_arrows-098-entry-003" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-005"><api-link id="view_arrows-098-api-link-006" data-member="NONE" data-text="IArrow.NONE" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-004" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-006"><img src="assets/arrow_none.c4a497bf.png"></para></td></tr><tr id="view_arrows-098-row-003"><td id="view_arrows-098-entry-005" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-007"><api-link id="view_arrows-098-api-link-007" data-member="CIRCLE" data-text="IArrow.CIRCLE" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-006" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-008"><img src="assets/arrow_circle.95259260.png"></para></td></tr><tr id="view_arrows-098-row-004"><td id="view_arrows-098-entry-007" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-009"><api-link id="view_arrows-098-api-link-008" data-member="CROSS" data-text="IArrow.CROSS" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-008" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-010"><img src="assets/arrow_cross.797a6fb1.png"></para></td></tr><tr id="view_arrows-098-row-005"><td id="view_arrows-098-entry-009" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-011"><api-link id="view_arrows-098-api-link-009" data-member="DEFAULT" data-text="IArrow.DEFAULT" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-010" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-012"><img src="assets/arrow_default.062364a3.png"></para></td></tr><tr id="view_arrows-098-row-006"><td id="view_arrows-098-entry-011" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-013"><api-link id="view_arrows-098-api-link-010" data-member="DIAMOND" data-text="IArrow.DIAMOND" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-012" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-014"><img src="assets/arrow_diamond.7ab140f5.png"></para></td></tr><tr id="view_arrows-098-row-007"><td id="view_arrows-098-entry-013" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-015"><api-link id="view_arrows-098-api-link-011" data-member="SHORT" data-text="IArrow.SHORT" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-014" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-016"><img src="assets/arrow_short.097ad157.png"></para></td></tr><tr id="view_arrows-098-row-008"><td id="view_arrows-098-entry-015" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-017"><api-link id="view_arrows-098-api-link-012" data-member="SIMPLE" data-text="IArrow.SIMPLE" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-016" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-018"><img src="assets/arrow_simple.e952fb38.png"></para></td></tr><tr id="view_arrows-098-row-009"><td id="view_arrows-098-entry-017" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-019"><api-link id="view_arrows-098-api-link-013" data-member="TRIANGLE" data-text="IArrow.TRIANGLE" data-type="yfiles.styles.IArrow"></api-link></para></td><td id="view_arrows-098-entry-018" align="left" valign="top"><para class="dguide-para" id="view_arrows-098-simpara-020"><img src="assets/arrow_triangle.7c2d4474.png"></para></td></tr></tbody>'}]},{tagname:"section",id:"bridges",title:"Bridges",children:[{tagname:"para","class":"dguide-para",id:"bridges-099-simpara-001",content:'Bridges, or <span class="def">line jumps</span>, are a means to resolve the visual ambiguity induced by\nintersecting edge paths.\nEach segment of an edge path that intersects with at least one other segment\n(from either the same or another edge path) can be augmented with a bridge in\none of a variety of different styles like gap, arc, and rectangle.'},{tagname:"para","class":"dguide-para",id:"bridges-099-simpara-002",content:'Bridge rendering is handled by the <api-link id="bridges-099-api-link-001" data-member="" data-text="BridgeManager" data-type="yfiles.view.BridgeManager"></api-link> class.\nIt can be enabled on a <span class="api">GraphComponent</span>’s graph by setting the <span class="api">GraphComponent</span>\nto <span class="api">BridgeManager</span>’s\n<api-link id="bridges-099-api-link-002" data-member="canvasComponent" data-text="canvasComponent" data-type="yfiles.view.BridgeManager"></api-link> property:'},{tagname:"example",id:"bridges-099-example-001",title:"Enabling bridge rendering on a GraphComponent",content:'<pre class="programlisting javascript" id="bridges-099-programlisting-001" language="javascript" format="linespecific"><code>const bridgeManager = new yfiles.view.BridgeManager()\r\nbridgeManager.canvasComponent = graphComponent\r\nbridgeManager.addObstacleProvider(new yfiles.view.GraphObstacleProvider())\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"bridges-099-simpara-003",content:'To determine “obstacles” to render a bridge around the <span class="api">BridgeManager</span> instance\nuses an implementation of the <api-link id="bridges-099-api-link-003" data-member="" data-text="IObstacleProvider" data-type="yfiles.view.IObstacleProvider"></api-link> interface.\nThe interface’s single method is used to get a <span class="api">GeneralPath</span>\nthat defines an actual obstacle.'},{tagname:"para","class":"dguide-para",id:"bridges-099-simpara-004",content:'The <api-link id="bridges-099-api-link-004" data-member="" data-text="GraphObstacleProvider" data-type="yfiles.view.GraphObstacleProvider"></api-link> class, which is used in the above example code,\nis a convenience implementation that by default incorporates the obstacle definitions\nreturned by all edges from the current graph in the <span class="api">BridgeManager</span>’s\n<span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para note",id:"bridges-099-note-001",content:'<p id="bridges-099-simpara-005">By default, you can find an appropriate <span class="api">IObstacleProvider</span>\nimplementation in the lookup of each edge that uses a style with a\n<span class="api">PathBasedEdgeStyleRenderer&lt;TStyle></span>-based style renderer.\nIn yFiles for HTML these are styles <api-link id="bridges-099-api-link-005" data-member="" data-text="PolylineEdgeStyle" data-type="yfiles.styles.PolylineEdgeStyle"></api-link>\nand <api-link id="bridges-099-api-link-006" data-member="" data-text="ArcEdgeStyle" data-type="yfiles.styles.ArcEdgeStyle"></api-link>.</p>'}]}]},{tagname:"section",id:"view_item-layout",title:"Item Layout",children:[{tagname:"para","class":"dguide-para",id:"view_item-layout-100-simpara-001",content:"Each item has a certain way of how its location on the canvas is specified. Some items use absolute\ncoordinates, others are described relative to another item."},{tagname:"para","class":"dguide-para tip",id:"view_item-layout-100-tip-001",content:'<p id="view_item-layout-100-simpara-002">Even though the layout is a property of the item itself (as every property of a model item is),\nthe graph that the item resides in is responsible for managing it. Thus, the layout can <strong id="view_item-layout-100-emphasis-001" class="bold" role="bold">only</strong> be\nset via the graph instance.</p>'},{tagname:"section",id:"view_item-layout_nodes",title:"Nodes",children:[{tagname:"para","class":"dguide-para",id:"view_item-layout_nodes-101-simpara-001",content:'<a href="#/dguide/graph_model-nodes">Nodes</a> are the only really independent type of graph elements and therefore they are the only items\nthat always have <strong id="view_item-layout_nodes-101-emphasis-001" class="bold" role="bold">an absolute and independent layout</strong>.'},{tagname:"para","class":"dguide-para",id:"view_item-layout_nodes-101-simpara-002",content:'The <span class="def">layout</span> of a node is defined as <strong id="view_item-layout_nodes-101-emphasis-002" class="bold" role="bold">a rectangle in world coordinates</strong>. The rectangle is defined\nby its top left corner along with a width and a height. It also defines the logical bounds for that\nitem (with regard to layout calculation and things like hit testing, hovering, etc.).'},{tagname:"figure","class":"image",title:"Node layout",id:"fig_displaying-the-graph_node_layout","float":0,children:[{tagname:"img",src:"assets/graph_model_node_bounds.e5d0b2ef.png",alt:"graph model node bounds",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para note",id:"view_item-layout_nodes-101-note-001",content:'<p id="view_item-layout_nodes-101-simpara-003">The rectangle object that is returned by the getter method on the node type is a <span class="def">live view</span> on\nthe layout, meaning that the object always holds the current coordinates.</p>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_nodes-101-simpara-004",content:'The method on <span class="api">IGraph</span> to set the layout of a node is\n<api-link id="view_item-layout_nodes-101-api-link-001" data-member="setNodeLayout(yfiles.graph.INode,yfiles.geometry.Rect)" data-text="setNodeLayout" data-type="yfiles.graph.IGraph"></api-link>. But there\nare also some methods that may indirectly change a node’s layout.'}]},{tagname:"section",id:"view_item-layout_edges",title:"Edges",children:[{tagname:"para","class":"dguide-para",id:"view_item-layout_edges-102-simpara-001",content:'The <span class="def">layout of an edge</span> is defined by a <strong id="view_item-layout_edges-102-emphasis-001" class="bold" role="bold">source port</strong>, a <strong id="view_item-layout_edges-102-emphasis-002" class="bold" role="bold">target port</strong>, and the <strong id="view_item-layout_edges-102-emphasis-003" class="bold" role="bold">edge path</strong>.\nThe <span class="def">source port</span> is the port at which the edge logically starts, and the <span class="def">target port</span> is the port\nat which the edge logically ends. In this sense, the edge is logically directed towards the\ntarget port.'},{tagname:"para","class":"dguide-para note",id:"view_item-layout_edges-102-note-001",content:'<p id="view_item-layout_edges-102-simpara-002">For directed graphs the edge direction can be emphasized visually by\n<api-link id="view_item-layout_edges-102-api-link-001" data-member="" data-text="arrows" data-type="yfiles.styles.IArrow"></api-link> that point to the\nsource or target port. Note that some layout algorithms consider the direction of the edges.</p>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_edges-102-simpara-003",content:'The <span class="def">edge path</span> is defined as a series of bends in an ordered list. The order of the bends in\nthe list determines the path: the edge starts at the source port and defines the segment\nbetween source port and first bend in the list as the first <span class="def">edge segment</span>. The next\nedge segment connects the first bend with the second. Finally, the last bend connects with\nthe target port for the last edge segment.'},{tagname:"figure","class":"image",title:"Illustration of an edge path with multiple bends. The edge segments are highlighted.",id:"fig_displaying-the-graph_item-layout_edgepath","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_item-layout_edgepath.8926bc5c.png",alt:"displaying the graph item layout edgepath",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_item-layout_edges-102-simpara-004",content:'The ports as well as the list of bends is managed by <span class="api">IGraph</span>. There, edges can be reconnected\nto other ports\n(<api-link id="view_item-layout_edges-102-api-link-002" data-member="setEdgePorts(yfiles.graph.IEdge,yfiles.graph.IPort,yfiles.graph.IPort)" data-text="setEdgePorts" data-type="yfiles.graph.IGraph"></api-link>)\nand bends can be added\n(<api-link id="view_item-layout_edges-102-api-link-003" data-member="addBend(yfiles.graph.IEdge,yfiles.geometry.Point,number)" data-text="addBend" data-type="yfiles.graph.IGraph"></api-link>)\nor relocated\n(<api-link id="view_item-layout_edges-102-api-link-004" data-member="setBendLocation(yfiles.graph.IBend,yfiles.geometry.Point)" data-text="setBendLocation" data-type="yfiles.graph.IGraph"></api-link>)\nas well as removed\n(<api-link id="view_item-layout_edges-102-api-link-005" data-member="remove(yfiles.graph.IModelItem)" data-text="remove" data-type="yfiles.graph.IGraph"></api-link>).'}]},{tagname:"section",id:"view_item-layout_labels",title:"Labels",children:[{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-001",content:'As <a href="#/dguide/graph_model-labels">labels</a> in most cases serve as description or nameplate for items, they are modeled as\n“owned” by other items (so-called <span class="api">ILabelOwner</span>s, like nodes, edges, or ports). Generally, they should\ntake a position near their owner and move accordingly when their respective owner is moved.\nBecause of this, the layout of labels is defined <strong id="view_item-layout_labels-103-emphasis-001" class="bold" role="bold">relative</strong> to their owner’s layout.'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-002",content:'For this, the <span class="def">layout of a label</span> is defined by a <strong id="view_item-layout_labels-103-emphasis-002" class="bold" role="bold">label model</strong> and the corresponding\n<strong id="view_item-layout_labels-103-emphasis-003" class="bold" role="bold">label model parameter</strong>. The <span class="def">label model</span> calculates the geometry of the label based on the\n<span class="def">label model parameter</span>.'},{tagname:"para","class":"dguide-para note",id:"view_item-layout_labels-103-note-001",content:'<p id="view_item-layout_labels-103-simpara-003">The label implementation only holds the label model parameter, since the parameter knows its\nown label model.</p>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-004",content:'For example, the <span class="api">InteriorLabelModel</span> is a label model that places\na label inside its node, along the node’s borders. The border is determined by the label model parameter.\nThe label model provides the parameters\n<span class="api">NORTH</span>,\n<span class="api">EAST</span>,\n<span class="api">SOUTH</span>, etc.'},{tagname:"figure","class":"image",title:"A label with the NORTH parameter. The other possible InteriorLabelModel parameters are illustrated by gray rectangles.",id:"fig_displaying-the-graph_item-layout_edgepath","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_item-layout_labels_interior.2880a5fe.png",alt:"displaying the graph item layout labels interior",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-005",content:'It is up to the label model implementation how the geometry of the label is calculated and what\nfactors are taken into consideration. The result of this calculation is provided to the\nvisualization as area to draw the label into, see also the section <a href="#/dguide/custom-styles_label-preferred-size">The Preferred Label Size</a>. The\n<span class="api">NORTH</span> parameter, as shown above, for example,\nplaces the label in a way that its bounding box’s top is aligned with the top of the node’s\nbounding box and its horizontal center is aligned with the horizontal center of the node.'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-006",content:'One common factor for geometry calculation in the label models is the <strong id="view_item-layout_labels-103-emphasis-004" class="bold" role="bold">preferred size</strong> of a label.\nThere are two ways the preferred size of a label is determined:'},{tagname:"para",content:'<ol id="view_item-layout_labels-103-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="view_item-layout_labels-103-listitem-001"><p id="view_item-layout_labels-103-simpara-007">Directly by setting the property of the label</p></li><li id="view_item-layout_labels-103-listitem-002"><p id="view_item-layout_labels-103-simpara-008">Indirectly by the visualization logic for the label</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-009",content:"You should seldomly need to set the preferred size property directly on the label. This is a rather uncommon practice. Its\nmain uses are cases in which no other information is available (such as when the actual size of the text on the\nscreen is unknown before the application has finished loading) or the space for the label is limited beforehand."},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-010",content:"The common case is that the graph sets the preferred size of the label when the property is not set explicitly.\nIt sets what the visualization for the label says how big the label visualization would be, if all\naspects were known (such as font and font size, for example) and the label had theoretically\nunlimited space in the canvas."},{tagname:"para","class":"dguide-para important",id:"view_item-layout_labels-103-important-001",content:'<p id="view_item-layout_labels-103-simpara-011">However you are specifying the preferred size, keep in mind that it is up to the label model implementation\nto honor this preferred size. The result of the label model’s geometry calculation is what defines\nthe layout of the label, which is later the area that the visualization is instructed to draw\nthe label into.</p>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-012",content:"There are various predefined label models available for different scenarios. Typically, a model\nprovides one or more factory methods for creating label model parameters. Some of the models\nsupport only a fixed set of parameters. In these cases, the parameters can be accessed using\npredefined constants (such as in the example above)."},{tagname:"para",content:'<dl id="view_item-layout_labels-103-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="view_item-layout_labels-103-term-001" class="title" role="title">Some predefined node label models</dt><dt id="view_item-layout_labels-103-term-002"><api-link id="view_item-layout_labels-103-api-link-001" data-member="" data-text="InteriorLabelModel" data-type="yfiles.graph.InteriorLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-003">\n<p id="view_item-layout_labels-103-simpara-013">Provides nine specific positions inside the node’s bounds.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-003"><api-link id="view_item-layout_labels-103-api-link-002" data-member="" data-text="ExteriorLabelModel" data-type="yfiles.graph.ExteriorLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-004">\n<p id="view_item-layout_labels-103-simpara-014">Provides eight specific positions outside the node’s bounds.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-004"><api-link id="view_item-layout_labels-103-api-link-003" data-member="" data-text="InteriorStretchLabelModel" data-type="yfiles.graph.InteriorStretchLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-005">\n<p id="view_item-layout_labels-103-simpara-015">Places the label inside the node’s bounds and makes the label fit either the node’s width or height.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-005"><api-link id="view_item-layout_labels-103-api-link-004" data-member="" data-text="FreeNodeLabelModel" data-type="yfiles.graph.FreeNodeLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-006">\n<p id="view_item-layout_labels-103-simpara-016">The label can be placed at any position and that position can be either a fixed location anywhere\nin the graph or a location relative to the node’s bounds. Optionally, proper interactive positioning\nis eased by a sophisticated snapping to special positions.</p>\n</dd>\n</dl>'
},{tagname:"para",content:'<dl id="view_item-layout_labels-103-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="view_item-layout_labels-103-term-006" class="title" role="title">Some predefined edge label models</dt><dt id="view_item-layout_labels-103-term-007"><api-link id="view_item-layout_labels-103-api-link-005" data-member="" data-text="NinePositionsEdgeLabelModel" data-type="yfiles.graph.NinePositionsEdgeLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-007">\n<p id="view_item-layout_labels-103-simpara-017">Provides nine specific label positions near the source, center, and target of the edge.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-008"><api-link id="view_item-layout_labels-103-api-link-006" data-member="" data-text="SmartEdgeLabelModel" data-type="yfiles.graph.SmartEdgeLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-008">\n<p id="view_item-layout_labels-103-simpara-018">The most versatile edge label model. The label can be placed at any location and is anchored\nrelative to the nearest edge segment. Optionally, proper interactive positioning is eased by a\nsophisticated snapping to special positions.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-009"><api-link id="view_item-layout_labels-103-api-link-007" data-member="" data-text="EdgeSegmentLabelModel" data-type="yfiles.graph.EdgeSegmentLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-009">\n<p id="view_item-layout_labels-103-simpara-019">Allows placement of labels directly on the edge path or on one side of the edge at a given\ndistance. By default, a set of position candidates along the edge is presented to the user during\ninteractive movements, but the model itself supports continuous positions. The label’s position\nis determined by the index of an edge segment and the ratio along this segment.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-010"><api-link id="view_item-layout_labels-103-api-link-008" data-member="" data-text="EdgePathLabelModel" data-type="yfiles.graph.EdgePathLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-010">\n<p id="view_item-layout_labels-103-simpara-020">Allows placement of labels directly on the edge path or on one side of the edge at a given\ndistance. By default, a set of position candidates along the edge is presented to the user\nduring interactive movements, but the model itself supports continuous positions. The label’s\nposition is determined by the ratio along the entire edge path.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-011"><api-link id="view_item-layout_labels-103-api-link-009" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-011">\n<p id="view_item-layout_labels-103-simpara-021">The label can be placed at any location and is anchored relative to the edge’s port location.\nOptionally, proper interactive positioning is eased by a sophisticated snapping to special\npositions.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="view_item-layout_labels-103-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="view_item-layout_labels-103-term-012" class="title" role="title">Some predefined port label models</dt><dt id="view_item-layout_labels-103-term-013"><api-link id="view_item-layout_labels-103-api-link-010" data-member="" data-text="InsideOutsidePortLabelModel" data-type="yfiles.graph.InsideOutsidePortLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-012">\n<p id="view_item-layout_labels-103-simpara-022">Places the label either inside or outside of the owner node of the port,\naccording to the node border which is closest to the port position.</p>\n</dd>\n<dt id="view_item-layout_labels-103-term-014"><api-link id="view_item-layout_labels-103-api-link-011" data-member="" data-text="FreePortLabelModel" data-type="yfiles.graph.FreePortLabelModel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-013">\n<p id="view_item-layout_labels-103-simpara-023">The label can be placed at any location and is anchored relative to the port’s location.\nOptionally, proper interactive positioning is eased by a sophisticated snapping to special\npositions.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-024",content:'The actual label layout is determined by the <span class="api">layoutParameter</span> and often relative\nto the label’s <span class="api">owner</span>. The <api-link id="view_item-layout_labels-103-api-link-012" data-member="layout" data-text="layout" data-type="yfiles.graph.ILabel"></api-link> property\nprovides a convenient way to get a <span class="def">snapshot</span> of the label’s current layout. Since a label can be rotated\nthe layout is provided as <api-link id="view_item-layout_labels-103-api-link-013" data-member="" data-text="IOrientedRectangle" data-type="yfiles.geometry.IOrientedRectangle"></api-link>.'},{tagname:"figure","class":"image",title:"The label layout illustrated as an oriented rectangle",id:"view_item-layout_labels-103-figure-002","float":0,children:[{tagname:"img",src:"assets/graph_model_label_layout.97f34a62.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_item-layout_labels-103-simpara-025",content:'Note that the location of the oriented rectangle is provided by an anchor point which is the <strong id="view_item-layout_labels-103-emphasis-005" class="bold" role="bold">bottom</strong> left corner\nof the rectangle. Its angle is determined by a so-called up vector as shown in the figure above.'},{tagname:"para",content:'<dl id="view_item-layout_labels-103-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="view_item-layout_labels-103-term-015"><api-link id="view_item-layout_labels-103-api-link-014" data-member="layout" data-text="layout:&#xA0;IOrientedRectangle" data-type="yfiles.graph.ILabel"></api-link></dt><dd id="view_item-layout_labels-103-listitem-014">\n<p id="view_item-layout_labels-103-simpara-026">Returns a snapshot of the current layout of the label.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"view_item-layout_ports",title:"Ports",children:[{tagname:"para","class":"dguide-para",id:"view_item-layout_ports-104-simpara-001",content:'Similar to labels, <a href="#/dguide/graph_model-ports">ports</a> are items that cannot exist independently of others, namely nodes\nand edges (so-called <span class="api">IPortOwner</span>s). Thus, their layout is\ndependent on those items as well, so they align with their respective owners in every\nsituation.'},{tagname:"para","class":"dguide-para",id:"view_item-layout_ports-104-simpara-002",content:"The layout of a port is defined by a point (the location of the port). Similar to label\nmodels, port location models calculate the final location for the port via a port location model\nparameter."},{tagname:"para","class":"dguide-para",id:"view_item-layout_ports-104-simpara-003",content:"Of course, yFiles for HTML provides a number of predefined port location models for use\nout-of-the-box."},{tagname:"para",content:'<dl id="view_item-layout_ports-104-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="view_item-layout_ports-104-term-001" class="title" role="title">Some predefined port location models</dt><dt id="view_item-layout_ports-104-term-002"><api-link id="view_item-layout_ports-104-api-link-001" data-member="" data-text="FreeNodePortLocationModel" data-type="yfiles.graph.FreeNodePortLocationModel"></api-link></dt><dd id="view_item-layout_ports-104-listitem-001">\n<p id="view_item-layout_ports-104-simpara-004">The location of a port is specified relative to the top left corner of the node and in\nrelation to the node’s geometry.</p>\n</dd>\n<dt id="view_item-layout_ports-104-term-003"><api-link id="view_item-layout_ports-104-api-link-002" data-member="" data-text="GenericPortLocationModel" data-type="yfiles.graph.GenericPortLocationModel"></api-link></dt><dd id="view_item-layout_ports-104-listitem-002">\n<p id="view_item-layout_ports-104-simpara-005">Allows to compose a custom blend of arbitrary port locations that are available with the\npredefined port location models.</p>\n</dd>\n<dt id="view_item-layout_ports-104-term-004"><api-link id="view_item-layout_ports-104-api-link-003" data-member="" data-text="BendAnchoredPortLocationModel" data-type="yfiles.graph.BendAnchoredPortLocationModel"></api-link></dt><dd id="view_item-layout_ports-104-listitem-003">\n<p id="view_item-layout_ports-104-simpara-006">Specifies the location of a port to be at the location of a bend.</p>\n</dd>\n<dt id="view_item-layout_ports-104-term-005"><api-link id="view_item-layout_ports-104-api-link-004" data-member="" data-text="SegmentRatioPortLocationModel" data-type="yfiles.graph.SegmentRatioPortLocationModel"></api-link></dt><dd id="view_item-layout_ports-104-listitem-004">\n<p id="view_item-layout_ports-104-simpara-007">The location of a port is specified on an edge segment at a specified ratio.</p>\n</dd>\n</dl>'}]}]},{tagname:"section",id:"view_selection",title:"Selection, Focus, and Highlight",children:[{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-001",content:'By default, yFiles for HTML provides three different decorative mechanisms to mark elements in\nthe <span class="api">GraphComponent</span> in a certain way: selection, focus, and highlight.'},{tagname:"figure","class":"image",title:"The default decorations to mark elements",id:"view_selection-105-figure-001","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_selection.4d0c130a.png",alt:"",title:'<para class="dguide-para">Selection decoration</para>'},{tagname:"img",src:"assets/displaying-the-graph_focus.659713cd.png",alt:"",title:'<para class="dguide-para">Focus decoration</para>'},{tagname:"img",src:"assets/displaying-the-graph_highlight.97154035.png",alt:"",title:'<para class="dguide-para">Highlight decoration</para>'}]},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-002",content:'They are managed independently of the graph elements by so-called model managers in\nthe <span class="api">GraphComponent</span>. There is a manager for each type of decorative element.'},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-003",content:'<span class="def">Selection</span> marks a single element or multiple elements as <strong id="view_selection-105-emphasis-001" class="bold" role="bold">selected</strong>. The majority of interactive features\nin yFiles for HTML operates on the selection by default, for example moving and resizing\nitems, clipboard functions (copy, cut, paste), and so on.'},{tagname:"para","class":"dguide-para tip",id:"view_selection-105-tip-001",content:'<p id="view_selection-105-simpara-004">In the default configuration, the selection for nodes and labels is visualized by a\nhatched painted rectangle around the item. Edge selection uses a hatched painted line\nwith the bend selection using a white diamond shape. A selected port is visualized by\nan ellipse.</p>'},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-005",content:'Similar to the application focus in a UI framework, the <span class="api">GraphComponent</span>’s <span class="def">focus</span> marks\na single item as the <strong id="view_selection-105-emphasis-002" class="bold" role="bold">currently focused item</strong>.'},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-006",content:'In the default configuration, the current item property of the <span class="api">GraphComponent</span> represents\nthe focused item. Setting the current item programmatically will also change the focused\nitem and its decorations.'},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-007",content:"The focused item is also the target of many interactive features by default, for example\nfor extending the selection, zooming to a specific item, or navigating a nested graph."},{tagname:"para","class":"dguide-para tip",id:"view_selection-105-tip-002",content:'<p id="view_selection-105-simpara-008">By default, the focused item can only be a node, and it is visualized by a thin rectangle\nwith a dashed stroke.</p>'},{tagname:"para","class":"dguide-para",id:"view_selection-105-simpara-009",content:'<span class="def">Item highlighting</span> is another form of <strong id="view_selection-105-emphasis-003" class="bold" role="bold">decoration for individual items</strong>. It is by\ndefault not bound to any interaction like selection or focus and instead is set\nprogrammatically. It is up to the application programmer to <api-link id="view_selection-105-api-link-001" data-member="addHighlight(T)" data-text="add" data-type="yfiles.view.HighlightIndicatorManager"></api-link>\nor\n<api-link id="view_selection-105-api-link-002" data-member="removeHighlight(T)" data-text="remove" data-type="yfiles.view.HighlightIndicatorManager"></api-link>\nhighlights to the items in the graph.'},{tagname:"para","class":"dguide-para tip",id:"view_selection-105-tip-003",content:'<p id="view_selection-105-simpara-010">There are various highlight styles for some of the items. For example, the highlight\nfor edges is a gray dashed line.</p>'}]},{tagname:"section",id:"view_overview",title:"Component for Graph Outline",children:[{tagname:"para","class":"dguide-para",id:"view_overview-106-simpara-001",content:"Graphs can be of arbitrary size and shape.\nOn the screen, however, you can only display the contents of a discrete, rectangular\narea at once and if a graph is large or maybe has a non-rectangular shape, chances\nare that not all its elements will be visible in the view at zoom level 1.0.\nTrue, by zooming out you can show more elements on the screen simultaneously, but the visualization\nof the elements will quickly become very small as well. And most of the time, the visualization\nis meant to convey information to the user as well."},{tagname:"para","class":"dguide-para",id:"view_overview-106-simpara-002",content:'Hence, while exploring a large or complex graph using the <span class="api">GraphComponent</span> it may be difficult\nfor a user to grasp where the current visible area is in the context of the whole graph.\nFor situations like these, developers might want to add an overview of the whole graph.'},{tagname:"para","class":"dguide-para",id:"view_overview-106-simpara-003",content:'yFiles for HTML offers an extra component for this purpose: the <api-link id="view_overview-106-api-link-001" data-member="" data-text="GraphOverviewComponent" data-type="yfiles.view.GraphOverviewComponent"></api-link>.\nIt displays a simplified version of the whole graph to outline the graph’s structure. In addition,\nit also indicates the current visible area of the main <span class="api">GraphComponent</span>.'},{tagname:"figure","class":"image",title:"An example application that shows a GraphComponent with an attached GraphOverviewComponent on the left. Notice how the GraphOverviewComponent shows the currently visible area.",id:"fig_displaying-the-graph_overview","float":0,children:[{tagname:"img",src:"assets/displaying-the-graph_overview.f22572aa.png",alt:"displaying the graph overview",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"view_overview-106-simpara-004",content:'The <span class="api">GraphOverviewComponent</span> is set up with a <span class="api">GraphComponent</span> to which\nit connects. The overview is then automatically created and updated. It offers the following features:'},{tagname:"para",content:'<ul id="view_overview-106-itemizedlist-001"><li id="view_overview-106-listitem-001"><p id="view_overview-106-simpara-005">Works out of the box with any <span class="api">GraphComponent</span></p></li><li id="view_overview-106-listitem-002"><p id="view_overview-106-simpara-006">Easy to use</p></li><li id="view_overview-106-listitem-003"><p id="view_overview-106-simpara-007">Efficiently displays the graph structure in a clear and concise manner</p></li><li id="view_overview-106-listitem-004"><p id="view_overview-106-simpara-008">Shows the current viewport of the connected <span class="api">GraphComponent</span> as a transparent rectangle</p></li><li id="view_overview-106-listitem-005"><p id="view_overview-106-simpara-009">Provides a set of custom interactive features such as:</p><para><ul id="view_overview-106-itemizedlist-002"><li id="view_overview-106-listitem-006"><p id="view_overview-106-simpara-010">Dragging the rectangle that depicts the <span class="api">GraphComponent</span> viewport will actually move the viewport</p></li><li id="view_overview-106-listitem-007"><p id="view_overview-106-simpara-011">A handle at the lower right corner of the rectangle can be used to resize the viewport, which will zoom in/out in the <span class="api">GraphComponent</span> accordingly</p></li><li id="view_overview-106-listitem-008"><p id="view_overview-106-simpara-012">Alternatively, the same can be achieved using the mouse wheel</p></li><li id="view_overview-106-listitem-009"><p id="view_overview-106-simpara-013">Clicking anywhere on the overview will move the viewport to that position</p></li></ul></para></li><li id="view_overview-106-listitem-010"><p id="view_overview-106-simpara-014"><a href="#/dguide/customizing_concepts">Highly customizable</a></p></li></ul>'}]}]},{tagname:"section",id:"interaction",title:"User Interaction",children:[{tagname:"para","class":"dguide-para",id:"interaction-008-simpara-001",content:'User interaction in a <span class="api">GraphComponent</span> is driven by so-called <span class="def">input modes</span>. Input\nmodes implement the <api-link id="interaction-008-api-link-001" data-member="" data-text="IInputMode" data-type="yfiles.input.IInputMode"></api-link> interface and you\ncan set them on <span class="api">GraphComponent</span> via its\n<api-link id="interaction-008-api-link-002" data-member="inputMode" data-text="inputMode" data-type="yfiles.view.CanvasComponent"></api-link> property. There can be only one\ninput mode set on <span class="api">GraphComponent</span> at the same time, but there are input modes\nthat have multiple child input modes. You can also change the input mode on\n<span class="api">GraphComponent</span> at any time.'},{tagname:"para","class":"dguide-para",id:"interaction-008-simpara-002",content:'You can think of input modes as a higher-order event handler. <span class="api">GraphComponent</span>\nhas plenty of events that allow reacting to user input, but it can be\ndifficult to orchestrate more complex interactions that way. For example,\ndragging an item around involves listening to a <strong id="interaction-008-emphasis-001" class="bold" role="bold">mouse button pressed</strong> event,\nthen handling <strong id="interaction-008-emphasis-002" class="bold" role="bold">mouse move</strong> events until the button is released. However, input modes provide\nevents at a higher level of abstraction, e.g. the\n<span class="api">ItemHoverInputMode</span> can be used to determine when the mouse\nis being moved from one item to the next.'},{tagname:"para","class":"dguide-para",id:"interaction-008-simpara-003",content:'Input modes may have phases during which no other input mode may interfere. This\nis handled via a <span class="def">mutex</span> that input modes can request and release at certain\npoints. This ensures that usually at the start of a specific gesture a single\ninput mode can request to run exclusively until it releases the mutex again.\nThis also highlights another point: Input modes can usually only be activated after\ncertain conditions have been met. For example,\n<span class="api">MoveInputMode</span> only changes the mouse cursor when\nit is hovering over an item that can be moved. Most of the time, most input\nmodes are just quietly observing and doing nothing.'},{tagname:"para","class":"dguide-para",id:"interaction-008-simpara-004",content:'Input modes have a <api-link id="interaction-008-api-link-003" data-member="priority" data-text="priority" data-type="yfiles.input.IInputMode"></api-link>\nthat enables different input modes to have the same or similar activation\ngestures. For example, the <strong id="interaction-008-emphasis-003" class="bold" role="bold">press-drag-release</strong> gesture is used by\n<span class="api">MoveInputMode</span>,\n<span class="api">CreateEdgeInputMode</span>,\n<span class="api">MarqueeSelectionInputMode</span>,\nand <span class="api">LassoSelectionInputMode</span>. While\n<span class="api">MoveInputMode</span> and\n<span class="api">CreateEdgeInputMode</span> make sure to only perform\nactions when starting the drag on a selected or unselected element,\nrespectively, e.g., <span class="api">MarqueeSelectionInputMode</span> has no\nsuch provisions and would override the functionality of the other two when given\na higher priority.'},{tagname:"para","class":"dguide-para note",id:"interaction-008-note-001",content:'<p id="interaction-008-simpara-005">The <api-link id="interaction-008-api-link-004" data-member="priority" data-text="priority" data-type="yfiles.input.IInputMode"></api-link> property is reversed\n      in its meaning: Higher priorities correspond to <strong id="interaction-008-emphasis-004" class="bold" role="bold">lower</strong> values of the\n      <span class="api">priority</span> property.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-008-simpara-006",content:'The sections <a href="#/dguide/interaction-geim">Editing Graphs</a> and <a href="#/dguide/interaction-gvim">Non-Editable Graphs</a> offer a brief\noverview of the features supported by the two major input modes in yFiles for HTML:\n<api-link id="interaction-008-api-link-005" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> and\n<api-link id="interaction-008-api-link-006" data-member="" data-text="GraphViewerInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link> and when to use each.\nAdvanced customization options are discussed in <a href="#/dguide/customizing_interaction">Customizing User Interaction</a>.'},{tagname:"section",id:"interaction-geim",title:"Editing Graphs",children:[{tagname:"para","class":"dguide-para",id:"interaction-geim-107-simpara-001",content:'A major feature of yFiles for HTML is its comprehensive support for editing graphs\ninteractively. This is encapsulated in\n<api-link id="interaction-geim-107-api-link-001" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link>, a highly-customizable input\nmode. On its own it provides an editing experience similar to conventional\ngraph editing applications, but it can also be configured to achieve almost any\ncombination of desired interactions. For most use cases you probably want <span class="api">GraphEditorInputMode</span>\nas the main input mode for your application.'},{tagname:"example",id:"interaction-geim-107-example-001",title:"Setting GraphEditorInputMode as main input mode",content:'<pre class="programlisting javascript" id="interaction-geim-107-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.inputMode = new yfiles.input.GraphEditorInputMode()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-geim-107-simpara-002",content:'The benefits here are that <span class="api">GraphEditorInputMode</span>\nis'},{tagname:"para",content:'<ul id="interaction-geim-107-itemizedlist-001"><li id="interaction-geim-107-listitem-001"><p id="interaction-geim-107-simpara-003">scalable: It is possible to add new interactive functionality (in the form of\nother input modes) to <span class="api">GraphEditorInputMode</span>.</p></li><li id="interaction-geim-107-listitem-002"><p id="interaction-geim-107-simpara-004">flexible: Everything can be enabled or disabled, thus adjusting the default\nbehavior to your needs.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"interaction-geim-107-simpara-005",content:'<span class="api">GraphEditorInputMode</span> supports creating and removing graph elements. Items can be moved and\nresized. Furthermore, support for click handling, selection, and context menus\nis provided.\nAn overview of those features can be found in <a href="#/dguide/interaction-support">Supported User Interactions</a>.'},{tagname:"para","class":"dguide-para",id:"interaction-geim-107-simpara-006",content:'Most functionality is delegated to a wide array of child input modes. Both\n<span class="api">GraphEditorInputMode</span> and its child input modes offer a number of ways to customize certain\naspects of the child input modes, which are discussed briefly in\n<a href="#/dguide/interaction-support">Supported User Interactions</a> and in detail in <a href="#/dguide/customizing_interaction">Customizing User Interaction</a>.'}]},{tagname:"section",id:"interaction-gvim",title:"Non-Editable Graphs",children:[{tagname:"para","class":"dguide-para",id:"interaction-gvim-108-simpara-001",content:'Not every application needs to be a full-blown graph editor. Your application may just\nwant to explore static graphs or graphs that are not created and modified\ninteractively, but rather via code.\n<api-link id="interaction-gvim-108-api-link-001" data-member="" data-text="GraphViewerInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link> is an easy way to just look\nat a graph, but not change it.'},{tagname:"example",id:"interaction-gvim-108-example-001",title:"Setting GraphViewerInputMode as main input mode",content:'<pre class="programlisting javascript" id="interaction-gvim-108-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.inputMode = new yfiles.input.GraphViewerInputMode()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-gvim-108-simpara-002",content:'<span class="api">GraphViewerInputMode</span> can be useful in various circumstances:'},{tagname:"para",content:'<ul id="interaction-gvim-108-itemizedlist-001"><li id="interaction-gvim-108-listitem-001"><p id="interaction-gvim-108-simpara-003">You just have a static graph that is generated from external data, but it is\nlarge enough to warrant navigation features like zooming and panning.</p></li><li id="interaction-gvim-108-listitem-002"><p id="interaction-gvim-108-simpara-004">Your graph is not static, but is created and updated through code, e.g. in\nresponse to external events, or as result of a layout algorithm.</p></li><li id="interaction-gvim-108-listitem-003"><p id="interaction-gvim-108-simpara-005">Your graph can be edited only through a number of special features, like\ntoolbar buttons, context menus, etc. but none of the default gestures provided\nby <span class="api">GraphEditorInputMode</span> (which would necessitate turning off most of <span class="api">GraphEditorInputMode</span>’s\nfunctionality).</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"interaction-gvim-108-simpara-006",content:'In principle <span class="api">GraphViewerInputMode</span> is very similar to <a href="#/dguide/interaction-geim">GraphEditorInputMode</a>, but lacks\nthe functionality to change the structure of the graph interactively. By default\nit is configured with gestures that allow easy exploration of static graphs.\nHowever, core interaction features of <span class="api">GraphEditorInputMode</span> that do <strong id="interaction-gvim-108-emphasis-001" class="bold" role="bold">not</strong> change the graph — such as selection, the ability to react to clicks on items, have context menus,\nor tooltips — are exactly the same in <span class="api">GraphViewerInputMode</span>.'}]},{tagname:"section",id:"interaction-support",title:"Supported User Interactions",children:[{tagname:"para","class":"dguide-para",id:"interaction-support-109-simpara-001",content:'yFiles for HTML offers a wide array of predefined actions, not only for commonly used\neditor functionality (such as clipboard support, or zooming), but also actions\nspecific to editing <strong id="interaction-support-109-emphasis-001" class="bold" role="bold">graphs</strong>. Most kinds of interaction in the following sections\nare the result of a specific input mode handling input events, usually because\nthey are child input modes of <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span>.\nThese child input modes are available on <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> as properties with\nthe same name as the respective input mode.\nA few interactions are also supported directly by <span class="api">GraphComponent</span>, even without\nany input mode.\nNaturally, every interaction that exists to actually <strong id="interaction-support-109-emphasis-002" class="bold" role="bold">change</strong> the graph is only\nsupported with <span class="api">GraphEditorInputMode</span>, not <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para tip",id:"interaction-support-109-tip-001",content:'<p id="interaction-support-109-simpara-002">Unless otherwise stated, all user interactions which support mouse gestures support touch gestures as well.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-support-109-simpara-003",content:'One frequent type of customization is to change the gesture for an\ninteraction. This is usually done with a property whose name ends in\n<code>Recognizer</code> and whose type is a function that takes an Object and an <span class="api">EventArgs</span> instance and returns a boolean value.\nevent recognizers thus are essentially a predicate that matches on certain events.\nYou can write them manually, but there are also predefined event recognizers\nfor many common events, such as mouse button presses and modifier keys.'},{tagname:"para","class":"dguide-para",id:"interaction-support-109-simpara-004",content:"You can also easily combine event recognizers using appropriate\nhelper methods:"},{tagname:"example",id:"interaction-support-109-example-001",title:"Creating a combined event recognizer",content:'<pre class="programlisting javascript" id="interaction-support-109-programlisting-001" language="javascript" format="linespecific"><code>const ctrlClick = yfiles.input.EventRecognizers.createAndRecognizer([\r\n  yfiles.input.KeyEventRecognizers.CONTROL_PRESSED,\r\n  yfiles.input.MouseEventRecognizers.LEFT_CLICKED\r\n])\n</code></pre>'},{tagname:"section",id:"interaction-navigation",title:"Zooming, Panning, and Scrolling",children:[{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-001",content:'Exploring the graph is often performed by panning the viewport and zooming.\nThese are the most common types of interactions and are present in nearly every\napplication.\nFrom a technical perspective both interactions move and resize the viewport. Zooming is\nhandled by <api-link id="interaction-navigation-110-api-link-001" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link>, while panning is\nhandled by <api-link id="interaction-navigation-110-api-link-002" data-member="" data-text="MoveViewportInputMode" data-type="yfiles.input.MoveViewportInputMode"></api-link>. Once the graph exceeds\nthe current viewport, scrollbars appear which are handled by\n<span class="api">GraphComponent</span> again.'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-002",content:'The default gesture for zooming is simply turning the mouse wheel.\nIf your application needs to use the mouse wheel for scrolling\nthe viewport instead, you can configure this with the\n<api-link id="interaction-navigation-110-api-link-003" data-member="mouseWheelBehavior" data-text="mouseWheelBehavior" data-type="yfiles.view.CanvasComponent"></api-link> property, which has\nthree major modes:'},{tagname:"para",content:'<dl id="interaction-navigation-110-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-navigation-110-term-001"><api-link id="interaction-navigation-110-api-link-004" data-member="NONE" data-text="MouseWheelBehaviors.NONE" data-type="yfiles.view.MouseWheelBehaviors"></api-link></dt><dd id="interaction-navigation-110-listitem-001">\n<p id="interaction-navigation-110-simpara-003">Turning the mouse wheel will do nothing.</p>\n</dd>\n<dt id="interaction-navigation-110-term-002"><api-link id="interaction-navigation-110-api-link-005" data-member="ZOOM" data-text="MouseWheelBehaviors.ZOOM" data-type="yfiles.view.MouseWheelBehaviors"></api-link></dt><dd id="interaction-navigation-110-listitem-002">\n<p id="interaction-navigation-110-simpara-004">Turning the mouse wheel will zoom the viewport. This is the default.</p>\n</dd>\n<dt id="interaction-navigation-110-term-003"><api-link id="interaction-navigation-110-api-link-006" data-member="SCROLL" data-text="MouseWheelBehaviors.SCROLL" data-type="yfiles.view.MouseWheelBehaviors"></api-link></dt><dd id="interaction-navigation-110-listitem-003">\n<p id="interaction-navigation-110-simpara-005">Turning the mouse wheel will scroll the viewport.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-006",content:'<span class="api">ZOOM</span> and\n<span class="api">SCROLL</span> can be combined as well, in\nwhich case scrolling is the default behavior when turning the mouse wheel and\nzooming is done by holding <kbd>Ctrl</kbd> and turning the mouse wheel:'},{tagname:"example",id:"interaction-navigation-110-example-001",title:"Setting the combined zoom and scroll mouse wheel behavior",content:'<pre class="programlisting javascript" id="interaction-navigation-110-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.mouseWheelBehavior =\r\n  yfiles.view.MouseWheelBehaviors.ZOOM | yfiles.view.MouseWheelBehaviors.SCROLL\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-007",content:'Furthermore, you can combine those values with the special value\n<api-link id="interaction-navigation-110-api-link-007" data-member="ONLY_WHEN_FOCUSED" data-text="ONLY_WHEN_FOCUSED" data-type="yfiles.view.MouseWheelBehaviors"></api-link> to specify that\nthe mouse wheel should only do anything when the <span class="api">GraphComponent</span> currently has\nthe focus.'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-008",content:'Panning the viewport with <span class="api">GraphViewerInputMode</span> is done by holding the left mouse button\nand dragging. With <span class="api">GraphEditorInputMode</span> the <kbd>Ctrl</kbd> key has to be pressed as well to\ndistinguish the gesture from <a href="#/dguide/interaction-creating_edges">edge creation</a> and\n<a href="#/dguide/interaction-selection-marquee-and-lasso">marquee</a> or <a href="#/dguide/interaction-selection-marquee-and-lasso">lasso</a> selection. Common adjustments to the panning\ngesture are as follows:'},{tagname:"para",content:'<dl id="interaction-navigation-110-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="interaction-navigation-110-term-004"><api-link id="interaction-navigation-110-api-link-008" data-member="pressedRecognizer" data-text="MoveViewportInputMode.pressedRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-004">\n<p id="interaction-navigation-110-simpara-009">Changes the mouse interaction to start the panning gesture.</p>\n</dd>\n<dt id="interaction-navigation-110-term-005"><api-link id="interaction-navigation-110-api-link-009" data-member="primaryDownRecognizer" data-text="MoveViewportInputMode.primaryDownRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-005">\n<p id="interaction-navigation-110-simpara-010">Changes the touch interaction to start the panning gesture. Since this recognizer\nis supposed to recognize the first finger down, zoom gestures (pinch, two fingers down)\nare affected as well (see also below).</p>\n</dd>\n<dt id="interaction-navigation-110-term-006"><api-link id="interaction-navigation-110-api-link-010" data-member="dragCursor" data-text="MoveViewportInputMode.dragCursor" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-006">\n<p id="interaction-navigation-110-simpara-011">Changes the mouse cursor to show during the gesture.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-012",content:'You can turn off panning completely by disabling the\n<span class="api">MoveViewportInputMode</span> via its\n<api-link id="interaction-navigation-110-api-link-011" data-member="enabled" data-text="enabled" data-type="yfiles.input.MoveViewportInputMode"></api-link> property.'},{tagname:"example",id:"interaction-navigation-110-example-002",title:"Turning off panning the viewport",content:'<pre class="programlisting javascript" id="interaction-navigation-110-programlisting-002" language="javascript" format="linespecific"><code>graphEditorInputMode.moveViewportInputMode.enabled = false\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-013",content:'With the <api-link id="interaction-navigation-110-api-link-012" data-member="horizontalScrollBarPolicy" data-text="horizontalScrollBarPolicy" data-type="yfiles.view.CanvasComponent"></api-link> and\n<api-link id="interaction-navigation-110-api-link-013" data-member="verticalScrollBarPolicy" data-text="verticalScrollBarPolicy" data-type="yfiles.view.CanvasComponent"></api-link> properties you can\nconfigure the scrollbars on the <span class="api">GraphComponent</span> to be always or never visible,\nor shown only when needed, which is the default.'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-014",content:"Zooming and panning via multi-touch gestures is also supported by default.\nTo pan the viewport, simply touch\nthe screen and maintain contact as you move it around.\nTo zoom, touch the screen with two fingers and make a pinching motion\nto zoom out and a stretching motion to zoom in.\nCommon adjustments to the panning and zooming gesture are as follows:"},{tagname:"para",content:'<dl id="interaction-navigation-110-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="interaction-navigation-110-term-007"><api-link id="interaction-navigation-110-api-link-014" data-member="primaryDownRecognizer" data-text="MoveViewportInputMode.primaryDownRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-007">\n<p id="interaction-navigation-110-simpara-015">Changes the interaction to start the move viewport gesture.</p>\n</dd>\n<dt id="interaction-navigation-110-term-008"><api-link id="interaction-navigation-110-api-link-015" data-member="secondaryDownRecognizer" data-text="MoveViewportInputMode.secondaryDownRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-008">\n<p id="interaction-navigation-110-simpara-016">Changes the interaction to start the pinch gesture.</p>\n</dd>\n<dt id="interaction-navigation-110-term-009"><api-link id="interaction-navigation-110-api-link-016" data-member="allowPinchZoom" data-text="MoveViewportInputMode.allowPinchZoom" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="interaction-navigation-110-listitem-009">\n<p id="interaction-navigation-110-simpara-017">Turns the zooming gesture using two touch pointers on or off.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-navigation-110-simpara-018",content:'Advanced customization of zoom and scrolling features is discussed in the\nsection <a href="#/dguide/customizing_view_limit_viewport">Restricting the Viewport</a>.'}]},{tagname:"section",id:"interaction-creating_nodes",title:"Creating Nodes",children:[{tagname:"para","class":"dguide-para",id:"interaction-creating_nodes-111-simpara-001",content:'Creating nodes is one of the basic user interactions provided by <span class="api">GraphEditorInputMode</span>. By default\na new node is created simply when left-clicking or tapping on an empty area in the canvas.'},{tagname:"para","class":"dguide-para",id:"interaction-creating_nodes-111-simpara-002",content:'Node creation can be turned off via <span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-creating_nodes-111-api-link-001" data-member="allowCreateNode" data-text="allowCreateNode" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nproperty.\nFurther customization options for node creation are discussed in detail in\n<a href="#/dguide/customizing_interaction_creating_nodes">Customizing Creating Nodes</a>.'},{tagname:"para","class":"dguide-para tip",id:"interaction-creating_nodes-111-tip-001",content:'<p id="interaction-creating_nodes-111-simpara-003">Nodes can also be created with <a href="#/dguide/interaction-drag_drop">Drag and Drop</a>.</p>'}]},{tagname:"section",id:"interaction-creating_edges",title:"Creating Edges",children:[{tagname:"para","class":"dguide-para",id:"interaction-creating_edges-112-simpara-001",content:'Creating edges is another basic interaction provided by <span class="api">GraphEditorInputMode</span>. By default,\nstarting a drag with the left mouse button on an unselected node will start edge\ncreation. Simply releasing the mouse button over another node creates the edge.\nWhen using a touch device, the edge creation is started in a similar fashion\nby a long press on the source node, and then dragging the touch pointer to\nthe target node and releasing it.'},{tagname:"para","class":"dguide-para",id:"interaction-creating_edges-112-simpara-002",content:"Bends can be introduced into the edge during creation by releasing the mouse\nbutton or touch pointer at an empty location in the canvas. Subsequent bends can be added by\nclicking or tapping on empty canvas locations. Right-clicking or long pressing\na second touch pointer will undo the most recent bend and, if no bends are left,\ncancel edge creation altogether."},{tagname:"para","class":"dguide-para",id:"interaction-creating_edges-112-simpara-003",content:'<span class="api">GraphEditorInputMode</span>’s child input mode <api-link id="interaction-creating_edges-112-api-link-001" data-member="" data-text="CreateEdgeInputMode" data-type="yfiles.input.CreateEdgeInputMode"></api-link>\nallows you to customize edge creation in various ways via a number of properties:'},{tagname:"para",content:'<dl id="interaction-creating_edges-112-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-creating_edges-112-term-001"><api-link id="interaction-creating_edges-112-api-link-002" data-member="allowCreateBend" data-text="CreateEdgeInputMode.allowCreateBend" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-001">\n<p id="interaction-creating_edges-112-simpara-004">Allows to turn off adding bends during edge creation. Note that to disallow creating bends entirely <a href="#/dguide/interaction-bends">bend creation</a> for existing edges must be disabled, too.</p>\n</dd>\n<dt id="interaction-creating_edges-112-term-002"><api-link id="interaction-creating_edges-112-api-link-003" data-member="edgeDefaults" data-text="CreateEdgeInputMode.edgeDefaults" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-002">\n<p id="interaction-creating_edges-112-simpara-005">The defaults for newly-created edges, most notably their style. This works the same as <a href="#/dguide/graph_model-item_defaults">setting defaults for new edges on a graph</a>.</p>\n</dd>\n<dt id="interaction-creating_edges-112-term-003"><api-link id="interaction-creating_edges-112-api-link-004" data-member="allowSelfloops" data-text="CreateEdgeInputMode.allowSelfloops" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-003">\n<p id="interaction-creating_edges-112-simpara-006">Whether self-loops, i.e. an edge that connects a node with itself, can be created.</p>\n</dd>\n<dt id="interaction-creating_edges-112-term-004"><api-link id="interaction-creating_edges-112-api-link-005" data-member="validBeginCursor" data-text="CreateEdgeInputMode.validBeginCursor" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-004">\n<p id="interaction-creating_edges-112-simpara-007">The mouse cursor to show when edge creation can start. This is usually when hovering over an unselected node.</p>\n</dd>\n<dt id="interaction-creating_edges-112-term-005"><api-link id="interaction-creating_edges-112-api-link-006" data-member="validBendCursor" data-text="CreateEdgeInputMode.validBendCursor" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-005">\n<p id="interaction-creating_edges-112-simpara-008">The mouse cursor to show when a bend can be added. This is usually when the mouse pointer is over an empty part of the canvas during edge creation.</p>\n</dd>\n<dt id="interaction-creating_edges-112-term-006"><api-link id="interaction-creating_edges-112-api-link-007" data-member="validEndCursor" data-text="CreateEdgeInputMode.validEndCursor" data-type="yfiles.input.CreateEdgeInputMode"></api-link></dt><dd id="interaction-creating_edges-112-listitem-006">\n<p id="interaction-creating_edges-112-simpara-009">The mouse cursor to show when edge creation can finish. This is usually when hovering over a possible target node during edge creation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para tip",id:"interaction-creating_edges-112-tip-001",content:'<p id="interaction-creating_edges-112-simpara-010">Creating edges is supported by the following auxiliary interaction concepts:</p><para><ul id="interaction-creating_edges-112-itemizedlist-001"><li id="interaction-creating_edges-112-listitem-007"><p id="interaction-creating_edges-112-simpara-011"><a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal Edge Editing</a></p></li><li id="interaction-creating_edges-112-listitem-008"><p id="interaction-creating_edges-112-simpara-012"><a href="#/dguide/interaction-snapping">Snapping</a></p></li></ul></para>'},{tagname:"para","class":"dguide-para",id:"interaction-creating_edges-112-simpara-013",content:'You can turn off edge creation by disabling the\n<span class="api">CreateEdgeInputMode</span> via its\n<api-link id="interaction-creating_edges-112-api-link-008" data-member="enabled" data-text="enabled" data-type="yfiles.input.CreateEdgeInputMode"></api-link> property or with\n<span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-creating_edges-112-api-link-009" data-member="allowCreateEdge" data-text="allowCreateEdge" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.\nFurther customization options for edge creation are discussed in detail in\n<a href="#/dguide/customizing_interaction_creating_edges">Customizing Creating Edges</a>.'},{tagname:"para","class":"dguide-para note",id:"interaction-creating_edges-112-note-001",content:'<p id="interaction-creating_edges-112-simpara-014">Created edges can also be <span class="def">reconnected</span> to other nodes. However, this is not\nenabled in the default configuration. This is described in detail in\n<a href="#/dguide/customizing_interaction_edge_reconnection">Customizing Reconnecting Edges</a>.</p>'}]},{tagname:"section",id:"interaction-labels",title:"Adding and Editing Labels",children:[{tagname:"para","class":"dguide-para",id:"interaction-labels-113-simpara-001",content:'<span class="api">GraphEditorInputMode</span> supports adding labels to graph items interactively. The default keyboard\nshortcut is <kbd>F2</kbd>, it will open a text area to edit the label for the\ncurrently selected item. The newly entered text can then be committed using\n<kbd>Enter ↵</kbd>, in which case it will become the label of the respective item.\nChanging an existing label can be done with <kbd>F2</kbd> as well. Label editing can\nbe canceled with <kbd>Esc</kbd>, in which case either no label is added, or the\nedited label isn’t changed.'},{tagname:"para","class":"dguide-para",id:"interaction-labels-113-simpara-002",content:'<span class="api">GraphEditorInputMode</span> offers a few simple ways to customize label editing and adding:'},{tagname:"para",content:'<dl id="interaction-labels-113-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-labels-113-term-001"><api-link id="interaction-labels-113-api-link-001" data-member="labelEditableItems" data-text="GraphEditorInputMode.labelEditableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-labels-113-listitem-001">\n<p id="interaction-labels-113-simpara-003">The types of items that labels can be edited for. This can be either <api-link id="interaction-labels-113-api-link-002" data-member="NODE" data-text="NODE" data-type="yfiles.graph.GraphItemTypes"></api-link>, <api-link id="interaction-labels-113-api-link-003" data-member="EDGE" data-text="EDGE" data-type="yfiles.graph.GraphItemTypes"></api-link>, or both.</p>\n</dd>\n<dt id="interaction-labels-113-term-002"><api-link id="interaction-labels-113-api-link-004" data-member="allowAddLabel" data-text="GraphEditorInputMode.allowAddLabel" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-labels-113-listitem-002">\n<p id="interaction-labels-113-simpara-004">Specifies whether labels can be added to graph items by pressing <kbd>Shift ⇧</kbd>+<kbd>F2</kbd> (or <kbd>F2</kbd> on items that don’t already have labels).</p>\n</dd>\n<dt id="interaction-labels-113-term-003"><api-link id="interaction-labels-113-api-link-005" data-member="allowEditLabel" data-text="GraphEditorInputMode.allowEditLabel" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-labels-113-listitem-003">\n<p id="interaction-labels-113-simpara-005">Specifies whether labels can be edited by pressing <kbd>F2</kbd>. When turned off, this also affects <strong id="interaction-labels-113-emphasis-001" class="bold" role="bold">adding</strong> a label by pressing <kbd>F2</kbd>.</p>\n</dd>\n<dt id="interaction-labels-113-term-004"><api-link id="interaction-labels-113-api-link-006" data-member="autoRemoveEmptyLabels" data-text="GraphEditorInputMode.autoRemoveEmptyLabels" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-labels-113-listitem-004">\n<p id="interaction-labels-113-simpara-006">Specifies whether labels with an empty text are automatically removed or not. Sometimes labels show more than just their text (e.g. an icon) in which case the empty text may actually be intentional.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-labels-113-simpara-007",content:'Further customization options for label editing are discussed in detail in <a href="#/dguide/customizing_interaction_labels">Customizing Adding and Editing Labels</a>.'}]},{tagname:"section",id:"interaction-bends",title:"Creating Bends",children:[{tagname:"para","class":"dguide-para",id:"interaction-bends-114-simpara-001",content:'Interactively designing an edge path can be done by creating bends, another of\nthe basic graph structure-related interactions <span class="api">GraphEditorInputMode</span> provides. Bends can be\ncreated during <a href="#/dguide/interaction-creating_edges">edge creation</a>, but if the edge path\nafter creation isn’t satisfactory they can also be added later. By default, the\ngesture to add a bend is to simply press the left mouse button on an edge path\nand drag. This will split the edge segment at the drag point and introduce\na bend that will be placed where the mouse button is released.'},{tagname:"para","class":"dguide-para",id:"interaction-bends-114-simpara-002",content:'You can be turn off bend creation on <span class="api">GraphEditorInputMode</span> via its <api-link id="interaction-bends-114-api-link-001" data-member="allowCreateBend" data-text="allowCreateBend" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nproperty.'},{tagname:"para","class":"dguide-para tip",id:"interaction-bends-114-tip-001",content:'<p id="interaction-bends-114-simpara-003">Creating bends is supported by the following auxiliary interaction concepts:</p><para><ul id="interaction-bends-114-itemizedlist-001"><li id="interaction-bends-114-listitem-001"><p id="interaction-bends-114-simpara-004"><a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal Edge Editing</a></p></li><li id="interaction-bends-114-listitem-002"><p id="interaction-bends-114-simpara-005"><a href="#/dguide/interaction-snapping">Snapping</a></p></li></ul></para>'}]},{tagname:"section",id:"interaction-deleting",title:"Deleting Items",children:[{tagname:"para","class":"dguide-para",id:"interaction-deleting-115-simpara-001",content:"All items in the graph can not only be created, but also removed again as well.\nBy default selected items can be deleted by pressing <kbd>Del</kbd>.\nDeleting an item will also delete associated other items, such as labels or\nincident edges when a node is deleted."},{tagname:"para","class":"dguide-para",id:"interaction-deleting-115-simpara-002",content:'<span class="api">GraphEditorInputMode</span> has two properties for easy control of what can be deleted:'},{tagname:"para",content:'<dl id="interaction-deleting-115-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-deleting-115-term-001"><api-link id="interaction-deleting-115-api-link-001" data-member="deletableItems" data-text="GraphEditorInputMode.deletableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-deleting-115-listitem-001">\n<p id="interaction-deleting-115-simpara-003">The types of items that can be deleted. Note that dependent items will be deleted regardless of this setting, e.g. incident edges or labels when deleting a node.</p>\n</dd>\n<dt id="interaction-deleting-115-term-002"><api-link id="interaction-deleting-115-api-link-002" data-member="deletablePredicate" data-text="GraphEditorInputMode.deletablePredicate" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-deleting-115-listitem-002">\n<p id="interaction-deleting-115-simpara-004">A predicate that controls what items can be deleted. This allows finer control than just the item type above.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-deleting-115-simpara-005",content:'Further customization options for deleting items are discussed in detail in\n<a href="#/dguide/customizing_interaction_deleting">Customizing Deleting Items</a>.'}]},{tagname:"section",id:"interaction-moving",title:"Moving Items",children:[{tagname:"para","class":"dguide-para",id:"interaction-moving-116-simpara-001",content:'<span class="api">GraphEditorInputMode</span> offers the ability to reposition items by dragging them.\nBy default this is done by pressing the left mouse button on a selected item\nand dragging the mouse.\nReleasing the mouse button again will finalize the new position of the item.'},{tagname:"figure","class":"image",title:"Moving a node",id:"interaction-moving-116-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_move.57dbaeef.png",alt:"interaction move",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-moving-116-simpara-002",content:'<span class="api">GraphEditorInputMode</span> handles moving items through two child input modes:\n<api-link id="interaction-moving-116-api-link-001" data-member="" data-text="MoveInputMode" data-type="yfiles.input.MoveInputMode"></api-link> which handles moving all items\n<strong id="interaction-moving-116-emphasis-001" class="bold" role="bold">except</strong> labels, and <api-link id="interaction-moving-116-api-link-002" data-member="" data-text="MoveLabelInputMode" data-type="yfiles.input.MoveLabelInputMode"></api-link>, which\nhandles moving labels. Labels are handled differently since they are only allowed\nto move to certain positions (as defined by their label model)\nwhich are indicated as a visual aid as well.\nCommon adjustments to item moving are as follows:'},{tagname:"para",content:'<dl id="interaction-moving-116-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-moving-116-term-001"><api-link id="interaction-moving-116-api-link-003" data-member="movableItems" data-text="GraphEditorInputMode.movableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-moving-116-listitem-001">\n<p id="interaction-moving-116-simpara-003">Specifies the types of items that can be moved.</p>\n</dd>\n<dt id="interaction-moving-116-term-002"><api-link id="interaction-moving-116-api-link-004" data-member="pressedRecognizer" data-text="MoveInputMode.pressedRecognizer" data-type="yfiles.input.MoveInputMode"></api-link></dt><dd id="interaction-moving-116-listitem-002">\n<p id="interaction-moving-116-simpara-004">Changes the mouse interaction to start a moving gesture.</p>\n</dd>\n<dt id="interaction-moving-116-term-003"><api-link id="interaction-moving-116-api-link-005" data-member="pressedRecognizerTouch" data-text="MoveInputMode.pressedRecognizerTouch" data-type="yfiles.input.MoveInputMode"></api-link></dt><dd id="interaction-moving-116-listitem-003">\n<p id="interaction-moving-116-simpara-005">Changes the touch interaction to start a moving gesture.</p>\n</dd>\n<dt id="interaction-moving-116-term-004"><api-link id="interaction-moving-116-api-link-006" data-member="moveCursor" data-text="MoveInputMode.moveCursor" data-type="yfiles.input.MoveInputMode"></api-link></dt><dd id="interaction-moving-116-listitem-004">\n<p id="interaction-moving-116-simpara-006">Changes the mouse cursor to show during the move.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-moving-116-simpara-007",content:'Further customization options for moving items are discussed in detail in\n<a href="#/dguide/customizing_interaction_moving">Customizing Moving Items</a>.'},{tagname:"para","class":"dguide-para tip",id:"interaction-moving-116-tip-001",content:'<p id="interaction-moving-116-simpara-008">Moving items is supported by the following auxiliary interaction concepts:</p><para><ul id="interaction-moving-116-itemizedlist-001"><li id="interaction-moving-116-listitem-005"><p id="interaction-moving-116-simpara-009"><a href="#/dguide/interaction-grouping">Grouping</a>: Moving a child node of a group node will resize the\nsurrounding group node accordingly. Nodes can be moved in or out of group\nnodes by holding the <kbd>Shift ⇧</kbd> key during a move.</p></li><li id="interaction-moving-116-listitem-006"><p id="interaction-moving-116-simpara-010"><a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal Edge Editing</a>: When moving nodes, incident edges\nwill stay orthogonal.</p></li><li id="interaction-moving-116-listitem-007"><p id="interaction-moving-116-simpara-011"><a href="#/dguide/interaction-snapping">Snapping</a></p></li></ul></para>'}]},{tagname:"section",id:"interaction-resizing",title:"Resizing Nodes",children:[{tagname:"para","class":"dguide-para",id:"interaction-resizing-117-simpara-001",content:'By default <span class="api">GraphEditorInputMode</span> will show a set of handles for selected items.\nFor nodes these are eight handles on the sides and corners which can be used to\nresize the node by dragging the handles with the mouse.'},{tagname:"figure","class":"image",title:"Resize handles around a node",id:"interaction-resizing-117-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_resize.252035ca.png",alt:"interaction resize",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-resizing-117-simpara-002",content:'Since resizing nodes is done via handles, adjusting the behavior can be done\nwith <span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-resizing-117-api-link-001" data-member="showHandleItems" data-text="showHandleItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> property. This is also the place\nwhere resizing nodes can be turned off completely by setting a value that does\nnot include <api-link id="interaction-resizing-117-api-link-002" data-member="NODE" data-text="NODE" data-type="yfiles.graph.GraphItemTypes"></api-link>.'},{tagname:"example",id:"interaction-resizing-117-example-001",title:"Turning off interactive node resizing",content:'<pre class="programlisting javascript" id="interaction-resizing-117-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.showHandleItems =\r\n  yfiles.graph.GraphItemTypes.ALL & ~yfiles.graph.GraphItemTypes.NODE\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-resizing-117-simpara-003",content:'Further customization is possible via <span class="api">GraphEditorInputMode</span>’s child input mode\n<api-link id="interaction-resizing-117-api-link-003" data-member="" data-text="HandleInputMode" data-type="yfiles.input.HandleInputMode"></api-link> which is discussed in more detail\nin <a href="#/dguide/customizing_interaction_resizing">Customizing Resizing Nodes</a>.'},{tagname:"para","class":"dguide-para tip",id:"interaction-resizing-117-tip-001",content:'<p id="interaction-resizing-117-simpara-004">Resizing nodes is supported by the following auxiliary interaction concepts:</p><para><ul id="interaction-resizing-117-itemizedlist-001"><li id="interaction-resizing-117-listitem-001"><p id="interaction-resizing-117-simpara-005"><a href="#/dguide/interaction-grouping">Grouping</a>: Resizing a child node of a group node will resize the\nsurrounding group node accordingly.</p></li><li id="interaction-resizing-117-listitem-002"><p id="interaction-resizing-117-simpara-006"><a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal Edge Editing</a>: When resizing nodes, incident edges\nwill stay orthogonal.</p></li><li id="interaction-resizing-117-listitem-003"><p id="interaction-resizing-117-simpara-007"><a href="#/dguide/interaction-snapping">Snapping</a></p></li></ul></para>'}]},{tagname:"section",id:"interaction-grouping",title:"Grouping",children:[{tagname:"para","class":"dguide-para",id:"interaction-grouping-118-simpara-001",content:'Graphs in yFiles for HTML support nesting nodes in so-called <span class="def">group nodes</span>,\nas described in the <a href="#/dguide/graph_model-grouping">introduction to the graph model</a>.\n<span class="api">GraphEditorInputMode</span> allows to interactively create and handle those as well.'},{tagname:"para","class":"dguide-para note",id:"interaction-grouping-118-note-001",content:'<p id="interaction-grouping-118-simpara-002">Grouping-related features are <strong id="interaction-grouping-118-emphasis-001" class="bold" role="bold">disabled</strong> by default on <span class="api">GraphEditorInputMode</span> and have to be\nenabled as the following code snippet shows.</p>'},{tagname:"example",id:"interaction-grouping-118-example-001",title:"Turning on grouping-related features",content:'<pre class="programlisting javascript" id="interaction-grouping-118-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.allowGroupingOperations = true\n</code></pre>'},{tagname:"figure","class":"image",title:"Grouping",id:"interaction-grouping-118-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_grouping1.7539d9f9.png",alt:"",title:'<para class="dguide-para">A group node with several children</para>'},{tagname:"img",src:"assets/interaction_grouping2.057ff730.png",alt:"",title:'<para class="dguide-para">Moving child nodes resizes the group node accordingly</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-grouping-118-simpara-003",content:"By default, selected nodes can be grouped in a newly created group node by\npressing <kbd>Ctrl</kbd>+<kbd>G</kbd>. The selected nodes can also be removed from a group by\npressing <kbd>Ctrl</kbd>+<kbd>U</kbd>."},{tagname:"para","class":"dguide-para note",id:"interaction-grouping-118-note-002",content:'<p id="interaction-grouping-118-simpara-004">When ungrouping nodes, they will still appear on top of the group node, but are\nno longer part of that group node. This may not immediately be evident because\nthe group node will still be underneath the nodes, but the difference is\napparent when moving the nodes afterwards.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-grouping-118-simpara-005",content:"Selected group nodes can also be resized to fit their contents by pressing\n<kbd>Ctrl</kbd>+<kbd>Shift ⇧</kbd>+<kbd>G</kbd>.\nFurthermore, nodes can be reparented, that is, moved to another group node (or\nsimply out of their current group) by holding the <kbd>Shift ⇧</kbd> key during a\nmove."},{tagname:"para","class":"dguide-para",id:"interaction-grouping-118-simpara-006",content:'<span class="api">GraphEditorInputMode</span> offers a number of properties to configure grouping features and\nbehavior:'},{tagname:"para",content:'<dl id="interaction-grouping-118-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-grouping-118-term-001"><api-link id="interaction-grouping-118-api-link-001" data-member="allowGroupingOperations" data-text="GraphEditorInputMode.allowGroupingOperations" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-grouping-118-listitem-001">\n<p id="interaction-grouping-118-simpara-007">Enables or disables all grouping-related interaction features. They can be\nfurther configured with the other properties below.\nThis property is disabled by default. When disabled, the other properties below\nhave no effect.</p>\n</dd>\n<dt id="interaction-grouping-118-term-002"><api-link id="interaction-grouping-118-api-link-002" data-member="allowGroupSelection" data-text="GraphEditorInputMode.allowGroupSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-grouping-118-listitem-002">\n<p id="interaction-grouping-118-simpara-008">Enables or disables the <strong id="interaction-grouping-118-emphasis-002" class="bold" role="bold">group selection</strong> shortcut <kbd>Ctrl</kbd>+<kbd>G</kbd>.</p>\n</dd>\n<dt id="interaction-grouping-118-term-003"><api-link id="interaction-grouping-118-api-link-003" data-member="allowUngroupSelection" data-text="GraphEditorInputMode.allowUngroupSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-grouping-118-listitem-003">\n<p id="interaction-grouping-118-simpara-009">Enables or disables the <strong id="interaction-grouping-118-emphasis-003" class="bold" role="bold">ungroup selection</strong> shortcut <kbd>Ctrl</kbd>+<kbd>U</kbd>.</p>\n</dd>\n<dt id="interaction-grouping-118-term-004"><api-link id="interaction-grouping-118-api-link-004" data-member="allowAdjustGroupNodeSize" data-text="GraphEditorInputMode.allowAdjustGroupNodeSize" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-grouping-118-listitem-004">\n<p id="interaction-grouping-118-simpara-010">Enables or disables the <strong id="interaction-grouping-118-emphasis-004" class="bold" role="bold">adjust group node size</strong> shortcut <kbd>Ctrl</kbd>+<kbd>Shift ⇧</kbd>+<kbd>G</kbd>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-grouping-118-simpara-011",content:'In addition to these features, you can <a href="#/dguide/folding-interaction">collapse and expand groups</a> if folding is enabled.'}]},{tagname:"section",id:"interaction-keyboard",title:"Keyboard Input",children:[{tagname:"para","class":"dguide-para",id:"interaction-keyboard-119-simpara-001",content:'Many interactive features that <span class="api">GraphEditorInputMode</span> provides can be accessed via keyboard\nshortcuts, some of which are already mentioned shortly in the other sections.\nKeyboard shortcuts for nearly all predefined operations are part of their\nrespective <a href="#/dguide/customizing_concepts_commands">Commands</a>. Central to handling them is\n<api-link id="interaction-keyboard-119-api-link-001" data-member="" data-text="KeyboardInputMode" data-type="yfiles.input.KeyboardInputMode"></api-link>, which both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>\nhave as a child input mode.\n<span class="api">KeyboardInputMode</span> allows to add custom actions\nwith custom shortcuts and manages the input and action maps of <span class="api">GraphComponent</span>\naccordingly which is discussed in <a href="#/dguide/customizing_concepts_commands_custom">Custom Command Bindings</a>.'},{tagname:"para","class":"dguide-para note",id:"interaction-keyboard-119-note-001",content:'<p id="interaction-keyboard-119-simpara-002">While tying a keyboard shortcut to a certain command is done in\n<span class="api">KeyboardInputMode</span>, the actual\n<strong id="interaction-keyboard-119-emphasis-001" class="bold" role="bold">implementation</strong> for that command often resides elsewhere. In this case it is\nusually <span class="api">GraphEditorInputMode</span> that handles most commands.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-keyboard-119-simpara-003",content:'Another feature is keyboard navigation and selection, which is handled by the\nchild input mode <api-link id="interaction-keyboard-119-api-link-002" data-member="" data-text="NavigationInputMode" data-type="yfiles.input.NavigationInputMode"></api-link> by both\n<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>. It allows you to navigate between nodes with the arrow keys.\nSelecting nodes in a certain direction can be done with <kbd>Shift ⇧</kbd>+arrow keys\nand <kbd>Ctrl</kbd>+arrow keys moves the focus in a certain direction.'}]},{tagname:"section",id:"interaction-click",title:"Mouse Clicks",children:[{tagname:"para","class":"dguide-para",id:"interaction-click-120-simpara-001",content:'<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> support notifications for left and right mouse clicks and\ndouble clicks on items. This is a convenience extension provided on top of the\nlower-level click events provided by <api-link id="interaction-click-120-api-link-001" data-member="" data-text="ClickInputMode" data-type="yfiles.input.ClickInputMode"></api-link>.\n<span class="api">ClickInputMode</span>, however, can still be useful if\nyou want to handle clicks regardless of whether they happen on an item or not.'},{tagname:"para","class":"dguide-para tip",id:"interaction-click-120-tip-001",content:'<p id="interaction-click-120-simpara-002">There are no special events on <span class="api">GraphEditorInputMode</span>, <span class="api">GraphViewerInputMode</span>, or <span class="api">ClickInputMode</span>\nwhich report middle mouse clicks. Instead you have to use the\n<api-link id="interaction-click-120-api-link-002" data-member="Clicked" data-text="Clicked" data-type="yfiles.input.ClickInputMode"></api-link> or the\n<api-link id="interaction-click-120-api-link-003" data-member="DoubleClicked" data-text="DoubleClicked" data-type="yfiles.input.ClickInputMode"></api-link> event and check by means of its\narguments if the middle button has triggered the event.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-click-120-simpara-003",content:'Both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> handle clicks on items in the same way. If an item is\nclicked, it will be focused and selected, in that order. The behavior of clicks\ncan be adjusted with a few properties on either <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span>, and their\nchild input mode <api-link id="interaction-click-120-api-link-004" data-member="" data-text="ClickInputMode" data-type="yfiles.input.ClickInputMode"></api-link>:'},{tagname:"para",content:'<dl id="interaction-click-120-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-click-120-term-001"><api-link id="interaction-click-120-api-link-005" data-member="clickableItems" data-text="GraphViewerInputMode.clickableItems" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dt id="interaction-click-120-term-002"><api-link id="interaction-click-120-api-link-006" data-member="clickableItems" data-text="GraphEditorInputMode.clickableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-click-120-listitem-001">\n<p id="interaction-click-120-simpara-004">The type of items that should be clickable. If an item is not clickable no events will be raised for that item and no default actions (focus and selection) will be taken.</p>\n</dd>\n<dt id="interaction-click-120-term-003"><api-link id="interaction-click-120-api-link-007" data-member="doubleClickPolicy" data-text="ClickInputMode.doubleClickPolicy" data-type="yfiles.input.ClickInputMode"></api-link></dt><dd id="interaction-click-120-listitem-002">\n<p id="interaction-click-120-simpara-005">How single clicks are reported when they are part of a double click. By default, two single click events followed by a double click event are raised.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-click-120-simpara-006",content:'Since clicking and selection are closely related, the properties that relate to\n<strong id="interaction-click-120-emphasis-001" class="bold" role="bold">both</strong> clicking and selection are discussed in <a href="#/dguide/interaction-selection">Selection</a>.'},{tagname:"para","class":"dguide-para",id:"interaction-click-120-simpara-007",content:'Further customization options for click handling are discussed in detail in\n<a href="#/dguide/customizing_interaction_click">Customizing Mouse Clicks</a>.'}]},{tagname:"section",id:"interaction-touch",title:"Touch Gestures",children:[{tagname:"para","class":"dguide-para",id:"interaction-touch-121-simpara-001",content:"When using touch devices, tapping the screen is processed in a similar fashion\nas mouse left-click events. The default gestures that are available with\ntapping are creating nodes and selecting items."},{tagname:"para","class":"dguide-para",id:"interaction-touch-121-simpara-002",content:'Despite its name, property <api-link id="interaction-touch-121-api-link-001" data-member="clickableItems" data-text="GraphEditorInputMode.clickableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nwill control the item types for which taps are handled as well. Acordingly, the <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span> will dispatch\nan <api-link id="interaction-touch-121-api-link-002" data-member="ItemClicked" data-text="ItemClicked" data-type="yfiles.input.GraphInputMode"></api-link> event for tapped items.'},{tagname:"para","class":"dguide-para",id:"interaction-touch-121-simpara-003",content:'A more general handling of tap events is achieved with\nthe low-level events on the <api-link id="interaction-touch-121-api-link-003" data-member="" data-text="TapInputMode" data-type="yfiles.input.TapInputMode"></api-link>\nwhich is a sub mode of both <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"interaction-touch-121-simpara-004",content:"There are also other more complex gestures with touch input, such as:"},{tagname:"para",content:'<ul id="interaction-touch-121-itemizedlist-001"><li id="interaction-touch-121-listitem-001"><p id="interaction-touch-121-simpara-005"><a href="#/dguide/interaction-creating_edges">Create edges</a> via long press on node and then drag.</p></li><li id="interaction-touch-121-listitem-002"><p id="interaction-touch-121-simpara-006">With the same gesture, you can create bends on an edge.</p></li><li id="interaction-touch-121-listitem-003"><p id="interaction-touch-121-simpara-007"><a href="#/dguide/interaction-navigation">Panning und pinch/stretch zooming</a> the viewport.</p></li><li id="interaction-touch-121-listitem-004"><p id="interaction-touch-121-simpara-008">Long press and drag on an empty canvas invokes the <a href="#/dguide/interaction-selection">marquee selection</a>.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"interaction-touch-121-simpara-009",content:'Further customization options for touch handling are discussed in detail in\n<a href="#/dguide/customizing_interaction_touch">Customizing Touch Gestures</a>.'}]},{tagname:"section",id:"interaction-selection",title:"Selection",children:[{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-001",content:'<span class="api">GraphComponent</span> manages a set of selected items, as described in <a href="#/dguide/view_selection">Selection, Focus, and Highlight</a>.\nBoth <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> offer support for interactively managing this selection.\nSelected items are used for many commands and interactions, such as clipboard\ncommands, or deleting items.'},{tagname:"figure","class":"image",title:"A selection of two nodes with their labels and an edge. The third node and second edge are not selected.",id:"interaction-selection-122-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_selection1.ecaa2aeb.png",alt:"interaction selection1",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-002",content:'Items can be selected in both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> by simply left-clicking them.\nSelected items are highlighted with an item-specific selection indicator (e.g.\na rectangle around a selected node).'},{tagname:"para","class":"dguide-para tip",id:"interaction-selection-122-tip-001",content:'<p id="interaction-selection-122-simpara-003">When using a touch device, tapping on the device is equal to left-clicking in regards to selection.\nThis means that in the following section, everything that is described as working with clicking\nwill also work with tapping.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-004",content:'Selection in general and click selection in particular can be configured on\n<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> with a few properties:'},{tagname:"para",content:'<dl id="interaction-selection-122-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-selection-122-term-001"><api-link id="interaction-selection-122-api-link-001" data-member="selectableItems" data-text="GraphViewerInputMode.selectableItems" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dt id="interaction-selection-122-term-002"><api-link id="interaction-selection-122-api-link-002" data-member="selectableItems" data-text="GraphEditorInputMode.selectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-001">\n<p id="interaction-selection-122-simpara-005">The types of items that can be selected (via any method).</p>\n</dd>\n<dt id="interaction-selection-122-term-003"><api-link id="interaction-selection-122-api-link-003" data-member="selectablePredicate" data-text="GraphViewerInputMode.selectablePredicate" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dt id="interaction-selection-122-term-004"><api-link id="interaction-selection-122-api-link-004" data-member="selectablePredicate" data-text="GraphEditorInputMode.selectablePredicate" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-002">\n<p id="interaction-selection-122-simpara-006">A predicate that controls what items can be selected. This allows finer control than just the item type above.</p>\n</dd>\n<dt id="interaction-selection-122-term-005"><api-link id="interaction-selection-122-api-link-005" data-member="clickSelectableItems" data-text="GraphViewerInputMode.clickSelectableItems" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dt id="interaction-selection-122-term-006"><api-link id="interaction-selection-122-api-link-006" data-member="clickSelectableItems" data-text="GraphEditorInputMode.clickSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-003">\n<p id="interaction-selection-122-simpara-007">The types of items that can be selected by clicking them.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"interaction-selection-122-note-001",content:'<p id="interaction-selection-122-simpara-008"><span class="api">clickSelectableItems</span> can only constrain\n<span class="api">selectableItems</span> further.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-selection-marquee-and-lasso",content:'Multiple items can easily be selected at once with <span class="def">marquee selection</span> or <span class="def">lasso selection</span>.\nBoth selection modes work by holding the left\nmouse button on an empty canvas area and dragging the mouse or long press and drag using touch devices. Marquee selection will show a\nrectangular area in which all items will be selected when the mouse button / touch pointer is\nreleased. Lasso selection will show a freehand path within which all items will be selected\nwhen the mouse button / touch pointer is released.'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-010",content:"There is also a shortcut for selecting all items, <kbd>Ctrl</kbd>+<kbd>A</kbd>, as well as for\ndeselecting all items again, <kbd>Ctrl</kbd>+<kbd>Shift ⇧</kbd>+<kbd>A</kbd>."},{tagname:"figure","class":"image",title:"Bulk selection interactions",id:"interaction-selection-122-figure-002","float":0,children:[{tagname:"img",src:"assets/interaction_selection2.107bada9.png",alt:"",title:'<para class="dguide-para">Marquee selection</para>'},{tagname:"img",src:"assets/interaction_selection_lasso.47f9d797.png",alt:"",title:'<para class="dguide-para">Lasso selection</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-011",content:'Lasso selection is disabled by default, in favor of marquee selection. However, you can simply\nenable the <api-link id="interaction-selection-122-api-link-007" data-member="lassoSelectionInputMode" data-text="lassoSelectionInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> on <span class="api">GraphViewerInputMode</span> or <span class="api">GraphEditorInputMode</span>. By default\nlasso selection takes precedence over marquee selection (via the respective priorities of the input\nmodes), so enabling the <span class="api">lassoSelectionInputMode</span> is enough to switch\nfrom marquee to lasso selection.'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-012",content:'<api-link id="interaction-selection-122-api-link-008" data-member="marqueeSelectableItems" data-text="marqueeSelectableItems" data-type="yfiles.input.GraphViewerInputMode"></api-link> is\nan additional property that specifically controls what items can be selected\nby marquee or lasso selection.'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-013",content:'You can customize marquee and lasso selection on <span class="api">GraphViewerInputMode</span> and <span class="api">GraphEditorInputMode</span> and their child\ninput modes <api-link id="interaction-selection-122-api-link-009" data-member="" data-text="MarqueeSelectionInputMode" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link>\nand <api-link id="interaction-selection-122-api-link-010" data-member="" data-text="LassoSelectionInputMode" data-type="yfiles.input.LassoSelectionInputMode"></api-link>:'},{tagname:"para",content:'<dl id="interaction-selection-122-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="interaction-selection-122-term-007"><api-link id="interaction-selection-122-api-link-011" data-member="marqueeSelectableItems" data-text="GraphViewerInputMode.marqueeSelectableItems" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dt id="interaction-selection-122-term-008"><api-link id="interaction-selection-122-api-link-012" data-member="marqueeSelectableItems" data-text="GraphEditorInputMode.marqueeSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-004">\n<p id="interaction-selection-122-simpara-014">The types of items that can be selected via marquee or lasso selection.</p>\n</dd>\n<dt id="interaction-selection-122-term-009"><api-link id="interaction-selection-122-api-link-013" data-member="marqueeCursor" data-text="MarqueeSelectionInputMode.marqueeCursor" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-005">\n<p id="interaction-selection-122-simpara-015">The mouse cursor to use during the marquee selection gesture.</p>\n</dd>\n<dt id="interaction-selection-122-term-010"><api-link id="interaction-selection-122-api-link-014" data-member="pressedRecognizer" data-text="MarqueeSelectionInputMode.pressedRecognizer" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-006">\n<p id="interaction-selection-122-simpara-016">Changes the mouse interaction to start marquee selection.</p>\n</dd>\n<dt id="interaction-selection-122-term-011"><api-link id="interaction-selection-122-api-link-015" data-member="pressedRecognizerTouch" data-text="MarqueeSelectionInputMode.pressedRecognizerTouch" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-007">\n<p id="interaction-selection-122-simpara-017">Changes the touch interaction to start marquee selection.</p>\n</dd>\n<dt id="interaction-selection-122-term-012"><api-link id="interaction-selection-122-api-link-016" data-member="lassoCursor" data-text="LassoSelectionInputMode.lassoCursor" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-008">\n<p id="interaction-selection-122-simpara-018">The mouse cursor to use during the lasso selection gesture.</p>\n</dd>\n<dt id="interaction-selection-122-term-013"><api-link id="interaction-selection-122-api-link-017" data-member="validEndCursor" data-text="LassoSelectionInputMode.validEndCursor" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-009">\n<p id="interaction-selection-122-simpara-019">The mouse cursor to use when hovering over the end point for the gesture (by default\nthis is where the gesture started).</p>\n</dd>\n<dt id="interaction-selection-122-term-014"><api-link id="interaction-selection-122-api-link-018" data-member="prepareRecognizer" data-text="LassoSelectionInputMode.prepareRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="interaction-selection-122-term-015"><api-link id="interaction-selection-122-api-link-019" data-member="prepareRecognizerTouch" data-text="LassoSelectionInputMode.prepareRecognizerTouch" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="interaction-selection-122-listitem-010">\n<p id="interaction-selection-122-simpara-020">Changes the interaction to start lasso selection.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para tip",id:"interaction-selection-122-tip-002",content:'<p id="interaction-selection-122-simpara-021">Marquee and lasso selection are available in <span class="api">GraphViewerInputMode</span>, but disabled by default. You can\nenable either by setting the\n<span class="api">enabled</span> property on\n<span class="api">GraphViewerInputMode</span>’s\n<api-link id="interaction-selection-122-api-link-020" data-member="marqueeSelectionInputMode" data-text="marqueeSelectionInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link> or <api-link id="interaction-selection-122-api-link-021" data-member="lassoSelectionInputMode" data-text="lassoSelectionInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link>.\nWhen enabled, both use <kbd>Shift ⇧</kbd>+drag as their default gesture to not clash\nwith <a href="#/dguide/interaction-navigation">panning</a>.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-022",content:"To select multiple items with more than one selection gesture, you can hold down\nthe <kbd>Ctrl</kbd> key. Newly selected items will then be added to the selection\ninstead of replacing it.\nThis works with all selection interactions, be it click, marquee, or lasso selection."},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-023",content:'Click selection also offers two other features: <span class="def">detail selection</span> and <span class="def">cyclic\nselection</span>. Detail selection can be used to explicitly select the topmost item\nunder the mouse pointer, regardless of the current hit testing order. For example,\nby default when clicking a node the node will be selected, even when clicking\non its label that is on top of the node. With detail selection, which by default\nuses <kbd>Shift ⇧</kbd>+click you can select the label when clicking it.'},{tagname:"para","class":"dguide-para note",id:"interaction-selection-122-note-002",content:'<p id="interaction-selection-122-simpara-024">The <span class="api">clickHitTestOrder</span> and\n<span class="api">doubleClickHitTestOrder</span> properties\ndetermine by means of the item type which one will be considered when clicked\nor double-clicked if there are multiple items at a given location.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-025",content:'Cyclic selection on the other hand allows you to cycle through all possible hits\nat the click location by pressing the <kbd>Alt</kbd> key during the click. So, to\nstay with our example of a single node with a label on top of it, performing\ncyclic selection will first select the node, <kbd>Alt</kbd>-clicking the same\nlocation again will select the label. Now, if the node was in a group node, the\nselection order with cyclic selection would be <strong id="interaction-selection-122-emphasis-001" class="bold" role="bold">node</strong>, <strong id="interaction-selection-122-emphasis-002" class="bold" role="bold">group node</strong>, <strong id="interaction-selection-122-emphasis-003" class="bold" role="bold">label</strong>,\nbecause the group node is below its child node and thus also exists at the\nclick location.'},{tagname:"para","class":"dguide-para",id:"interaction-selection-122-simpara-026",content:'Further customization options for click selection, as well as marquee and lasso selection are\ndiscussed in <a href="#/dguide/customizing_interaction_selection">Customizing Selection</a>.'}]},{tagname:"section",id:"interaction-tooltips",title:"Tooltips",children:[{tagname:"para","class":"dguide-para",id:"interaction-tooltips-123-simpara-001",content:'Tooltips are small snippets of text shown when hovering the mouse pointer over\na control. Usually, they explain in more detail what the control does.\nyFiles for HTML supports tooltips for all graph items with both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"figure","class":"image",title:"Tooltip on a node",id:"interaction-tooltips-123-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_tooltip.119127c6.png",alt:"interaction tooltip",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-tooltips-123-simpara-002",content:'How tooltips can be configured and set up is discussed in detail in\n<a href="#/dguide/customizing_interaction_tooltips">Customizing Tooltips</a>.'}]},{tagname:"section",id:"interaction-context_menu",title:"Context Menus",children:[{tagname:"para","class":"dguide-para",id:"interaction-context_menu-124-simpara-001",content:'Right-clicking an item can show a context menu with both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.\nA different context menu can also be shown when right-clicking an empty canvas\narea.'},{tagname:"figure","class":"image",title:"A context menu on a node",id:"interaction-context_menu-124-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_context_menu.08e091ae.png",alt:"interaction context menu",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-context_menu-124-simpara-002",content:'How a context menu can be configured and set up is discussed in detail in\n<a href="#/dguide/customizing_interaction_context_menu">Customizing Context Menus</a>.'}]},{tagname:"section",id:"interaction-drag_drop",title:"Drag and Drop",children:[{tagname:"para","class":"dguide-para",id:"interaction-drag_drop-125-simpara-001",content:'<span class="api">GraphEditorInputMode</span> supports drag and drop gestures as well, or rather, the drop part of the gesture.\nDrag and drop enables you to conveniently create applications that use a “palette” of items\nwhich can be dragged onto the canvas to create graph items.'},{tagname:"figure","class":"image",title:"Creating a node via drag and drop",id:"interaction-drag_drop-125-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_drag_drop.7480ebcd.png",alt:"interaction drag drop",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-drag_drop-125-simpara-002",content:'You can drag elements from within the HTML document into\na <span class="api">GraphComponent</span> and drop them there. For nodes, labels, and ports this is handled by <span class="api">GraphEditorInputMode</span>’s child input\nmodes <api-link id="interaction-drag_drop-125-api-link-001" data-member="" data-text="NodeDropInputMode" data-type="yfiles.input.NodeDropInputMode"></api-link>, <api-link id="interaction-drag_drop-125-api-link-002" data-member="" data-text="LabelDropInputMode" data-type="yfiles.input.LabelDropInputMode"></api-link>, and <api-link id="interaction-drag_drop-125-api-link-003" data-member="" data-text="PortDropInputMode" data-type="yfiles.input.PortDropInputMode"></api-link>, respectively.\nSince drag and drop\nfunctionality is usually different for each application (if needed at all), this\nmode is disabled by default.'},{tagname:"para","class":"dguide-para",id:"interaction-drag_drop-125-simpara-003",content:'With <api-link id="interaction-drag_drop-125-api-link-004" data-member="startDrag(HTMLElement,yfiles.graph.INode,yfiles.view.DragDropEffects,boolean,HTMLElement)" data-text="startDrag" data-type="yfiles.input.NodeDropInputMode"></api-link>\narbitrary HTML elements can be registered for a drag operation. By default,\nwhen the drag operation ends on a <span class="api">GraphComponent</span> a new node will be created\nthat is a copy of the dragged node.'},{tagname:"para","class":"dguide-para",id:"interaction-drag_drop-125-simpara-004",content:'This feature highly depends on the application implementation and requirements, so\nany further configuration and customization (including how to drag and drop\nyour own data) is discussed in detail in <a href="#/dguide/customizing_interaction_drag_drop">Customizing Drag and Drop</a>.'},{tagname:"para","class":"dguide-para tip",id:"interaction-drag_drop-125-tip-001",content:'<p id="interaction-drag_drop-125-simpara-005">Drag and drop is supported by the following auxiliary interaction concepts:</p><para><ul id="interaction-drag_drop-125-itemizedlist-001"><li id="interaction-drag_drop-125-listitem-001"><p id="interaction-drag_drop-125-simpara-006"><a href="#/dguide/interaction-grouping">Grouping</a></p></li><li id="interaction-drag_drop-125-listitem-002"><p id="interaction-drag_drop-125-simpara-007"><a href="#/dguide/interaction-snapping">Snapping</a></p></li></ul></para>'}]},{tagname:"section",id:"interaction-clipboard",title:"Clipboard",children:[{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-001",content:'<span class="api">GraphEditorInputMode</span> provides support for the usual clipboard commands: <strong id="interaction-clipboard-126-emphasis-001" class="bold" role="bold">Copy</strong>, <strong id="interaction-clipboard-126-emphasis-002" class="bold" role="bold">Cut</strong>, and\n<strong id="interaction-clipboard-126-emphasis-003" class="bold" role="bold">Paste</strong>.\n<span class="api">GraphViewerInputMode</span> on the other hand, only provides support for <strong id="interaction-clipboard-126-emphasis-004" class="bold" role="bold">Copy</strong> (as it cannot alter\nthe graph). These commands also have the usual shortcuts:'},{tagname:"table","class":"",id:"interaction-clipboard-126-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="interaction-clipboard-126-thead-001"><tr id="interaction-clipboard-126-row-001"><th id="interaction-clipboard-126-entry-001" align="left" valign="top">\nCommand\n</th><th id="interaction-clipboard-126-entry-002" align="left" valign="top">\nShortcuts\n</th></tr></thead><tbody id="interaction-clipboard-126-tbody-001"><tr id="interaction-clipboard-126-row-002"><td id="interaction-clipboard-126-entry-003" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-002">Copy</para></td><td id="interaction-clipboard-126-entry-004" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-003"><kbd>Ctrl</kbd>+<kbd>C</kbd>, <kbd>Ctrl</kbd>+<kbd>Ins</kbd></para></td></tr><tr id="interaction-clipboard-126-row-003"><td id="interaction-clipboard-126-entry-005" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-004">Cut</para></td><td id="interaction-clipboard-126-entry-006" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-005"><kbd>Ctrl</kbd>+<kbd>X</kbd>, <kbd>Shift ⇧</kbd>+<kbd>Del</kbd></para></td></tr><tr id="interaction-clipboard-126-row-004"><td id="interaction-clipboard-126-entry-007" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-006">Paste</para></td><td id="interaction-clipboard-126-entry-008" align="left" valign="top"><para class="dguide-para" id="interaction-clipboard-126-simpara-007"><kbd>Ctrl</kbd>+<kbd>V</kbd>, <kbd>Shift ⇧</kbd>+<kbd>Ins</kbd></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-008",content:'The <strong id="interaction-clipboard-126-emphasis-005" class="bold" role="bold">Copy</strong> and <strong id="interaction-clipboard-126-emphasis-006" class="bold" role="bold">Cut</strong> operations are applied to the selected items.\n<strong id="interaction-clipboard-126-emphasis-007" class="bold" role="bold">Cut</strong> can be thought of as a combined <strong id="interaction-clipboard-126-emphasis-008" class="bold" role="bold">Copy</strong> and <strong id="interaction-clipboard-126-emphasis-009" class="bold" role="bold">Delete</strong>. This has some\nimplications, e.g. when cutting a node that has incident edges, only the\nselected node will end up in the clipboard, but since cutting deletes the item\nfrom the graph, the connected edges will simply be removed.'
},{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-009",content:'There is another command, <strong id="interaction-clipboard-126-emphasis-010" class="bold" role="bold">Duplicate</strong>, which can be thought of as a combined\n<strong id="interaction-clipboard-126-emphasis-011" class="bold" role="bold">Copy-Paste</strong> command, except it doesn’t modify the clipboard. You can duplicate\nthe selected items simply by pressing <kbd>Ctrl</kbd>+<kbd>D</kbd>. Since this is also a\nclipboard operation, the cases described above apply, e.g. when duplicating an\nedge with only one connected node.'},{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-010",content:'There are a few easy customizations for the clipboard provided on <span class="api">GraphViewerInputMode</span> and\n<span class="api">GraphEditorInputMode</span>:'},{tagname:"para",content:'<dl id="interaction-clipboard-126-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interaction-clipboard-126-term-001"><api-link id="interaction-clipboard-126-api-link-001" data-member="allowClipboardOperations" data-text="GraphViewerInputMode.allowClipboardOperations" data-type="yfiles.input.GraphViewerInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-001">\n<p id="interaction-clipboard-126-simpara-011">Enables or disables copying items.</p>\n</dd>\n<dt id="interaction-clipboard-126-term-002"><api-link id="interaction-clipboard-126-api-link-002" data-member="allowClipboardOperations" data-text="GraphEditorInputMode.allowClipboardOperations" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-002">\n<p id="interaction-clipboard-126-simpara-012">Enables or disables support for <strong id="interaction-clipboard-126-emphasis-012" class="bold" role="bold">Cut</strong>, <strong id="interaction-clipboard-126-emphasis-013" class="bold" role="bold">Copy</strong>, <strong id="interaction-clipboard-126-emphasis-014" class="bold" role="bold">Paste</strong>, and <strong id="interaction-clipboard-126-emphasis-015" class="bold" role="bold">Duplicate</strong>.</p>\n</dd>\n<dt id="interaction-clipboard-126-term-003"><api-link id="interaction-clipboard-126-api-link-003" data-member="allowPaste" data-text="GraphEditorInputMode.allowPaste" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-003">\n<p id="interaction-clipboard-126-simpara-013">Enables or disables pasting items.</p>\n</dd>\n<dt id="interaction-clipboard-126-term-004"><api-link id="interaction-clipboard-126-api-link-004" data-member="pasteSelectableItems" data-text="GraphEditorInputMode.pasteSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-004">\n<p id="interaction-clipboard-126-simpara-014">The types of items that should be selected after pasting.</p>\n</dd>\n<dt id="interaction-clipboard-126-term-005"><api-link id="interaction-clipboard-126-api-link-005" data-member="pasteDelta" data-text="GraphEditorInputMode.pasteDelta" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-005">\n<p id="interaction-clipboard-126-simpara-015">The geometric offset between the mouse location and the location where the items should be pasted.</p>\n</dd>\n<dt id="interaction-clipboard-126-term-006"><api-link id="interaction-clipboard-126-api-link-006" data-member="allowDuplicate" data-text="GraphEditorInputMode.allowDuplicate" data-type="yfiles.input.GraphEditorInputMode"></api-link></dt><dd id="interaction-clipboard-126-listitem-006">\n<p id="interaction-clipboard-126-simpara-016">Enables or disables duplicating items.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-017",content:'The <api-link id="interaction-clipboard-126-api-link-007" data-member="" data-text="GraphClipboard" data-type="yfiles.graph.GraphClipboard"></api-link> class offers another option:'},{tagname:"para",content:'<dl id="interaction-clipboard-126-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="interaction-clipboard-126-term-007"><api-link id="interaction-clipboard-126-api-link-008" data-member="copyItems" data-text="GraphClipboard.copyItems" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="interaction-clipboard-126-listitem-007">\n<p id="interaction-clipboard-126-simpara-018">The types of items that can be copied and pasted.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interaction-clipboard-126-simpara-019",content:'The clipboard can be extensively customized in nearly all aspects, which is\ndescribed in <a href="#/dguide/customizing_interaction_clipboard">Customizing the Clipboard</a>.'}]},{tagname:"section",id:"interaction-undo",title:"Undo and Redo",children:[{tagname:"para","class":"dguide-para",id:"interaction-undo-127-simpara-001",content:"yFiles for HTML offers comprehensive support for undoing and redoing graph\nmodifications.\nEverything that can be changed on a graph can be undone too.\nSuch modifications can be single changes, e.g. adding a node, or composite\nchanges where many items change at once, e.g. moving multiple items.\nThere is no limit to how many operations can be undone, except available memory."},{tagname:"para","class":"dguide-para",id:"interaction-undo-127-simpara-002",content:'Keyboard shortcuts for Undo and Redo are provided by <span class="api">GraphEditorInputMode</span>. Undo uses\n<kbd>Ctrl</kbd>+<kbd>Z</kbd>, and Redo can be invoked with <kbd>Ctrl</kbd>+<kbd>Y</kbd>.'},{tagname:"para","class":"dguide-para",id:"interaction-undo-127-simpara-003",content:'Undo and Redo support is disabled by default. To turn it on you need to enable it on the\ngraph setting\n<api-link id="interaction-undo-127-api-link-001" data-member="undoEngineEnabled" data-text="undoEngineEnabled" data-type="yfiles.graph.IGraph"></api-link>\nto <code>true</code>:'},{tagname:"example",id:"interaction-undo-127-example-001",title:"Enabling undo support on a graph",content:'<pre class="programlisting javascript" id="interaction-undo-127-programlisting-001" language="javascript" format="linespecific"><code>graph.undoEngineEnabled = true\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-undo-127-simpara-004",content:'Undo and Redo support on <span class="api">GraphEditorInputMode</span> is automatically available when the underlying graph supports\nit and can be turned off using the <api-link id="interaction-undo-127-api-link-002" data-member="allowUndoOperations" data-text="allowUndoOperations" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.'},{tagname:"para","class":"dguide-para tip",id:"interaction-undo-127-tip-001",content:'<p id="interaction-undo-127-simpara-005">Changes that can be undone include both interactive and programmatic changes.\nThis is useful when creating custom interactions that modify the graph, which\ncan be undone by the user the same way as interactive changes.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-undo-127-simpara-006",content:'You can extend Undo and Redo support to your own operations or data if needed, and\nextensively customize it as well.\nThis is described in detail in <a href="#/dguide/customizing_interaction_undo">Customizing Undo and Redo</a>.'}]},{tagname:"section",id:"interaction-snapping",title:"Snapping",children:[{tagname:"para","class":"dguide-para",id:"interaction-snapping-128-simpara-001",content:'When creating, moving, or resizing elements, snapping can provide so-called\n<span class="def">snap lines</span> that capture the mouse pointer when near them.\nThis makes it easy to align items, have nodes share the same size, etc.'},{tagname:"figure","class":"image",title:"Snapping (here for moving a node) provides numerous snap lines to align graph items",id:"interaction-snapping-128-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_snapping.a2c43a18.png",alt:"interaction snapping",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-snapping-128-simpara-002",content:'Snapping is not turned on by default and consists of two different parts:\nsnapping all items except labels, and snapping labels.\nTo enable snapping, you need to set a\n<api-link id="interaction-snapping-128-api-link-001" data-member="" data-text="GraphSnapContext" data-type="yfiles.input.GraphSnapContext"></api-link>\non <span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-snapping-128-api-link-002" data-member="snapContext" data-text="snapContext" data-type="yfiles.input.GraphEditorInputMode"></api-link> property as well as a\n<api-link id="interaction-snapping-128-api-link-003" data-member="" data-text="LabelSnapContext" data-type="yfiles.input.LabelSnapContext"></api-link>\non <span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-snapping-128-api-link-004" data-member="labelSnapContext" data-text="labelSnapContext" data-type="yfiles.input.GraphEditorInputMode"></api-link> property:'},{tagname:"example",id:"interaction-snapping-128-example-001",title:"Enabling snapping",content:'<pre class="programlisting javascript" id="interaction-snapping-128-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.snapContext = new yfiles.input.GraphSnapContext()\r\ngraphEditorInputMode.labelSnapContext = new yfiles.input.LabelSnapContext()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-snapping-128-simpara-003",content:"Snapping is supported by the following interactions:"},{tagname:"para",content:'<ul id="interaction-snapping-128-itemizedlist-001"><li id="interaction-snapping-128-listitem-001"><p id="interaction-snapping-128-simpara-004"><a href="#/dguide/interaction-creating_edges">Creating edges</a></p></li><li id="interaction-snapping-128-listitem-002"><p id="interaction-snapping-128-simpara-005"><a href="#/dguide/interaction-bends">Creating bends</a></p></li><li id="interaction-snapping-128-listitem-003"><p id="interaction-snapping-128-simpara-006"><a href="#/dguide/interaction-moving">Moving items</a></p></li><li id="interaction-snapping-128-listitem-004"><p id="interaction-snapping-128-simpara-007"><a href="#/dguide/interaction-resizing">Resizing nodes</a></p></li><li id="interaction-snapping-128-listitem-005"><p id="interaction-snapping-128-simpara-008"><a href="#/dguide/interaction-drag_drop">Drag and drop</a></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"interaction-snapping-128-simpara-009",content:"There are a few different snap lines, some of which are only active with certain\ninteractions:"},{tagname:"section",id:"_border_and_center_snap_lines",title:"Border and center snap lines",children:[{tagname:"figure","class":"image",title:"",id:"_border_and_center_snap_lines-129-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_snapping_border.085f32fa.png",alt:"",title:'<para class="dguide-para">Snap line at the border of a node</para>'},{tagname:"img",src:"assets/interaction_snapping_center.99815d66.png",alt:"",title:'<para class="dguide-para">Snap line in the center of a node</para>'}]},{tagname:"para","class":"dguide-para",id:"_border_and_center_snap_lines-129-simpara-001",content:"These snap lines appear at the borders and centers of nodes and make it easy to\nalign centers or a particular border of several nodes when moving or resizing\nthem. Labels will also snap to those snap lines for label models that allow\nfree movement."}]},{tagname:"section",id:"_same_size_snap_lines",title:"Same size snap lines",children:[{tagname:"figure","class":"image",title:"Snap line showing a matching width and height with other nodes.",id:"_same_size_snap_lines-130-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_snapping_size.c22ad650.png",alt:"interaction snapping size",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_same_size_snap_lines-130-simpara-001",content:"These snap lines appear during resizing nodes when the width or height of the\nresized node matches the width or height of another node."}]},{tagname:"section",id:"_same_distance_snap_lines",title:"Same distance snap lines",children:[{tagname:"figure","class":"image",title:"",id:"_same_distance_snap_lines-131-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_snapping_distance1.94618875.png",alt:"",title:'<para class="dguide-para">Snapping a node so that is has the same distance as the other two</para>'},{tagname:"img",src:"assets/interaction_snapping_distance2.13f0f8b1.png",alt:"",title:'<para class="dguide-para">Snapping a node between two nodes so that it has the same distance to both of them</para>'}]},{tagname:"para","class":"dguide-para",id:"_same_distance_snap_lines-131-simpara-001",content:"These are snap lines that appear when moving nodes to indicate that the distance\nbetween the moved node and an adjacent node matches the distance between two\nother nodes on the same line. This provides an easy way to create graphs that\nlook regular without having to configure a grid."}]},{tagname:"section",id:"interaction-grid_snapping",title:"Grid snapping",children:[{tagname:"figure","class":"image",title:"",id:"interaction-grid_snapping-132-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_snapping_grid1.10215ac1.png",alt:"",title:'<para class="dguide-para">Snapping a node between two grid points</para>'},{tagname:"img",src:"assets/interaction_snapping_grid2.17829e92.png",alt:"",title:'<para class="dguide-para">Snapping a node onto a grid point</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-grid_snapping-132-simpara-001",content:"yFiles for HTML also supports a grid, which enables snapping items to points at\nregular intervals. Grid snapping not only works for moving or resizing nodes,\nbut also for creating edges and adding and moving bends."},{tagname:"para","class":"dguide-para",id:"interaction-grid_snapping-132-simpara-002",content:'Grid snapping has to be enabled explicitly by creating a suitable\n<api-link id="interaction-grid_snapping-132-api-link-001" data-member="" data-text="GridInfo" data-type="yfiles.view.GridInfo"></api-link> object and activating grid snapping for various\nitems on the <span class="api">GraphSnapContext</span>:'},{tagname:"example",id:"interaction-grid_snapping-132-informalexample-001",content:'<pre class="programlisting javascript" id="interaction-grid_snapping-132-programlisting-001" language="javascript" format="linespecific"><code>let gridInfo = new yfiles.view.GridInfo()\r\nsnapContext.nodeGridConstraintProvider = new yfiles.input.GridConstraintProvider(gridInfo)\r\nsnapContext.bendGridConstraintProvider = new yfiles.input.GridConstraintProvider(gridInfo)\r\nsnapContext.portGridConstraintProvider = new yfiles.input.GridConstraintProvider(gridInfo)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-grid_snapping-132-simpara-003",content:'Enabling grid snapping does <strong id="interaction-grid_snapping-132-emphasis-001" class="bold" role="bold">not</strong> mean that the <span class="api">GraphComponent</span> shows any grid visualization.\nYou have to do that in addition:'},{tagname:"example",id:"interaction-grid_snapping-132-informalexample-002",content:'<pre class="programlisting javascript" id="interaction-grid_snapping-132-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.backgroundGroup.addChild(\r\n  new yfiles.view.GridVisualCreator(gridInfo),\r\n  yfiles.view.ICanvasObjectDescriptor.ALWAYS_DIRTY_INSTANCE\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"interaction-grid_snapping-132-simpara-004",content:'How to configure and customize snapping is described in detail in\n<a href="#/dguide/customizing_interaction_snapping">Customizing Snapping</a>.'}]}]},{tagname:"section",id:"interaction-orthogonal_edge_editing",title:"Orthogonal Edge Editing",children:[{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-001",content:'Orthogonal edge editing is a feature in <span class="api">GraphEditorInputMode</span> that forces edge paths to only\nhave right angles. While <a href="#/dguide/interaction-snapping">snapping</a> gives some help to\ncreate and maintain orthogonal edge paths, it’s still time-consuming and\nunnecessary effort to do so manually when yFiles for HTML offers integrated support\nfor most editing gestures to keep edges orthogonal. (Note that this doesn’t mean\nthat it’s a decision between snapping or orthogonal edge editing — both features\nwork very well together.)'},{tagname:"figure","class":"image",title:"A graph with orthogonal edges",id:"interaction-orthogonal_edge_editing-133-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal.ccef0bb3.png",alt:"interaction orthogonal",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-002",content:'Orthogonal edge editing is disabled by default. To enable it, you have to set an\n<api-link id="interaction-orthogonal_edge_editing-133-api-link-001" data-member="" data-text="OrthogonalEdgeEditingContext" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link> on\n<span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-orthogonal_edge_editing-133-api-link-002" data-member="orthogonalEdgeEditingContext" data-text="orthogonalEdgeEditingContext" data-type="yfiles.input.GraphEditorInputMode"></api-link> property:'},{tagname:"example",id:"interaction_ex_enable_OEE",content:'<pre class="programlisting javascript" id="interaction-orthogonal_edge_editing-133-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.orthogonalEdgeEditingContext = new yfiles.input.OrthogonalEdgeEditingContext()\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"interaction-orthogonal_edge_editing-133-note-001",content:'<p id="interaction-orthogonal_edge_editing-133-simpara-003">Orthogonal edge editing is an interactive feature that affects interactive\ncreation and modification of graph elements. If you instead want to\nprogrammatically <strong id="interaction-orthogonal_edge_editing-133-emphasis-001" class="bold" role="bold">make</strong> all edges in a graph orthogonal, the more appropriate\napproach is an <a href="#/dguide/layout-edge_routing_styles">edge routing algorithm</a>. Of course,\nthe two features can both be used in the same application without a problem.</p>'},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-004",content:"Orthogonal edge editing modifies a number of interactions so that edges stay\northogonal:"},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-005",content:'<a href="#/dguide/interaction-creating_edges">Edge creation</a>, naturally, now only creates\northogonal edges.\nWhen starting an edge creation gesture, the rough direction in which the mouse\nis moved first will determine the direction of the first edge segment.\nIf the mouse pointer is not moved exactly orthogonal, a bend will also be shown\nso that the edge ends at the mouse pointer.\nSince the first segment direction is not always the correct one on the first\ntry, you can press <kbd>Space</kbd> to toggle between the two possible orientations\nas long as no explicit bend has been created yet.'},{tagname:"figure","class":"image",title:"Different orientations of the first segment during orthogonal edge creation",id:"interaction-orthogonal_edge_editing-133-figure-002","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal_first_segment1.87d12bae.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/interaction_orthogonal_first_segment2.c1aaefa9.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-006",content:"Adding bends during edge creation is still done with the same gesture, except\nthat implicit bends are also added whenever the current edge segment would not\nbe orthogonal (as can be seen in the figures above)."},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-007",content:'<a href="#/dguide/interaction-bends">Creating bends</a> works rather differently when\nusing orthogonal edge editing. Normally when creating a bend the gesture will,\nwell, create a bend. However, with orthogonal edge editing this would always\ndestroy the edge’s orthogonality. The best way to picture bend creation with\northogonal edge editing is actually to see it not as creating bends, but\n<strong id="interaction-orthogonal_edge_editing-133-emphasis-002" class="bold" role="bold">moving edge segments</strong>.'},{tagname:"figure","class":"image",title:"Moving edge segments",id:"interaction-orthogonal_edge_editing-133-figure-003","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal_move_segment1.44a20c6f.png",alt:"",title:'<para class="dguide-para">Start of drag</para>'},{tagname:"img",src:"assets/interaction_orthogonal_move_segment2.8e64588f.png",alt:"",title:'<para class="dguide-para">After finishing the drag</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-008",content:"In case of the first or last edge segment the segment cannot move. Instead,\na part of that segment is split off when dragging:"},{tagname:"figure","class":"image",title:"Moving the first or last edge segment",id:"interaction-orthogonal_edge_editing-133-figure-004","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal_move_segment3.a2e910bd.png",alt:"",title:'<para class="dguide-para">Start of drag</para>'},{tagname:"img",src:"assets/interaction_orthogonal_move_segment4.3a1804a2.png",alt:"",title:'<para class="dguide-para">After finishing the drag</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-009",content:'When dragging a segment so it coincides with another segment (essentially the\nreverse of the situation shown above), the bends that lie on straight line\nsegments will automatically be removed. This is easier to achieve with\n<a href="#/dguide/interaction-snapping">snapping</a>.'},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-010",content:'<a href="#/dguide/interaction-deleting">Deleting bends</a> has special support to keep\nedges orthogonal by also removing one or two adjacent bends. This can be\nturned off individually with <span class="api">GraphEditorInputMode</span>’s <api-link id="interaction-orthogonal_edge_editing-133-api-link-003" data-member="orthogonalBendRemoval" data-text="orthogonalBendRemoval" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nproperty.'},{tagname:"figure","class":"image",title:"Removing bends",id:"interaction-orthogonal_edge_editing-133-figure-005","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal_remove_bend1.31b5a8d7.png",alt:"",title:'<para class="dguide-para">The bend to remove</para>'},{tagname:"img",src:"assets/interaction_orthogonal_remove_bend2.c2cf3a92.png",alt:"",title:'<para class="dguide-para">Removing the bend without support for orthogonal edge editing will just remove that single bend and thus create a sloped segment</para>'},{tagname:"img",src:"assets/interaction_orthogonal_remove_bend3.33d25775.png",alt:"",title:'<para class="dguide-para">Removing the bend <strong id="interaction-orthogonal_edge_editing-133-emphasis-003" class="bold" role="bold">with</strong> support for orthogonal edge editing removes adjacent bends as well to keep the edge orthogonal</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-011",content:'<a href="#/dguide/interaction-moving">Moving items</a>, most notably nodes, will also keep\nedges orthogonal.\nWhen nodes are moved an incident segment and bend will move with them to\nkeep that segment orthogonal.\nIf there is no adjacent bend, the edge will be broken up in a similar way as\nwhen dragging the edge segment itself.'},{tagname:"figure","class":"image",title:"Moving a node",id:"interaction-orthogonal_edge_editing-133-figure-006","float":0,children:[{tagname:"img",src:"assets/interaction_orthogonal_move_nodes1.c3485cca.png",alt:"",title:'<para class="dguide-para">Before the move</para>'},{tagname:"img",src:"assets/interaction_orthogonal_move_nodes2.51972d5f.png",alt:"",title:'<para class="dguide-para">After the move</para>'}]},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-012",content:"When bends are moved, their incident edge segments will stay orthogonal as well\nby moving adjacent bends appropriately.\nIf an incident segment is the first or last segment, it will be broken up in a\nsimilar manner to moving that segment."},{tagname:"para","class":"dguide-para",id:"interaction-orthogonal_edge_editing-133-simpara-013",content:'<a href="#/dguide/interaction-resizing">Resizing nodes</a> acts very similar to moving nodes\nbecause the end points of incident edges change in a very similar way.'}]}]}]},{tagname:"section",id:"io",title:"Graph I/O and Printing",children:[{tagname:"para","class":"dguide-para",id:"io-009-simpara-001",content:'Besides <a href="#/dguide/io-loading_saving">loading and saving graphs</a>, yFiles for HTML lets you <a href="#/dguide/io-printing">print the\ngraph</a> or export it\ninto various <a href="#/dguide/io-bitmap_export">bitmap image formats</a>, e.g. JPEG or PNG. If you need to export the\ngraph into other image formats like <a href="#/dguide/io-pdf_export">SVG, PDF, EPS, or EMF</a>, you can easily use\nadditional third-party libraries with the yFiles for HTML’s export mechanism.'},{tagname:"section",id:"io-loading_saving",title:"Loading and Saving Graphs",children:[{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-001",content:'yFiles for HTML supports loading and saving graphs using the <a href="#/dguide/customizing_io_graphml">graph exchange format GraphML</a>.\nGraphML is an XML based graph exchange format which supports reading and writing the structural information\nof a graph. yFiles for HTML extends GraphML to read and write not only structural, but also visual and geometric\ninformation of a graph.'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-002",content:'The GraphML support of yFiles for HTML can easily be\n<a href="#/dguide/customizing_io">extended to add arbitrary data to the GraphML</a>.\nThis is necessary when you want to save and load additional business data which is associated with\ngraph elements as well as custom styles or custom label and port models.'},{tagname:"para","class":"dguide-para tip",id:"io-loading_saving-134-tip-001",content:'<p id="io-loading_saving-134-simpara-003">Although the built-in GraphML support provides a convenient way to read and write complete graphs including\nadditional graph-related information it is <strong id="io-loading_saving-134-emphasis-001" class="bold" role="bold">not</strong> mandatory to use GraphML. It is always possible to parse a custom\ndata format and build the graph accordingly using the creation methods introduced in chapter\n<a href="#/dguide/graph_model-graph">IGraph</a>.</p><p id="io-loading_saving-134-simpara-004">For instance, if you have already established a custom format for your business model data it might be more convenient\nto read and write the business model using your existing parsers and writers and build the graph based on the business\nmodel after or during parsing.</p>'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-005",content:'The <api-link id="io-loading_saving-134-api-link-001" data-member="" data-text="GraphMLSupport" data-type="yfiles.graphml.GraphMLSupport"></api-link> class provides convenient support for (de)serializing the graph model it\ndisplays via the following methods:'},{tagname:"para",content:'<dl id="io-loading_saving-134-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="io-loading_saving-134-term-001"><api-link id="io-loading_saving-134-api-link-002" data-member="openFile(yfiles.view.GraphComponent,yfiles.graphml.StorageLocation)" data-text="openFile(graphComponent:&#xA0;GraphComponent, storageLocation:&#xA0;StorageLocation):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLSupport"></api-link></dt><dt id="io-loading_saving-134-term-002"><api-link id="io-loading_saving-134-api-link-003" data-member="openFile(yfiles.graph.IGraph,yfiles.graphml.StorageLocation)" data-text="openFile(graph:&#xA0;IGraph, storageLocation:&#xA0;StorageLocation):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLSupport"></api-link></dt><dd id="io-loading_saving-134-listitem-001">\n<p id="io-loading_saving-134-simpara-006">Methods for reading in a graph in GraphML into a <span class="api">GraphComponent</span> or an <span class="api">IGraph</span>.</p>\n</dd>\n<dt id="io-loading_saving-134-term-003"><api-link id="io-loading_saving-134-api-link-004" data-member="saveFile(yfiles.graph.IGraph,yfiles.graphml.StorageLocation)" data-text="saveFile(graph:&#xA0;IGraph, storageLocation:&#xA0;StorageLocation):&#xA0;Promise&lt;string&gt;" data-type="yfiles.graphml.GraphMLSupport"></api-link></dt><dd id="io-loading_saving-134-listitem-002">\n<p id="io-loading_saving-134-simpara-007">Method for writing out the <span class="api">IGraph</span> to a GraphML file.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-008",content:'<a href="#/dguide/customizing_concepts_commands">commands</a> provide convenient access to these methods:'},{tagname:"table","class":"",id:"io-loading_saving-134-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>File commands supported by GraphComponent</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="io-loading_saving-134-thead-001"><tr id="io-loading_saving-134-row-001"><th id="io-loading_saving-134-entry-001" align="left" valign="top">\nCommand\n</th><th id="io-loading_saving-134-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="io-loading_saving-134-tbody-001"><tr id="io-loading_saving-134-row-002"><td id="io-loading_saving-134-entry-003" align="left" valign="top"><para class="dguide-para" id="io-loading_saving-134-simpara-009"><api-link id="io-loading_saving-134-api-link-005" data-member="OPEN" data-text="OPEN" data-type="yfiles.input.ICommand"></api-link></para></td><td id="io-loading_saving-134-entry-004" align="left" valign="top"><para class="dguide-para" id="io-loading_saving-134-simpara-010">Opens the browser’s file chooser to select a file to open and loads the chosen file into the currently visible graph.</para></td></tr><tr id="io-loading_saving-134-row-003"><td id="io-loading_saving-134-entry-005" align="left" valign="top"><para class="dguide-para" id="io-loading_saving-134-simpara-011"><api-link id="io-loading_saving-134-api-link-006" data-member="SAVE" data-text="SAVE" data-type="yfiles.input.ICommand"></api-link></para></td><td id="io-loading_saving-134-entry-006" align="left" valign="top"><para class="dguide-para" id="io-loading_saving-134-simpara-012">Possibly opens a file dialog that lets the user choose where to save the graph. Saves the graph to the last known location or the chosen file.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-013",content:'More control over the serialization or deserialization is provided by the <api-link id="io-loading_saving-134-api-link-007" data-member="" data-text="GraphMLIOHandler" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> class.\nBesides the option to read and write graphs which are not currently displayed in a\n<span class="api">GraphComponent</span> <span class="api">GraphMLIOHandler</span>\nsupports <a href="#/dguide/customizing_io">further customizations</a>.'},{tagname:"para",content:'<dl id="io-loading_saving-134-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="io-loading_saving-134-term-004"><api-link id="io-loading_saving-134-api-link-008" data-member="readFromDocument(yfiles.graph.IGraph,Document)" data-text="readFromDocument(graph:&#xA0;IGraph, document:&#xA0;Document):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dt id="io-loading_saving-134-term-005"><api-link id="io-loading_saving-134-api-link-009" data-member="readFromGraphMLText(yfiles.graph.IGraph,string)" data-text="readFromGraphMLText(graph:&#xA0;IGraph, data:&#xA0;string):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dt id="io-loading_saving-134-term-006"><api-link id="io-loading_saving-134-api-link-010" data-member="readFromURL(yfiles.graph.IGraph,string)" data-text="readFromURL(graph:&#xA0;IGraph, url:&#xA0;string):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="io-loading_saving-134-listitem-003">\n<p id="io-loading_saving-134-simpara-014">Parses GraphML from different sources and populates the given graph.</p>\n</dd>\n<dt id="io-loading_saving-134-term-007"><api-link id="io-loading_saving-134-api-link-011" data-member="write(yfiles.graph.IGraph)" data-text="write(graph:&#xA0;IGraph):&#xA0;Promise&lt;string&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="io-loading_saving-134-listitem-004">\n<p id="io-loading_saving-134-simpara-015">Writes the given graph as GraphML to the provided targets.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-016",content:'The <strong id="io-loading_saving-134-emphasis-002" class="bold" role="bold">file format</strong> that yFiles for HTML uses to serialize graphs is called <span class="def"><a href="http://graphml.graphdrawing.org" target="_blank">GraphML</a></span>.\nIt results from the joint effort of the graph drawing community to define a common, XML based format for\nexchanging graph structure data. The GraphML file format is described in the <a href="http://graphml.graphdrawing.org/primer/graphml-primer.html" target="_blank">GraphML Primer</a>.'},{tagname:"para","class":"dguide-para",id:"io-loading_saving-134-simpara-017",content:'yFiles for HTML extends this file format for its needs using a so-called <span class="def">attribute extension</span> that can\n also be\nused to add custom graph related data to the GraphML. This is described in detail in <a href="#/dguide/customizing_io">Customizing Graph I/O</a>.'},{tagname:"para","class":"dguide-para important",id:"io-loading_saving-134-important-001",content:'<p id="io-loading_saving-134-simpara-018">The format of the additional data in the GraphML file is not standardized and very\nspecific for yFiles for HTML. Other products, including yFiles for other platforms, will most likely not\nunderstand and use that data.</p>'}]},{tagname:"section",id:"io-image_export",title:"Image Export",children:[{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-001",content:'yFiles for HTML supports exporting the contents of a <span class="api">GraphComponent</span>\nas SVG with the <api-link id="io-image_export-135-api-link-001" data-member="" data-text="SvgExport" data-type="yfiles.view.SvgExport"></api-link>. The following methods enable\ninstant SVG export:'},{tagname:"para",content:'<dl id="io-image_export-135-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="io-image_export-135-term-001"><api-link id="io-image_export-135-api-link-002" data-member="exportSvg(yfiles.view.CanvasComponent)" data-text="exportSvg(canvas:&#xA0;CanvasComponent):&#xA0;Element" data-type="yfiles.view.SvgExport"></api-link></dt><dt id="io-image_export-135-term-002"><api-link id="io-image_export-135-api-link-003" data-member="exportSvgAsync(yfiles.view.CanvasComponent)" data-text="exportSvgAsync(canvas:&#xA0;CanvasComponent):&#xA0;Promise&lt;Element&gt;" data-type="yfiles.view.SvgExport"></api-link></dt><dd id="io-image_export-135-listitem-001">\n<p id="io-image_export-135-simpara-002">Synchronous and asynchronous export of the <span class="api">IGraph</span>’s content.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-003",content:'The asynchronous method additionally supports inlining of images using base64 encoding (<api-link id="io-image_export-135-api-link-004" data-member="encodeImagesBase64" data-text="encodeImagesBase64" data-type="yfiles.view.SvgExport"></api-link>),\nas well as inlining referenced SVG image elements (<api-link id="io-image_export-135-api-link-005" data-member="inlineSvgImages" data-text="inlineSvgImages" data-type="yfiles.view.SvgExport"></api-link>).'},{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-004",content:'Both option allow fine grained control over which images should be inlined via\n<api-link id="io-image_export-135-api-link-006" data-member="shouldEncodeImageBase64(SVGImageElement)" data-text="shouldEncodeImageBase64(image:&#xA0;SVGImageElement):&#xA0;boolean" data-type="yfiles.view.SvgExport"></api-link>\nand <api-link id="io-image_export-135-api-link-007" data-member="shouldInlineSvgImage(SVGImageElement)" data-text="shouldInlineSvgImage(image:&#xA0;SVGImageElement):&#xA0;boolean" data-type="yfiles.view.SvgExport"></api-link>'},{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-005",content:'The <span class="api">SvgExport</span> also encapsulates information that are needed\nfor exporting the contents of a <span class="api">CanvasComponent</span>:'},{tagname:"para",content:'<ul id="io-image_export-135-itemizedlist-001"><li id="io-image_export-135-listitem-002"><p id="io-image_export-135-simpara-006">the part of the canvas that should be exported</p></li><li id="io-image_export-135-listitem-003"><p id="io-image_export-135-simpara-007">the scaling factor that is applied when creating an image from the specified part of the canvas</p></li><li id="io-image_export-135-listitem-004"><p id="io-image_export-135-simpara-008">the margins that should be added around the exported content</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-009",content:'The part of the canvas that should be exported must be specified in world coordinates,\neither at creation time or later using the <api-link id="io-image_export-135-api-link-008" data-member="worldBounds" data-text="worldBounds" data-type="yfiles.view.SvgExport"></api-link> property.\nThe <span class="api">CanvasComponent</span>’s <api-link id="io-image_export-135-api-link-009" data-member="contentRect" data-text="contentRect" data-type="yfiles.view.CanvasComponent"></api-link> and\n<api-link id="io-image_export-135-api-link-010" data-member="viewport" data-text="viewport" data-type="yfiles.view.CanvasComponent"></api-link> properties, for example,\nconveniently provide the entire contents of the canvas or the contents currently visible in world coordinates.'},{tagname:"para","class":"dguide-para",id:"io-image_export-135-simpara-010",content:'The <a href="..\\..\\demos\\view\\svgexport\\index.html" target="blank" class="demo-link" title="Shows how to export the whole diagram or a part of it to an SVG image.">SVG Export</a> demo\nshows how <span class="api">SvgExport</span> can be used to export the\ngraph using different settings.'},{tagname:"section",id:"io-bitmap_export",title:"Bitmap Export",children:[{tagname:"para","class":"dguide-para",id:"io-bitmap_export-136-simpara-001",content:'Building upon the SVG export capabilities of yFiles for HTML, bitmap based exports can be realised.\nThe <a href="..\\..\\demos\\view\\imageexport\\index.html" target="blank" class="demo-link" title="Shows how to export the whole diagram or a part of it to a PNG image.">Image Export</a> demo\ndemonstrates how the browser’s canvas drawing capabilities may be utilized to\nexport the <span class="api">IGraph</span> as PNG image.'},{tagname:"para","class":"dguide-para",id:"io-bitmap_export-136-simpara-002",content:'The demo also shows how the <api-link id="io-bitmap_export-136-api-link-001" data-member="" data-text="SvgExport" data-type="yfiles.view.SvgExport"></api-link> can be\nused for server sided image export with a <a href="https://xmlgraphics.apache.org/batik" target="_blank">Batik</a>\npowered Java servlet or a <a href="http://phantomjs.org/" target="_blank">PhantomJS</a> server.'}]},{tagname:"section",id:"io-pdf_export",title:"PDF Export",children:[{tagname:"para","class":"dguide-para",id:"io-pdf_export-137-simpara-001",content:'Similar to the <a href="..\\..\\demos\\view\\imageexport\\index.html" target="blank" class="demo-link" title="Shows how to export the whole diagram or a part of it to a PNG image.">Image Export</a> demo,\nthe <a href="..\\..\\demos\\view\\pdfexport\\index.html" target="blank" class="demo-link" title="Shows how to export the whole diagram or a part of it to a PDF.">PDF Export</a> demo demonstrates\nexport of the <span class="api">IGraph</span>’s content as PDF.'},{tagname:"para","class":"dguide-para",id:"io-pdf_export-137-simpara-002",content:'It features both, pure client sided and server sided PDF export. The client sided\nexport makes use of <a href="https://github.com/yWorks/svg2pdf.js" target="_blank">svg2pdf</a> and a fork of\n<a href="https://github.com/yWorks/jsPDF" target="_blank">jsPDF</a> which are both available as open source code on\nour <a href="https://github.com/yWorks" target="_blank">github</a> repository.'},{tagname:"para","class":"dguide-para",id:"io-pdf_export-137-simpara-003",content:'The server sided export is closely related to the <a href="..\\..\\demos\\view\\imageexport\\index.html" target="blank" class="demo-link" title="Shows how to export the whole diagram or a part of it to a PNG image.">Image Export</a> demo\nand follows the same approach. Both demos show how to enhance the feature set of yFiles for HTML by means of third-party\nlibraries with little effort.'}]}]},{tagname:"section",id:"io-printing",title:"Printing",children:[{tagname:"para","class":"dguide-para",id:"io-printing-138-simpara-001",content:'yFiles for HTML provides printing support with the help of the <api-link id="io-printing-138-api-link-001" data-member="" data-text="SvgExport" data-type="yfiles.view.SvgExport"></api-link> class.\nThe <a href="..\\..\\demos\\view\\printing\\index.html" target="blank" class="demo-link" title="Shows how to print the whole diagram or a part of it.">Printing</a> demo shows how the\n<span class="api">SvgExport</span> can be used to provide the browser’s\nprinting support with the desired part of the <span class="api">IGraph</span>.'},{tagname:"para","class":"dguide-para",id:"io-printing-138-simpara-002",content:'The demo also features tiled printing, which can be used to separate the <span class="api">IGraph</span>\nto predefined tiles. Eventually, this can be used to support page sized printing.'}]}]},{tagname:"section",id:"layout",title:"Automatic Graph Layout",children:[{tagname:"para","class":"dguide-para",id:"layout-010-simpara-001",content:"This chapter discusses the yFiles layout algorithms, and explains their options and customization possibilities.\nIt shows how to create and invoke the algorithms, and how to achieve aesthetic and clear graph layouts.\nAlso, the general layout architecture is introduced, and common concepts for the layout algorithms are described."},{tagname:"section",id:"layout-summary",title:"Summary of Layout and Routing Styles",children:[{tagname:"para","class":"dguide-para",id:"layout-summary-139-simpara-001",content:"The layout algorithms of yFiles can be divided into three main categories:"},{tagname:"para",content:'<ul id="layout-summary-139-itemizedlist-001"><li id="layout-summary-139-listitem-001"><p id="layout-summary-139-simpara-002"><a href="#/dguide/layout-layout_styles">Layout styles</a> are responsible for assigning locations to all graph\nelements. More precisely, the nodes of a graph are placed according to some optimization criteria,\nand edge paths are also generated. Some algorithms also arrange labels in a way that there\nare no overlaps with each other or with graph elements.</p></li><li id="layout-summary-139-listitem-002"><p id="layout-summary-139-simpara-003"><a href="#/dguide/layout-edge_routing_styles">Edge routing styles</a> process only edges, i.e., they compute edge\npaths. The nodes of a graph are left unchanged, neither their position nor their size is altered\nin any way.</p></li><li id="layout-summary-139-listitem-003"><p id="layout-summary-139-simpara-004"><a href="#/dguide/layout-label_placement_algorithms">Label placement algorithms</a> leave both a graph’s nodes and its edge paths unaltered,\nbut compute suitable positions for labels. Their criteria for the arrangement are such that the\nlabels do not overlap with each other or any of the graph elements.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-summary-139-simpara-005",content:"In addition, some layout and edge routing styles provide support for specific visual and algorithmic\nfeatures:"},{tagname:"para",content:'<ul id="layout-summary-139-itemizedlist-002"><li id="layout-summary-139-listitem-004"><p id="layout-summary-139-simpara-006"><a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a></p></li><li id="layout-summary-139-listitem-005"><p id="layout-summary-139-simpara-007"><a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a></p></li><li id="layout-summary-139-listitem-006"><p id="layout-summary-139-simpara-008"><a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a></p></li><li id="layout-summary-139-listitem-007"><p id="layout-summary-139-simpara-009"><a href="#/dguide/layout-incremental_layout">Incremental Layout</a></p></li><li id="layout-summary-139-listitem-008"><p id="layout-summary-139-simpara-010"><a href="#/dguide/layout-port_locations">Restricting Port Locations</a></p></li><li id="layout-summary-139-listitem-009"><p id="layout-summary-139-simpara-011"><a href="#/dguide/layout-node_halos">Node Padding (Halos)</a></p></li></ul>'},{tagname:"section",id:"layout-layout_styles",title:"Layout Styles",children:[{tagname:"para","class":"dguide-para",id:"layout-layout_styles-140-simpara-001",content:"yFiles provides different layout styles, suitable for different application fields:"},{tagname:"para",content:'<ul id="layout-layout_styles-140-itemizedlist-001"><li id="layout-layout_styles-140-listitem-001"><p id="layout-layout_styles-140-simpara-002"><a href="#/dguide/layout_styles-hierarchical">Hierarchical Layout</a></p></li><li id="layout-layout_styles-140-listitem-002"><p id="layout-layout_styles-140-simpara-003"><a href="#/dguide/layout_styles-organic">Organic Layout</a></p></li><li id="layout-layout_styles-140-listitem-003"><p id="layout-layout_styles-140-simpara-004"><a href="#/dguide/layout_styles-tree">Tree Layout</a></p></li><li id="layout-layout_styles-140-listitem-004"><p id="layout-layout_styles-140-simpara-005"><a href="#/dguide/layout_styles-orthogonal">Orthogonal Layout</a></p></li><li id="layout-layout_styles-140-listitem-005"><p id="layout-layout_styles-140-simpara-006"><a href="#/dguide/layout_styles-circular">Circular Layout</a></p></li><li id="layout-layout_styles-140-listitem-006"><p id="layout-layout_styles-140-simpara-007"><a href="#/dguide/layout_styles-radial">Radial Layout</a></p></li><li id="layout-layout_styles-140-listitem-007"><p id="layout-layout_styles-140-simpara-008"><a href="#/dguide/layout_styles-seriesparallel">Series-parallel Layout</a></p></li><li id="layout-layout_styles-140-listitem-008"><p id="layout-layout_styles-140-simpara-009"><a href="#/dguide/partial_layout">Partial Layout</a></p></li><li id="layout-layout_styles-140-listitem-009"><p id="layout-layout_styles-140-simpara-010"><a href="#/dguide/layout_styles-familytree">Family Tree Layout</a></p></li></ul>'},{tagname:"section",id:"layout_styles-hierarchical",title:"Hierarchical Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-hierarchical-141-simpara-001",content:'<a href="#/dguide/hierarchical_layout">Hierarchical Layout</a> arranges graphs in a hierarchic fashion. The nodes are\ndistributed into layers so that most of the edges point to the main layout direction. The\norder of the nodes within the layers ensures that the number of edge crossings is as small\nas possible. There are different edge routing styles available. Edges can be orthogonal,\npolyline or octilinear.'},{tagname:"para","class":"dguide-para",id:"layout_styles-hierarchical-141-simpara-002",content:"Hierarchical diagrams are commonly used for the visualization of hierarchical data, since\nthey facilitate the identification of dependencies and relationships among the nodes of the\ngraph. Workflow visualization, call graph\nvisualization, entity-relationship diagrams, biochemical pathways and network management\nare typical application domains for this type of layout."},{tagname:"figure","class":"image",title:"Hierarchical layout",id:"layout_styles-hierarchical-141-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_hierarchical_01.7cac259a.gif",alt:"",title:'<para class="dguide-para">Sample hierarchical layouts</para>'},{tagname:"img",src:"assets/intro_hierarchical_02.dccaebcb.jpg",alt:"",title:'<para class="dguide-para">Hierarchical layout of a grouped graph</para>'}]}]},{tagname:"section",id:"layout_styles-organic",title:"Organic Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-organic-142-simpara-001",content:'<a href="#/dguide/organic_layout">Organic Layouts</a> are characterized by a natural distribution of nodes that exhibits\nclusters and symmetric properties of the graph. The layout is very compact,\nwhere nodes are placed close to\ntheir adjacent nodes. Edges maintain uniform lengths and are routed using straight-line\nsegments without bends.'},{tagname:"para","class":"dguide-para",id:"layout_styles-organic-142-simpara-002",content:'In addition to <span class="api">ClassicOrganicLayout</span> for from scratch layouts,\n<a href="#/dguide/interactive_organic_layout">interactively changing and layouting a graph</a> is also possible.'},{tagname:"para","class":"dguide-para",id:"layout_styles-organic-142-simpara-003",content:"Organic diagrams are commonly used for visualizing relations in large networks, for example\nin bioinformatics, enterprise networking, visualizing social networks, mesh visualization or\nsystem management."},{tagname:"figure","class":"image",title:"Sample organic layouts",id:"layout_styles-organic-142-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_organic.46891332.gif",alt:"",title:'<para class="dguide-para">Organic layout</para>'},{tagname:"img",src:"assets/intro_organic_groups.24b48f84.jpg",alt:"",title:'<para class="dguide-para">Organic layout of a grouped graph</para>'}]}]},{tagname:"section",id:"layout_styles-tree",title:"Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-tree-143-simpara-001",content:'<a href="#/dguide/tree_layouts">Tree Layouts</a> arrange graphs with a tree structure. yFiles provides a number of\ndifferent tree layout styles:'},{tagname:"para",content:'<ul id="layout_styles-tree-143-itemizedlist-001"><li id="layout_styles-tree-143-listitem-001"><p id="layout_styles-tree-143-simpara-002">The <span class="api">ClassicTreeLayout</span> is designed to arrange directed and undirected\ntrees that have a unique root node. All children are placed below their parent in relation to the main\nlayout direction. The edges of the graph are routed as straight-line segments or in an orthogonal\nbus-like fashion.</p></li><li id="layout_styles-tree-143-listitem-002"><p id="layout_styles-tree-143-simpara-003">The <span class="api">TreeLayout</span> provides multiple different arrangements of trees and\nsubtrees. It is easy to customize the order of edges, the port assignment and the arrangement of the\nnodes for each subtree.</p></li><li id="layout_styles-tree-143-listitem-003"><p id="layout_styles-tree-143-simpara-004">The <span class="api">BalloonLayout</span> places subtrees rooted at a node in a radial fashion\naround their root node. All direct children of one node can be placed on a common circle around their\nparent node (depending on the alignment policy). Therefore, subtrees look like balloons or stars,\nespecially if subtrees have similar sizes. The edges of the tree are drawn as straight lines.</p></li><li id="layout_styles-tree-143-listitem-004"><p id="layout_styles-tree-143-simpara-005">The <span class="api">AspectRatioTreeLayout</span> tries to generate compact tree layouts with a\ncertain preferred aspect ratio.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout_styles-tree-143-simpara-006",content:"Tree layout algorithms are commonly used for visualizing relational data and for producing\ndiagrams that are able to reveal possible hierarchic properties of the graph. More precisely,\nthey find applications in dataflow analysis, software engineering, bioinformatics and\nbusiness administration."},{tagname:"figure","class":"image",title:"Sample tree layouts",id:"layout_styles-tree-143-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_tree_01.40e12118.gif",alt:"",title:'<para class="dguide-para"><a href="#/dguide/classic_tree_layout">Classic Tree Layout</a></para>'},{tagname:"img",src:"assets/intro_tree_generic.a0209af3.gif",alt:"",title:'<para class="dguide-para"><a href="#/dguide/tree_layout">Tree Layout</a></para>'},{tagname:"img",src:"assets/intro_tree_02.9f968c3c.gif",alt:"",title:'<para class="dguide-para"><a href="#/dguide/balloon_layout">Balloon Tree Layout</a></para>'},{tagname:"img",src:"assets/intro_tree_04.76c0f082.gif",alt:"",title:'<para class="dguide-para"><a href="#/dguide/ar_tree_layout">Aspect Ratio Tree Layout</a></para>'}]}]},{tagname:"section",id:"layout_styles-orthogonal",title:"Orthogonal Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-orthogonal-144-simpara-001",content:'<a href="#/dguide/orthogonal_layout">Orthogonal Layouts</a> arrange the nodes of a given graph such that each edge is drawn as an\nalternating sequence of horizontal and vertical segments. It produces compact drawings with no\noverlapping nodes, few crossings and few bends and is well suited for small and medium-sized sparse\ngraphs.'},{tagname:"para","class":"dguide-para",id:"layout_styles-orthogonal-144-simpara-002",content:"Application domains of orthogonal drawings\ninclude software engineering, database schema representation, system management, knowledge\nrepresentation, VLSI circuits and floor planning applications."},{tagname:"figure","class":"image",title:"Sample orthogonal layouts",id:"layout_styles-orthogonal-144-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_orthogonal.a8b978fd.gif",alt:"",title:'<para class="dguide-para">Orthogonal layout</para>'},{tagname:"img",src:"assets/intro_orthogonal_groups.ff8678d4.jpg",alt:"",title:'<para class="dguide-para">Orthogonal layout of a grouped graph</para>'},{tagname:"img",src:"assets/intro_orthogonal_directed.35dcbdef.jpg",alt:"",title:'<para class="dguide-para">UML-style orthogonal layout</para>'}]}]},{tagname:"section",id:"layout_styles-circular",title:"Circular Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-circular-145-simpara-001",content:'<a href="#/dguide/circular_layout">Circular Layout</a> is suitable to emphasize group and tree structures as well. In contrast to other\ntree layouts, the circular layout arranges the nodes in circles and stars.'},{tagname:"para","class":"dguide-para",id:"layout_styles-circular-145-simpara-002",content:"Circular layout algorithms find applications in many areas such as social networking, network\nmanagement, WWW visualization, e-commerce and telecommunications."},{tagname:"figure","class":"image",title:"Circular layout",id:"layout_styles-circular-145-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_circular_01.5782730a.gif",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/intro_circular_02.90ebbb0d.gif",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout_styles-radial",title:"Radial Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-radial-146-simpara-001",content:'<a href="#/dguide/radial_layout">Radial Layout</a> distributes the nodes into circles (layers) around a common center based on predefined layering\nstrategies.'},{tagname:"para","class":"dguide-para",id:"layout_styles-radial-146-simpara-002",content:"Some potential applications include visualization of social networks, data clustering and\nbioinformatics."},{tagname:"figure","class":"image",title:"Sample radial layout",id:"layout_styles-radial-146-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_radial.0f48c291.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout_styles-seriesparallel",title:"Series-parallel Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-seriesparallel-147-simpara-001",content:'Series-parallel graphs are directed graphs with a single source (node without incoming edges) and a\nsingle sink (node without outgoing edges) that are built recursively by series and parallel compositions.\n<a href="#/dguide/seriesparallel_layout">Series-parallel Layout</a> highlights the main layout direction\n(from source to sink). It also emphasizes the paths through the graph because edges are routed with\nfew bends.'},{tagname:"para","class":"dguide-para",id:"layout_styles-seriesparallel-147-simpara-002",content:"Series-parallel diagrams are suitable for the visualization of circuits, call trees or flowcharts."},{tagname:"figure","class":"image",title:"Sample series-parallel layout",id:"layout_styles-seriesparallel-147-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_seriesparallel.897370a0.png",alt:"",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout_styles-familytree",title:"Family Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-familytree-148-simpara-001",content:'<a href="#/dguide/family_tree_layout">Family Tree Layout</a> arranges genealogical graphs (family trees). The family trees consist of nodes\nthat represent individuals and nodes that represent families. Individuals are connected via these\nfamily nodes. The graph is arranged in layers that describe generations.'},{tagname:"figure","class":"image",title:"Sample family tree layout",id:"layout_styles-familytree-148-figure-001","float":0,children:[{tagname:"img",src:"assets/familytree_example.47895d15.png",alt:"",title:'<para class="dguide-para"></para>'}]}]}]},{tagname:"section",id:"layout-edge_routing_styles",title:"Edge Routing Styles",children:[{tagname:"para","class":"dguide-para",id:"layout-edge_routing_styles-149-simpara-001",content:'All edge routing algorithms provided by yFiles implement the\n<api-link id="layout-edge_routing_styles-149-api-link-001" data-member="" data-text="ILayoutStage" data-type="yfiles.layout.ILayoutStage"></api-link> interface.\n<span class="api">ILayoutStage</span> makes it easy to use an edge routing algorithm as a\npostprocessing step to any of the major layout algorithms, for example.'},{tagname:"para","class":"dguide-para",id:"layout-edge_routing_styles-149-simpara-002",content:"yFiles supports different edge routing styles:"},{tagname:"para",content:'<ul id="layout-edge_routing_styles-149-itemizedlist-001"><li id="layout-edge_routing_styles-149-listitem-001"><p id="layout-edge_routing_styles-149-simpara-003"><a href="#/dguide/layout_styles-polyline_router">Polyline Routing</a></p></li><li id="layout-edge_routing_styles-149-listitem-002"><p id="layout-edge_routing_styles-149-simpara-004"><a href="#/dguide/layout_styles-channel_router">Channel Routing</a></p></li><li id="layout-edge_routing_styles-149-listitem-003"><p id="layout-edge_routing_styles-149-simpara-005"><a href="#/dguide/layout_styles-bus_router">Bus Routing</a></p></li><li id="layout-edge_routing_styles-149-listitem-004"><p id="layout-edge_routing_styles-149-simpara-006"><a href="#/dguide/layout_styles-organic_router">Organic Routing</a></p></li></ul>'},{tagname:"section",id:"layout_styles-polyline_router",title:"Polyline Routing",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-polyline_router-150-simpara-001",content:'<a href="#/dguide/polyline_router">Polyline Edge Routing</a> can be applied wherever it is needed to route the edges as polyline or\northogonal segments without crossing any nodes, while keeping the positions of the nodes in the diagram\nfixed.'},{tagname:"para","class":"dguide-para",id:"layout_styles-polyline_router-150-simpara-002",content:"Some potential applications include electric circuit design, floor planning and navigation maps."},{tagname:"figure","class":"image",title:"Sample polyline edge routings",id:"fig_layout_styles-polyline_router","float":0,children:[{tagname:"img",src:"assets/intro_routing_orthogonal.a0f8a90a.gif",alt:"",title:'<para class="dguide-para">Orthogonal routing</para>'},{tagname:"img",src:"assets/intro_routing_octilinear.6deda1ce.gif",alt:"",title:'<para class="dguide-para">Octilinear routing</para>'}]}]},{tagname:"section",id:"layout_styles-channel_router",title:"Channel Routing",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-channel_router-151-simpara-001",content:'<a href="#/dguide/channel_edge_router">Channel Edge Routing</a> also generates orthogonal routes for the edges. Compared to the <a href="#/dguide/layout_styles-polyline_router">Polyline Routing</a>, this implementation is usually faster but supports less constraints and, by default, may produce node-edge overlaps.'},{tagname:"figure","class":"image",title:"Sample channel edge routing",id:"fig_layout_styles-channel_router","float":0,children:[{tagname:"img",src:"assets/intro_routing_channel.72f4e7d5.gif",alt:"Channel Edge Router",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout_styles-bus_router",title:"Bus Routing",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-bus_router-152-simpara-001",content:'<a href="#/dguide/bus_router">Bus-style Edge Routing</a> is a specialized edge routing algorithm that generates bus-style representations by bundling edges of complete (sub)graphs.'},{tagname:"figure","class":"image",title:"Sample bus edge routing",id:"fig_layout_styles-bus_router","float":0,children:[{tagname:"img",src:"assets/intro_routing_bus.f9753422.gif",alt:"Bus Router",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout_styles-organic_router",title:"Organic Routing",children:[{tagname:"para","class":"dguide-para",id:"layout_styles-organic_router-153-simpara-001",content:'<a href="#/dguide/organic_routing">Organic Edge Routing</a> routes edges in smooth curves around the nodes.'},{tagname:"figure","class":"image",title:"Sample organic edge routings",id:"fig_layout_styles-organic_router","float":0,children:[{tagname:"img",src:"assets/intro_organic_routing_star.564c961c.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/intro_organic_routing_01.4e48c88c.jpg",alt:"",title:'<para class="dguide-para"></para>'}]}]}]},{tagname:"section",id:"layout-label_placement_algorithms",title:"Label Placement Algorithms",children:[{tagname:"para","class":"dguide-para",id:"layout-label_placement_algorithms-154-simpara-001",content:'<a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a> is independent of any layout algorithm and can be\napplied to any kind of diagram.\nMore precisely, it computes positions for labels in a given graph without modifying the\npositions of nodes or edges.\nTherefore it is a good starting point if you want to\nimprove the labeling of your graph quickly. The main objective of the algorithm is to clarify the\naffiliations of the labels to their nodes or edges and at the same time avoid overlaps with other graph elements.'},{tagname:"figure","class":"image",title:"Sample generic labeling",id:"layout-label_placement_algorithms-154-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_generic_labeling.e68bd40c.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"section",id:"layout_integrated-labeling",title:"Integrated Labeling",children:[{tagname:"para","class":"dguide-para",id:"layout_integrated-labeling-155-simpara-001",content:'Some layout algorithms already provide automatic edge label placement as an <a href="#/dguide/label_placement-integrated_labeling">integrated part</a>\nof the layout calculation. This way you can prevent label overlaps completely.'},{tagname:"figure","class":"image",title:"Sample integrated labeling",id:"layout_integrated-labeling-155-figure-001","float":0,children:[{tagname:"img",src:"assets/intro_integrated_labeling.1f23cb43.png",alt:"",title:'<para class="dguide-para"></para>'}]}]}]},{tagname:"section",id:"layout-grouping",title:"Layout of Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"layout-grouping-156-simpara-001",content:'As described in <a href="#/dguide/graph">The Graph Model</a>, yFiles for HTML provides an enhanced graph model with support for group\nnodes. In this model a node can be in another node, its <span class="def">parent group</span>, and each group can\ncontain an arbitrary number of nodes, its <span class="def">children</span>.'},{tagname:"para","class":"dguide-para",id:"layout-grouping-156-simpara-002",content:"A layout style that is suitable for group nodes typically places children of the same group near\neach other and have their parent enclosing them.\nThe following layout and edge routing styles provide support for this kind of placement:"},{tagname:"para",content:'<ul id="layout-grouping_list"><li id="layout-grouping-156-listitem-001"><p id="layout-grouping-156-simpara-003"><a href="#/dguide/hierarchical_layout-grouping">Hierarchical Layout</a></p></li><li id="layout-grouping-156-listitem-002"><p id="layout-grouping-156-simpara-004"><a href="#/dguide/organic_layout-grouping">Organic Layout</a></p></li><li id="layout-grouping-156-listitem-003"><p id="layout-grouping-156-simpara-005"><a href="#/dguide/orthogonal_layout-grouping">Orthogonal Layout</a></p></li><li id="layout-grouping-156-listitem-004"><p id="layout-grouping-156-simpara-006"><a href="#/dguide/tree_layout_grouping">Tree Layout</a></p></li><li id="layout-grouping-156-listitem-005"><p id="layout-grouping-156-simpara-007"><a href="#/dguide/seriesparallel_layout-grouping">Series-parallel Layout</a></p></li><li id="layout-grouping-156-listitem-006"><p id="layout-grouping-156-simpara-008"><a href="#/dguide/polyline_router_grouped_graphs">Polyline Edge Routing</a></p></li><li id="layout-grouping-156-listitem-007"><p id="layout-grouping-156-simpara-009"><a href="#/dguide/channel_edge_router">Channel Edge Routing</a></p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"layout-grouping-156-note-001",content:'<p id="layout-grouping-156-simpara-010">If an <span class="api">IGraph</span> contains <a href="#/dguide/graph_model-grouping">groups</a>,\n<a href="#/dguide/layout-applying_a_layout">applying a layout</a> automatically creates a corresponding layout\ngraph model with grouping information.\nGroup node insets and minimum size constraints are automatically configured, too.</p>'},{tagname:"example",id:"ex_how_to_layout_grouped_graphs",title:"Performing a layout of grouped graphs",content:'<pre class="programlisting javascript" id="layout-grouping-156-programlisting-001" language="javascript" format="linespecific"><code>const graph = graphComponent.graph\r\n\r\n// create some nodes\r\nconst n1 = graph.createNode()\r\nconst n2 = graph.createNode()\r\nconst n3 = graph.createNode()\r\nconst n4 = graph.createNode()\r\n\r\n// and some group nodes\r\nconst g1 = graph.groupNodes([n3])\r\nconst g2 = graph.groupNodes([n2, g1])\r\n\r\n// connect them with some edges\r\ngraph.createEdge(n1, n2)\r\ngraph.createEdge(n1, g1)\r\ngraph.createEdge(n2, n4)\r\ngraph.createEdge(n3, n4)\r\n\r\n// and perform a layout\r\ngraph.applyLayout(new yfiles.hierarchic.HierarchicLayout())\n</code></pre>'},{tagname:"figure","class":"image",title:"The layout of a grouped graph",id:"fig_how_to_layout_grouped_graphs","float":0,children:[{tagname:"img",src:"assets/intro_layout_grouped_graph.a1267393.png",alt:"intro layout grouped graph",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"layout-table_layout",title:"Layout of Tables and Swimlanes",children:[{tagname:"para","class":"dguide-para",id:"layout-table_layout-157-simpara-001",content:'Partitioned layouts, tabular layouts, and in particular the special case of swimlane layouts\nare supported by the <api-link id="layout-table_layout-157-api-link-001" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> class.'},{tagname:"para","class":"dguide-para",id:"layout-table_layout-157-simpara-002",content:"This class specifies a grid that consists of rows and columns and the grid cells which result from\nthe rows and columns.\nEach node can be assigned to a single partition cell or a set of consecutive partition cells and\nwill stay in this cell(s) during layout.\nIn addition to the structure, the class stores geometric information about rows and columns,\nfor example minimum heights and widths, and insets."},{tagname:"para","class":"dguide-para",id:"layout-table_layout-157-simpara-003",content:'<a href="#/dguide/fig_how_to_layout_table">The layout of a table</a> shows a tabular layout.\nNote the partition into cells which results from the rows and columns.'},{tagname:"para","class":"dguide-para",id:"layout-table_layout-157-simpara-004",content:"The following layout and edge routing styles support tabular layouts:"},{tagname:"para",content:'<ul id="layout-table_layout_list"><li id="layout-table_layout-157-listitem-001"><p id="layout-table_layout-157-simpara-005"><a href="#/dguide/hierarchical_layout-swimlane_layout">Hierarchical Layout</a></p></li><li id="layout-table_layout-157-listitem-002"><p id="layout-table_layout-157-simpara-006"><a href="#/dguide/organic_layout-partitioned_layout">Organic Layout</a></p></li><li id="layout-table_layout-157-listitem-003"><p id="layout-table_layout-157-simpara-007"><a href="#/dguide/polyline_router_partition_grids">Polyline Edge Routing</a></p></li><li id="layout-table_layout-157-listitem-004"><p id="layout-table_layout-157-simpara-008"><a href="#/dguide/tabular_layout">Tabular Layout</a> (only nodes, only a single node per cell)</p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"layout-table_layout-157-note-001",content:'<p id="layout-table_layout-157-simpara-009">If an <span class="api">IGraph</span> contains <a href="#/dguide/tables">tables</a>,\n<a href="#/dguide/layout-applying_a_layout">applying a layout</a> automatically creates a corresponding layout\ngraph model with tabular information.</p><p id="layout-table_layout-157-simpara-010">Ultimately, this setup is done by the <api-link id="layout-table_layout-157-api-link-002" data-member="" data-text="TableLayoutConfigurator" data-type="yfiles.layout.TableLayoutConfigurator"></api-link> class which\ncreates a <api-link id="layout-table_layout-157-api-link-003" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> of the <api-link id="layout-table_layout-157-api-link-004" data-member="" data-text="Table" data-type="yfiles.graph.Table"></api-link>.\n<api-link id="layout-table_layout-157-api-link-005" data-member="" data-text="LayoutExecutor" data-type="yfiles.layout.LayoutExecutor"></api-link> provides access to its\n<span class="api">TableLayoutConfigurator</span> instance for advanced configuration and\ncustomization.</p>'},{tagname:"example",id:"ex_how_to_layout_table",title:"Performing a table layout",content:'<pre class="programlisting javascript" id="layout-table_layout-157-programlisting-001" language="javascript" format="linespecific"><code>populateAndLayoutTable(graphComponent, table) {\r\n  const graph = graphComponent.graph\r\n\r\n  // create a top-level group node and bind the table to it\r\n  const parent = graph.createGroupNode(\r\n    null,\r\n    new yfiles.geometry.Rect(0, 0, 10, 10),\r\n    new yfiles.styles.TableNodeStyle(table)\r\n  )\r\n\r\n  // create some rows and columns\r\n  const row1 = table.createRow()\r\n  const row2 = table.createRow()\r\n  const row3 = table.createRow()\r\n  const column1 = table.createColumn()\r\n  const column2 = table.createColumn()\r\n  const column3 = table.createColumn()\r\n  const column4 = table.createColumn()\r\n\r\n  // populate some of the cells with nodes\r\n  const n1 = createNodeInCell(graph, parent, row2, column1)\r\n  const n2 = createNodeInCell(graph, parent, row1, column2)\r\n  const n3 = createNodeInCell(graph, parent, row3, column3)\r\n  const n4 = createNodeInCell(graph, parent, row2, column4)\r\n  const n5 = createNodeInCell(graph, parent, row1, column4)\r\n  const n6 = createNodeInCell(graph, parent, row1, column4)\r\n\r\n  // connect them with some edges\r\n  graph.createEdge(n2, n1)\r\n  graph.createEdge(n2, n3)\r\n  graph.createEdge(n3, n5)\r\n  graph.createEdge(n5, n6)\r\n  graph.createEdge(n6, n2)\r\n\r\n  // and perform a layout\r\n  const hl = new yfiles.hierarchic.HierarchicLayout()\r\n  h1.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\n  h1.orthogonalRouting = true\r\n  graphControl.morphLayout(hl, yfiles.lang.TimeSpan.fromSeconds(1))\r\n}\r\n\r\n// Create a node in the center of the given cell.\r\ncreateNodeInCell(graph, parent, row, column) {\r\n  const node = graph.createNode(parent)\r\n  graph.setNodeCenter(\r\n    node,\r\n    new yfiles.geometry.Point(column.layout.center.x, row.layout.center.y)\r\n  )\r\n  return node\r\n}\n</code></pre>'},{tagname:"figure","class":"image",title:"The layout of a table",id:"fig_how_to_layout_table","float":0,children:[{tagname:"img",src:"assets/intro_layout_table.c2ede582.png",alt:"intro layout table",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"layout-table_layout-157-simpara-011",content:'The\n<a href="..\\..\\demos\\complete\\tableeditor\\index.html" target="blank" class="demo-link" title="Shows the support for diagrams that are organized in a tabular way, for example in a grid or a swimlane layout.">Table Editor</a> demo application\nshows in detail how to create and automatically lay out tables.'}]},{tagname:"section",id:"layout-edge_grouping",title:"Layout with Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-001",content:"Edge grouping means that a set of edges is bundled at either their source or target end in the\nfollowing way:"},{tagname:"para",content:'<ul id="layout-edge_grouping-158-itemizedlist-001"><li id="layout-edge_grouping-158-listitem-001"><p id="layout-edge_grouping-158-simpara-002">Their source (or target) ports will be at the same location, if these ports belong to the same\nowner node.</p></li><li id="layout-edge_grouping-158-listitem-002"><p id="layout-edge_grouping-158-simpara-003">Their paths will share common segments, in other words, they are routed in a bus-like style.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-004",content:"If edges at different source (target) nodes are declared an edge group at their\nsource (target) ends, then they will be routed in bus-style only.\nIf edges from an edge group have associated inconsistent, or even contradicting\nport constraints, then the location of the common port is not guaranteed to obey any of them."},{tagname:"para","class":"dguide-para note",id:"layout-edge_grouping-158-note-001",content:'<p id="layout-edge_grouping-158-simpara-005">Edge grouping is sometimes called <span class="def">port grouping</span>.</p>'},{tagname:"figure","class":"image",title:"Edge groups",id:"layout-edge_grouping-158-figure-001","float":0,children:[{tagname:"img",src:"assets/edge_grouping_initial_ihl_lay_trgts.c0aed738.jpg",alt:"",title:'<para class="dguide-para">Hierarchical layout without any edge groups.</para>'},{tagname:"img",src:"assets/edge_grouping_ihl_lay_1grp_trgts.20615717.jpg",alt:"",title:'<para class="dguide-para">Same layout with edges grouped at the target.</para>'}]},{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-006",content:"The following layout and edge routing styles provide support for edge grouping:"},{tagname:"para",content:'<ul id="layout-edge_grouping-158-itemizedlist-002"><li id="layout-edge_grouping-158-listitem-003"><p id="layout-edge_grouping-158-simpara-007"><a href="#/dguide/hierarchical_layout-edge_grouping">Hierarchical Layout</a></p></li><li id="layout-edge_grouping-158-listitem-004"><p id="layout-edge_grouping-158-simpara-008"><a href="#/dguide/organic_layout-substructures">Organic Layout</a></p></li><li id="layout-edge_grouping-158-listitem-005"><p id="layout-edge_grouping-158-simpara-009"><a href="#/dguide/orthogonal_layout-directed_edges-edge_groups">Orthogonal Layout</a></p></li><li id="layout-edge_grouping-158-listitem-006"><p id="layout-edge_grouping-158-simpara-010"><a href="#/dguide/seriesparallel_layout">Series-parallel Layout</a></p></li><li id="layout-edge_grouping-158-listitem-007"><p id="layout-edge_grouping-158-simpara-011"><a href="#/dguide/polyline_router_edge_grouping">Polyline Edge Routing</a></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-012",content:'Declaring an edge group at the source or target ends of a set of edges is done\nby associating the same common object with these edges via the data provider keys\n<api-link id="layout-edge_grouping-158-api-link-001" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link> or\n<api-link id="layout-edge_grouping-158-api-link-002" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link>, respectively.'},{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-013",content:'<a href="#/dguide/ex_layout-edge_groups">Declaring an edge group for all edges targeting a given node</a> demonstrates how an edge group\nfor all edges targeting a given node is declared.'},{tagname:"example",id:"ex_layout-edge_groups",title:"Declaring an edge group for all edges targeting a given node",content:'<pre class="programlisting javascript" id="layout-edge_grouping-158-programlisting-001" language="javascript" format="linespecific"><code>performEdgeGrouping(graph, specificNode) {\r\n  // specify an id for all edges ending in the particular node\r\n  const targetEdgeGroupId = \'All my grouped edges.\'\r\n  const edge2Id = new yfiles.layout.ItemMapping()\r\n  edge2Id.delegate = edge => (edge.targetNode === specificNode ? targetEdgeGroupId : null)\r\n\r\n  // use LayoutData to configure the target edge groups\r\n  const layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.targetGroupIds = edge2Id\r\n\r\n  // and perform a layout\r\n  graph.applyLayout(new yfiles.hierarchic.HierarchicLayout(), layoutData)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout-edge_grouping-158-simpara-014",content:'The <a href="..\\..\\demos\\input\\portcandidateprovider\\index.html" target="blank" class="demo-link" title="Shows how edge creation can be customized.">Port Candidate Provider</a> demo\nuses edge grouping to bundle incoming and outgoing edges.'}]},{tagname:"section",id:"layout-incremental_layout",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-001",content:"The yFiles library provides unequaled support for incremental graph layout that\nseamlessly integrates with the “normal,” non-incremental major layout style."},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-002",content:'Compared to a “normal” layout algorithm, which computes an all-new, fresh graph\nlayout each time it is invoked, incremental layout rearranges\ndistinct parts of a graph while the remainder is not, or only slightly, changed.\nThis technique makes it possible to maintain the user’s <span class="def">mental map</span> over a course of\nsubsequent layouts of a changing graph, for example in interactive use cases where a\nuser modifies a graph.'},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-003",content:'The term <span class="def">mental map</span> expresses a user’s experience of a graph, which is most\nnotably influenced by a consistent and largely invariable placement of the\ngraph elements in a sequence of layout algorithm invocations.\n“Normal” layout calculation does not consider the mental map in any way. In\nfact, a graph layout may change substantially for modifications as small as adding a single edge!'},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-004",content:"The following layout and edge routing styles provide support for incremental layout:"},{tagname:"para",content:'<dl id="layout-summary-incremental_layout_list"><dt id="layout-incremental_layout-159-term-001"><a href="#/dguide/hierarchical_layout">Hierarchical Layout</a></dt><dd id="layout-incremental_layout-159-listitem-001"><p id="layout-incremental_layout-159-simpara-005">Supports a dedicated <a href="#/dguide/hierarchical_layout-incremental_layout">incremental layout mode</a> as well as\n<a href="#/dguide/hierarchical_layout-non_incremental_layout_mode">hierarchical layout  from scratch</a>.</p></dd><dt id="layout-incremental_layout-159-term-002"><a href="#/dguide/organic_layout">Organic Layouts</a></dt><dd id="layout-incremental_layout-159-listitem-002"><p id="layout-incremental_layout-159-simpara-006">Incremental layout support is provided by means of the\n<a href="#/dguide/organic_layout-incremental">Scope  feature</a>.</p></dd><dt id="layout-incremental_layout-159-term-003">Tree Layout</dt><dd id="layout-incremental_layout-159-listitem-003"><p id="layout-incremental_layout-159-simpara-007"><span class="api">TreeLayout</span> supports incremental layout by means of the\n<a href="#/dguide/tree_layout_incremental">default NodePlacer implementation</a>.\n<span class="api">BalloonLayout</span> can be set to\n<a href="#/dguide/balloon_layout_incremental">layout from sketch  mode</a>.\n<span class="api">ClassicTreeLayout</span> supports incremental layout by means of the\n<a href="#/dguide/classic_tree_incremental">default  child comparer  implementation</a>.</p></dd><dt id="layout-incremental_layout-159-term-004">All edge routing styles</dt><dd id="layout-incremental_layout-159-listitem-004"><p id="layout-incremental_layout-159-simpara-008">Incremental routing support is provided by means of the <strong id="layout-incremental_layout-159-emphasis-004" class="bold" role="bold">Affected Edges</strong> feature.\nSee the routing options of <a href="#/dguide/organic_routing-options">Organic Edge Routing</a>,\n<a href="#/dguide/polyline_router_options">Polyline Edge Routing</a>,\n<a href="#/dguide/channel_edge_router-options">Channel Edge Routing</a>, and\n<a href="#/dguide/bus_router-incremental">Bus-style Edge Routing</a> for more information.</p></dd></dl>'},{tagname:"example",id:"ex_layout-incremental",title:"Performing an incremental layout",content:'<pre class="programlisting javascript" id="layout-incremental_layout-159-programlisting-001" language="javascript" format="linespecific"><code>performIncrementalLayout(graph, nodesToLayout) {\r\n  // specify the nodes to layout incrementally\r\n  const incrementalNodes = new yfiles.layout.ItemCollection()\r\n  incrementalNodes.items = nodesToLayout\r\n\r\n  // use LayoutData to configure the incremental nodes\r\n  const layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.incrementalHints = incrementalNodes\r\n  layoutData.incrementalLayeringNodes = incrementalNodes\r\n\r\n  // and perform an incremental layout\r\n  const layout = new yfiles.hierarchic.HierarchicLayout()\r\n  layout.layoutMode = yfiles.hierarchic.LayoutMode.INCREMENTAL\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>'},{tagname:"heading",id:"_use_cases",renderas:"sect4",content:"Use Cases"},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-009",content:'Incremental layout is closely related to <strong id="layout-incremental_layout-159-emphasis-005" class="bold" role="bold">layout from sketch</strong>, where a given\narrangement of nodes is taken as the starting point for a layout calculation\nand also as a specification for the calculation’s desired outcome.\nConsequently, <strong id="layout-incremental_layout-159-emphasis-006" class="bold" role="bold">layout from sketch</strong> takes a major role in an incremental layout\nalgorithm’s functionality.'},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-010",content:'Incremental layout has two major use cases, which both involve <strong id="layout-incremental_layout-159-emphasis-007" class="bold" role="bold">layout from\nsketch</strong>:'},{tagname:"para",content:'<ul id="layout-incremental_layout-159-itemizedlist-001"><li id="layout-incremental_layout-159-listitem-005"><p id="layout-incremental_layout-159-simpara-011">Interactive creation of a graph structure where the layout calculation is\nperformed dynamically with each newly inserted graph element.</p></li><li id="layout-incremental_layout-159-listitem-006"><p id="layout-incremental_layout-159-simpara-012">Subsequent improvement of distinct parts from an already existing graph layout,\nwhere the remainder of the layout stays mainly unchanged.</p></li></ul>'},{tagname:"heading",id:"_related_concept",renderas:"sect4",content:"Related Concept"},{tagname:"para","class":"dguide-para",id:"layout-incremental_layout-159-simpara-013",content:'<a href="#/dguide/partial_layout">Partial layout</a> is a related concept that also\nallows to layout distinct parts of a diagram.\nIt allows to use completely different layout styles for certain parts of a diagram and add the\nresults to the original, unaltered remainder of the layout.\nLayout algorithms that provide support for incremental layout, however, will often\nyield a more sound and truly integrated overall layout of a diagram.'}]},{tagname:"section",id:"layout-port_locations",title:"Restricting Port Locations",children:[{tagname:"para","class":"dguide-para",id:"layout-port_locations-160-simpara-001",content:'To restrict the location where an edge connects to its source or target node\nto specific locations during automatic layout, yFiles for HTML provides the\nconcept of <span class="def">port candidates</span>.\nThis concept is implemented by the <api-link id="layout-port_locations-160-api-link-001" data-member="" data-text="PortCandidate" data-type="yfiles.layout.PortCandidate"></api-link> class.\nPort candidates can be used in conjunction with both nodes and edges.'},{tagname:"section",id:"layout-port_candidates",title:"Port Candidates for Nodes",children:[{tagname:"para","class":"dguide-para",id:"layout-port_candidates-161-simpara-001",content:"When used in conjunction with nodes, port candidates provide a means to:"},{tagname:"para",content:'<ul id="layout-port_candidates-161-itemizedlist-001"><li id="layout-port_candidates-161-listitem-001"><p id="layout-port_candidates-161-simpara-002">Restrict anchor locations at nodes. You can specify either exact anchor locations at a node\n(called <span class="def">location constraints</span> or <span class="def">strong constraints</span>) or restrict the anchor to any location at a\nspecific side of a node (called <span class="def">side constraints</span> or <span class="def">weak constraints</span>).</p></li><li id="layout-port_candidates-161-listitem-002"><p id="layout-port_candidates-161-simpara-003">Associate costs with a given anchor location. This establishes an order of precedence among a\ngiven set of anchor locations.\nAnchor locations with low cost are favored over anchor locations with higher costs.</p></li><li id="layout-port_candidates-161-listitem-003"><p id="layout-port_candidates-161-simpara-004">Limit the number of connecting edges at a given anchor location.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-port_candidates-161-simpara-005",content:'A typical example for the use of port candidates is a flow diagram as shown in\n<a href="#/dguide/fig_layout_port_candidates_flow_chart">Using port candidates to control connection points</a>:\nThe diamond shape, which is the visualization of a switch, should have its incoming\nedge connecting at the top. The first outgoing edge should connect at the bottom (first image),\nthe second at the right, the third at the left (second image). If there are more outgoing edges, these\nedges should connect at the bottom as well as more than one incoming edge should connect\nat the top (third image).'},{tagname:"figure","class":"image",title:"Using port candidates to control connection points",id:"fig_layout_port_candidates_flow_chart","float":0,children:[{tagname:"img",src:"assets/port_constraints_1in_1out.cadd1aa8.png",alt:"",title:'<para class="dguide-para">Incoming edges connect at the top, the first outgoing edge at the bottom…​</para>'},{tagname:"img",src:"assets/port_constraints_1in_2out.9ff329c8.png",alt:"",title:'<para class="dguide-para">…​ more outgoing edges occupy the right and left corners…​</para>'},{tagname:"img",src:"assets/port_constraints_2in_4out.ed7c8917.png",alt:"",title:'<para class="dguide-para">…​ when all corners are occupied</para>'}]},{tagname:"para","class":"dguide-para",id:"layout-port_candidates-161-simpara-006",content:'To define the set of side constraints and location constraints at a node, multiple\nport candidates can easily be combined using the services of the\n<api-link id="layout-port_candidates-161-api-link-001" data-member="" data-text="PortCandidateSet" data-type="yfiles.layout.PortCandidateSet"></api-link> class.\nWhen a PortCandidate object is added to an instance of PortCandidateSet, the\ncapacity of the port candidate can optionally be configured.\nThe capacity of a given port candidate (sometimes also referred to as\n<span class="def">cardinality</span>) specifies the allowed number of connecting edges at that side or\nanchor location.'}]},{tagname:"section",id:"_matching_port_candidates_and_edges",title:"Matching Port Candidates and Edges",children:[{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-001",content:"Matching port candidates means the process of distributing a node’s edges to\nthe available port candidates.\nIf a node is associated with a set of port candidates via a PortCandidateSet object, all edges\nconnecting to that node are distributed among the available port candidates with respect to:"},{tagname:"para",content:'<ul id="_matching_port_candidates_and_edges-162-itemizedlist-001"><li id="_matching_port_candidates_and_edges-162-listitem-001"><p id="_matching_port_candidates_and_edges-162-simpara-002">the costs of a given port candidate</p></li><li id="_matching_port_candidates_and_edges-162-listitem-002"><p id="_matching_port_candidates_and_edges-162-simpara-003">the number of edges that are allowed to connect to a given port candidate</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-004",content:'For example, when the limit of allowed edges for a given port candidate with\ncosts k is reached, i.e., the given port candidate is said\nto be <span class="def">saturated</span>, then the next least expensive port candidate among the\nremaining ones is chosen to connect edges to.'},{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-005",content:'<a href="#/dguide/ex_layout_port_candidates_flow_chart">Defining a port candidate set</a> demonstrates how to create a candidate\nset for the diamond node shown in <a href="#/dguide/fig_layout_port_candidates_flow_chart">Using port candidates to control connection points</a>:\nFirst, port candidates for the four corners of the diamond are defined.\nThe number of connecting edges for these candidates is limited to 1.'},{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-006",content:"Further port candidates, which can take an unlimited number (<code>Integer.MAX_VALUE</code>)\nof edges, are defined to handle any additional edges.\nTo let the edges first connect to the corners before the additional candidates are\noccupied, a higher cost is associated with these latter candidates."},{tagname:"example",id:"ex_layout_port_candidates_flow_chart",title:"Defining a port candidate set",content:'<pre class="programlisting javascript" id="_matching_port_candidates_and_edges-162-programlisting-001" language="javascript" format="linespecific"><code>// define a PortCandidateSet\r\nconst pcs = new yfiles.layout.PortCandidateSet()\r\n\r\n// the node has the size (30, 30) with the point (0, 0) at the center\r\n// so the coordinates for the top corner are (0, -15)\r\n\r\n// create a candidate at the top corner with direction North and cost 0\r\nconst candidate = yfiles.layout.PortCandidate.createCandidate(\r\n  0,\r\n  -15,\r\n  yfiles.layout.PortDirections.NORTH,\r\n  0\r\n)\r\n// add it to the set and allow only one edge to connect to it\r\npcs.add(candidate, 1)\r\n// do the same for the other three corners\r\npcs.add(\r\n  yfiles.layout.PortCandidate.createCandidate(0, 15, yfiles.layout.PortDirections.SOUTH, 0),\r\n  1\r\n)\r\npcs.add(\r\n  yfiles.layout.PortCandidate.createCandidate(15, 0, yfiles.layout.PortDirections.EAST, 0),\r\n  1\r\n)\r\npcs.add(\r\n  yfiles.layout.PortCandidate.createCandidate(-15, 0, yfiles.layout.PortDirections.WEST, 0),\r\n  1\r\n)\r\n\r\n// to allow more edges to connect at the top and bottom\r\n// create extra candidates and allow Integer.MAX_VALUE edges to connect\r\n\r\n// to avoid that these candidates are occupied before the others\r\n// associate a cost of 1 with them\r\npcs.add(\r\n  yfiles.layout.PortCandidate.createCandidate(0, -15, yfiles.layout.PortDirections.NORTH, 1),\r\n  Number.MAX_VALUE\r\n)\r\npcs.add(\r\n  yfiles.layout.PortCandidate.createCandidate(0, 15, yfiles.layout.PortDirections.SOUTH, 1),\r\n  Number.MAX_VALUE\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-007",content:'To influence the matching process, a subset of the PortCandidate objects used\nfor a node can additionally be associated with the respective ports of its connecting edges.\nThe subset then defines a restricted set of desired port candidates an edge prefers to connect to.\nThe PortCandidate objects can be combined using <span class="api">ICollection&lt;T></span> objects which are stored by\nmeans of <a href="#/dguide/layout-layout_data">layout data</a> or data providers.\nThe data providers are registered with the graph using the look-up keys\n<api-link id="_matching_port_candidates_and_edges-162-api-link-001" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link> and\n<api-link id="_matching_port_candidates_and_edges-162-api-link-002" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link>.'},{tagname:"para","class":"dguide-para",id:"_matching_port_candidates_and_edges-162-simpara-008",content:'<a href="#/dguide/tab_layout_port_candidates">Layout support for port candidates</a> lists the layout algorithms that provide\nsupport for port candidates.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_port_candidates",rowsep:1,content:'<caption>Layout support for port candidates</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="_matching_port_candidates_and_edges-162-thead-001"><tr id="_matching_port_candidates_and_edges-162-row-001"><th id="_matching_port_candidates_and_edges-162-entry-001" align="left" valign="top">\nLayout Style\n</th><th id="_matching_port_candidates_and_edges-162-entry-002" align="left" valign="top">\nClass Name\n</th><th id="_matching_port_candidates_and_edges-162-entry-003" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="_matching_port_candidates_and_edges-162-tbody-001"><tr id="_matching_port_candidates_and_edges-162-row-002"><td id="_matching_port_candidates_and_edges-162-entry-004" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-009">Hierarchical</para></td><td id="_matching_port_candidates_and_edges-162-entry-005" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-010"><api-link id="_matching_port_candidates_and_edges-162-api-link-003" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="_matching_port_candidates_and_edges-162-entry-006" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-011"><span class="api">HierarchicLayout</span> supports port candidates as soon as they are\n  set.\n  See the description of\n  <a href="#/dguide/hierarchical_layout-port_candidates">incremental hierarchical layout</a>\n  for more information.</para></td></tr><tr id="_matching_port_candidates_and_edges-162-row-003"><td id="_matching_port_candidates_and_edges-162-entry-007" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-012">Polyline Edge Routing</para></td><td id="_matching_port_candidates_and_edges-162-entry-008" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-013"><api-link id="_matching_port_candidates_and_edges-162-api-link-004" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="_matching_port_candidates_and_edges-162-entry-009" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-014">Polyline <span class="api">EdgeRouter</span> supports port candidates as soon as they are\n  set.\n  See the description of\n  <a href="#/dguide/polyline_router_port_candidates">polyline edge routing</a>\n  for more information.</para></td></tr><tr id="_matching_port_candidates_and_edges-162-row-004"><td id="_matching_port_candidates_and_edges-162-entry-010" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-015">Bus-style Edge Routing</para></td><td id="_matching_port_candidates_and_edges-162-entry-011" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-016"><api-link id="_matching_port_candidates_and_edges-162-api-link-005" data-member="" data-text="BusRouter" data-type="yfiles.router.BusRouter"></api-link></para></td><td id="_matching_port_candidates_and_edges-162-entry-012" align="left" valign="top"><para class="dguide-para" id="_matching_port_candidates_and_edges-162-simpara-017"><span class="api">BusRouter</span> supports port candidates as soon as they are\n  set.\n  See the description of\n  <a href="#/dguide/bus_router-port_candidates">bus-style edge routing</a>\n  for more information.</para></td></tr></tbody>'
},{tagname:"para","class":"dguide-para note",id:"_matching_port_candidates_and_edges-162-note-001",content:'<p id="_matching_port_candidates_and_edges-162-simpara-018">Declaring port candidates for a node is done by associating a corresponding\nPortCandidateSet object with the node via <a href="#/dguide/layout-layout_data">layout data</a> or the data provider key\n<api-link id="_matching_port_candidates_and_edges-162-api-link-006" data-member="NODE_PORT_CANDIDATE_SET_DP_KEY" data-text="NODE_PORT_CANDIDATE_SET_DP_KEY" data-type="yfiles.layout.PortCandidateSet"></api-link>.\nAll layout and edge routing styles that support port candidates respect these restrictions\nwithout further configuration.</p>'},{tagname:"example",id:"ex_layout-with-node-port-candidates",title:"Performing a layout with node port candidates",content:'<pre class="programlisting javascript" id="_matching_port_candidates_and_edges-162-programlisting-002" language="javascript" format="linespecific"><code>performLayoutWithNodePortCandidates(graph, portCandidateSet) {\r\n  // specify the port candidates for diamond nodes e.g. for nodes which tag has been set to "diamond"\r\n  const portCandidates = new yfiles.layout.ItemMapping()\r\n  portCandidates.delegate = node => (\'diamond\' === node.tag ? portCandidateSet : null)\r\n\r\n  // use LayoutData to configure the port candidates\r\n  const layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.nodePortCandidateSets = portCandidates\r\n\r\n  // and perform a layout\r\n  const layout = new yfiles.hierarchic.HierarchicLayout()\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>'}]},{tagname:"section",id:"layout-port_candidates_for_edges",title:"Port Candidates for Edges",children:[{tagname:"para","class":"dguide-para",id:"layout-port_candidates_for_edges-163-simpara-001",content:"Similar to nodes, when used in conjunction with edges, port candidates provide a means to:"},{tagname:"para",content:'<ul id="layout-port_candidates_for_edges-163-itemizedlist-001"><li id="layout-port_candidates_for_edges-163-listitem-001"><p id="layout-port_candidates_for_edges-163-simpara-002">Restrict anchor locations at the source or target node of an edge.\nYou can specify either exact anchor locations at a node\n(called <span class="def">location constraints</span> or <span class="def">strong constraints</span>) or restrict the anchor to any location at a\nspecific side of a node (called <span class="def">side constraints</span> or <span class="def">weak constraints</span>).</p></li><li id="layout-port_candidates_for_edges-163-listitem-002"><p id="layout-port_candidates_for_edges-163-simpara-003">Associate costs with a given anchor location. This establishes an order of precedence among a\ngiven set of anchor locations.\nAnchor locations with low cost are favored over anchor locations with higher costs.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-port_candidates_for_edges-163-simpara-004",content:"Unlike node port candidates, there is no point in specifying the number of edges at an anchor\nlocation since edge port candidates are defined per single edge.\nConsequently, edge port candidates are combined with regular Collection objects instead of\nPortCandidateSet."},{tagname:"para","class":"dguide-para",id:"layout-port_candidates_for_edges-163-simpara-005",content:"The following layout style supports edge port candidates:"},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_port_candidates_for_edges",rowsep:1,content:'<caption>Layout support for enhanced port candidates</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="layout-port_candidates_for_edges-163-thead-001"><tr id="layout-port_candidates_for_edges-163-row-001"><th id="layout-port_candidates_for_edges-163-entry-001" align="left" valign="top">\nLayout Style\n</th><th id="layout-port_candidates_for_edges-163-entry-002" align="left" valign="top">\nClass Name\n</th><th id="layout-port_candidates_for_edges-163-entry-003" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="layout-port_candidates_for_edges-163-tbody-001"><tr id="layout-port_candidates_for_edges-163-row-002"><td id="layout-port_candidates_for_edges-163-entry-004" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-006">Hierarchical</para></td><td id="layout-port_candidates_for_edges-163-entry-005" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-007"><api-link id="layout-port_candidates_for_edges-163-api-link-001" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="layout-port_candidates_for_edges-163-entry-006" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-008">IncrementalHierarchicalLayouter supports port candidates as soon as they are set.\n  See the description of <a href="#/dguide/hierarchical_layout-port_candidates">incremental hierarchical layout</a>\n  for more information.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"layout-port_candidates_for_edges-163-simpara-009",content:"In particular, this scheme is supported by edge routing algorithms, and it\nallows to conveniently specify side constraints comprising two or three sides,\nfor example."},{tagname:"para","class":"dguide-para",id:"layout-port_candidates_for_edges-163-simpara-010",content:'<a href="#/dguide/tab_layout_port_candidates_router">Routing support for port candidates</a> lists the edge routing algorithms that\nprovide support for port candidates modeling enhanced port constraints.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_port_candidates_router",rowsep:1,content:'<caption>Routing support for port candidates</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="layout-port_candidates_for_edges-163-thead-002"><tr id="layout-port_candidates_for_edges-163-row-003"><th id="layout-port_candidates_for_edges-163-entry-007" align="left" valign="top">\nRouting Style\n</th><th id="layout-port_candidates_for_edges-163-entry-008" align="left" valign="top">\nClass Name\n</th><th id="layout-port_candidates_for_edges-163-entry-009" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="layout-port_candidates_for_edges-163-tbody-002"><tr id="layout-port_candidates_for_edges-163-row-004"><td id="layout-port_candidates_for_edges-163-entry-010" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-011">Orthogonal / Polyline</para></td><td id="layout-port_candidates_for_edges-163-entry-011" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-012"><api-link id="layout-port_candidates_for_edges-163-api-link-002" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link>,\n  <api-link id="layout-port_candidates_for_edges-163-api-link-003" data-member="" data-text="ChannelEdgeRouter" data-type="yfiles.router.ChannelEdgeRouter"></api-link>, and\n  <api-link id="layout-port_candidates_for_edges-163-api-link-004" data-member="" data-text="BusRouter" data-type="yfiles.router.BusRouter"></api-link></para></td><td id="layout-port_candidates_for_edges-163-entry-012" align="left" valign="top"><para class="dguide-para" id="layout-port_candidates_for_edges-163-simpara-013">All classes by default support port candidates as soon as they are set.\n  See the descriptions of <a href="#/dguide/polyline_router_port_candidates">EdgeRouter</a>,\n  <a href="#/dguide/channel_edge_router-port_candidates">ChannelEdgeRouter</a>, and\n  <a href="#/dguide/bus_router-port_constraints">BusRouter</a>, for more information.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para note",id:"layout-port_candidates_for_edges-163-note-001",content:'<p id="layout-port_candidates_for_edges-163-simpara-014">Declaring port candidates for the source or target of an edge is done by associating a corresponding\nCollection of PortCandidate objects with the edge via\n<a href="#/dguide/layout-layout_data">layout data</a> or the data provider key\n<api-link id="layout-port_candidates_for_edges-163-api-link-005" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link> or\n<api-link id="layout-port_candidates_for_edges-163-api-link-006" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link>, respectively.\nAll layout and edge routing styles that support port candidates respect these restrictions\nwithout further configuration.</p>'},{tagname:"example",id:"ex_layout-with-edge-port-candidates",title:"Performing a layout with edge port candidates",content:"<pre class=\"programlisting javascript\" id=\"layout-port_candidates_for_edges-163-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>performLayoutWithEdgePortCandidates(graph) {\r\n  // blue edges should start near the right upper corner and end near the left upper corner\r\n  var blueSourcePC = new yfiles.collections.List({\r\n    items: [\r\n      yfiles.layout.PortCandidate.createCandidate(15, -10, yfiles.layout.PortDirections.EAST)\r\n    ]\r\n  })\r\n  var blueTargetPC = new yfiles.collections.List({\r\n    items: [\r\n      yfiles.layout.PortCandidate.createCandidate(-15, -10, yfiles.layout.PortDirections.WEST)\r\n    ]\r\n  })\r\n  // green edges should start near the right lower corner and end near the left lower corner\r\n  var greenSourcePC = new yfiles.collections.List({\r\n    items: [\r\n      yfiles.layout.PortCandidate.createCandidate(15, 10, yfiles.layout.PortDirections.EAST)\r\n    ]\r\n  })\r\n  var greenTargetPC = new yfiles.collections.List({\r\n    items: [\r\n      yfiles.layout.PortCandidate.createCandidate(-15, 10, yfiles.layout.PortDirections.WEST)\r\n    ]\r\n  })\r\n\r\n  // specify the source port candidates\r\n  var sourcePortCandidates = new yfiles.layout.ItemMapping()\r\n  sourcePortCandidates.delegate = edge =>\r\n    'blue' === edge.tag ? blueSourcePC : 'green' === edge.tag ? greenSourcePC : null\r\n\r\n  // and the target port candidates\r\n  var targetPortCandidates = new yfiles.layout.ItemMapping()\r\n  targetPortCandidates.delegate = edge =>\r\n    'blue' === edge.tag ? blueTargetPC : 'green' === edge.tag ? greenTargetPC : null\r\n\r\n  // use LayoutData to apply the source and target port candidates\r\n  var layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.sourcePortCandidates = sourcePortCandidates\r\n  layoutData.targetPortCandidates = targetPortCandidates\r\n\r\n  // and perform a layout\r\n  var layout = new yfiles.hierarchic.HierarchicLayout()\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>"},{tagname:"figure","class":"image",title:"Layout with edge port candidates",id:"fig_layout-with-edge-port-candidates","float":0,children:[{tagname:"img",src:"assets/intro_layout_edge_port_candidates1.f2bf67b6.png",alt:"",title:'<para class="dguide-para">A default hierarchic layout</para>'},{tagname:"img",src:"assets/intro_layout_edge_port_candidates2.7a3ff8d5.png",alt:"",title:'<para class="dguide-para">…and a hierarchic layout with edge port candidates</para>'}]}]},{tagname:"section",id:"layout-port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"layout-port_constraints-164-simpara-001",content:'A port constraint pinpoints an edge’s end at its source node or target\nnode. This concept is implemented by the <api-link id="layout-port_constraints-164-api-link-001" data-member="" data-text="PortConstraint" data-type="yfiles.layout.PortConstraint"></api-link> class.'},{tagname:"para","class":"dguide-para note",id:"layout-port_constraints-164-note-001",content:'<p id="layout-port_constraints-164-simpara-002">Port Constraints are superseded by <a href="#/dguide/layout-port_candidates">Port Candidates</a> which are more\npowerful and cover all use cases of port constraints. They are listed here for completeness.</p>'},{tagname:"para","class":"dguide-para",id:"layout-port_constraints-164-simpara-003",content:"There are two kinds of port constraints available:"},{tagname:"para",content:'<dl id="layout-port_constraints-164-variablelist-001"><dt id="layout-port_constraints-164-term-001">Weak constraint</dt><dd id="layout-port_constraints-164-listitem-001"><p id="layout-port_constraints-164-simpara-004">Determines the node’s side at which an edge path’s end should connect.</p></dd><dt id="layout-port_constraints-164-term-002">Strong constraint</dt><dd id="layout-port_constraints-164-listitem-002"><p id="layout-port_constraints-164-simpara-005">Determines the exact coordinates where the edge path’s end should be located.\nThe coordinates are interpreted relative to the node’s center.</p></dd></dl>'},{tagname:"para","class":"dguide-para note",id:"layout-port_constraints-164-note-002",content:'<p id="layout-port_constraints-164-simpara-006">In contrast to a strong port candidate, the anchor location of a strong port constraint is not\nspecified as part of the port constraint instance but defined by the actual location of the\nport with such a constraint.</p>'},{tagname:"para","class":"dguide-para",id:"layout-port_constraints-164-simpara-007",content:'<a href="#/dguide/tab_layout_port_constraints">Layout support for port constraints</a> lists the layout algorithms that\nprovide support for port constraints.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_port_constraints",rowsep:1,content:'<caption>Layout support for port constraints</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="layout-port_constraints-164-thead-001"><tr id="layout-port_constraints-164-row-001"><th id="layout-port_constraints-164-entry-001" align="left" valign="top">\nLayout Style\n</th><th id="layout-port_constraints-164-entry-002" align="left" valign="top">\nClass Name\n</th><th id="layout-port_constraints-164-entry-003" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="layout-port_constraints-164-tbody-001"><tr id="layout-port_constraints-164-row-002"><td id="layout-port_constraints-164-entry-004" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-008">Hierarchical</para></td><td id="layout-port_constraints-164-entry-005" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-009"><api-link id="layout-port_constraints-164-api-link-002" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="layout-port_constraints-164-entry-006" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-010"><span class="api">HierarchicLayout</span> by default obeys weak and strong port\n  constraints as soon as they are set.\n  See the description of the <a href="#/dguide/hierarchical_layout">hierarchical layout style</a> for more information.</para></td></tr><tr id="layout-port_constraints-164-row-003"><td id="layout-port_constraints-164-entry-007" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-011">Tree</para></td><td id="layout-port_constraints-164-entry-008" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-012"><api-link id="layout-port_constraints-164-api-link-003" data-member="" data-text="TreeLayout" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="layout-port_constraints-164-entry-009" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-013">Nearly all of the predefined node placer implementations that can be used\n  with the generic tree layout algorithm by default obey strong and weak port\n  constraints as soon as they are set.\n  See the <a href="#/dguide/tree_layout">description of generic tree layout</a> for more information.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"layout-port_constraints-164-simpara-014",content:'<a href="#/dguide/tab_layout_port_constraints_router">Routing support for port constraints</a> lists the edge routing algorithms that\nprovide support for port constraints.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_port_constraints_router",rowsep:1,content:'<caption>Routing support for port constraints</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="layout-port_constraints-164-thead-002"><tr id="layout-port_constraints-164-row-004"><th id="layout-port_constraints-164-entry-010" align="left" valign="top">\nRouting Style\n</th><th id="layout-port_constraints-164-entry-011" align="left" valign="top">\nClass Name\n</th><th id="layout-port_constraints-164-entry-012" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="layout-port_constraints-164-tbody-002"><tr id="layout-port_constraints-164-row-005"><td id="layout-port_constraints-164-entry-013" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-015">Orthogonal / Polyline</para></td><td id="layout-port_constraints-164-entry-014" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-016"><api-link id="layout-port_constraints-164-api-link-004" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link>,\n  <api-link id="layout-port_constraints-164-api-link-005" data-member="" data-text="ChannelEdgeRouter" data-type="yfiles.router.ChannelEdgeRouter"></api-link>, and\n  <api-link id="layout-port_constraints-164-api-link-006" data-member="" data-text="BusRouter" data-type="yfiles.router.BusRouter"></api-link></para></td><td id="layout-port_constraints-164-entry-015" align="left" valign="top"><para class="dguide-para" id="layout-port_constraints-164-simpara-017">All classes by default obey weak and strong port constraints as soon as they are set.\n  See the descriptions of <a href="#/dguide/polyline_router_port_constraints">EdgeRouter</a>,\n  <a href="#/dguide/channel_edge_router-port_constraints">ChannelEdgeRouter</a>, and\n  <a href="#/dguide/bus_router-port_constraints">BusRouter</a> for more information.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para note",id:"layout-port_constraints-164-note-003",content:'<p id="layout-port_constraints-164-simpara-018">Declaring port constraints for the source or target of an edge is done by associating a corresponding\nPortConstraint object with the edge via <a href="#/dguide/layout-layout_data">layout data</a> or the data provider key\n<api-link id="layout-port_constraints-164-api-link-007" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link> or\n<api-link id="layout-port_constraints-164-api-link-008" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link>, respectively.\nAll layout and edge routing styles that support port constraints respect these restrictions\nwithout further configuration.</p>'},{tagname:"example",id:"ex_layout-with-port-constraints",title:"Performing a layout with port constraints",content:"<pre class=\"programlisting javascript\" id=\"layout-port_constraints-164-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>performLayoutWithPortConstraints(graph) {\r\n  // edges should start at the right side at blue nodes and at the left side at green nodes\r\n  var sourcePortConstraints = new yfiles.layout.ItemMapping()\r\n  sourcePortConstraints.delegate = edge =>\r\n    'blue' === edge.sourceNode.tag\r\n      ? yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.EAST)\r\n      : 'green' === edge.sourceNode.tag\r\n        ? yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.WEST)\r\n        : null\r\n\r\n  // edges should end at the left side at blue nodes and at the right side at green nodes\r\n  var targetPortConstraints = new yfiles.layout.ItemMapping()\r\n  targetPortConstraints.delegate = edge =>\r\n    'blue' === edge.targetNode.tag\r\n      ? yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.WEST)\r\n      : 'green' === edge.targetNode.tag\r\n        ? yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.EAST)\r\n        : null\r\n\r\n  // use LayoutData to apply the source and target port constraints\r\n  var layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.sourcePortConstraints = sourcePortConstraints\r\n  layoutData.targetPortConstraints = targetPortConstraints\r\n\r\n  // and perform a layout\r\n  var layout = new yfiles.hierarchic.HierarchicLayout()\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>"},{tagname:"figure","class":"image",title:"Layout with port constraints",id:"fig_layout-with-port-constraints","float":0,children:[{tagname:"img",src:"assets/intro_layout_with_port_constraints1.ee43c2af.png",alt:"",title:'<para class="dguide-para">A default hierarchic layout</para>'},{tagname:"img",src:"assets/intro_layout_with_port_constraints2.30e166ca.png",alt:"",title:'<para class="dguide-para">…and a hierarchic layout with port constraints</para>'}]}]}]},{tagname:"section",id:"layout-node_halos",title:"Node Padding (Halos)",children:[{tagname:"para","class":"dguide-para",id:"layout-node_halos-165-simpara-001",content:'A node halo specifies additional padding around a node.\nA layout algorithm that supports node halos keeps this area clear of graph elements,\nexcept the labels of this specific node and the incident segments of its edges.\nClass <api-link id="layout-node_halos-165-api-link-001" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> can be used to denote a node’s additional size requirements.'},{tagname:"para","class":"dguide-para",id:"layout-node_halos-165-simpara-002",content:"The following layout and edge routing styles provide support for node halos:"},{tagname:"para",content:'<ul id="layout_node_halos_list"><li id="layout-node_halos-165-listitem-001"><p id="layout-node_halos-165-simpara-003"><a href="#/dguide/hierarchical_layout-node_halos">Hierarchical Layout</a></p></li><li id="layout-node_halos-165-listitem-002"><p id="layout-node_halos-165-simpara-004"><a href="#/dguide/organic_layout-node_halos">Organic Layout</a></p></li><li id="layout-node_halos-165-listitem-003"><p id="layout-node_halos-165-simpara-005"><a href="#/dguide/tree_layout_node_halos">Tree Layout</a></p></li><li id="layout-node_halos-165-listitem-004"><p id="layout-node_halos-165-simpara-006"><a href="#/dguide/balloon_layout_node_halos">Balloon Layout</a></p></li><li id="layout-node_halos-165-listitem-005"><p id="layout-node_halos-165-simpara-007"><a href="#/dguide/classic_tree_node_halos">Classic Tree Layout</a></p></li><li id="layout-node_halos-165-listitem-006"><p id="layout-node_halos-165-simpara-008"><a href="#/dguide/orthogonal_layout">Orthogonal Layouts</a></p></li><li id="layout-node_halos-165-listitem-007"><p id="layout-node_halos-165-simpara-009"><a href="#/dguide/circular_layout-node_halos">Circular Layout</a></p></li><li id="layout-node_halos-165-listitem-008"><p id="layout-node_halos-165-simpara-010"><a href="#/dguide/radial_layout_node_halos">Radial Layout</a></p></li><li id="layout-node_halos-165-listitem-009"><p id="layout-node_halos-165-simpara-011"><a href="#/dguide/component_layout">Component Layout</a></p></li><li id="layout-node_halos-165-listitem-010"><p id="layout-node_halos-165-simpara-012"><a href="#/dguide/polyline_router_node_halos">Polyline Edge Routing</a></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-node_halos-165-simpara-013",content:"Node halos are also supported by the following labeling algorithms and layout stages:"},{tagname:"para",content:'<ul id="layout-node_halos-165-itemizedlist-002"><li id="layout-node_halos-165-listitem-011"><p id="layout-node_halos-165-simpara-014"><api-link id="layout-node_halos-165-api-link-002" data-member="" data-text="GenericLabeling" data-type="yfiles.labeling.GenericLabeling"></api-link></p></li><li id="layout-node_halos-165-listitem-012"><p id="layout-node_halos-165-simpara-015"><api-link id="layout-node_halos-165-api-link-003" data-member="" data-text="SelfLoopRouter" data-type="yfiles.layout.SelfLoopRouter"></api-link></p></li><li id="layout-node_halos-165-listitem-013"><p id="layout-node_halos-165-simpara-016"><api-link id="layout-node_halos-165-api-link-004" data-member="" data-text="RecursiveGroupLayout" data-type="yfiles.layout.RecursiveGroupLayout"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"layout-node_halos-165-note-001",content:'<p id="layout-node_halos-165-simpara-017">Declaring additional size requirements for a node is done by associating a corresponding\n<span class="api">NodeHalo</span> object with the node via <a href="#/dguide/layout-layout_data">layout data</a> or the data provider key <api-link id="layout-node_halos-165-api-link-005" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link>.\nAll layout and edge routing styles that support node halos respect the additional size requirement\nof each node with associated <span class="api">NodeHalo</span> object without further configuration.</p>'},{tagname:"example",id:"ex_layout-with-halos",title:"Performing a layout with node halos",content:'<pre class="programlisting javascript" id="layout-node_halos-165-programlisting-001" language="javascript" format="linespecific"><code>performLayoutWithHalos(graph) {\r\n  // specify an halo with extra space on the left side\r\n  var leftHalo = yfiles.layout.NodeHalo.create(0, 100, 0, 0)\r\n  // and another with extra space on the right side\r\n  var rightHalo = yfiles.layout.NodeHalo.create(0, 0, 0, 100)\r\n\r\n  // blue nodes should have extra space at the right side and green ones on the left side\r\n  var halos = new yfiles.layout.ItemMapping()\r\n  halos.delegate = node =>\r\n    \'blue\' === node.tag ? rightHalo : \'green\' === node.tag ? leftHalo : null\r\n\r\n  // use LayoutData to apply the halos\r\n  var layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n  layoutData.nodeHalos = halos\r\n\r\n  // and perform a layout\r\n  var layout = new yfiles.hierarchic.HierarchicLayout()\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>'},{tagname:"figure","class":"image",title:"Layout with node halos",id:"fig_layout-with-halos","float":0,children:[{tagname:"img",src:"assets/intro_layout_with_halos1.4af4a0d0.png",alt:"",title:'<para class="dguide-para">A default hierarchic layout</para>'},{tagname:"img",src:"assets/intro_layout_with_halos2.e5e7eb47.png",alt:"",title:'<para class="dguide-para">…and a hierarchic layout with node halos</para>'}]}]},{tagname:"section",id:"layout-edge_bundling",title:"Edge Bundling",children:[{tagname:"para","class":"dguide-para",id:"layout-edge_bundling-166-simpara-001",content:"The edge bundling feature can be used to bundle the paths of edges in a diagram so that they\nfollow similar routes."},{tagname:"para","class":"dguide-para",id:"layout-edge_bundling-166-simpara-002",content:"Using edge bundling significantly reduces the visual clutter in drawings of large graphs with\nmany edges. In addition, high-level patterns of edge routes and relations between different\ngroups of nodes can be highlighted and easily recognized. Edge bundling is commonly used in\nbio-informatics, social network analysis, telecommunications, and in fraud detection."},{tagname:"para","class":"dguide-para",id:"layout-edge_bundling-166-simpara-003",content:'Classes <api-link id="layout-edge_bundling-166-api-link-001" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link> and <api-link id="layout-edge_bundling-166-api-link-002" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> provide\nthe means to configure options related to the edge bundling support.'},{tagname:"para","class":"dguide-para",id:"layout-edge_bundling-166-simpara-004",content:"The following layout algorithms provide support for edge bundling:"},{tagname:"para",content:'<ul id="layout-edge_bundling_list"><li id="layout-edge_bundling-166-listitem-001"><p id="layout-edge_bundling-166-simpara-005"><a href="#/dguide/treereduction_edge_bundling">Tree Layout</a></p></li><li id="layout-edge_bundling-166-listitem-002"><p id="layout-edge_bundling-166-simpara-006"><a href="#/dguide/circular_layout-edge_bundling">Circular Layout</a></p></li><li id="layout-edge_bundling-166-listitem-003"><p id="layout-edge_bundling-166-simpara-007"><a href="#/dguide/radial_edge_bundling">Radial Layout</a></p></li></ul>'},{tagname:"example",id:"ex_layout-with-edge-bundles",title:"Performing a layout with edge bundles",content:'<pre class="programlisting javascript" id="layout-edge_bundling-166-programlisting-001" language="javascript" format="linespecific"><code>performLayoutWithEdgeBundles(/*yfiles.graph.IGraph*/ graph) {\r\n  // blue edges should be bundled\r\n  var blueEdgeBundleDescriptor = new yfiles.layout.EdgeBundleDescriptor()\r\n  blueEdgeBundleDescriptor.bundled = true\r\n  // green edges should not be bundled\r\n  var greenEdgeBundleDescriptor = new yfiles.layout.EdgeBundleDescriptor()\r\n  greenEdgeBundleDescriptor.bundled = false\r\n\r\n  // assign the edge bundle descriptors to the edges depending on their color\r\n  // e.g. on the value stored in their tag\r\n  var edgeBundleDescriptors = new yfiles.layout.ItemMapping()\r\n  edgeBundleDescriptors.delegate = edge =>\r\n    \'blue\' === edge.tag\r\n      ? blueEdgeBundleDescriptor\r\n      : \'green\' === edge.tag\r\n        ? greenEdgeBundleDescriptor\r\n        : null\r\n\r\n  // use LayoutData to apply the edge bundle descriptors\r\n  var layoutData = new yfiles.circular.CircularLayoutData()\r\n  layoutData.edgeBundleDescriptors = edgeBundleDescriptors\r\n\r\n  // and perform a layout\r\n  var layout = new yfiles.circular.CircularLayout()\r\n  layout.partitionStyle = yfiles.circular.PartitionStyle.CYCLE\r\n  layout.layoutStyle = yfiles.circular.LayoutStyle.SINGLE_CYCLE\r\n\r\n  graph.applyLayout(layout, layoutData)\r\n}\n</code></pre>'},{tagname:"figure","class":"image",title:"Layout with edge bundles",id:"fig_layout-with-edge-bundles","float":0,children:[{tagname:"img",src:"assets/intro_layout_with_edge_bundles1.a20fdf37.png",alt:"",title:'<para class="dguide-para">A default circular layout</para>'},{tagname:"img",src:"assets/intro_layout_with_edge_bundles2.de36d6eb.png",alt:"",title:'<para class="dguide-para">…and a circular layout with some bundled edges</para>'}]}]}]},{tagname:"section",id:"layout-applying_a_layout",title:"Applying an Automatic Layout",children:[{tagname:"para","class":"dguide-para",id:"layout-applying_a_layout-167-simpara-001",content:'Although the yFiles for HTML layout algorithms are tailored to the dedicated\ngraph model of the layout part, the layouts can be directly applied to an\n<span class="api">IGraph</span> by means of the adapter mechanisms described in this section.\nYou don’t need to work with the <a href="#/dguide/layout_graph_model">layout graph model</a> unless you implement\nyour own <span class="api">ILayoutAlgorithm</span>.'},{tagname:"para","class":"dguide-para note",id:"layout-applying_a_layout-167-note-001",content:'<p id="layout-applying_a_layout-167-simpara-002">This section shows how to apply an automatic layout to an <span class="api">IGraph</span>. It does not apply to the\nyFiles for HTML Layout package which doesn’t provide the <span class="api">IGraph</span> model. Developers who write applications\nwith the yFiles for HTML Layout package should refer to the chapter <a href="#/dguide/layout_graph_model">The Layout Graph Model</a> to learn how\nto use the <span class="api">LayoutGraph</span> API.</p>'},{tagname:"para","class":"dguide-para",id:"layout-applying_a_layout-167-simpara-003",content:'A layout can be conveniently be applied directly to an <span class="api">IGraph</span> or a <span class="api">GraphComponent</span>’s graph using methods\n<api-link id="layout-applying_a_layout-167-api-link-001" data-member="applyLayout(yfiles.layout.ILayoutAlgorithm,yfiles.layout.LayoutData)" data-text="applyLayout" data-type="yfiles.graph.IGraph"></api-link> and\n<api-link id="layout-applying_a_layout-167-api-link-002" data-member="morphLayout(yfiles.layout.ILayoutAlgorithm,yfiles.lang.TimeSpan,yfiles.layout.LayoutData)" data-text="morphLayout" data-type="yfiles.view.GraphComponent"></api-link>,\nrespectively.\nThese methods take care of creating a layout graph copy of the original <span class="api">IGraph</span>, calculate the\nlayout on that copy, and finally transfer the new layout back to the original graph.\nBesides obvious characteristics of the graph like nodes, edges, and labels, more specific features\nlike <a href="#/dguide/layout-grouping">groups</a>, <a href="#/dguide/layout-table_layout">tables</a>, and\n<a href="#/dguide/layout-table_layout">swimlanes</a> are automatically converted as well.'},{tagname:"para","class":"dguide-para",id:"layout-applying_a_layout-167-simpara-004",content:'To adopt the new layout without delay as soon as its calculation has finished, apply a layout\nalgorithm to an <span class="api">IGraph</span> using the <api-link id="layout-applying_a_layout-167-api-link-003" data-member="applyLayout(yfiles.layout.ILayoutAlgorithm,yfiles.layout.LayoutData)" data-text="applyLayout" data-type="yfiles.graph.IGraph"></api-link> method.\nThis is a blocking call.'},{tagname:"example",id:"ex_layout_applying_a_layout",title:"Applying an automatic layout",content:'<pre class="programlisting javascript" id="layout-applying_a_layout-167-programlisting-001" language="javascript" format="linespecific"><code>graph.applyLayout(new yfiles.hierarchic.HierarchicLayout())\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout-applying_a_layout-167-simpara-005",content:'To adopt the new layout in an animated fashion, apply a layout algorithm to a <span class="api">GraphComponent</span> (and\nits <span class="api">IGraph</span>) using the <api-link id="layout-applying_a_layout-167-api-link-004" data-member="morphLayout(yfiles.layout.ILayoutAlgorithm,yfiles.lang.TimeSpan,yfiles.layout.LayoutData)" data-text="morphLayout" data-type="yfiles.view.GraphComponent"></api-link> method.\nWe call this <span class="def">layout morphing</span>.\nMethod <span class="api">morphLayout</span> is a non-blocking call.\nThe layout and the subsequent animation are executed in a separate thread.\n<span class="api">morphLayout</span>\nreturns a <code>Promise</code> which is fulfilled\nafter both layout calculation and animation have finished, and rejected if an error occurred.'},{tagname:"example",id:"ex_layout_morphing_a_layout",title:"Applying an automatic layout in an animated fashion",content:'<pre class="programlisting javascript" id="layout-applying_a_layout-167-programlisting-002" language="javascript" format="linespecific"><code>// simply apply the layout in an animated fashion...\r\ngraphComponent.morphLayout(new yfiles.hierarchic.HierarchicLayout(), yfiles.lang.TimeSpan.fromMilliseconds(250))\r\n// ... or react after the layout has been finished\r\ngraphComponent.morphLayout(new yfiles.hierarchic.HierarchicLayout(), yfiles.lang.TimeSpan.fromMilliseconds(250))\r\n  .then(() => {\r\n    // layout has been successfuly applied\r\n    // e.g. free resources\r\n    return null\r\n  })\r\n  .catch(error => {\r\n    // free resources\r\n    // report error\r\n  })\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"layout-applying_a_layout-167-tip-001",content:'<p id="layout-applying_a_layout-167-simpara-006">Both these methods provide overloads to specify supplemental <a href="#/dguide/layout-layout_data">layout data</a>.</p>'},{tagname:"para","class":"dguide-para",id:"layout-applying_a_layout-167-simpara-007",content:'The animation done by the <span class="api">morphLayout</span> method zooms the\nviewport to fit the graph bounds. To configure this or other aspects of the layout morphing, use the\n<api-link id="layout-applying_a_layout-167-api-link-005" data-member="" data-text="LayoutExecutor" data-type="yfiles.layout.LayoutExecutor"></api-link> class instead of the\n<span class="api">morphLayout</span> convenience method. See section <a href="#/dguide/layout-layout_morphing">Configuring the Layout Morphing</a>\nfor more details.'},{tagname:"section",id:"layout-layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-001",content:"Besides global configuration settings that specify the overall arrangement of the graph, the\nlayout algorithms can take into account individual information for single graph elements. For\nexample, this includes specifying a minimum edge length for each edge or a preferred location for\neach label."},{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-002",content:'This individual information is neither specified on the <span class="api">ILayoutAlgorithm</span> instance nor directly\non the graph. Instead, each layout style and each edge routing style has an associated type\nthat provides the element-level options for the layout. These types are called <span class="def">layout data</span>, they\nextend the <api-link id="layout-layout_data-168-api-link-001" data-member="" data-text="LayoutData" data-type="yfiles.layout.LayoutData"></api-link> type.'},{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-003",content:'To take the individual data into consideration, the layout algorithm and the layout data have\nto be applied together to the graph or <span class="api">GraphComponent</span>:'},{tagname:"example",id:"ex_layout_morphing_a_layout_with_data",title:"Applying an automatic layout and layout data in an animated fashion",content:'<pre class="programlisting javascript" id="layout-layout_data-168-programlisting-001" language="javascript" format="linespecific"><code>const layout = new yfiles.hierarchic.HierarchicLayout()\r\n// configure layout algorithm options ...\r\n\r\nconst data = new yfiles.hierarchic.HierarchicLayoutData()\r\n// configure graph specific options ...\r\n\r\n// apply both layout and layout data\r\ngraphComponent.morphLayout(layout, yfiles.lang.TimeSpan.fromMilliseconds(250), data)\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"layout-layout_data-168-important-001",content:'<p id="layout-layout_data-168-simpara-004">During layout calculation, the individual information for the graph elements is bound to the layout\ngraph using a so-called <span class="def">data provider key</span>.\nFor historical reasons the descriptions of the layout styles often mention these keys instead of the corresponding\nproperties of the newer <span class="api">LayoutData</span> concept.\nNevertheless, we strongly recommend to use the <span class="api">LayoutData</span> instead of the data provider keys.</p>'},{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-005",content:'The properties of the various layout specific <span class="api">LayoutData</span> subclasses\nare commonly either of type <api-link id="layout-layout_data-168-api-link-002" data-member="" data-text="ItemMapping&lt;TItem,TValue&gt;" data-type="yfiles.layout.ItemMapping"></api-link> or <api-link id="layout-layout_data-168-api-link-003" data-member="" data-text="ItemCollection&lt;TItem&gt;" data-type="yfiles.layout.ItemCollection"></api-link>.\nThe former maps an element (commonly a graph element) to an arbitrary object. The latter defines\na collection of items for use in the layout algorithm.'},{tagname:"para",content:'<dl id="layout-layout_data-168-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout-layout_data-168-term-001" class="title" role="title">ItemMapping</dt><dt id="layout-layout_data-168-term-002"><api-link id="layout-layout_data-168-api-link-004" data-member="constant" data-text="constant:&#xA0;TValue" data-type="yfiles.layout.ItemMapping"></api-link></dt><dd id="layout-layout_data-168-listitem-001">\n<p id="layout-layout_data-168-simpara-006">Sets a single constant on this mapper that is returned for every given element.</p>\n</dd>\n<dt id="layout-layout_data-168-term-003"><api-link id="layout-layout_data-168-api-link-005" data-member="delegate" data-text="delegate:&#xA0;MapperDelegate&lt;TItem,&#xA0;TValue&gt;" data-type="yfiles.layout.ItemMapping"></api-link></dt><dd id="layout-layout_data-168-listitem-002">\n<p id="layout-layout_data-168-simpara-007">Sets a function that is called for each given element which will produce an object of the result type of this instance.</p>\n</dd>\n<dt id="layout-layout_data-168-term-004"><api-link id="layout-layout_data-168-api-link-006" data-member="mapper" data-text="mapper:&#xA0;IMapper&lt;TItem,&#xA0;TValue&gt;" data-type="yfiles.layout.ItemMapping"></api-link></dt><dd id="layout-layout_data-168-listitem-003">\n<p id="layout-layout_data-168-simpara-008">Sets a map containing the actual mapping from the elements to the values.</p>\n</dd>\n<dt id="layout-layout_data-168-term-005" class="title" role="title">ItemCollection</dt><dt id="layout-layout_data-168-term-006"><api-link id="layout-layout_data-168-api-link-007" data-member="items" data-text="items:&#xA0;ICollection&lt;TItem&gt;" data-type="yfiles.layout.ItemCollection"></api-link></dt><dd id="layout-layout_data-168-listitem-004">\n<p id="layout-layout_data-168-simpara-009">Sets the items that this instance should contain.</p>\n</dd>\n<dt id="layout-layout_data-168-term-007"><api-link id="layout-layout_data-168-api-link-008" data-member="delegate" data-text="delegate:&#xA0;Predicate&lt;TItem&gt;" data-type="yfiles.layout.ItemCollection"></api-link></dt><dd id="layout-layout_data-168-listitem-005">\n<p id="layout-layout_data-168-simpara-010">Sets a predicate that is called for each given element whether this element is contained in this collection.</p>\n</dd>\n<dt id="layout-layout_data-168-term-008"><api-link id="layout-layout_data-168-api-link-009" data-member="mapper" data-text="mapper:&#xA0;IMapper&lt;TItem,&#xA0;boolean&gt;" data-type="yfiles.layout.ItemCollection"></api-link></dt><dd id="layout-layout_data-168-listitem-006">\n<p id="layout-layout_data-168-simpara-011">Sets a map that defines boolean values for each element whether this element is contained in this collection.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-012",content:'For example, the following code snippet configures\na <span class="api">LayoutData</span> object for <api-link id="layout-layout_data-168-api-link-010" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>:'},{tagname:"example",id:"ex_layout_data",title:"Example for a custom LayoutData",content:'<pre class="programlisting javascript" id="layout-layout_data-168-programlisting-002" language="javascript" format="linespecific"><code>initLayoutData() {\r\n  // create a new instance of layout data for the hierarchic layout\r\n  const data = new yfiles.hierarchic.HierarchicLayoutData()\r\n\r\n  // as an example, set the edge thickness for all edges to a small value\r\n  const mapping = new yfiles.layout.ItemMapping()\r\n  mapping.constant = 0.5\r\n  data.edgeThickness = mapping\r\n\r\n  // next, we set up node halos for nodes that have a color set as tag\r\n  const halos = new yfiles.layout.ItemMapping()\r\n  halos.delegate = node => node.tag !== null ? yfiles.layout.NodeHalo.create(15) : yfiles.layout.NodeHalo.ZERO_HALO\r\n  data.nodeHalos = halos\r\n\r\n  // In this example, we define port constraints for colored nodes:\r\n  // Blue nodes have all their incoming and outgoing edges on the east, and red nodes on the west.\r\n  const spcs = new yfiles.layout.ItemMapping()\r\n  spcs.delegate = edge => getPortConstraintForEdge(edge, true)\r\n  data.sourcePortConstraints = spcs\r\n\r\n  const tpcs = new yfiles.layout.ItemMapping()\r\n  tpcs.delegate = edge => getPortConstraintForEdge(edge, false)\r\n  data.targetPortConstraints = tpcs\r\n\r\n  return data\r\n}\r\n\r\nconst\r\nWEST = yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.WEST)\r\nconst\r\nEAST = yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.EAST)\r\nconst\r\nANY = yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.ANY)\r\n\r\ngetPortConstraintForEdge(edge, source) {\r\n  var color = source ? edge.sourceNode.tag : edge.targetNode.tag\r\n  return color == yfiles.view.Fill.RED ? WEST\r\n    : color == yfiles.view.Fill.BLUE ? EAST\r\n      : ANY\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout-layout_data-168-simpara-013",content:'This configuration changes the edge thickness, node halos and port constraints for various nodes with only a few lines of code.\nThe <span class="api">LayoutData</span> tells the layout algorithm to consider the edges as a bit thicker than usual, to provide\nnode halos for nodes that are colored red or blue and additionally that it should arrange the nodes and route the edges such\nthat blue nodes always have all incoming and outgoing edges on the east side and red nodes always on the west side. The effect\nof this configuration changes the resulting layout significantly with only a few lines of code, as shown in <a href="#/dguide/fig_layout_data">Layout Data</a>:'},{tagname:"figure","class":"image",title:"",id:"fig_layout_data","float":0,children:[{tagname:"img",src:"assets/intro_application_standard.f80bbf39.png",alt:"",title:'<para class="dguide-para">A graph laid out with a standard <span class="api">HierarchicLayout</span>.</para>'},{tagname:"img",src:"assets/intro_application_withdata.9e60ff7e.png",alt:"",title:'<para class="dguide-para">A graph laid out with the same layout algorithm and the layout data defined in <a href="#/dguide/ex_layout_data">Example for a custom LayoutData</a>.</para>'}]}]},{tagname:"section",id:"layout-layout_morphing",title:"Configuring the Layout Morphing",children:[{tagname:"para","class":"dguide-para",id:"layout-layout_morphing-169-simpara-001",content:'To configure and customize either the creation of the layout graph or the animation from old to new layout,\nyou can apply the layout using the <api-link id="layout-layout_morphing-169-api-link-001" data-member="" data-text="LayoutExecutor" data-type="yfiles.layout.LayoutExecutor"></api-link> class instead of using the\n<span class="api">morphLayout</span> convenience method.'},{tagname:"example",id:"ex_layout_executor",title:"Using the LayoutExecutor class to customize the layout morphing of an automatic layout",content:'<pre class="programlisting javascript" id="layout-layout_morphing-169-programlisting-001" language="javascript" format="linespecific"><code>const layout = new yfiles.hierarchic.HierarchicLayout()\r\n// configure layout algorithm options ...\r\n\r\nconst data = new yfiles.hierarchic.HierarchicLayoutData()\r\n// configure graph specific options ...\r\n\r\nconst layoutExecutor = new yfiles.layout.LayoutExecutor(graphComponent, layout)\r\nlayoutExecutor.layoutData = data\r\n// configure the LayoutExecutor ...\r\nlayoutExecutor.start()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout-layout_morphing-169-simpara-002",content:"The following options affect the layout animation:"},{tagname:"para",content:'<dl id="layout-layout_morphing-169-variablelist-001"><dt id="layout-layout_morphing-169-term-001"><api-link id="layout-layout_morphing-169-api-link-002" data-member="duration" data-text="duration" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-001"><p id="layout-layout_morphing-169-simpara-003">The duration of the animation. A duration of <code>0</code> disables the animation. Instead, the new layout\nis adopted without delay as soon as its calculation has finished.</p></dd><dt id="layout-layout_morphing-169-term-002"><api-link id="layout-layout_morphing-169-api-link-003" data-member="animateViewport" data-text="animateViewport" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-002"><p id="layout-layout_morphing-169-simpara-004">Specifies whether to animate the viewport.</p></dd><dt id="layout-layout_morphing-169-term-003"><api-link id="layout-layout_morphing-169-api-link-004" data-member="easedAnimation" data-text="easedAnimation" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-003"><p id="layout-layout_morphing-169-simpara-005">Specifies whether to use eased animation.</p></dd><dt id="layout-layout_morphing-169-term-004"><api-link id="layout-layout_morphing-169-api-link-005" data-member="updateContentRect" data-text="updateContentRect" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-004"><p id="layout-layout_morphing-169-simpara-006">Specifies whether the content rectangle of the <span class="api">GraphComponent</span> should be updated upon completion.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"layout-layout_morphing-169-simpara-007",content:"The following options affect the way the layout graph is created:"},{tagname:"para",content:'<dl id="layout-layout_morphing-169-variablelist-002"><dt id="layout-layout_morphing-169-term-005"><api-link id="layout-layout_morphing-169-api-link-006" data-member="automaticEdgeGrouping" data-text="automaticEdgeGrouping" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-005"><p id="layout-layout_morphing-169-simpara-008">Specifies whether <a href="#/dguide/layout-edge_grouping">edge groups</a> are automatically created for edges\nthat are connected to the same port.</p></dd><dt id="layout-layout_morphing-169-term-006"><api-link id="layout-layout_morphing-169-api-link-007" data-member="fixPorts" data-text="fixPorts" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-006"><p id="layout-layout_morphing-169-simpara-009">Specifies whether <a href="#/dguide/layout-port_locations">strong port constraints</a> are automatically created.</p></dd><dt id="layout-layout_morphing-169-term-007"><api-link id="layout-layout_morphing-169-api-link-008" data-member="tableLayoutConfigurator" data-text="tableLayoutConfigurator" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-007"><p id="layout-layout_morphing-169-simpara-010">The type that is responsible for adding <a href="#/dguide/layout-table_layout">table information</a> to the layout graph.</p></dd><dt id="layout-layout_morphing-169-term-008"><api-link id="layout-layout_morphing-169-api-link-009" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.layout.LayoutExecutor"></api-link></dt><dd id="layout-layout_morphing-169-listitem-008"><p id="layout-layout_morphing-169-simpara-011">The type that provides an abort mechanism for layout calculations. See section\n<a href="#/dguide/layout-abort_handler">Aborting Layout Calculations</a> for details.</p></dd></dl>'}]},{tagname:"section",id:"layout-abort_handler",title:"Aborting Layout Calculations",children:[{tagname:"para","class":"dguide-para",id:"layout-abort_handler-170-simpara-001",content:'All layout styles provided by yFiles support an abort mechanism with the aid of\nthe <api-link id="layout-abort_handler-170-api-link-001" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> class.\nOnce an abort handler is attached to a graph, it can be used to trigger\n<api-link id="layout-abort_handler-170-api-link-002" data-member="stop()" data-text="early termination (stop)" data-type="yfiles.algorithms.AbortHandler"></api-link> of the current layout\ncalculation.'},{tagname:"para",content:'<dl id="layout-abort_handler-170-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout-abort_handler-170-term-001"><api-link id="layout-abort_handler-170-api-link-003" data-member="stop()" data-text="stop():&#xA0;void" data-type="yfiles.algorithms.AbortHandler"></api-link></dt><dd id="layout-abort_handler-170-listitem-001">\n<p id="layout-abort_handler-170-simpara-002">Method to trigger termination of layout calculations.</p>\n</dd>\n<dt id="layout-abort_handler-170-term-002"><api-link id="layout-abort_handler-170-api-link-004" data-member="stopDuration" data-text="stopDuration" data-type="yfiles.algorithms.AbortHandler"></api-link></dt><dt id="layout-abort_handler-170-term-003"><api-link id="layout-abort_handler-170-api-link-005" data-member="cancelDuration" data-text="cancelDuration" data-type="yfiles.algorithms.AbortHandler"></api-link></dt><dd id="layout-abort_handler-170-listitem-002">\n<p id="layout-abort_handler-170-simpara-003">Properties to specify runtime thresholds (in milliseconds) before terminating a\nlayout calculation. A value of <code>0</code> means no premature termination.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"layout-abort_handler-170-simpara-004",content:"Stopping the layout calculation results in early but not immediate termination.\nThe layout algorithm still delivers a consistent result.\nCanceling, in contrast, will end layout calculation instantly, throwing an <code>AlgorithmAbortedException</code>\nand all work done so far by the algorithm will be discarded."},{tagname:"warning",id:"layout-abort_handler-170-warning-001",children:[{tagname:"para","class":"dguide-para",id:"layout-abort_handler-170-simpara-005",content:'When layout calculation is ended instantly, the state of the <span class="api">ILayoutAlgorithm</span> instance may become corrupted.\nHence, you have to create a new instance after each cancellation.'}]},{tagname:"para","class":"dguide-para",id:"layout-abort_handler-170-simpara-006",content:'The <span class="api">AbortHandler</span> can be used in two ways:'},{tagname:"para",content:'<ol id="layout-abort_handler-170-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="layout-abort_handler-170-listitem-003"><p id="layout-abort_handler-170-simpara-007">Each <a href="#/dguide/layout-layout_data">LayoutData</a> provides\nan <span class="api">AbortHandler</span> instance that can be used to abort\nthe layout calculation:</p></li></ol>'},{tagname:"example",id:"ex_how_to_abort_layout_using_layoutdata",title:"Aborting a layout calculation using layout data",content:'<pre class="programlisting javascript" id="layout-abort_handler-170-programlisting-001" language="javascript" format="linespecific"><code>startLayout(graphComponent) {\r\n\r\n  const layout = new yfiles.hierarchic.HierarchicLayout()\r\n  // configure layout algorithm options ...\r\n\r\n  const data = new yfiles.hierarchic.HierarchicLayoutData()\r\n  // configure graph specific options ...\r\n\r\n  // save AbortHandler for later use\r\n  this.abortHandler = data.abortHandler\r\n\r\n  // start the layout calculation\r\n  graphComponent.morphLayout(layout, yfiles.lang.TimeSpan.fromMilliseconds(250), data)\r\n}\r\n\r\nstopLayout() {\r\n  // abort the layout calculation\r\n  if (this.abortHandler != null) {\r\n    this.abortHandler.stop()\r\n  }\r\n}\n</code></pre>'},{tagname:"para",content:'<ol id="layout-abort_handler-170-orderedlist-002" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="layout-abort_handler-170-listitem-004"><p id="layout-abort_handler-170-simpara-008">If you do not use <span class="api">LayoutData</span>, you can abort\nthe layout calculation with the <span class="api">AbortHandler</span> provided\nby the <api-link id="layout-abort_handler-170-api-link-006" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.layout.LayoutExecutor"></api-link> property of the\n<span class="api">LayoutExecutor</span> class:</p></li></ol>'},{tagname:"example",id:"ex_how_to_abort_layout_using_layoutexecuter",title:"Aborting a layout calculation using LayoutExecutor",content:'<pre class="programlisting javascript" id="layout-abort_handler-170-programlisting-002" language="javascript" format="linespecific"><code>startLayout(graphComponent) {\r\n  const layout = new yfiles.hierarchic.HierarchicLayout()\r\n  // configure layout algorithm options ...\r\n\r\n  const data = new yfiles.hierarchic.HierarchicLayoutData()\r\n  // configure graph specific options ...\r\n\r\n  const layoutExecutor = new yfiles.layout.LayoutExecutor(graphComponent, layout)\r\n  // configure the LayoutExecutor ...\r\n\r\n  // save AbortHandler for later use\r\n  this.abortHandler = layoutExecutor.abortHandler\r\n\r\n  // start the layout calculation\r\n  layoutExecutor.start()\r\n}\r\n\r\nstopLayout() {\r\n  // abort the layout calculation\r\n  if (this.abortHandler != null) {\r\n    this.abortHandler.stop()\r\n  }\r\n}\n</code></pre>'}]}]},{tagname:"section",id:"layout-layout_stages",title:"Layout Stages",children:[{tagname:"para","class":"dguide-para",id:"layout-layout_stages-171-simpara-001",content:'The task of a layout algorithm is a major undertaking that involves arbitrarily complex logic.\nHowever, a number of well-defined (sub-)tasks can be identified that even completely different\nalgorithms do in a similar manner.\nyFiles factors out such tasks into <span class="def">layout stages</span> and re-uses them in various contexts.'},{tagname:"para","class":"dguide-para",id:"layout-layout_stages-171-simpara-002",content:"In addition to these distinct tasks, more complex layout algorithms and even the full-fledged\nlayout styles and edge routers are implemented as layout stages, too.\nThese layout stages can be plugged together to realize complex layout processes tailored to your\nrequirements."},{tagname:"section",id:"layout-layout_stage_concept",title:"The Layout Stage Concept",children:[{tagname:"para","class":"dguide-para",id:"layout-layout_stage_concept-172-simpara-001",content:'A layout stage serves as a kind of container that encapsulates arbitrary layout\nfunctionality, and provides a general means to string together multiple stages\ninto a compound layout process.\nInterface <api-link id="layout-layout_stage_concept-172-api-link-001" data-member="" data-text="ILayoutStage" data-type="yfiles.layout.ILayoutStage"></api-link> defines the basis for a layout stage.'},{tagname:"para","class":"dguide-para note",id:"layout-layout_stage_concept-172-note-001",content:'<p id="layout-layout_stage_concept-172-simpara-002"><api-link id="layout-layout_stage_concept-172-api-link-002" data-member="" data-text="ILayoutStage" data-type="yfiles.layout.ILayoutStage"></api-link> is a specialization of the <api-link id="layout-layout_stage_concept-172-api-link-003" data-member="" data-text="ILayoutAlgorithm" data-type="yfiles.layout.ILayoutAlgorithm"></api-link> interface, and\nthus can be used as a stand-alone layout provider as well as a part of a larger layout process.</p>'},{tagname:"para","class":"dguide-para",id:"layout-layout_stage_concept-172-simpara-003",content:"When used in the context of a larger layout process, a layout stage can easily be used to simplify\nthe core layout algorithm’s task. It can perform preprocessing steps on the input graph before the\ncore algorithm’s invocation, and/or post-processing steps thereafter."},{tagname:"para","class":"dguide-para",id:"layout-layout_stage_concept-172-simpara-004",content:'The following layout stages are part of each major layout algorithm since they are part of the\n<a href="#/dguide/layout-multi_stage">default multi-stage layout pipeline</a>:'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_stages",rowsep:1,content:'<caption>Predefined layout stages</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="layout-layout_stage_concept-172-thead-001"><tr id="layout-layout_stage_concept-172-row-001"><th id="layout-layout_stage_concept-172-entry-001" align="left" valign="top">\nClass Name\n</th><th id="layout-layout_stage_concept-172-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="layout-layout_stage_concept-172-tbody-001"><tr id="layout-layout_stage_concept-172-row-002"><td id="layout-layout_stage_concept-172-entry-003" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-005"><api-link id="layout-layout_stage_concept-172-api-link-004" data-member="" data-text="OrientationLayout" data-type="yfiles.layout.OrientationLayout"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-004" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-006">Changes the orientation of a computed layout.</para></td></tr><tr id="layout-layout_stage_concept-172-row-003"><td id="layout-layout_stage_concept-172-entry-005" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-007"><api-link id="layout-layout_stage_concept-172-api-link-005" data-member="" data-text="ComponentLayout" data-type="yfiles.layout.ComponentLayout"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-006" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-008">Calls the core layout for each connected component separately and finally arranges these components.</para></td></tr><tr id="layout-layout_stage_concept-172-row-004"><td id="layout-layout_stage_concept-172-entry-007" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-009"><api-link id="layout-layout_stage_concept-172-api-link-006" data-member="" data-text="SubgraphLayout" data-type="yfiles.layout.SubgraphLayout"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-008" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-010">Reduces the original graph to the subgraph that is induced by selected nodes.</para></td></tr><tr id="layout-layout_stage_concept-172-row-005"><td id="layout-layout_stage_concept-172-entry-009" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-011"><api-link id="layout-layout_stage_concept-172-api-link-007" data-member="" data-text="SelfLoopRouter" data-type="yfiles.layout.SelfLoopRouter"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-010" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-012">Calculates orthogonal edge paths for a graph’s self-loops (reflexive edges).</para></td></tr><tr id="layout-layout_stage_concept-172-row-006"><td id="layout-layout_stage_concept-172-entry-011" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-013"><api-link id="layout-layout_stage_concept-172-api-link-008" data-member="" data-text="ParallelEdgeRouter" data-type="yfiles.router.ParallelEdgeRouter"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-012" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-014">Calculates edge paths for all edges with identical source node and target node.\n  (Self-loops are not processed.)</para></td></tr><tr id="layout-layout_stage_concept-172-row-007"><td id="layout-layout_stage_concept-172-entry-013" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-015"><api-link id="layout-layout_stage_concept-172-api-link-009" data-member="" data-text="HideGroupsStage" data-type="yfiles.layout.HideGroupsStage"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-014" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-016">Hides group nodes during the core layout.</para></td></tr><tr id="layout-layout_stage_concept-172-row-008"><td id="layout-layout_stage_concept-172-entry-015" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-017"><a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, <api-link id="layout-layout_stage_concept-172-api-link-010" data-member="" data-text="GenericLabeling" data-type="yfiles.labeling.GenericLabeling"></api-link></para></td><td id="layout-layout_stage_concept-172-entry-016" align="left" valign="top"><para class="dguide-para" id="layout-layout_stage_concept-172-simpara-018">Places labels.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"layout-layout_stage_concept-172-simpara-019",content:"The following layout stages are not part of the default pipeline but can be used to enhance\nthe layout process nevertheless:"},{tagname:"para",content:'<dl id="layout-layout_stage_concept-172-variablelist-001"><dt id="layout-layout_stage_concept-172-term-001"><api-link id="layout-layout_stage_concept-172-api-link-011" data-member="" data-text="RecursiveGroupLayout" data-type="yfiles.layout.RecursiveGroupLayout"></api-link></dt><dd id="layout-layout_stage_concept-172-listitem-001"><p id="layout-layout_stage_concept-172-simpara-020">Applies a specified layout algorithm to the direct children of each group node (recursively).</p></dd><dt id="layout-layout_stage_concept-172-term-002"><a href="#/dguide/layout_graphlayoutlinewrapper">GraphLayoutLineWrapper</a></dt><dd id="layout-layout_stage_concept-172-listitem-002"><p id="layout-layout_stage_concept-172-simpara-021">Line-wraps or column-wraps a graph layout to accomplish a desired aspect ratio or fixed width or height.</p></dd><dt id="layout-layout_stage_concept-172-term-003"><api-link id="layout-layout_stage_concept-172-api-link-012" data-member="" data-text="LayoutMultiplexer" data-type="yfiles.layout.LayoutMultiplexer"></api-link></dt><dd id="layout-layout_stage_concept-172-listitem-003"><p id="layout-layout_stage_concept-172-simpara-022">Applies different layout algorithms which are dynamically chosen at runtime by inspecting the nodes of the input graph.</p></dd><dt id="layout-layout_stage_concept-172-term-004"><api-link id="layout-layout_stage_concept-172-api-link-013" data-member="" data-text="FixGroupLayoutStage" data-type="yfiles.layout.FixGroupLayoutStage"></api-link></dt><dd id="layout-layout_stage_concept-172-listitem-004"><p id="layout-layout_stage_concept-172-simpara-023">Guarantees that a core layout algorithm will maintain the relative positions of nodes within the same group.</p></dd><dt id="layout-layout_stage_concept-172-term-005"><api-link id="layout-layout_stage_concept-172-api-link-014" data-member="" data-text="CompositeLayoutStage" data-type="yfiles.layout.CompositeLayoutStage"></api-link></dt><dd id="layout-layout_stage_concept-172-listitem-005"><p id="layout-layout_stage_concept-172-simpara-024">Combines multiple <span class="api">ILayoutStage</span>s organized in a pipeline.</p></dd></dl>'},{tagname:"para","class":"dguide-para note",id:"layout-layout_stage_concept-172-note-002",content:'<p id="layout-layout_stage_concept-172-simpara-025">All major layout algorithms are implemented as layout stages and thus can preprocess or postprocess\nanother layout. For example, this can be used to run edge routing or automatic labeling after any\nmajor layout.</p>'}]},{tagname:"section",id:"layout-multi_stage",title:"Default Multi-Stage Layout Pipeline",children:[{tagname:"para","class":"dguide-para",id:"layout-multi_stage-173-simpara-001",content:"All major layout algorithms take the concept of layout stages one step further and provide a\nconveniently configurable layout pipeline for performing preprocessing and postprocessing steps on\nthe input graph."},{tagname:"para","class":"dguide-para",id:"layout-multi_stage-173-simpara-002",content:'The pipeline of predefined <span class="api">ILayoutStage</span>s of <span class="api">MultiStageLayout</span> (when all are activated)\ncauses the following sequence of steps:'},{tagname:"para",content:'<ol id="layout-multi_stage-173-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="layout-multi_stage-173-listitem-001"><p id="layout-multi_stage-173-simpara-003">Hides the group nodes.</p></li><li id="layout-multi_stage-173-listitem-002"><p id="layout-multi_stage-173-simpara-004">Hides all except for the induced subgraph.</p></li><li id="layout-multi_stage-173-listitem-003"><p id="layout-multi_stage-173-simpara-005">Decomposes the graph into its connected components. Performs steps 4-12 on each component.</p></li><li id="layout-multi_stage-173-listitem-004"><p id="layout-multi_stage-173-simpara-006">Prepares for label placement.</p></li><li id="layout-multi_stage-173-listitem-005"><p id="layout-multi_stage-173-simpara-007">Prepares the layout for an orientation change.</p></li><li id="layout-multi_stage-173-listitem-006"><p id="layout-multi_stage-173-simpara-008">Hides self-loops.</p></li><li id="layout-multi_stage-173-listitem-007"><p id="layout-multi_stage-173-simpara-009">Hides parallel edges.</p></li><li id="layout-multi_stage-173-listitem-008"><p id="layout-multi_stage-173-simpara-010">Invokes the layout algorithm on the simplified graph.</p></li><li id="layout-multi_stage-173-listitem-009"><p id="layout-multi_stage-173-simpara-011">Un-hides and routes parallel edges.</p></li><li id="layout-multi_stage-173-listitem-010"><p id="layout-multi_stage-173-simpara-012">Un-hides and routes self-loops.</p></li><li id="layout-multi_stage-173-listitem-011"><p id="layout-multi_stage-173-simpara-013">Completes orientation change of the layout.</p></li><li id="layout-multi_stage-173-listitem-012"><p id="layout-multi_stage-173-simpara-014">Assigns label positions.</p></li><li id="layout-multi_stage-173-listitem-013"><p id="layout-multi_stage-173-simpara-015">Arranges the connected components of the graph.</p></li><li id="layout-multi_stage-173-listitem-014"><p id="layout-multi_stage-173-simpara-016">Un-hides non-induced subgraph.</p></li><li id="layout-multi_stage-173-listitem-015"><p id="layout-multi_stage-173-simpara-017">Un-hides the group nodes.</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"layout-multi_stage-173-simpara-018",content:'This layout pipeline is defined by the <api-link id="layout-multi_stage-173-api-link-001" data-member="" data-text="MultiStageLayout" data-type="yfiles.layout.MultiStageLayout"></api-link> class and provides all the\nlayout stages listed in <a href="#/dguide/tab_layout_stages">Predefined layout stages</a>. The following properties can be used to\nconfigure the pipeline:'},{tagname:"para",content:'<dl id="layout-multi_stage-173-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout-multi_stage-173-term-001"><api-link id="layout-multi_stage-173-api-link-002" data-member="disableAllStages()" data-text="disableAllStages" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-002"><api-link id="layout-multi_stage-173-api-link-003" data-member="hideGroupsStageEnabled" data-text="hideGroupsStageEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-003"><api-link id="layout-multi_stage-173-api-link-004" data-member="componentLayoutEnabled" data-text="componentLayoutEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-004"><api-link id="layout-multi_stage-173-api-link-005" data-member="orientationLayoutEnabled" data-text="orientationLayoutEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-005"><api-link id="layout-multi_stage-173-api-link-006" data-member="labelingEnabled" data-text="labelingEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-006"><api-link id="layout-multi_stage-173-api-link-007" data-member="selfLoopRouterEnabled" data-text="selfLoopRouterEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-007"><api-link id="layout-multi_stage-173-api-link-008" data-member="subgraphLayoutEnabled" data-text="subgraphLayoutEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-008"><api-link id="layout-multi_stage-173-api-link-009" data-member="parallelEdgeRouterEnabled" data-text="parallelEdgeRouterEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="layout-multi_stage-173-listitem-016">\n<p id="layout-multi_stage-173-simpara-019">Methods for enabling and disabling the predefined layout stages, and also for controlling\ntheir enabled state.</p>\n</dd>\n<dt id="layout-multi_stage-173-term-009"><api-link id="layout-multi_stage-173-api-link-010" data-member="appendStage(yfiles.layout.ILayoutStage)" data-text="appendStage(stage:&#xA0;ILayoutStage):&#xA0;void" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-010"><api-link id="layout-multi_stage-173-api-link-011" data-member="prependStage(yfiles.layout.ILayoutStage)" data-text="prependStage(stage:&#xA0;ILayoutStage):&#xA0;void" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-011"><api-link id="layout-multi_stage-173-api-link-012" data-member="removeStage(yfiles.layout.ILayoutStage)" data-text="removeStage(stage:&#xA0;ILayoutStage):&#xA0;void" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="layout-multi_stage-173-listitem-017">\n<p id="layout-multi_stage-173-simpara-020">Methods to add and remove individual layout stages.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"layout-multi_stage-173-simpara-021",content:'In <span class="api">MultiStageLayout</span>, all stages except\ngeneric labeling and subgraph layout are enabled by default. However, layout\nstyles that extend this class might disable more stages. Most notably, the hierarchical style\ndisables all stages except orientation layout.'},{tagname:"para","class":"dguide-para",id:"layout-multi_stage-173-simpara-022",content:"The layout stages themselves can be accessed using the following properties:"},{tagname:"para",content:'<dl id="layout-multi_stage-173-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="layout-multi_stage-173-term-012"><api-link id="layout-multi_stage-173-api-link-013" data-member="hideGroupsStage" data-text="hideGroupsStage" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-013"><api-link id="layout-multi_stage-173-api-link-014" data-member="componentLayout" data-text="componentLayout" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-014"><api-link id="layout-multi_stage-173-api-link-015" data-member="orientationLayout" data-text="orientationLayout" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-015"><api-link id="layout-multi_stage-173-api-link-016" data-member="labeling" data-text="labeling" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-016"><api-link id="layout-multi_stage-173-api-link-017" data-member="selfLoopRouter" data-text="selfLoopRouter" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-017"><api-link id="layout-multi_stage-173-api-link-018" data-member="subgraphLayout" data-text="subgraphLayout" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dt id="layout-multi_stage-173-term-018"><api-link id="layout-multi_stage-173-api-link-019" data-member="parallelEdgeRouter" data-text="parallelEdgeRouter" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="layout-multi_stage-173-listitem-018">\n<p id="layout-multi_stage-173-simpara-023">Properties for predefined layout stages.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"component_layout",title:"Layout of Unconnected Components",children:[{tagname:"para","class":"dguide-para",id:"component_layout-174-simpara-001",content:'The <api-link id="component_layout-174-api-link-001" data-member="" data-text="ComponentLayout" data-type="yfiles.layout.ComponentLayout"></api-link> class arranges the connected components of a graph.\nIt invokes its core layout algorithm on each of the input graph’s components and afterwards\narranges the separate components while keeping the relative layout within each component fixed.'},{tagname:"para","class":"dguide-para tip",id:"component_layout-174-tip-001",content:'<p id="component_layout-174-simpara-002"><span class="api">ComponentLayout</span> is already part of the\n<a href="#/dguide/layout-multi_stage">default multi-stage layout pipeline</a>.</p>'},{tagname:"para","class":"dguide-para",id:"component_layout-174-simpara-003",content:'Using <span class="api">ComponentLayout</span>’s services with a given <span class="api">ILayoutAlgorithm</span> implementation as its\ncore layout algorithm has several benefits:'},{tagname:"para",content:'<ul id="component_layout-174-itemizedlist-001"><li id="component_layout-174-listitem-001"><p id="component_layout-174-simpara-004">The core layout algorithm needs not be able to handle non-connected graphs itself.\nIt can safely assume that its input graph is connected.\nThis often simplifies the formulation of a core algorithm substantially.</p></li><li id="component_layout-174-listitem-002"><p id="component_layout-174-simpara-005">The core layout algorithm needs not be able to arrange the separate components of an\ninput graph. This is done by <span class="api">ComponentLayout</span>.</p></li><li id="component_layout-174-listitem-003"><p id="component_layout-174-simpara-006">Customization of the layout strategy used for arranging separate components can\nconveniently be done by tailoring, or even exchanging, the <span class="api">ComponentLayout</span>.\nAll core algorithms can take advantage of this customization immediately.</p></li><li id="component_layout-174-listitem-004"><p id="component_layout-174-simpara-007"><span class="api">ComponentLayout</span> objects can be used in conjunction with arbitrary core\nlayout algorithms, since the services provided by <span class="api">ComponentLayout</span> are highly\nreusable.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"component_layout-174-simpara-008",content:'Class <span class="api">ComponentLayout</span> provides a number of\n<a href="#/dguide/layout-layout_data">data provider keys</a> to specify supplemental layout data for the\ngraph elements:'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_component_keys",rowsep:1,content:'<caption>Data provider keys</caption><colgroup><col style="width:33%;"><col style="width:17%;"><col style="width:17%;"><col style="width:33%;"></colgroup><thead id="component_layout-174-thead-001"><tr id="component_layout-174-row-001"><th id="component_layout-174-entry-001" align="left" valign="top">\nKey\n</th><th id="component_layout-174-entry-002" align="left" valign="top">\nElement Type\n</th><th id="component_layout-174-entry-003" align="left" valign="top">\nValue Type\n</th><th id="component_layout-174-entry-004" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="component_layout-174-tbody-001"><tr id="component_layout-174-row-002"><td id="component_layout-174-entry-005" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-009"><api-link id="component_layout-174-api-link-002" data-member="AFFECTED_COMPONENTS_DP_KEY" data-text="AFFECTED_COMPONENTS_DP_KEY" data-type="yfiles.layout.ComponentLayout"></api-link></para></td><td id="component_layout-174-entry-006" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-010">Node</para></td><td id="component_layout-174-entry-007" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-011">boolean</para></td><td id="component_layout-174-entry-008" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-012">For each node a boolean value indicating whether it should be laid out or\nnot.</para></td></tr><tr id="component_layout-174-row-003"><td id="component_layout-174-entry-009" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-013"><api-link id="component_layout-174-api-link-003" data-member="COMPONENT_ID_DP_KEY" data-text="COMPONENT_ID_DP_KEY" data-type="yfiles.layout.ComponentLayout"></api-link></para></td><td id="component_layout-174-entry-010" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-014">Node</para></td><td id="component_layout-174-entry-011" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-015">Object</para></td><td id="component_layout-174-entry-012" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-016">For each node an arbitrary Object indicating the component it is affiliated\nwith.</para></td></tr><tr id="component_layout-174-row-004"><td id="component_layout-174-entry-013" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-017"><api-link id="component_layout-174-api-link-004" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="component_layout-174-entry-014" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-018">Node</para></td><td id="component_layout-174-entry-015" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-019">NodeHalo</para></td><td id="component_layout-174-entry-016" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-020">A <api-link id="component_layout-174-api-link-005" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo\nsizes at each side of a node.</para></td></tr><tr id="component_layout-174-row-005"><td id="component_layout-174-entry-017" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-021"><api-link id="component_layout-174-api-link-006" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="component_layout-174-entry-018" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-022">Graph</para></td><td id="component_layout-174-entry-019" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-023">AbortHandler</para></td><td id="component_layout-174-entry-020" align="left" valign="top"><para class="dguide-para" id="component_layout-174-simpara-024">An <api-link id="component_layout-174-api-link-007" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"component_layout-174-simpara-025",content:'The <span class="api">ComponentLayout</span> class provides a set of options that affect its behavior.'},{tagname:"para",content:'<dl id="component_layout-174-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="component_layout-174-term-001" class="title" role="title">Component Arrangement Style</dt><dt id="component_layout-174-term-002"><api-link id="component_layout-174-api-link-008" data-member="style" data-text="style" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-005">\n<p id="component_layout-174-simpara-026">Specifies the style for arranging the components of a graph.</p>\n</dd>\n<dt id="component_layout-174-term-003" class="title" role="title">Arranging Components</dt><dt id="component_layout-174-term-004"><api-link id="component_layout-174-api-link-009" data-member="componentArrangement" data-text="componentArrangement" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-006">\n<p id="component_layout-174-simpara-027">Determines whether the separate components should be arranged or not.\nBy default, component arrangement is enabled.</p>\n</dd>\n<dt id="component_layout-174-term-005" class="title" role="title">Component Spacing</dt><dt id="component_layout-174-term-006"><api-link id="component_layout-174-api-link-010" data-member="componentSpacing" data-text="componentSpacing" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-007">\n<p id="component_layout-174-simpara-028">Defines the minimum distance between the bounding boxes of adjacent components.</p>\n</dd>\n<dt id="component_layout-174-term-007" class="title" role="title">Grid Spacing</dt><dt id="component_layout-174-term-008"><api-link id="component_layout-174-api-link-011" data-member="gridSpacing" data-text="gridSpacing" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-008">\n<p id="component_layout-174-simpara-029">Defines the spacing of the grid on which the separate components are placed.</p>\n</dd>\n<dt id="component_layout-174-term-009" class="title" role="title">Label Awareness</dt><dt id="component_layout-174-term-010"><api-link id="component_layout-174-api-link-012" data-member="considerLabels" data-text="considerLabels" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-009">\n<p id="component_layout-174-simpara-030">Determines whether labels are taken into account when computing the\nbounding boxes of components.</p>\n</dd>\n<dt id="component_layout-174-term-011" class="title" role="title">Support for Grouped Graphs</dt><dt id="component_layout-174-term-012"><api-link id="component_layout-174-api-link-013" data-member="considerGrouping" data-text="considerGrouping" data-type="yfiles.layout.ComponentLayout"></api-link></dt><dd id="component_layout-174-listitem-010">\n<p id="component_layout-174-simpara-031">Specifies whether the grouped graph’s hierarchy of nodes is taken into account when\ndetermining its components.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"layout_graphlayoutlinewrapper",title:"Wrapping Wide or High Layouts",children:[{tagname:"para","class":"dguide-para",id:"layout_graphlayoutlinewrapper-175-simpara-001",content:'The <api-link id="layout_graphlayoutlinewrapper-175-api-link-001" data-member="" data-text="GraphLayoutLineWrapper" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link> class is a\nlayout stage that can be used to <strong id="layout_graphlayoutlinewrapper-175-emphasis-001" class="bold" role="bold">line-wrap</strong> or <strong id="layout_graphlayoutlinewrapper-175-emphasis-002" class="bold" role="bold">column-wrap</strong> a\ngraph layout, respectively.\nIt allows, for example, to specify a desired aspect ratio for a wrapped layout,\nor a fixed width (height) for the lines (columns) of a wrapped layout.'},{tagname:"para","class":"dguide-para",id:"layout_graphlayoutlinewrapper-175-simpara-002",content:'Most commonly, the <span class="api">GraphLayoutLineWrapper</span> class is used in conjunction with\nhierarchical layouts.\n<a href="#/dguide/fig_layout_graphlayoutlinewrapper">Hierarchical layout before and after line-wrapping</a> presents a hierarchical layout that has been\nline-wrapped to achieve a desired aspect ratio.'},{tagname:"figure","class":"image",title:"Hierarchical layout before and after line-wrapping",id:"fig_layout_graphlayoutlinewrapper","float":0,children:[{tagname:"img",src:"assets/graphlayoutlinewrapper_hierarchic_non_wrapped.19909290.jpg",alt:"",title:'<para class="dguide-para">Extended hierarchical left-to-right layout.</para>'},{tagname:"img",src:"assets/graphlayoutlinewrapper_hierarchic_line_wrapped_mirrored.973f4afb.jpg",alt:"",title:'<para class="dguide-para">The same graph line-wrapped so that width and height are nearly the same, i.e., an aspect ratio of 1.0 is nearly achieved.</para>'}]},{tagname:"para","class":"dguide-para",id:"layout_graphlayoutlinewrapper-175-simpara-003",content:'<a href="#/dguide/ex_layout_graphlayoutlinewrapper">Using GraphLayoutLineWrapper in conjunction with hierarchical layout</a> shows how the <span class="api">GraphLayoutLineWrapper</span> class can\nbe used to wrap hierarchical top-to-bottom layouts.'},{tagname:"example",id:"ex_layout_graphlayoutlinewrapper",title:"Using GraphLayoutLineWrapper in conjunction with hierarchical layout",content:'<pre class="programlisting javascript" id="layout_graphlayoutlinewrapper-175-programlisting-001" language="javascript" format="linespecific"><code>const gllw = new yfiles.layout.GraphLayoutLineWrapper()\r\ngllw.columnMode = true\r\ngllw.mirror = false\r\n// Use grouping-aware hierarchical layout as the core layout.\r\ngllw.coreLayout = new yfiles.hierarchic.HierarchicLayout()\r\n\r\n// Invoke the layout.\r\ngraph.applyLayout(gllw)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graphlayoutlinewrapper-175-simpara-004",content:'<span class="api">GraphLayoutLineWrapper</span> provides a set of options that influence its behavior.'},{tagname:"para",content:'<dl id="layout_graphlayoutlinewrapper-175-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout_graphlayoutlinewrapper-175-term-001" class="title" role="title">Column Mode</dt><dt id="layout_graphlayoutlinewrapper-175-term-002"><api-link id="layout_graphlayoutlinewrapper-175-api-link-002" data-member="columnMode" data-text="columnMode" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-001">\n<p id="layout_graphlayoutlinewrapper-175-simpara-005">Determines whether the graph layout should be column-wrapped instead of line-wrapped.</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-003" class="title" role="title">Spacing</dt><dt id="layout_graphlayoutlinewrapper-175-term-004"><api-link id="layout_graphlayoutlinewrapper-175-api-link-003" data-member="spacing" data-text="spacing" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-002">\n<p id="layout_graphlayoutlinewrapper-175-simpara-006">Defines the spacing between adjacent lines (columns) of the line-wrapped (column-wrapped)\ngraph layout.</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-005" class="title" role="title">Edge Spacing</dt><dt id="layout_graphlayoutlinewrapper-175-term-006"><api-link id="layout_graphlayoutlinewrapper-175-api-link-004" data-member="edgeSpacing" data-text="edgeSpacing" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-003">\n<p id="layout_graphlayoutlinewrapper-175-simpara-007">Defines the spacing between adjacent edge paths that connect consecutive lines (columns)\nof the line-wrapped (column-wrapped) graph layout.</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-007" class="title" role="title">Mirroring</dt><dt id="layout_graphlayoutlinewrapper-175-term-008"><api-link id="layout_graphlayoutlinewrapper-175-api-link-005" data-member="mirror" data-text="mirror" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-004">\n<p id="layout_graphlayoutlinewrapper-175-simpara-008">Determines whether the lines (columns) of the line-wrapped (column-wrapped) graph\nlayout should be arranged in an alternating manner so that every second line (column)\ngoes from right to left (bottom to top) instead of left to right (top to bottom).</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-009" class="title" role="title">Pre-set vs. Automatic Line Width (Column Height)</dt><dt id="layout_graphlayoutlinewrapper-175-term-010"><api-link id="layout_graphlayoutlinewrapper-175-api-link-006" data-member="fixedWidthLineBreaks" data-text="fixedWidthLineBreaks" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-005">\n<p id="layout_graphlayoutlinewrapper-175-simpara-009">Determines whether the lines (columns) of the line-wrapped (column-wrapped) graph\nlayout should use the width (height) as set using <api-link id="layout_graphlayoutlinewrapper-175-api-link-007" data-member="fixedWidth" data-text="fixedWidth" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link>.</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-011" class="title" role="title">Fixed Line Width (Column Height)</dt><dt id="layout_graphlayoutlinewrapper-175-term-012"><api-link id="layout_graphlayoutlinewrapper-175-api-link-008" data-member="fixedWidth" data-text="fixedWidth" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-006">\n<p id="layout_graphlayoutlinewrapper-175-simpara-010">Defines the width (height) that should be used for the lines (columns) of the line-wrapped\n(column-wrapped) graph layout.\nThis setting only has an effect if pre-set line width (column height) is enabled.</p>\n</dd>\n<dt id="layout_graphlayoutlinewrapper-175-term-013" class="title" role="title">Aspect Ratio</dt><dt id="layout_graphlayoutlinewrapper-175-term-014"><api-link id="layout_graphlayoutlinewrapper-175-api-link-009" data-member="targetRatio" data-text="targetRatio" data-type="yfiles.layout.GraphLayoutLineWrapper"></api-link></dt><dd id="layout_graphlayoutlinewrapper-175-listitem-007">\n<p id="layout_graphlayoutlinewrapper-175-simpara-011">Defines the desired aspect ratio that should be achieved for the line-wrapped (column-wrapped)\ngraph layout.\nThis setting only has an effect if automatic line width (column height) is enabled.</p>\n</dd>\n</dl>'}]}]},{tagname:"section",id:"label_placement",title:"Automatic Label Placement",children:[{tagname:"para","class":"dguide-para",id:"label_placement-176-simpara-001",content:"\n\nNodes and edges can have one or more labels\nthat can be used to show descriptive text for the element.\nThe label’s purpose is served best when it is both readable and also near its\nelement, where readability most importantly results from the label being placed\nso that it does not overlap with other graph elements."},{tagname:"para","class":"dguide-para",id:"label_placement-176-simpara-002",content:"The yFiles library offers advanced labeling algorithms that automatically\ngenerate label arrangements that, whenever feasible, completely eliminate all\noverlaps, or minimize the number thereof otherwise.\nLabeling algorithms can be applied in two different scenarios: generic labeling\nand integrated labeling."},{tagname:"section",id:"label_placement-scenarios",title:"Labeling Scenarios",children:[{tagname:"para","class":"dguide-para",id:"label_placement-scenarios-177-simpara-001",content:'\n\n<a href="#/dguide/label_placement-generic_labeling">Generic labeling</a> is independent of any layout\nalgorithms and can be applied to any kind of diagram.\nIt generates label placements without altering node positions, node sizes, or\nedge paths.'},{tagname:"para","class":"dguide-para",id:"label_placement-scenarios-177-simpara-002",content:'<a href="#/dguide/label_placement-integrated_labeling">Integrated labeling</a>, in contrast, is\ndirectly provided by some layout algorithms as an integrated part of the layout\ncalculation.\nIt allows to consider labels as part of the overall layout.'},{tagname:"para","class":"dguide-para",id:"label_placement-scenarios-177-simpara-003",content:"Integrated labeling’s advantage is that, by design, it can prevent label overlaps\ncompletely.\nGeneric labeling cannot always achieve this, since it has to deal with the existing\nnode positions, node sizes, and edge paths.\nOn the other hand, however, the graph’s dimensions will remain constant or grow\nonly minimally with generic labeling."},{tagname:"para","class":"dguide-para",id:"label_placement-scenarios-177-simpara-004",content:"Additionally, generic labeling also supports placement of rotated labels, which\ncovers both maintaining a preset rotation angle as well as finding edge label positions\nwhere the rotation is determined by the labeling algorithm, too."}]},{tagname:"section",id:"label_placement-label_models",title:"Label Models",children:[{tagname:"para","class":"dguide-para",id:"label_placement-label_models-178-simpara-001",content:"\n\n\n\n\n\nAssociated with labels is a so-called “label model,” that\ndefines a set of valid positions where the label can be placed relative to its\nrespective graph element.\nIn the context of automatic label placement, all valid positions are at the\nsame time “candidates” among which a labeling algorithm can choose the best\nmatch to ultimately place the label."},{tagname:"para","class":"dguide-para note",id:"label_placement-label_models-178-note-001",content:'<p id="label_placement-label_models-178-simpara-002">In terms of minimization of overlaps, more candidates mean better prospects for\n      the outcome of a generic labeling algorithm.</p>'},{tagname:"para","class":"dguide-para",id:"label_placement-label_models-178-simpara-003",content:'For both generic labeling as well as integrated edge labeling, labels and label\nmodels are set up using the API provided by <span class="api">IGraph</span>.\nSee also the Label Support section in <a href="#/dguide/graph_model-labels">Labels</a>.'},{tagname:"para","class":"dguide-para",id:"label_placement-label_models-178-simpara-004",content:'For generic labeling around a node, <api-link id="label_placement-label_models-178-api-link-001" data-member="" data-text="FreeNodeLabelModel" data-type="yfiles.graph.FreeNodeLabelModel"></api-link> is a much better choice for\na node label model than any of the discrete node label models.\nHowever, <api-link id="label_placement-label_models-178-api-link-002" data-member="" data-text="FreeNodeLabelModel" data-type="yfiles.graph.FreeNodeLabelModel"></api-link> allows for unspecified label positions only, while the\npositions of the discrete node label models are all predefined.'},{tagname:"para","class":"dguide-para",id:"label_placement-label_models-178-simpara-005",content:'For generic labeling, <api-link id="label_placement-label_models-178-api-link-003" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link> or\n<api-link id="label_placement-label_models-178-api-link-004" data-member="" data-text="SmartEdgeLabelModel" data-type="yfiles.graph.SmartEdgeLabelModel"></api-link> with their large number of nearly continuous\npositions is the best choice for an edge label model, followed by the slider edge\nlabel models.'},{tagname:"para","class":"dguide-para",id:"label_placement-label_models-178-simpara-006",content:'Integrated labeling also favors <api-link id="label_placement-label_models-178-api-link-005" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link> or\n<api-link id="label_placement-label_models-178-api-link-006" data-member="" data-text="SmartEdgeLabelModel" data-type="yfiles.graph.SmartEdgeLabelModel"></api-link>, followed by the edge segment and edge path label models,\nsince it does not work with the candidates initially.\nInstead, it first computes an optimal location for the label, and then tries to\nfind the best matching label position for that location in the given label model.'
}]},{tagname:"section",id:"label_placement-preferred_placement",title:"Preferred Placement of Edge Labels",children:[{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-001",content:'\n\nClass <api-link id="label_placement-preferred_placement-179-api-link-001" data-member="" data-text="PreferredPlacementDescriptor" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link> can be\nused to configure preferred placement options and preferred rotation behavior for\nedge labels.\nWhen calculating edge label positions, the specified settings will be adhered to\nas good as possible by both the generic labeling algorithms as well as the layout\nalgorithms that support integrated labeling.'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-002",content:"Preferred placement options include, for example, whether an edge label shall be\npositioned"},{tagname:"para",content:'<ul id="label_placement-preferred_placement-179-itemizedlist-001"><li id="label_placement-preferred_placement-179-listitem-001"><p id="label_placement-preferred_placement-179-simpara-003">on or to the side of the path of its edge</p></li><li id="label_placement-preferred_placement-179-listitem-002"><p id="label_placement-preferred_placement-179-simpara-004">near the source node, at the center of the edge path, or near the target node</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-005",content:"Preferred rotation behavior includes, for example, whether"},{tagname:"para",content:'<ul id="label_placement-preferred_placement-179-itemizedlist-002"><li id="label_placement-preferred_placement-179-listitem-003"><p id="label_placement-preferred_placement-179-simpara-006">the edge label’s rotation angle shall be interpreted absolute or relative to the\nslope of its corresponding edge segment</p></li><li id="label_placement-preferred_placement-179-listitem-004"><p id="label_placement-preferred_placement-179-simpara-007">the rotation angle of an edge label on the right side of its edge shall be additionally\nmodified to achieve a mirrored orientation compared to an otherwise identically\nconfigured edge label on the left</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-008",content:'The edge label configurations supported by class PreferredPlacementDescriptor only\nmake sense when the edge label is associated with a label model that supports label\nrotation and that does not restrict edge label placement to discrete positions.\nIn particular, this applies to the "free" label models <api-link id="label_placement-preferred_placement-179-api-link-002" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link> or\n<api-link id="label_placement-preferred_placement-179-api-link-003" data-member="" data-text="SmartEdgeLabelModel" data-type="yfiles.graph.SmartEdgeLabelModel"></api-link>,\nbut also to the edge path or edge segment label models.'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-009",content:'The following property defined in interface <api-link id="label_placement-preferred_placement-179-api-link-004" data-member="" data-text="IEdgeLabelLayout" data-type="yfiles.layout.IEdgeLabelLayout"></api-link>\nreturns the PreferredPlacementDescriptor instance that is associated with an edge\nlabel:'},{tagname:"para",content:'<dl id="label_placement-preferred_placement-179-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="label_placement-preferred_placement-179-term-001"><api-link id="label_placement-preferred_placement-179-api-link-005" data-member="preferredPlacementDescriptor" data-text="preferredPlacementDescriptor" data-type="yfiles.layout.IEdgeLabelLayout"></api-link></dt>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-010",content:"By default, the PreferredPlacementDescriptor instance that is associated with actual\nimplementations of interface IEdgeLabelLayout, like, e.g., instances of class EdgeLabelLayoutImpl,\nis immutable.\nThe immutability is a direct consequence of the descriptor instance being shared\namong newly created edge labels."},{tagname:"para","class":"dguide-para important",id:"label_placement-preferred_placement-179-important-001",content:'<p id="label_placement-preferred_placement-179-simpara-011">Every attempted assignment to a property of such an immutable PreferredPlacementDescriptor\n            instance will yield an exception.</p>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-012",content:"To properly configure individual preferred placement options for an edge label,\na dedicated descriptor instance needs to be associated with the label.\nThe following code snippet shows how this can be achieved:"},{tagname:"example",id:"label_placement-preferred_placement-179-example-001",title:"Creating and associating a new PreferredPlacementDescriptor to configure individual preferred placement options for an edge label",content:'<pre class="programlisting javascript" id="label_placement-preferred_placement-179-programlisting-001" language="javascript" format="linespecific"><code>// prepare the IGraph:\r\n// register a mapper for PreferredPlacementDescriptors at the IGraph\r\ngraph.mapperRegistry.createMapper(\r\n  yfiles.graph.ILabel.$class,\r\n  yfiles.layout.PreferredPlacementDescriptor.$class,\r\n  yfiles.layout.LayoutGraphAdapter.EDGE_LABEL_LAYOUT_PREFERRED_PLACEMENT_DESCRIPTOR_DP_KEY\r\n)\r\n\r\n// ...\r\n\r\n// get the descriptor mapper from the IGraph\r\nconst descriptorMapper = graph.mapperRegistry.getMapper(\r\n  yfiles.layout.LayoutGraphAdapter.EDGE_LABEL_LAYOUT_PREFERRED_PLACEMENT_DESCRIPTOR_DP_KEY\r\n)\r\n\r\n// create a preferred placement for the edge label...\r\nconst preferredPlacement = new yfiles.layout.PreferredPlacementDescriptor()\r\n// ... and configure it\r\npreferredPlacement.sideOfEdge = yfiles.layout.LabelPlacements.AT_CENTER\r\n// ...\r\n// Make it immutable (optional).\r\npreferredPlacement.freeze()\r\n\r\n// create a label and set the PreferredPlacementDescriptor\r\nconst edgeLabel = graph.addLabel(edge, \'MyLabel\')\r\ndescriptorMapper.set(edgeLabel, preferredPlacement)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-013",content:"The properties of class PreferredPlacementDescriptor to configure preferred placement\noptions are:"},{tagname:"para",content:'<dl id="label_placement-preferred_placement-179-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="label_placement-preferred_placement-179-term-002"><api-link id="label_placement-preferred_placement-179-api-link-006" data-member="sideOfEdge" data-text="sideOfEdge" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dt id="label_placement-preferred_placement-179-term-003"><api-link id="label_placement-preferred_placement-179-api-link-007" data-member="sideReference" data-text="sideReference" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dt id="label_placement-preferred_placement-179-term-004"><api-link id="label_placement-preferred_placement-179-api-link-008" data-member="distanceToEdge" data-text="distanceToEdge" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dt id="label_placement-preferred_placement-179-term-005"><api-link id="label_placement-preferred_placement-179-api-link-009" data-member="placeAlongEdge" data-text="placeAlongEdge" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dd id="label_placement-preferred_placement-179-listitem-005">\n<p id="label_placement-preferred_placement-179-simpara-014">Preferred placement options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-015",content:"An edge label can be placed at the side of the path of its edge.\nThe actual side can be specified both absolute and relative:"},{tagname:"figure","class":"image",title:"Absolute and relative edge label placement",id:"label_placement-preferred_placement-179-figure-001","float":0,children:[{tagname:"img",src:"assets/label_placement_elabel_prefplace_side_absolute.7efd9010.png",alt:"",title:'<para class="dguide-para">Absolute placement: left of the edge path when looking at the diagram.</para>'},{tagname:"img",src:"assets/label_placement_elabel_prefplace_side_relative_flow.dab44378.png",alt:"",title:'<para class="dguide-para">Relative placement: left of the edge path when looking from source to target along the edge path.</para>'}]},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-016",content:'Note that the <api-link id="label_placement-preferred_placement-179-api-link-010" data-member="sideReference" data-text="sideReference" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link>\nproperty provides the means to resolve the special case when the edge label’s side\nis specified as an absolute placement and its corresponding edge segment happens\nto be horizontal, i.e., when there is no actual left or right "side."'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-017",content:"The properties to configure preferred rotation behavior:"},{tagname:"para",content:'<dl id="label_placement-preferred_placement-179-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="label_placement-preferred_placement-179-term-006"><api-link id="label_placement-preferred_placement-179-api-link-011" data-member="angle" data-text="angle" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dt id="label_placement-preferred_placement-179-term-007"><api-link id="label_placement-preferred_placement-179-api-link-012" data-member="angleReference" data-text="angleReference" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dt id="label_placement-preferred_placement-179-term-008"><api-link id="label_placement-preferred_placement-179-api-link-013" data-member="angleRotationOnRightSide" data-text="angleRotationOnRightSide" data-type="yfiles.layout.PreferredPlacementDescriptor"></api-link></dt><dd id="label_placement-preferred_placement-179-listitem-006">\n<p id="label_placement-preferred_placement-179-simpara-018">Preferred rotation behavior.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-preferred_placement-179-simpara-019",content:"The arrow-shaped gradient in the background of the label denotes the orientation\nof its box.\nNote that in the right figure below the text of the left label is flipped: according\nto its box’s orientation, the text would actually be upside-down, but to be readable\nit is automatically rendered correctly."},{tagname:"figure","class":"image",title:"Absolute and relative edge label rotation",id:"label_placement-preferred_placement-179-figure-002","float":0,children:[{tagname:"img",src:"assets/label_placement_elabel_prefplace_angle_absolute.5e45958c.png",alt:"",title:'<para class="dguide-para">Absolute rotation: 0 degree when looking at the diagram.</para>'},{tagname:"img",src:"assets/label_placement_elabel_prefplace_angle_relative_segment.472ad3dd.png",alt:"",title:'<para class="dguide-para">Relative rotation: 0 degree added to the slope of the edge segment that is nearest to the edge label.</para>'}]}]},{tagname:"section",id:"label_placement-generic_labeling",title:"Generic Labeling",children:[{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-001",content:'\n\nA generic labeling algorithm computes label positions for the labels from a\ngiven graph so that they, ideally, do not overlap with each other or with graph\nelements.\nIt does so without altering nodes or edges in any way.\n<a href="#/dguide/fig_label_placement-generic_labeling_types">Class hierarchy for labeling algorithms</a> shows the class hierarchy of the generic\nlabeling algorithms that are provided in package\n<api-link id="label_placement-generic_labeling-180-api-link-001" data-member="" data-text="yfiles.labeling" data-type=""></api-link>.'},{tagname:"figure","class":"image",title:"Class hierarchy for labeling algorithms",id:"fig_label_placement-generic_labeling_types","float":0,children:[{tagname:"img",src:"assets/label_placement.d338d87f.jpg",alt:"Class hierarchy for labeling algorithms.",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-002",content:"The set of labels that a generic labeling algorithm processes can be restricted\nto node labels only or to edge labels only:"},{tagname:"para",content:'<dl id="label_placement-generic_labeling-180-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="label_placement-generic_labeling-180-term-001"><api-link id="label_placement-generic_labeling-180-api-link-002" data-member="placeNodeLabels" data-text="placeNodeLabels" data-type="yfiles.labeling.LabelingBase"></api-link></dt><dt id="label_placement-generic_labeling-180-term-002"><api-link id="label_placement-generic_labeling-180-api-link-003" data-member="placeEdgeLabels" data-text="placeEdgeLabels" data-type="yfiles.labeling.LabelingBase"></api-link></dt><dd id="label_placement-generic_labeling-180-listitem-001">\n<p id="label_placement-generic_labeling-180-simpara-003">Properties to restrict the set of labels.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-004",content:"The available generic labeling algorithms can deal with label models that support\nrotated labels.\nThey support placing rotated labels using edge label positions that retain a preset\nrotation angle as well as using edge label positions where the rotation is adjusted\nto the slope of a corresponding edge segment."},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-005",content:"Optionally, they can also be configured to auto-flip edge labels to avoid that their\ntext is upside-down:"},{tagname:"para",content:'<dl id="label_placement-generic_labeling-180-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="label_placement-generic_labeling-180-term-003"><api-link id="label_placement-generic_labeling-180-api-link-004" data-member="autoFlipping" data-text="autoFlipping" data-type="yfiles.labeling.LabelingBase"></api-link></dt><dd id="label_placement-generic_labeling-180-listitem-002">\n<p id="label_placement-generic_labeling-180-simpara-006">Configures auto-flipping for upside-down edge labels.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-007",content:"The labeling algorithm uses the model that is associated with a label to get the\navailable candidate positions.\nFrom this set of candidates it then chooses one that best matches the label position\nit has calculated.\nThe label model’s model parameter is then used to encode this position."},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-008",content:"It is important to understand that the result of a labeling algorithm is one model\nparameter per processed label, which is directly stored with the label after calculation.\nThis model parameter expresses the calculated label position with respect to the\ncorresponding label model, and it is only valid in the context of this label model.\nTo get the actual location of a label after the labeling algorithm has finished,\nboth model parameter and corresponding label model are necessary."},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-009",content:'The base class for all major layout algorithms, class\n<api-link id="label_placement-generic_labeling-180-api-link-005" data-member="" data-text="MultiStageLayout" data-type="yfiles.layout.MultiStageLayout"></api-link>, allows to\nconveniently enable/disable generic labeling for each layout run.\nThe labeling algorithm is then invoked after the actual layout algorithm has\nfinished.\nAdditionally, the labeling algorithm itself can also be set.\nClass <span class="api">MultiStageLayout</span> provides the following labeling-related properties:'},{tagname:"para",content:'<dl id="label_placement-generic_labeling-180-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="label_placement-generic_labeling-180-term-004"><api-link id="label_placement-generic_labeling-180-api-link-006" data-member="labelingEnabled" data-text="labelingEnabled" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="label_placement-generic_labeling-180-listitem-003">\n<p id="label_placement-generic_labeling-180-simpara-010">Allows to enable/disable generic as well as integrated labeling.</p>\n</dd>\n<dt id="label_placement-generic_labeling-180-term-005"><api-link id="label_placement-generic_labeling-180-api-link-007" data-member="labeling" data-text="labeling" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="label_placement-generic_labeling-180-listitem-004">\n<p id="label_placement-generic_labeling-180-simpara-011">Determines the actual labeling algorithm to be used.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"label_placement-generic_labeling-180-simpara-012",content:'Generic labeling is set up using the label layout layout stage support provided\nby the base class of the layout algorithms, class <span class="api">MultiStageLayout</span>:'},{tagname:"para",content:'<pre class="programlisting javascript" id="label_placement-generic_labeling-180-programlisting-001" language="javascript" format="linespecific"><code>const hierarchic = new yfiles.hierarchic.HierarchicLayout()\r\n\r\n// Setting up generic edge labeling.\r\nconst labeler = new yfiles.labeling.GenericLabeling()\r\nlabeler.placeNodeLabels = false\r\nhierarchic.labeling = labeler\r\nhierarchic.labelingEnabled = true\n</code></pre>'},{tagname:"section",id:"_using_an_alternate_label_model",title:"Using an Alternate Label Model",children:[{tagname:"para","class":"dguide-para",id:"_using_an_alternate_label_model-181-simpara-001",content:"Instead of a label’s actual label model, the generic labeling algorithms can also\nuse an alternate label model when calculating valid positions for it.\nThis can be useful, if the original label model is a free model, but the set of\nvalid positions should be temporarily restricted, for example, to guarantee that\nan edge label is placed onto its associated edge."},{tagname:"para","class":"dguide-para",id:"_using_an_alternate_label_model-181-simpara-002",content:'To specify the alternate label models, a data provider holding such supplemental\nlayout data must be bound to the graph.\nThe data provider is expected to be registered with the graph using key <api-link id="_using_an_alternate_label_model-181-api-link-001" data-member="LABEL_MODEL_DP_KEY" data-text="LABEL_MODEL_DP_KEY" data-type="yfiles.labeling.LabelingBase"></api-link>.'},{tagname:"para","class":"dguide-para",id:"_using_an_alternate_label_model-181-simpara-003",content:"The following code shows how a data provider that returns an alternate label model\nfor edge labels can be registered with a graph:"},{tagname:"example",id:"_using_an_alternate_label_model-181-example-001",title:"Using alternate edge label models for labeling",content:'<pre class="programlisting javascript" id="_using_an_alternate_label_model-181-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Add an implicit IMapper to the mapper registry of the graph.\r\n// Use the "well-known" look-up key defined in class AbstractLabelingAlgorithm\r\n// as its tag.\r\n// The key is then used by the layout algorithm to retrieve the supplemental\r\n// data.\r\ngraph.mapperRegistry.createDelegateMapper(\r\n  yfiles.layout.IEdgeLabelLayout.$class,\r\n  yfiles.layout.IEdgeLabelLayoutModel.$class,\r\n  yfiles.labeling.LabelingBase.LABEL_MODEL_DP_KEY,\r\n  edgeLabelLayout =>\r\n    yfiles.layout.FreeEdgeLabelLayoutModel.isInstance(edgeLabelLayout.labelModel)\r\n      ? new yfiles.layout.SliderEdgeLabelLayoutModel(yfiles.layout.SliderMode.CENTER)\r\n      : null\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"_using_an_alternate_label_model-181-important-001",content:'<p id="_using_an_alternate_label_model-181-simpara-004">One has to use the yFiles for HTML Layout label models here,\n           i.e. one of the models from the namespace <api-link id="_using_an_alternate_label_model-181-api-link-002" data-member="" data-text="yfiles.layout" data-type=""></api-link>.</p>'}]},{tagname:"section",id:"generic_labeling_dataprovider",title:"Supplemental Layout Data",children:[{tagname:"para","class":"dguide-para",id:"generic_labeling_dataprovider-182-simpara-001",content:'The generic labeling algorithms know a number of data provider keys which are used\nto retrieve supplemental layout data for the labels in a graph.\nThe data is bound to the graph by means of a data provider which is registered using\na given look-up key.\n<a href="#/dguide/tab_label_placement-dataprovider_keys">Data provider look-up keys</a> lists all look-up keys that a generic\nlabeling algorithm tests during the layout process in order to query supplemental\ndata.'},{tagname:"para","class":"dguide-para",id:"generic_labeling_dataprovider-182-simpara-002",content:'Binding supplemental layout data to a graph is described in\n<a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_label_placement-dataprovider_keys",rowsep:1,content:'<caption>Data provider look-up keys</caption><colgroup><col style="width:25%;"><col style="width:10%;"><col style="width:10%;"><col style="width:55%;"></colgroup><thead id="generic_labeling_dataprovider-182-thead-001"><tr id="generic_labeling_dataprovider-182-row-001"><th id="generic_labeling_dataprovider-182-entry-001" align="left" valign="top">\nKey\n</th><th id="generic_labeling_dataprovider-182-entry-002" align="left" valign="top">\nElement Type\n</th><th id="generic_labeling_dataprovider-182-entry-003" align="left" valign="top">\nValue Type\n</th><th id="generic_labeling_dataprovider-182-entry-004" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="generic_labeling_dataprovider-182-tbody-001"><tr id="generic_labeling_dataprovider-182-row-002"><td rowspan="2" id="generic_labeling_dataprovider-182-entry-005" align="left" morerows="1" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-003"><api-link id="generic_labeling_dataprovider-182-api-link-001" data-member="LABEL_MODEL_DP_KEY" data-text="LABEL_MODEL_DP_KEY" data-type="yfiles.labeling.LabelingBase"></api-link></para></td><td id="generic_labeling_dataprovider-182-entry-006" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-004">INodeLabelLayout</para></td><td id="generic_labeling_dataprovider-182-entry-007" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-005">INodeLabelModel</para></td><td id="generic_labeling_dataprovider-182-entry-008" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-006">For each INodeLabelLayout instance an INodeLabelModel instance that is used to\n     determine valid label positions.</para></td></tr><tr id="generic_labeling_dataprovider-182-row-003"><td id="generic_labeling_dataprovider-182-entry-009" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-007">IEdgeLabelLayout</para></td><td id="generic_labeling_dataprovider-182-entry-010" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-008">IEdgeLabelModel</para></td><td id="generic_labeling_dataprovider-182-entry-011" align="left" valign="top"><para class="dguide-para" id="generic_labeling_dataprovider-182-simpara-009">For each IEdgeLabelLayout instance an IEdgeLabelModel instance that is used to\n     determine valid label positions.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"label_placement-integrated_labeling",title:"Integrated Labeling",children:[{tagname:"para","class":"dguide-para",id:"label_placement-integrated_labeling-183-simpara-001",content:"\n\nIntegrated labeling denotes automatic edge label placement as an integrated\npart of a layout algorithm.\nAll edge labels of a graph are arranged in such a manner that there are no\noverlaps of edge labels with each other or with graph elements."},{tagname:"para","class":"dguide-para",id:"label_placement-integrated_labeling-183-simpara-002",content:'<a href="#/dguide/tab_label_placement-integrated_labeling">Layout support for integrated labeling</a> lists the major layout algorithms\nthat provide support for integrated labeling.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_label_placement-integrated_labeling",rowsep:1,content:'<caption>Layout support for integrated labeling</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:60%;"></colgroup><thead id="label_placement-integrated_labeling-183-thead-001"><tr id="label_placement-integrated_labeling-183-row-001"><th id="label_placement-integrated_labeling-183-entry-001" align="left" valign="top">\nLayout Style\n</th><th id="label_placement-integrated_labeling-183-entry-002" align="left" valign="top">\nClass Name\n</th><th id="label_placement-integrated_labeling-183-entry-003" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="label_placement-integrated_labeling-183-tbody-001"><tr id="label_placement-integrated_labeling-183-row-002"><td id="label_placement-integrated_labeling-183-entry-004" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-003">Hierarchical</para></td><td id="label_placement-integrated_labeling-183-entry-005" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-004"><api-link id="label_placement-integrated_labeling-183-api-link-001" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="label_placement-integrated_labeling-183-entry-006" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-005">With class <span class="api">HierarchicLayout</span>, integrated labeling can be conveniently\n  enabled using appropriate configuration properties.\n  See the description of the <a href="#/dguide/hierarchical_layout-integrated_labeling">hierarchical layout style</a>\n  for more information.</para></td></tr><tr id="label_placement-integrated_labeling-183-row-003"><td id="label_placement-integrated_labeling-183-entry-007" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-006">Orthogonal</para></td><td id="label_placement-integrated_labeling-183-entry-008" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-007"><api-link id="label_placement-integrated_labeling-183-api-link-002" data-member="" data-text="OrthogonalLayout" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></para></td><td id="label_placement-integrated_labeling-183-entry-009" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-008">See the descriptions of\n  <a href="#/dguide/orthogonal_layout_labeling">orthogonal layout</a>\n  for more information.</para></td></tr><tr id="label_placement-integrated_labeling-183-row-004"><td id="label_placement-integrated_labeling-183-entry-010" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-009">Tree</para></td><td id="label_placement-integrated_labeling-183-entry-011" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-010"><api-link id="label_placement-integrated_labeling-183-api-link-003" data-member="" data-text="ClassicTreeLayout" data-type="yfiles.tree.ClassicTreeLayout"></api-link>,\n  <api-link id="label_placement-integrated_labeling-183-api-link-004" data-member="" data-text="TreeLayout" data-type="yfiles.tree.TreeLayout"></api-link>, and\n  <api-link id="label_placement-integrated_labeling-183-api-link-005" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link></para></td><td id="label_placement-integrated_labeling-183-entry-012" align="left" valign="top"><para class="dguide-para" id="label_placement-integrated_labeling-183-simpara-011">Integrated labeling can conveniently be enabled using appropriate\n  configuration properties.\n  See the descriptions of\n<a href="#/dguide/classic_tree_integrated_labeling">directed tree layout</a>,\n<a href="#/dguide/tree_layout_integrated_labeling">generic tree layout</a>, and\n<a href="#/dguide/balloon_layout_integrated_labeling">balloon layout</a> for more information.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"label_placement-integrated_labeling-183-simpara-012",content:"Integrated labeling is most conveniently triggered using the corresponding properties\nof the layout algorithms that support it.\nFor example:"},{tagname:"para",content:'<pre class="programlisting javascript" id="label_placement-integrated_labeling-183-programlisting-001" language="javascript" format="linespecific"><code>const hierarchic = new yfiles.hierarchic.HierarchicLayout()\r\n\r\n// Enabling integrated edge labeling.\r\nhierarchic.integratedEdgeLabeling = true\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"label_placement-integrated_labeling-183-simpara-013",content:'<a href="#/dguide/ex_label_placement-labellayouttranslator">Using class LabelLayoutTranslator</a> shows how to configure integrated labeling\nin the absence of an appropriate configuration method using <api-link id="label_placement-integrated_labeling-183-api-link-006" data-member="" data-text="LabelLayoutTranslator" data-type="yfiles.layout.LabelLayoutTranslator"></api-link>.\nThis class converts label layout information so that it is understood by a layout\nalgorithm.'},{tagname:"example",id:"ex_label_placement-labellayouttranslator",title:"Using class LabelLayoutTranslator",content:'<pre class="programlisting javascript" id="label_placement-integrated_labeling-183-programlisting-002" language="javascript" format="linespecific"><code>function useIntegratedLabeling(layout) {\r\n  // Use integrated labeling support, and let class LabelLayoutTranslator do\r\n  // the conversion of information held by an edge label\'s IEdgeLabelLayout\r\n  // object to data provider-based information that is understood by the\r\n  // algorithm.\r\n  layout.labeling = new yfiles.layout.LabelLayoutTranslator()\r\n  layout.labelingEnabled = true\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"label_placement-integrated_labeling-183-simpara-014",content:'Through the following property <span class="api">LabelLayoutTranslator</span> supports configuration of edge\nlabel auto-flip behavior:'},{tagname:"para",content:'<dl id="label_placement-integrated_labeling-183-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="label_placement-integrated_labeling-183-term-001"><api-link id="label_placement-integrated_labeling-183-api-link-007" data-member="autoFlipping" data-text="autoFlipping" data-type="yfiles.layout.LabelLayoutTranslator"></api-link></dt><dd id="label_placement-integrated_labeling-183-listitem-001">\n<p id="label_placement-integrated_labeling-183-simpara-015">Configures auto-flipping for upside-down edge labels.</p>\n</dd>\n</dl>'}]}]},{tagname:"section",id:"hierarchical_layout",title:"Hierarchical Layout",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-184-simpara-001",content:'The hierarchical layout style aims to highlight the main direction or <strong id="hierarchical_layout-184-emphasis-001" class="bold" role="bold">flow</strong> within a directed graph.\nThe nodes of a graph are placed in hierarchically arranged layers such that the (majority of) edges of the\ngraph show the same overall orientation, for example, top-to-bottom.\nAdditionally, the ordering of the nodes within each layer is chosen in such a way that the number of edge crossings\nis small.'},{tagname:"figure","class":"image",title:"Samples of the hierarchical layout style",id:"fig_hierarchical_layout-samples","float":0,children:[{tagname:"img",src:"assets/hierarchical_sample_polyline.c2d0eb30.png",alt:"",title:'<para class="dguide-para">Polyline Edge Routing</para>'},{tagname:"img",src:"assets/hierarchical_sample_orthogonal.1f9d5cee.png",alt:"",title:'<para class="dguide-para">Orthogonal Edge Routing</para>'},{tagname:"img",src:"assets/hierarchical_sample_grouped.f98afbe5.png",alt:"",title:'<para class="dguide-para">Grouped Graph</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-184-simpara-002",content:"Note that in an acyclic graph, it is always possible that all edges have the same overall orientation.\nIn a graph that contains cyclic dependencies between nodes, they are automatically detected and resolved."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-184-simpara-003",content:'<a href="#/dguide/fig_hierarchical_layout-samples">Samples of the hierarchical layout style</a> shows several hierarchical layouts with top-to-bottom orientation.\nNote that the hierarchical layout style can be combined with polyline, orthogonal, and octilinear edge routing.\nAlso, layout of grouped graphs is naturally covered by the hierarchical layout style, too.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-184-simpara-004",content:"The layout algorithm provided by the yFiles diagramming library for the hierarchical layout style facilitates\nconvenient automatic generation of high-quality layouts. It supports a variety of features that influence\nmany aspects in the layout process, assists with different predefined behaviors to combine and choose from, and enables\nflexible customization of the layout process if needed."},{tagname:"section",id:"_terminology",title:"Terminology",children:[{tagname:"para","class":"dguide-para",id:"_terminology-185-simpara-001",content:'The hierarchically arranged <span class="def">layers</span> that are typical\nfor this layout style (hence its name) are illustrated in <a href="#/dguide/fig_hierarchical_layout-terminology">Layers in the hierarchical layout style</a>.\nWith top-to-bottom main direction, layers stretch horizontally and are ordered from top to bottom.\nWithin each layer, the nodes are placed vertically and are ordered from left to right.'},{tagname:"figure","class":"image",title:"Layers in the hierarchical layout style",id:"fig_hierarchical_layout-terminology","float":0,children:[{tagname:"img",src:"assets/hierarchical_layers_explanation.a29e7f64.png",alt:"hierarchical layers explanation",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_terminology-185-simpara-002",content:'The node order within a layer is also called their <span class="def">sequence</span>.\nThe layer ordering in a diagram is also referred to as the <span class="def">layering</span>.\nGenerally, the overall orientation of the edges is the same as the main direction\nof the layout, and is also the direction of the layering.\nIn other words, if the main direction of the layout is right-to-left, for example,\nthen also the layering is from right to left.'},{tagname:"para","class":"dguide-para",id:"_terminology-185-simpara-003",content:"The terms layering and sequence directly stem from the technical operation of a\nhierarchical layout algorithm where the layout is generated in a three-phase process, basically:"},{tagname:"para",content:'<ol id="_terminology-185-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="_terminology-185-listitem-001"><p id="_terminology-185-simpara-004">Determine the layering for the nodes of the graph.</p></li><li id="_terminology-185-listitem-002"><p id="_terminology-185-simpara-005">Find a node order (sequence) within each layer.</p></li><li id="_terminology-185-listitem-003"><p id="_terminology-185-simpara-006">Assign actual coordinates to the nodes and route the edges.\nThis phase is commonly referred to as the <strong id="_terminology-185-emphasis-001" class="bold" role="bold">drawing</strong> phase.</p></li></ol>'}]},{tagname:"section",id:"_application_areas",title:"Application Areas",children:[{tagname:"para","class":"dguide-para",id:"_application_areas-186-simpara-001",content:"The hierarchical layout style is ideal for many application areas where it is crucial\nthat dependency relations between entities are clearly visualized.\nIn particular, if such relations form a chain of dependencies between entities,\nthis layout style nicely exhibits them.\nGenerally, whenever the direction of information flow matters, the hierarchical\nlayout style is an invaluable tool."},{tagname:"para","class":"dguide-para",id:"_application_areas-186-simpara-002",content:"Application areas that this layout style is suited for include, for example:"},{tagname:"para",content:'<ul id="_application_areas-186-itemizedlist-001"><li id="_application_areas-186-listitem-001"><p id="_application_areas-186-simpara-003">Workflow visualization</p></li><li id="_application_areas-186-listitem-002"><p id="_application_areas-186-simpara-004">Software engineering (e.g., call graph visualization or activity diagrams)</p></li><li id="_application_areas-186-listitem-003"><p id="_application_areas-186-simpara-005">Process modeling</p></li><li id="_application_areas-186-listitem-004"><p id="_application_areas-186-simpara-006">Database modeling (e.g., Entity-Relationship diagrams)</p></li><li id="_application_areas-186-listitem-005"><p id="_application_areas-186-simpara-007">Bioinformatics (e.g., biochemical pathways)</p></li><li id="_application_areas-186-listitem-006"><p id="_application_areas-186-simpara-008">Network management</p></li><li id="_application_areas-186-listitem-007"><p id="_application_areas-186-simpara-009">Decision diagrams</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_application_areas-186-simpara-010",content:"The following figures show sample diagrams from different application areas."},{tagname:"figure","class":"image",title:"Samples of the hierarchical layout style",id:"_application_areas-186-figure-001","float":0,children:[{tagname:"img",src:"assets/hierarchical_sample_entity.ffaba429.gif",alt:"",title:'<para class="dguide-para">Entity-Relationship diagram</para>'},{tagname:"img",src:"assets/hierarchical_sample_pathways.9f860dac.gif",alt:"",title:'<para class="dguide-para">Displays pathways of the brain, layered by stages of visual processing</para>'},{tagname:"img",src:"assets/hierarchical_sample_decision.8476cfd7.jpg",alt:"",title:'<para class="dguide-para">Decision diagram</para>'}]}]},{tagname:"section",id:"_relevant_classes",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"_relevant_classes-187-simpara-001",content:'<a href="#/dguide/tab_hierarchical_layout-classes">Relevant classes for this style</a> lists the relevant classes for the hierarchical\nlayout style.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_hierarchical_layout-classes",rowsep:1,content:'<caption>Relevant classes for this style</caption><colgroup><col style="width:28%;"><col style="width:11%;"><col style="width:61%;"></colgroup><thead id="_relevant_classes-187-thead-001"><tr id="_relevant_classes-187-row-001"><th id="_relevant_classes-187-entry-001" align="left" valign="top">\nPhase\n</th><th id="_relevant_classes-187-entry-002" align="left" valign="top">\nClass Name\n</th><th id="_relevant_classes-187-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_relevant_classes-187-tbody-001"><tr id="_relevant_classes-187-row-002"><td rowspan="4" id="_relevant_classes-187-entry-004" align="left" morerows="3" valign="top"></td><td id="_relevant_classes-187-entry-005" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-002"><api-link id="_relevant_classes-187-api-link-001" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="_relevant_classes-187-entry-006" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-003">Main algorithm that also provides <a href="#/dguide/hierarchical_layout-options">Basic Options</a>.</para></td></tr><tr id="_relevant_classes-187-row-003"><td id="_relevant_classes-187-entry-007" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-004"><api-link id="_relevant_classes-187-api-link-002" data-member="" data-text="NodeLayoutDescriptor" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></para></td><td id="_relevant_classes-187-entry-008" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-005">Provides node-related as well as layer-related layout options.\nFor example, preferred minimum distances between adjacent nodes within a layer.\nSee <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a>.</para></td></tr><tr id="_relevant_classes-187-row-004"><td id="_relevant_classes-187-entry-009" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-006"><api-link id="_relevant_classes-187-api-link-003" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></para></td><td id="_relevant_classes-187-entry-010" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-007">Provides edge-related layout options.\nFor example, different edge routing styles for different edge types.\nSee <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a>.</para></td></tr><tr id="_relevant_classes-187-row-005"><td id="_relevant_classes-187-entry-011" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-008"><api-link id="_relevant_classes-187-api-link-004" data-member="" data-text="IIncrementalHintsFactory" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link></para></td><td id="_relevant_classes-187-entry-012" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-009">Creates so-called hint objects which are essential for incremental hierarchical layout.\nSee <a href="#/dguide/hierarchical_layout-incremental_layout">Incremental Layout</a>.</para></td></tr><tr id="_relevant_classes-187-row-006"><td rowspan="2" id="_relevant_classes-187-entry-013" align="left" morerows="1" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-010">Layering</para></td><td id="_relevant_classes-187-entry-014" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-011"><api-link id="_relevant_classes-187-api-link-005" data-member="" data-text="ILayerer" data-type="yfiles.hierarchic.ILayerer"></api-link></para></td><td id="_relevant_classes-187-entry-015" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-012">An implementation of this interface is responsible for assigning the nodes of\na graph to layers in a hierarchical layout.\nIn <a href="#/dguide/hierarchical_layout-layer_assignment">Layer Assignment Options</a> available layering\nstrategies for non-incremental layout calculation are presented.</para></td></tr><tr id="_relevant_classes-187-row-007"><td id="_relevant_classes-187-entry-016" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-013"><api-link id="_relevant_classes-187-api-link-006" data-member="" data-text="ILayerConstraintFactory" data-type="yfiles.hierarchic.ILayerConstraintFactory"></api-link></para></td><td id="_relevant_classes-187-entry-017" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-014">Enables convenient customization of the layering process where the nodes of a\ngraph are assigned to layers in a hierarchical layout.\nSee <a href="#/dguide/hierarchical_layout-constrained_layer_assignment">Constrained Layer Assignment</a>.</para></td></tr><tr id="_relevant_classes-187-row-008"><td rowspan="2" id="_relevant_classes-187-entry-018" align="left" morerows="1" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-015">Sequence</para></td><td id="_relevant_classes-187-entry-019" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-016"><api-link id="_relevant_classes-187-api-link-007" data-member="" data-text="DefaultLayerSequencer" data-type="yfiles.hierarchic.DefaultLayerSequencer"></api-link></para></td><td id="_relevant_classes-187-entry-020" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-017">Used to determine the order of nodes within a layer.</para></td></tr><tr id="_relevant_classes-187-row-009"><td id="_relevant_classes-187-entry-021" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-018"><api-link id="_relevant_classes-187-api-link-008" data-member="" data-text="ISequenceConstraintFactory" data-type="yfiles.hierarchic.ISequenceConstraintFactory"></api-link></para></td><td id="_relevant_classes-187-entry-022" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-019">Enables custom node order assignment within layers.\nSee <a href="#/dguide/hierarchical_layout-node_order_options">Node Order Options</a>.</para></td></tr><tr id="_relevant_classes-187-row-010"><td rowspan="2" id="_relevant_classes-187-entry-023" align="left" morerows="1" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-020">Drawing</para></td><td id="_relevant_classes-187-entry-024" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-021"><api-link id="_relevant_classes-187-api-link-009" data-member="" data-text="SimplexNodePlacer" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link></para></td><td id="_relevant_classes-187-entry-025" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-022">This node placer is responsible for assigning each node within a layer its coordinate\nwith respect to the node sequence.\nSee also the <a href="#/dguide/hierarchical_layout-class_simplexnodeplacer">description of SimplexNodePlacer</a>.</para></td></tr><tr id="_relevant_classes-187-row-011"><td id="_relevant_classes-187-entry-026" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-023"><api-link id="_relevant_classes-187-api-link-010" data-member="" data-text="DefaultDrawingDistanceCalculator" data-type="yfiles.hierarchic.DefaultDrawingDistanceCalculator"></api-link></para></td><td id="_relevant_classes-187-entry-027" align="left" valign="top"><para class="dguide-para" id="_relevant_classes-187-simpara-024">Is used by the NodePlacer to determine distances between graph elements within a layer.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_relevant_classes-187-simpara-025",content:"The classes that are used in the layering phase provide many predefined so-called\nlayering strategies that enable a variety of different layout results.\nInstead of letting the algorithm compute the layering, some strategies also support\nprescribing the layering completely.\nAdditionally, in cases where only some nodes need to fulfill specific layering requirements,\nthe LayerConstraintFactory class can be used."},{tagname:"para","class":"dguide-para",id:"_relevant_classes-187-simpara-026",content:"Similarly, in the sequence phase, the node orders within the layers, which are computed\nby DefaultLayerSequencer, can be customized via the services provided by the SequenceConstraintFactory\nclass."}]},{tagname:"section",id:"hierarchical_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-001",content:'The <api-link id="hierarchical_layout-options-188-api-link-001" data-member="layoutMode" data-text="layoutMode" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>\nproperty determines the general layout mode of <span class="api">HierarchicLayout</span>.\nIt uses one of the following constants from the <api-link id="hierarchical_layout-options-188-api-link-002" data-member="" data-text="LayoutMode" data-type="yfiles.hierarchic.LayoutMode"></api-link>\nenum type:'},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-001"><api-link id="hierarchical_layout-options-188-api-link-003" data-member="FROM_SCRATCH" data-text="FROM_SCRATCH" data-type="yfiles.hierarchic.LayoutMode"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-001">\n<p id="hierarchical_layout-options-188-simpara-002">Sets the layout algorithm to re-compute the entire layout from scratch, i.e., a complete re-layout is started.\nLayout from scratch is the default setting for the <strong id="hierarchical_layout-options-188-emphasis-001" class="bold" role="bold">Layout Mode</strong> feature.\nSee <a href="#/dguide/hierarchical_layout-non_incremental_layout_mode">Non-incremental Layout</a>.</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-002"><api-link id="hierarchical_layout-options-188-api-link-004" data-member="INCREMENTAL" data-text="INCREMENTAL" data-type="yfiles.hierarchic.LayoutMode"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-002">\n<p id="hierarchical_layout-options-188-simpara-003">Sets the layout algorithm to incremental mode, i.e., elements that are marked for\nincremental processing will be inserted into the already calculated layout of the\nremaining part of the graph in an optimal manner.\nSee <a href="#/dguide/hierarchical_layout-incremental_layout">Incremental Layout</a>.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-003" class="title" role="title">Layout Orientation</dt><dt id="hierarchical_layout-options-188-term-004"><api-link id="hierarchical_layout-options-188-api-link-005" data-member="layoutOrientation" data-text="layoutOrientation" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-003">\n<p id="hierarchical_layout-options-188-simpara-004">Determines the main direction or <strong id="hierarchical_layout-options-188-emphasis-002" class="bold" role="bold">flow</strong>, i.e., the overall orientation for\nthe edges in a hierarchical layout. This property is inherited from <span class="api">MultiStageLayout</span>,\nthe direct superclass of <span class="api">HierarchicLayout</span>.\nThe layout algorithm tries to arrange nodes in such a way that all edges point in\nthe main direction.</p>\n<p id="hierarchical_layout-options-188-simpara-005">By default, the overall orientation for the edges will be from top to bottom.\nThe other three layout directions can be set using the constants from the\n<api-link id="hierarchical_layout-options-188-api-link-006" data-member="" data-text="LayoutOrientation" data-type="yfiles.layout.LayoutOrientation"></api-link> enum type.\n<a href="#/dguide/ex_hierarchical_layout-layout_orientation">Setting a layout orientation for the hierarchical layout style</a> shows how to set the layout direction.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"hierarchical_layout-options-188-note-001",content:'<p id="hierarchical_layout-options-188-simpara-006">The documentation for the other layout options assumes that this default orientation\nis being used.</p>'},{tagname:"example",id:"ex_hierarchical_layout-layout_orientation",title:"Setting a layout orientation for the hierarchical layout style",content:'<pre class="programlisting javascript" id="hierarchical_layout-options-188-programlisting-001" language="javascript" format="linespecific"><code>const hl = new yfiles.hierarchic.HierarchicLayout()\r\n// Use left-to-right main layout direction.\r\nhl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-007",content:'<a href="#/dguide/fig_hierarchical_layout-layout_orientation">Layout orientation sample</a> shows one of the sample layouts\nfor the hierarchical layout style with layout orientation left to right.'},{tagname:"figure","class":"image",title:"Layout orientation sample",id:"fig_hierarchical_layout-layout_orientation","float":0,children:[{tagname:"img",src:"assets/hierarchical_orientation_lr.5d40f7c6.png",alt:"Hierarchical layout with layout orientation left to right.",title:'<para class="dguide-para"></para>'}]},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-005" class="title" role="title">Maximal Duration</dt><dt id="hierarchical_layout-options-188-term-006"><api-link id="hierarchical_layout-options-188-api-link-007" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-004">\n<p id="hierarchical_layout-options-188-simpara-008">Sets a (soft) time limit for <span class="api">HierarchicLayout</span>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-009",content:'<span class="api">HierarchicLayout</span> allows to control general drawing options like, e.g.,\nedge routing styles or minimum distances between graph elements.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-010",content:"Options which affect edge routing:"},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-007" class="title" role="title">Orthogonal Edge Routing</dt><dt id="hierarchical_layout-options-188-term-008"><api-link id="hierarchical_layout-options-188-api-link-008" data-member="orthogonalRouting" data-text="orthogonalRouting" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-005">\n<p id="hierarchical_layout-options-188-simpara-011">Enables/Disables orthogonal edge routing (default is disabled)</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-009" class="title" role="title">Backloop Routing</dt><dt id="hierarchical_layout-options-188-term-010"><api-link id="hierarchical_layout-options-188-api-link-009" data-member="backLoopRouting" data-text="backLoopRouting" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-006">\n<p id="hierarchical_layout-options-188-simpara-012">Enables/Disables backloop routing (default is disabled)</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-013",content:'<span class="api">HierarchicLayout</span> supports three edge routing styles:'},{tagname:"para",content:'<ul id="hierarchical_layout-options-188-itemizedlist-001"><li id="hierarchical_layout-options-188-listitem-007"><p id="hierarchical_layout-options-188-simpara-014">polyline (the default)</p></li><li id="hierarchical_layout-options-188-listitem-008"><p id="hierarchical_layout-options-188-simpara-015">orthogonal</p></li><li id="hierarchical_layout-options-188-listitem-009"><p id="hierarchical_layout-options-188-simpara-016">octilinear (a variation of the orthogonal routing style)</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-017",content:'The following figure shows the different routing styles side by side.\nNote that using the above property, only the former two styles can be configured.\nOctilinear edge routing can be enabled using a corresponding EdgeLayoutDescriptor,\nsee also <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a>.'},{tagname:"figure","class":"image",title:"Edge routing styles determined by the EdgeLayoutDescriptor",id:"fig_hierarchical_layout-routing_styles","float":0,children:[{tagname:"img",src:"assets/hierarchical_routing_polyline.def207d6.jpg",alt:"",title:'<para class="dguide-para">Polyline edge routing</para>'},{tagname:"img",src:"assets/hierarchical_routing_orthogonal.182ccf7c.jpg",alt:"",title:'<para class="dguide-para">Orthogonal edge routing (with rounded bends)</para>'},{tagname:"img",src:"assets/hierarchical_routing_octilinear.6cd182cd.jpg",alt:"",title:'<para class="dguide-para">Octilinear edge routing</para>'}]},{tagname:"example",id:"ex_hierarchical_layout-routing_styles_orthogonal",title:"Enabling orthogonal edge routing",content:'<pre class="programlisting javascript" id="hierarchical_layout-options-188-programlisting-002" language="javascript" format="linespecific"><code>const hl = getMyHierarchicLayout()\r\n\r\n// Switching HierarchicLayout to orthogonal edge routing.\r\nhl.orthogonalRouting = true\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-018",content:'<span class="api">HierarchicLayout</span> places the nodes in a way that reflects the main flow of a diagram, i.e.\nin a top-to-bottom layout most edges will connect to targets which are placed below their source nodes.\nHowever, it is not always possible to achieve this for all edges in a diagram. Edges which connect to targets\nwhich are located above their source nodes are referred to as <span class="def">backloop edges</span>. By default these edges exit\ntheir source nodes at the top border and enter their targets at the bottom to keep the paths short.\nThis may reduce the readability of a hierarchical layout as shown in the\nleft diagram of <a href="#/dguide/fig_hierarchical_layout-backloop_routing">Backloop Routing</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-019",content:'Setting backloop routing enabled will force backloop edges to exit at the bottom\nand enter at the top of their source and target, respectively, emphasizing the main direction of the diagram.\nBackloop routing is enabled in the right diagram of <a href="#/dguide/fig_hierarchical_layout-backloop_routing">Backloop Routing</a>.'},{tagname:"figure","class":"image",title:"Backloop Routing",id:"fig_hierarchical_layout-backloop_routing","float":0,children:[{tagname:"img",src:"assets/hierarchical_backloop_disabled.8c522d22.jpg",alt:"",title:'<para class="dguide-para">Backloop Routing disabled</para>'},{tagname:"img",src:"assets/hierarchical_backloop_enabled.aa14ae6f.jpg",alt:"",title:'<para class="dguide-para">Backloop Routing enabled</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-020",content:"Options which affect node placement:"},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-011" class="title" role="title">Minimum Layer Distance</dt><dt id="hierarchical_layout-options-188-term-012"><api-link id="hierarchical_layout-options-188-api-link-010" data-member="minimumLayerDistance" data-text="minimumLayerDistance" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-010">\n<p id="hierarchical_layout-options-188-simpara-021">The minimum distance between adjacent layers</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-013" class="title" role="title">Node to Node Distance</dt><dt id="hierarchical_layout-options-188-term-014"><api-link id="hierarchical_layout-options-188-api-link-011" data-member="nodeToNodeDistance" data-text="nodeToNodeDistance" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-011">\n<p id="hierarchical_layout-options-188-simpara-022">The minimum distance between two nodes in the same layer</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-015" class="title" role="title">Edge to Edge Distance</dt><dt id="hierarchical_layout-options-188-term-016"><api-link id="hierarchical_layout-options-188-api-link-012" data-member="edgeToEdgeDistance" data-text="edgeToEdgeDistance" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-012">\n<p id="hierarchical_layout-options-188-simpara-023">The minimum distance between two edges in the same layer</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-017" class="title" role="title">Node to Edge Distance</dt><dt id="hierarchical_layout-options-188-term-018"><api-link id="hierarchical_layout-options-188-api-link-013" data-member="nodeToEdgeDistance" data-text="nodeToEdgeDistance" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-013">\n<p id="hierarchical_layout-options-188-simpara-024">The minimum distance between a node and a non-adjacent edge in the same layer</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-025",content:'<a href="#/dguide/fig_hierarchical_layout-distance_settings">Distance settings in a hierarchical layout</a> illustrates where the settings for the drawing options take effect in a diagram.'},{tagname:"figure","class":"image",title:"Distance settings in a hierarchical layout",id:"fig_hierarchical_layout-distance_settings","float":0,children:[{tagname:"img",src:"assets/hierarchical_distances.a7e9816a.png",alt:"hierarchical distances",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-026",content:"Note that the distance settings between edges and also between edges and nodes only\ntake effect on edges that span at least one layer in the diagram.\nAlso, keep in mind that all distances are only minimum distances, i.e., the layout\nalgorithm may use larger distances than specified in order to achieve an aesthetic result."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-027",content:'<span class="api">HierarchicLayout</span> provides\nadditional support to fine-tune distances between graph elements that takes into\naccount the thickness of edges.\nThis is especially useful for Sankey diagrams, for example.\nTo specify each edge’s thickness, configure an appropriate <a href="#/dguide/tab_hierarchical_keys_edge_thickness">layout data</a>\ninstance. Alternatively, a data provider key for this property is also available.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-028",content:'Further drawing style options can be specified by means of the layout descriptor classes for nodes and edges.\nOne instance of each class is held by <span class="api">HierarchicLayout</span> to\nstore and retrieve default values for drawing style options, like, e.g.,\npreferred minimum distances between graph elements.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-029",content:'<span class="api">HierarchicLayout</span> provides access to the default\n<api-link id="hierarchical_layout-options-188-api-link-014" data-member="" data-text="NodeLayoutDescriptor" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link>\nand <api-link id="hierarchical_layout-options-188-api-link-015" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\ninstances:'},{tagname:"para",content:'<dl id="hierarchical_layout-options-188-variablelist-006" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-options-188-term-019"><api-link id="hierarchical_layout-options-188-api-link-016" data-member="nodeLayoutDescriptor" data-text="nodeLayoutDescriptor" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-014">\n<p id="hierarchical_layout-options-188-simpara-030">Node-related layout options</p>\n</dd>\n<dt id="hierarchical_layout-options-188-term-020"><api-link id="hierarchical_layout-options-188-api-link-017" data-member="edgeLayoutDescriptor" data-text="edgeLayoutDescriptor" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-options-188-listitem-015">\n<p id="hierarchical_layout-options-188-simpara-031">Edge-related layout options</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-options-188-simpara-032",content:'In addition to the instances held directly by <span class="api">HierarchicLayout</span>,\nlayout descriptors can also be associated with single graph elements in order to specify individual settings for them.\nSetting individual descriptors for <a href="#/dguide/tab_hierarchical_keys_node_layout_descriptors">nodes</a> or <a href="#/dguide/tab_hierarchical_keys_edge_layout_descriptors">edges</a> is done through <a href="#/dguide/layout-layout_data">layout data instances for the layout algorithm</a>.\nSee <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a>.'}]},{tagname:"section",id:"_labeling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-integrated_labeling",content:'Integrated labeling is one of the <a href="#/dguide/label_placement-scenarios">two scenarios for placing the labels of a graph</a>.\nIt means the support provided by <span class="api">HierarchicLayout</span> for finding optimal placements for edge labels\nsuch that there are no overlaps of edge labels with each other or with graph elements.'},{tagname:"para","class":"dguide-para",id:"_labeling-189-simpara-002",content:"Integrated labeling can be enabled or disabled using the following property:"},{tagname:"para",content:'<dl id="_labeling-189-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_labeling-189-term-001"><api-link id="_labeling-189-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="_labeling-189-listitem-001">\n<p id="_labeling-189-simpara-003">Determines whether integrated labeling is enabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_labeling-189-simpara-004",content:'The before/after pair in <a href="#/dguide/fig_hierarchical_layout-integrated_labeling">Integrated edge labeling</a> shows the result\nof a hierarchical layout with integrated edge labeling enabled.'},{tagname:"figure","class":"image",title:"Integrated edge labeling",id:"fig_hierarchical_layout-integrated_labeling","float":0,children:[{tagname:"img",src:"assets/hierarchical_labeling_no.3ed6e819.jpg",alt:"",title:'<para class="dguide-para">Original graph with edge labels</para>'},{tagname:"img",src:"assets/hierarchical_labeling_integrated.152b1500.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where the edge labels have been placed optimally</para>'}]},{tagname:"para","class":"dguide-para tip",id:"_labeling-189-tip-001",content:'<p id="_labeling-189-simpara-005">Optimal label placement with integrated labeling can be achieved using <api-link id="_labeling-189-api-link-002" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\nas the label model for the edges.\nAs explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\nsuited in combination with integrated labeling and yields the best match for a label\nlocation that is computed by <span class="api">HierarchicLayout</span>.</p>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-node_label_awareness",content:'<span class="api">HierarchicLayout</span> provides support for node label-aware hierarchical\nlayout.\nNode labels do not need to be placed, but instead their size needs to be considered\nfor the placement, respectively the routing, of adjacent graph elements.\nTaking node labels into consideration during layout calculation guarantees that\nthey will not overlap nodes in the diagram.'},{tagname:"para",content:'<dl id="_labeling-189-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_labeling-189-term-002" class="title" role="title">Consider Node Labels</dt><dt id="_labeling-189-term-003"><api-link id="_labeling-189-api-link-003" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="_labeling-189-listitem-002">\n<p id="_labeling-189-simpara-007">Enables node label-aware layout calculation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_labeling-189-simpara-008",content:'See also the description of the <span class="api">NodeLayoutDescriptor</span> class\nin <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a> which provides the support for node label handling.'}]},{tagname:"section",id:"hierarchical_layout-grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-001",content:'<span class="api">HierarchicLayout</span> supports different layer assignment policies for graphs\nwith grouped nodes.\nThe layering for both incremental as well as non-incremental layout can be determined in either of two ways:'},{tagname:"para",content:'<ul id="hierarchical_layout-grouping-190-itemizedlist-001"><li id="hierarchical_layout-grouping-190-listitem-001"><p id="hierarchical_layout-grouping-190-simpara-002">flat, i.e., nodes are assigned to layers regardless of nesting level within group nodes</p></li><li id="hierarchical_layout-grouping-190-listitem-002"><p id="hierarchical_layout-grouping-190-simpara-003">recursively, i.e., layer assignment is computed from the most nested group up to the nodes in the root graph</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-004",content:'<a href="#/dguide/fig_hierarchical_layout-grouping-flat_recursive">Flat vs. recursive layer assignment</a> compares the layer assignment policies.\nWhen layer assignment is done flat, the group nodes of a graph and their adjacent edges are ignored.\nIn particular, this means that the layering of grouped nodes can be influenced by nodes outside of the group node.\nIn constrast, when using recursive layer assignment, grouped nodes are processed\nwithout interference from nodes outside of their group node.'},{tagname:"figure","class":"image",title:"Flat vs. recursive layer assignment",id:"fig_hierarchical_layout-grouping-flat_recursive","float":0,children:[{tagname:"img",src:"assets/hierarchical_layer_assignment_flat.0a670437.jpg",alt:"",title:'<para class="dguide-para">Flat layer assignment policy where group nodes and their adjacent edges are ignored</para>'},{tagname:"img",src:"assets/hierarchical_layer_assignment_recursive.ba7d9f60.jpg",alt:"",title:'<para class="dguide-para">Recursive layer assignment policy</para>'},{tagname:"img",src:"assets/hierarchical_layer_assignment_recursive_compact.7259e13c.jpg",alt:"",title:'<para class="dguide-para">Recursive layer assignment policy with compaction enabled</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-005",content:'Recursive processing of the grouped nodes is the default behavior.\n<a href="#/dguide/ex_hierarchical_layout-flat_layer_assignment">Setting up flat layer assignment</a> shows how to set up flat layer assignment\nwith <span class="api">HierarchicLayout</span>.'},{tagname:"example",id:"ex_hierarchical_layout-flat_layer_assignment",title:"Setting up flat layer assignment",content:'<pre class="programlisting javascript" id="hierarchical_layout-grouping-190-programlisting-001" language="javascript" format="linespecific"><code>// Set up HierarchicLayout for grouped graphs.\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\nhl.recursiveGroupLayering = false\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-006",content:"Recursive layer assignment optionally uses a compaction step where empty layers\nnext to group nodes are filled with nodes from layers below these group nodes.\nWhen compaction is disabled, an alignment policy is used to specify where\n“ordinary” nodes that are in a layer with group nodes are placed relative to\nthese group nodes.\nThese options can be configured using the following properties:"},{tagname:"para",content:'<dl id="hierarchical_layout-grouping-190-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-grouping-190-term-001"><api-link id="hierarchical_layout-grouping-190-api-link-001" data-member="compactGroups" data-text="compactGroups" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-grouping-190-listitem-003">\n<p id="hierarchical_layout-grouping-190-simpara-007">Layer compaction</p>\n</dd>\n<dt id="hierarchical_layout-grouping-190-term-002"><api-link id="hierarchical_layout-grouping-190-api-link-002" data-member="groupAlignmentPolicy" data-text="groupAlignmentPolicy" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-grouping-190-listitem-004">\n<p id="hierarchical_layout-grouping-190-simpara-008">Group node-relative alignment policy</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-009",content:'When calculating a layout for a grouped graph, <span class="api">HierarchicLayout</span> also\nsupports minimum size constraints for group nodes.\nA minimum size constraint can be conveniently used in order for the group node to\naccommodate for the size of its label.\nIf a data provider is registered with the graph using the look-up key\n<api-link id="hierarchical_layout-grouping-190-api-link-003" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link>,\nany minimum size constraints for group nodes held by this data provider are respected\nby default.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-010",content:'<span class="api">HierarchicLayout</span>’s support for grouped graphs currently does not include\nthe following features for edge ends that directly connect to group nodes: strong\nport constraints, strong (fixed) port candidates, and edge/port grouping (bus-style edge routing).'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-011",content:'<span class="api">HierarchicLayout</span>’s support for incrementally calculating layouts of\ngrouped graphs enables smooth transitions when realizing collapsing and expanding of group nodes.\n<a href="#/dguide/fig_hierarchical_layout-collapsing_expanding">Incremental hierarchical layout when group nodes are collapsed and expanded</a> presents the results of both these operations.\nThe resulting folder node and group node, respectively, is incrementally inserted\ninto the existing layout.'},{tagname:"figure","class":"image",title:"Incremental hierarchical layout when group nodes are collapsed and expanded",id:"fig_hierarchical_layout-collapsing_expanding","float":0,children:[{tagname:"img",src:"assets/hierarchical_collapse_before.3ac26f3f.jpg",alt:"",title:'<para class="dguide-para">Original hierarchical layout with group nodes</para>'},{tagname:"img",src:"assets/hierarchical_collapse.e87fcb9c.jpg",alt:"",title:'<para class="dguide-para">Collapsed group node incrementally inserted into the layout</para>'},{tagname:"img",src:"assets/hierarchical_expand.c9616f21.jpg",alt:"",title:'<para class="dguide-para">Previously collapsed group node expanded and incrementally inserted</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-190-simpara-012",content:'Incremental hierarchical layout of graphs with grouped nodes is demonstrated in the tutorial demo application\n<a href="..\\..\\demos\\complete\\hierarchicgrouping\\index.html" target="blank" class="demo-link" title="The hierarchic layout nicely expands and collapses sub-graphs organized in groups.">Hierarchic Nesting</a>.'},{tagname:"section",id:"hierarchical_layout-grouping-recursive_edges",title:"Recursive Edges Routing",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-001",content:'To obtain more stable results when collapsing and expanding group nodes in interactive\nscenarios with incremental mode enabled, <span class="api">HierarchicLayout</span>\nsupports different routing styles for so-called recursive edges.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-002",content:"Recursive edges are considered those that connect nodes which belong to different\ngroup nodes.\nThese edges are allowed to leave/enter the group nodes only at the top side or bottom\nside."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-003",content:'The <api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-001" data-member="routingStyle" data-text="routingStyle" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\nproperty in class <span class="api">EdgeLayoutDescriptor</span>\nsets the routing style for a given recursive edge.\nThe following routing styles are available:'},{tagname:"para",content:'<dl id="hierarchical_layout-grouping-recursive_edges-191-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-grouping-recursive_edges-191-term-001"><api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-002" data-member="DIRECTED" data-text="DIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link></dt><dd id="hierarchical_layout-grouping-recursive_edges-191-listitem-001">\n<p id="hierarchical_layout-grouping-recursive_edges-191-simpara-004">At their source end, recursive edges leave the containing group node(s) at the bottom\nside; at their target end, they enter the containing group node(s) at the top side</p>\n</dd>\n<dt id="hierarchical_layout-grouping-recursive_edges-191-term-002"><api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-003" data-member="UNDIRECTED" data-text="UNDIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link></dt><dd id="hierarchical_layout-grouping-recursive_edges-191-listitem-002">\n<p id="hierarchical_layout-grouping-recursive_edges-191-simpara-005">At both ends, recursive edges leave/enter the containing group node(s) at the bottom\nside or top side.</p>\n</dd>\n<dt id="hierarchical_layout-grouping-recursive_edges-191-term-003"><api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-004" data-member="OFF" data-text="OFF" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link></dt><dd id="hierarchical_layout-grouping-recursive_edges-191-listitem-003">\n<p id="hierarchical_layout-grouping-recursive_edges-191-simpara-006">Recursive edges aren’t routed specifically.\nAt both ends, they can leave/enter the containing group node(s) at the left side\nor right side in order to connect as directly as possible.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-007",content:"The following figure illustrates the different routing styles for recursive edges:"},{tagname:"figure","class":"image",title:"Recursive edges routing styles",id:"hierarchical_layout-grouping-recursive_edges-191-figure-001","float":0,children:[{tagname:"img",src:"assets/ihl-recursive-directed.96d08bae.jpg",alt:"",title:'<para class="dguide-para">Recursive edges routing style <api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-005" data-member="DIRECTED" data-text="directed" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>, …​</para>'},{tagname:"img",src:"assets/ihl-recursive-undirected.ceb06641.jpg",alt:"",title:'<para class="dguide-para">... <api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-006" data-member="UNDIRECTED" data-text="undirected" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>, …​</para>'},{tagname:"img",src:"assets/ihl-recursive-off.47bbf780.jpg",alt:"",title:'<para class="dguide-para">... and <api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-007" data-member="OFF" data-text="off" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-008",content:"Recursive edges provide more stable results when collapsing/expanding group nodes\nin incremental mode since their leaving/entering sides in group nodes remain unchanged."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-009",content:"To further improve the results and preserve as much as possible from the existing\ndrawing, the following can be applied in combination with recursive edges:"},{tagname:"para",content:'<ul id="hierarchical_layout-grouping-recursive_edges-191-itemizedlist-001"><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-004"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-010"><api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-008" data-member="recursiveGroupLayering" data-text="Recursive group layering" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>\nshould be enabled.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-005"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-011">When expanding/collapsing a group node, the original size of the group (before expanding/collapsing)\nshould be assigned using <a href="#/dguide/tab_hierarchical_keys_alternative_group_bounds">layout data</a>.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-006"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-012">The alternative path of specific edges should be assigned to <a href="#/dguide/tab_hierarchical_keys_alternative_edge_path">layout data</a> as follows:</p><para><ul id="hierarchical_layout-grouping-recursive_edges-191-itemizedlist-002"><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-007"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-013"><strong id="hierarchical_layout-grouping-recursive_edges-191-emphasis-001" class="bold" role="bold">Collapsing:</strong>\nFor edges that are incident to the group node itself and edges for which one of\nsource or target is inside the group node, the path <code>before</code>\ncollapsing the group node has to be assigned as the alternative path.\nIf source and target are either both inside or both outside the group node, no\nalternative path is required.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-008"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-014"><strong id="hierarchical_layout-grouping-recursive_edges-191-emphasis-002" class="bold" role="bold">Expanding:</strong>\nFor edges that are incident to the collapsed group node, the path <code>before</code>\nexpanding the group node has to be assigned as the alternative path.</p></li></ul></para></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-009"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-015">Folder nodes, i.e., collapsed group nodes, should also be marked using <a href="#/dguide/tab_hierarchical_keys_folder_nodes">layout data</a>.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-016",content:"Note that the following features are not supported for recursive edges:"},{tagname:"para",content:'<ul id="hierarchical_layout-grouping-recursive_edges-191-itemizedlist-003"><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-010"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-017">Sequence constraints are not supported for recursive edges routing styles\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-009" data-member="DIRECTED" data-text="DIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>\nand\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-010" data-member="UNDIRECTED" data-text="UNDIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>.\nAlso, any edge sequence constraint information will be ignored for such edges.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-011"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-018">Edge grouping is not supported for recursive edges routing styles\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-011" data-member="DIRECTED" data-text="DIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>\nand\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-012" data-member="UNDIRECTED" data-text="UNDIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>.\nAlso, any edge grouping information will be ignored, including\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-013" data-member="automaticEdgeGrouping" data-text="automatic groupings" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-012"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-019">If\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-014" data-member="directGroupContentEdgeRouting" data-text="direct routing between groups and their content" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\nfor an edge is enabled, the edge may not be strictly recursive, but may leave/enter\ngroup nodes at the left side or right side.</p></li><li id="hierarchical_layout-grouping-recursive_edges-191-listitem-013"><p id="hierarchical_layout-grouping-recursive_edges-191-simpara-020">Backloop routing is ignored for edges with <api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-015" data-member="recursiveEdgeStyle" data-text="recursive edges routing styles" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-016" data-member="DIRECTED" data-text="DIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>\nand\n<api-link id="hierarchical_layout-grouping-recursive_edges-191-api-link-017" data-member="UNDIRECTED" data-text="UNDIRECTED" data-type="yfiles.hierarchic.RecursiveEdgeStyle"></api-link>,\nincluding edges where source or target are not inside a group node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grouping-recursive_edges-191-simpara-021",content:'Setup of a grouped graph’s hierarchy of nodes (using <a href="#/dguide/tab_hierarchical_keys_group">GROUP_DPKEY</a>,\n<a href="#/dguide/tab_hierarchical_keys_node_id">NODE_ID_DPKEY</a>,\nand <a href="#/dguide/tab_hierarchical_keys_parent_node_id">PARENT_NODE_ID_DPKEY</a>)\nis done transparently by the <span class="api">IGraph</span>-related adapter mechanisms.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.'}]}]},{tagname:"section",id:"hierarchical_layout-non_incremental_layout_mode",title:"Non-incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-non_incremental_layout_mode-192-simpara-001",content:'Upon creation, <span class="api">HierarchicLayout</span> is in non-incremental layout mode\nby default, i.e., it re-computes the entire layout of a given graph.\nThis is in accordance with the behavior of the other yFiles for HTML major layout algorithms.\nNote that the non-incremental hierarchical layout is also referred to as <span class="def">layout from scratch</span>.\n<a href="#/dguide/ex_hierarchical_layout-non_incremental_layout_mode">Switching to complete re-layout</a> shows how to explicitly switch <span class="api">HierarchicLayout</span>\nto non-incremental layout mode.'},{tagname:"example",id:"ex_hierarchical_layout-non_incremental_layout_mode",title:"Switching to complete re-layout",content:'<pre class="programlisting javascript" id="hierarchical_layout-non_incremental_layout_mode-192-programlisting-001" language="javascript" format="linespecific"><code>const hl = getMyHierarchicLayout()\r\n\r\n// Switching HierarchicLayout to do a complete re-layout of a graph.\r\nhl.layoutMode = yfiles.hierarchic.LayoutMode.FROM_SCRATCH\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-non_incremental_layout_mode-192-simpara-002",content:"In the general three-phase process to generate a hierarchical layout, the first\nphase, that assigns the nodes of a graph to different layers, …​"},{tagname:"para",content:'<ul id="hierarchical_layout-non_incremental_layout_mode-192-itemizedlist-001"><li id="hierarchical_layout-non_incremental_layout_mode-192-listitem-001"><p id="hierarchical_layout-non_incremental_layout_mode-192-simpara-003">knows a variety of <a href="#/dguide/hierarchical_layout-layer_assignment">predefined layering strategies</a>.</p></li><li id="hierarchical_layout-non_incremental_layout_mode-192-listitem-002"><p id="hierarchical_layout-non_incremental_layout_mode-192-simpara-004">Additional support for custom layering requirements that are not covered by these\nstrategies is provided through <a href="#/dguide/hierarchical_layout-constrained_layer_assignment">constrained layer assignment</a>.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-non_incremental_layout_mode-192-simpara-005",content:"The second phase, which is responsible for finding a good ordering of the nodes in each layer, …​"},{tagname:"para",content:'<ul id="hierarchical_layout-non_incremental_layout_mode-192-itemizedlist-002"><li id="hierarchical_layout-non_incremental_layout_mode-192-listitem-003"><p id="hierarchical_layout-non_incremental_layout_mode-192-simpara-006">knows of a similar scheme to achieve <a href="#/dguide/hierarchical_layout-node_order_options">custom sequencing</a>\nrequirements that are not covered by the default behavior.</p></li></ul>'},{tagname:"section",id:"hierarchical_layout-layer_assignment",title:"Layer Assignment Options",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-layer_assignment-193-simpara-001",content:'<span class="api">HierarchicLayout</span> assigns the nodes of a graph to separate layers using\na <api-link id="hierarchical_layout-layer_assignment-193-api-link-001" data-member="" data-text="ILayerer" data-type="yfiles.hierarchic.ILayerer"></api-link> implementation.\nLayers are ordered and, assuming a top-to-bottom orientation for the main flow,\nare arranged vertically from top to bottom (see also <a href="#/dguide/fig_hierarchical_layout-terminology">Layers in the hierarchical layout style</a>).'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-layer_assignment-193-simpara-002",content:"The layer order is a 1-based index for the layers that at the same time denotes\nthe so-called rank of all nodes assigned to a layer.\nNote that the rank of a node is important in conjunction with some of the Layerer implementations."},{tagname:"section",id:"_from_scratch_layering_strategy",title:"From Scratch Layering Strategy",children:[{tagname:"para","class":"dguide-para",id:"_from_scratch_layering_strategy-194-simpara-001",content:'The layering strategy in non-incremental layout mode can be set using the\n<api-link id="_from_scratch_layering_strategy-194-api-link-001" data-member="fromScratchLayeringStrategy" data-text="fromScratchLayeringStrategy" data-type="yfiles.hierarchic.HierarchicLayout"></api-link> property.\nAccording to the layering strategy constant from the <api-link id="_from_scratch_layering_strategy-194-api-link-002" data-member="" data-text="LayeringStrategy" data-type="yfiles.hierarchic.LayeringStrategy"></api-link>\nenum type, the actual <span class="api">ILayerer</span> implementation is chosen.\nInternally, <span class="api">HierarchicLayout</span> also sets up any specific configuration\nof the <span class="api">ILayerer</span> if necessary.'},{tagname:"para","class":"dguide-para",id:"_from_scratch_layering_strategy-194-simpara-002",content:"The following layering strategy constants are available:"},{tagname:"para",content:'<dl id="_from_scratch_layering_strategy-194-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_from_scratch_layering_strategy-194-term-001"><api-link id="_from_scratch_layering_strategy-194-api-link-003" data-member="HIERARCHICAL_TOPMOST" data-text="HIERARCHICAL_TOPMOST" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-001">\n<p id="_from_scratch_layering_strategy-194-simpara-003">A simple hierarchical layering variant.\nAll nodes without incoming edges (indegree zero) will be assigned to the topmost layer of the layout.\nThe number of separate layers will be as small as possible.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-004" data-member="" data-text="TopologicalLayerer" data-type="yfiles.hierarchic.TopologicalLayerer"></api-link> with ranking policy\n<code><span class="api">NO_RERANKING</span></code>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-002"><api-link id="_from_scratch_layering_strategy-194-api-link-005" data-member="HIERARCHICAL_OPTIMAL" data-text="HIERARCHICAL_OPTIMAL" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-002">\n<p id="_from_scratch_layering_strategy-194-simpara-004">An optimal hierarchical layering strategy.\nThe layer distance of an edge is the absolute difference between the layer numbers\n(ranks) of its source and target node.\nLayer assignment will be done in such a way that the overall sum of the layer distances\nof all edges in the layout is minimal.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-006" data-member="" data-text="WeightedLayerer" data-type="yfiles.hierarchic.WeightedLayerer"></api-link>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-003"><api-link id="_from_scratch_layering_strategy-194-api-link-007" data-member="HIERARCHICAL_TIGHT_TREE" data-text="HIERARCHICAL_TIGHT_TREE" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-003">\n<p id="_from_scratch_layering_strategy-194-simpara-005">A good heuristic that approximates the layering done by <strong id="_from_scratch_layering_strategy-194-emphasis-001" class="bold" role="bold">Hierarchical — Optimal</strong>.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-008" data-member="" data-text="TopologicalLayerer" data-type="yfiles.hierarchic.TopologicalLayerer"></api-link> with\nranking policy <code><span class="api">TIGHT_TREE</span></code>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-004"><api-link id="_from_scratch_layering_strategy-194-api-link-009" data-member="HIERARCHICAL_DOWNSHIFT" data-text="HIERARCHICAL_DOWNSHIFT" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-004">\n<p id="_from_scratch_layering_strategy-194-simpara-006">An even faster heuristic that approximates the ranking done by <strong id="_from_scratch_layering_strategy-194-emphasis-002" class="bold" role="bold">Hierarchical — Optimal</strong>\nby down-shifting some nodes in the layering.\nThe quality is usually worse than the one produced by <strong id="_from_scratch_layering_strategy-194-emphasis-003" class="bold" role="bold">Tight Tree Heuristic</strong>.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-010" data-member="" data-text="TopologicalLayerer" data-type="yfiles.hierarchic.TopologicalLayerer"></api-link> with\nranking policy <code><span class="api">DOWN_SHIFT</span></code>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-005"><api-link id="_from_scratch_layering_strategy-194-api-link-011" data-member="BFS" data-text="BFS" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-005">\n<p id="_from_scratch_layering_strategy-194-simpara-007">Layering based on a breadth-first search (BFS).\nAll edges will span at most one layer in the resulting drawing.\nEdges between nodes that belong to the same layer are possible.\nTo specify nodes that should be placed into the first layer, specify\n<a href="#/dguide/tab_hierarchical_keys_bfslayerer_core_nodes">supplemental layout data accordingly</a>.\nNote that in the absence of such data all nodes that have no incoming\nedges (indegree zero) are placed into the first layer.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-012" data-member="" data-text="BFSLayerer" data-type="yfiles.hierarchic.BFSLayerer"></api-link>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-006"><api-link id="_from_scratch_layering_strategy-194-api-link-013" data-member="FROM_SKETCH" data-text="FROM_SKETCH" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-006">\n<p id="_from_scratch_layering_strategy-194-simpara-008">Layer assignment strategy that uses the initial y coordinates of the nodes to determine\na layering.\nIt tries to find a layering that is similar to the one in the input graph.\nWhen this layering strategy is used, the layout algorithm may place nodes in the\nsame layer, even though they are connected by an edge.\nThese inner layer edges are always routed in an orthogonal style.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-014" data-member="" data-text="AsIsLayerer" data-type="yfiles.hierarchic.AsIsLayerer"></api-link>.</p>\n</dd>\n<dt id="_from_scratch_layering_strategy-194-term-007"><api-link id="_from_scratch_layering_strategy-194-api-link-015" data-member="USER_DEFINED" data-text="USER_DEFINED" data-type="yfiles.hierarchic.LayeringStrategy"></api-link></dt><dd id="_from_scratch_layering_strategy-194-listitem-007">\n<p id="_from_scratch_layering_strategy-194-simpara-009">The ranks of the nodes will be given by the user.\nTo specify the ranks, <a href="#/dguide/tab_hierarchical_keys_given_layers">configure supplemental layout data accordingly</a>.\nUses <api-link id="_from_scratch_layering_strategy-194-api-link-016" data-member="" data-text="GivenLayersLayerer" data-type="yfiles.hierarchic.GivenLayersLayerer"></api-link>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_from_scratch_layering_strategy-194-simpara-010",content:'Except when using one of the latter three layering strategies, the nodes of a graph\nare assigned to layers such that as much as possible edges of the graph will have\nthe same overall orientation.\nWith the <strong id="_from_scratch_layering_strategy-194-emphasis-004" class="bold" role="bold">From Sketch</strong> and <strong id="_from_scratch_layering_strategy-194-emphasis-005" class="bold" role="bold">User-defined Layering</strong> strategies (last and second-to-last\nstrategy constants), the layering is prescribed by some external means and there\ncannot be much said about the direction of the edges.'
},{tagname:"para","class":"dguide-para",id:"_from_scratch_layering_strategy-194-simpara-011",content:'Using either the <strong id="_from_scratch_layering_strategy-194-emphasis-006" class="bold" role="bold">From Sketch</strong> or <strong id="_from_scratch_layering_strategy-194-emphasis-007" class="bold" role="bold">User-defined Layering</strong> strategies, it is possible\nto specify the exact layering for all nodes of a graph.\nIn cases where only a few nodes need to fulfill specific layering requirements,\nthe <a href="#/dguide/hierarchical_layout-constrained_layer_assignment">constrained layer assignment</a>\nscheme is ideally suited.'},{tagname:"para","class":"dguide-para note",id:"_from_scratch_layering_strategy-194-note-001",content:'<p id="_from_scratch_layering_strategy-194-simpara-012">When <a href="#/dguide/hierarchical_layout-undirected_edges">undirected edges</a>\nneed to be taken into account during layer assignment, then any layering strategy\nspecified as outlined above is ignored and instead the\n<a href="#/dguide/hierarchical_layout-constrained_layer_assignment">constrained layer assignment</a>\nscheme is used.</p>'}]}]},{tagname:"section",id:"hierarchical_layout-node_order_options",title:"Node Order Options",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-node_order_options-195-simpara-001",content:'In a hierarchical layout, the ordering of the nodes within a layer determines the\nnumber of edge crossings in the resulting layout.\nBy default, <span class="api">HierarchicLayout</span> uses\nclass <api-link id="hierarchical_layout-node_order_options-195-api-link-001" data-member="" data-text="DefaultLayerSequencer" data-type="yfiles.hierarchic.DefaultLayerSequencer"></api-link>\nfor determining this node order.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-node_order_options-195-simpara-002",content:'The sequencing that DefaultLayerSequencer generates can be conveniently customized\nusing the support for <a href="#/dguide/hierarchical_layout-constrained_node_sequencing">constrained node sequencing</a>.'}]}]},{tagname:"section",id:"hierarchical_layout-incremental_layout",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-196-simpara-001",content:'Upon creation, <span class="api">HierarchicLayout</span> is in non-incremental layout mode\nby default, i.e., it recomputes the entire layout of a given graph.\nThe other layout mode, namely incremental layout, needs to be turned on explicitly.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-196-simpara-002",content:'Incremental layout is closely related to <strong id="hierarchical_layout-incremental_layout-196-emphasis-001" class="bold" role="bold">layout from sketch</strong>, where a given arrangement\nof nodes is taken as the starting point for a layout calculation and also as a specification\nfor the calculation’s desired outcome.\nCompared to a complete re-layout of a graph, the main advantage of incremental layout\nis that distinct parts of a graph can be rearranged while the remainder of the graph,\nwhich defines the <span class="def">sketch</span>, is not, or only slightly, changed.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-196-simpara-003",content:"Carefully note that the layout algorithm may move graph elements that are part of\nthe sketch in order to optimally insert any incremental graph elements.\nIn other words, incremental layout does not guarantee that any non-incremental parts\nof a graph stay exactly as they were.\nHowever, they will keep their relative position."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-196-simpara-004",content:'<a href="#/dguide/ex_hierarchical_layout-incremental_layout">Switching to incremental layout</a> shows how to switch\n<span class="api">HierarchicLayout</span> to incremental layout mode.'},{tagname:"example",id:"ex_hierarchical_layout-incremental_layout",title:"Switching to incremental layout",content:'<pre class="programlisting javascript" id="hierarchical_layout-incremental_layout-196-programlisting-001" language="javascript" format="linespecific"><code>const hl = getMyHierarchicLayout()\r\n\r\n// Switching HierarchicLayout to do incremental layout of a graph.\r\nhl.layoutMode = yfiles.hierarchic.LayoutMode.INCREMENTAL\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-196-simpara-005",content:'Additionally, any graph elements that shall be processed using incremental semantics\nneed to be annotated appropriately so that the algorithm is able to discern them\ncorrectly from the parts that define the sketch.\nAnnotation of the incremental parts of a graph is achieved by means of a data provider.\nSee <a href="#/dguide/hierarchical_layout-incremental_layout-specifying_hints">Specifying Hints</a>.'},{tagname:"section",id:"hierarchical_layout-incremental_layout-use_cases",title:"Use Cases",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-use_cases-197-simpara-001",content:'Incremental layout has two major use cases, which both involve <strong id="hierarchical_layout-incremental_layout-use_cases-197-emphasis-001" class="bold" role="bold">layout from sketch</strong>:'},{tagname:"para",content:'<ul id="hierarchical_layout-incremental_layout-use_cases-197-itemizedlist-001"><li id="hierarchical_layout-incremental_layout-use_cases-197-listitem-001"><p id="hierarchical_layout-incremental_layout-use_cases-197-simpara-002">Interactive creation of a graph structure where the layout calculation is performed\ndynamically with each newly inserted graph element.</p></li><li id="hierarchical_layout-incremental_layout-use_cases-197-listitem-002"><p id="hierarchical_layout-incremental_layout-use_cases-197-simpara-003">Subsequent improvement of distinct parts from an already existing graph layout,\nwhere the remainder of the layout stays mainly unchanged.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-use_cases-197-simpara-004",content:"Both these use cases are illustrated below."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-use_cases-197-simpara-005",content:'<a href="#/dguide/fig_hierarchical_layout-incremental_layout-sequence">Sequence of incremental layouts</a> shows a sequence of incremental layouts generated\nby class <span class="api">HierarchicLayout</span>.\nStarting with a given graph, new graph elements are inserted optimally into the\nexisting drawing from the step before (which defines the sketch).\nNote the emphasis for newly added elements.'},{tagname:"figure","class":"image",title:"Sequence of incremental layouts",id:"fig_hierarchical_layout-incremental_layout-sequence","float":0,children:[{tagname:"img",src:"assets/hierarchical_incremental_sequence_01.11f6d713.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/hierarchical_incremental_sequence_02.f3940982.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/hierarchical_incremental_sequence_03.e01dd9dc.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/hierarchical_incremental_sequence_04.23d7661e.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-use_cases-197-simpara-006",content:'The second major use case for incremental layout, the optimization of distinct parts\nfrom an existing hierarchical layout is shown in <a href="#/dguide/fig_hierarchical_layout-incremental_layout-for_optimization">Incremental layout used for optimization</a>.\nThere, an entire subgraph is calculated anew and optimally placed into the given\ndrawing that defines the sketch.'},{tagname:"figure","class":"image",title:"Incremental layout used for optimization",id:"fig_hierarchical_layout-incremental_layout-for_optimization","float":0,children:[{tagname:"img",src:"assets/hierarchical_incremental_optimization_during.d590dbb3.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/hierarchical_incremental_optimization_after.168eaeb4.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-use_cases-197-simpara-007",content:'Both use cases are handled by annotating the “new” graph elements by means of so-called\nhint objects which are used by the algorithm during layout calculation in incremental mode.\nThe hint object for a graph element that shall be processed using incremental semantics\ncan be provided via <a href="#/dguide/tab_hierarchical_keys_incremental_hints">supplemental layout data objects</a>.'}]},{tagname:"section",id:"hierarchical_layout-incremental_layout-specifying_hints",title:"Specifying Hints",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-001",content:'Using <a href="#/dguide/tab_hierarchical_keys_incremental_hints">layout data</a> you can easily specify hints\nfor the most common use cases:'},{tagname:"para",content:'<ul id="hierarchical_layout-incremental_layout-specifying_hints-198-itemizedlist-001"><li id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-001"><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-002">insert nodes into specified layers of the existing drawing</p></li><li id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-002"><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-003">place nodes into suitable layers of the existing drawing</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-004",content:'Class <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-001" data-member="" data-text="IncrementalHintItemMapping" data-type="yfiles.hierarchic.IncrementalHintItemMapping"></api-link>,\nwhich can be assigned to <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-002" data-member="incrementalHints" data-text="HierarchicLayoutData.incrementalHints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link>,\nprovides two properties for this:'},{tagname:"para",content:'<dl id="hierarchical_layout-incremental_layout-specifying_hints-198-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-001"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-003" data-member="incrementalSequencingItems" data-text="IncrementalHintItemMapping.incrementalSequencingItems" data-type="yfiles.hierarchic.IncrementalHintItemMapping"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-003">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-005">The layout algorithm places the specified node on an already existing layer.</p>\n</dd>\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-002"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-004" data-member="incrementalLayeringNodes" data-text="IncrementalHintItemMapping.incrementalLayeringNodes" data-type="yfiles.hierarchic.IncrementalHintItemMapping"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-004">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-006">The layout algorithm places the specified node in a suitable layer, possibly creating new layers.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-007",content:"The following example defines a set of nodes that should be laid out incrementally:"},{tagname:"example",id:"ex_hierarchical_layout-incremental_layout-simple_hints",title:"Setting incremental hints for nodes using layout data",content:'<pre class="programlisting javascript" id="hierarchical_layout-incremental_layout-specifying_hints-198-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\n\r\n// Get a collection of those nodes that should be processed using incremental\r\n// layout semantics.\r\nconst incrementalNodes = myGetIncrementalNodes()\r\n\r\n// Create the layout data and set the incremental hints on it.\r\nconst layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n\r\n// Set the incremental nodes item collection on it.\r\n// There are other ways to define the incremental hints for nodes, not\r\n// using a collection. For example, you could specify a function that creates\r\n// the incremental hints for each node on the fly. But in this example we\r\n// simply use a collection.\r\nlayoutData.incrementalHints.incrementalLayeringNodes.items = incrementalNodes\r\n\r\n// Now, set incremental mode and invoke layout calculation with the previously\r\n// defined layout data.\r\nhl.LayoutMode = yfiles.hierarchic.LayoutMode.INCREMENTAL\r\ngraph.applyLayout(hl, layoutData)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-008",content:"There are more specific hints for other use cases available, such as:"},{tagname:"para",content:'<ul id="hierarchical_layout-incremental_layout-specifying_hints-198-itemizedlist-002"><li id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-005"><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-009">place nodes into suitable layers of the existing drawing with respect to their exact\ncoordinates (either both directions, or confined to only one direction)</p></li><li id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-006"><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-010">place groups incrementally but keep their content as it is</p></li><li id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-007"><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-011">route edges</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-012",content:'In these use cases, you need to use a so-called <span class="def">hint factory</span> which can create such special hints:'},{tagname:"para",content:'<dl id="hierarchical_layout-incremental_layout-specifying_hints-198-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-003"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-005" data-member="createIncrementalGroupHint(Object)" data-text="createIncrementalGroupHint(forItemId:&#xA0;Object):&#xA0;Object" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-008">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-013">The group will be placed on a suitable position. All hints of the descendants of a group are interpreted relative to the group node. Descendants without hints maintain their relative order within the group node (but not with elements outside the group).</p>\n</dd>\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-004"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-006" data-member="createUseExactCoordinatesHint(Object)" data-text="createUseExactCoordinatesHint(forNodeId:&#xA0;Object):&#xA0;Object" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-009">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-014">The node will be placed in an already existing layer that is suitable for its location. The position within its layer will be determined by its current location.\nWhile for nodes without hints the algorithm only keeps the relative positions, for nodes with an exact coordinate hint\nthe algorithm should also preserve the exact coordinates. Note that using exact coordinate hints may lead\nto drawing artifacts like node overlaps and node-edge intersections.</p>\n</dd>\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-005"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-007" data-member="createUseExactLayerCoordinatesHint(Object)" data-text="createUseExactLayerCoordinatesHint(forNodeId:&#xA0;Object):&#xA0;Object" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-010">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-015">The node will be placed in an already existing layer that is suitable for its location. The position within its layer is not dependent on the location of the item.</p>\n</dd>\n<dt id="hierarchical_layout-incremental_layout-specifying_hints-198-term-006"><api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-008" data-member="createUseExactSequenceCoordinatesHint(Object)" data-text="createUseExactSequenceCoordinatesHint(forNodeId:&#xA0;Object):&#xA0;Object" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link></dt><dd id="hierarchical_layout-incremental_layout-specifying_hints-198-listitem-011">\n<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-016">The position within the sequence of its layer will be determined by its current coordinates.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-017",content:"When inserting nodes or routing edges according to their hint, nodes and edges from\nthe graph that have no hint object associated retain their original relative order\nboth within layers as well as from layer to layer."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-incremental_layout-specifying_hints-198-simpara-018",content:'Class <span class="api">HierarchicLayout</span> has a property holding a hint factory\nobject of type <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-009" data-member="" data-text="IIncrementalHintsFactory" data-type="yfiles.hierarchic.IIncrementalHintsFactory"></api-link>.\nCode that shows the usage of a hint factory is presented in the following example:'},{tagname:"example",id:"ex_hierarchical_layout-incremental_layout-hint_factory",title:"Using a hint factory (IGraph API)",content:'<pre class="programlisting javascript" id="hierarchical_layout-incremental_layout-specifying_hints-198-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\n\r\n// Create an IMapper to store the hints for the incremental layout mechanism.\r\nconst hintMap = new yfiles.collections.Mapper()\r\n\r\n// Get the hint factory from the incremental layout algorithm.\r\nconst hintsFactory = hl.createIncrementalHintsFactory()\r\n\r\n// Get a collection of those nodes that should be processed using incremental\r\n// layout semantics.\r\nconst incrementalNodes = myGetIncrementalNodes()\r\n\r\n// Associate the incremental nodes with hints from the hint factory.\r\nincrementalNodes.forEach(n => hintMap.set(n, hintsFactory.createLayerIncrementallyHint(n)))\r\n\r\ngraph.mapperRegistry.addMapper(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.lang.Object.$class,\r\n  yfiles.hierarchic.HierarchicLayout.INCREMENTAL_HINTS_DP_KEY,\r\n  hintMap\r\n)\r\n\r\n// Now, set incremental mode and invoke layout calculation.\r\nhl.layoutMode = yfiles.hierarchic.LayoutMode.INCREMENTAL\r\ngraph.applyLayout(hl)\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"hierarchical_layout-incremental_layout-specifying_hints-198-important-001",content:'<p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-019">The layout algorithm queries hints from the <a href="#/dguide/tab_hierarchical_keys_incremental_hints">layout data</a> for both nodes and edges.\nBecause of this, the layout data requires this information as an object of type <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-010" data-member="" data-text="IncrementalHintItemMapping" data-type="yfiles.hierarchic.IncrementalHintItemMapping"></api-link>.</p><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-020">If you are using a data provider instead of layout data, the data provider that is registered using the look-up key\n<api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-011" data-member="INCREMENTAL_HINTS_DP_KEY" data-text="INCREMENTAL_HINTS_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>\nalso holds data for both nodes and edges.\nHence, neither <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-012" data-member="" data-text="INodeMap" data-type="yfiles.algorithms.INodeMap"></api-link> nor <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-013" data-member="" data-text="IEdgeMap" data-type="yfiles.algorithms.IEdgeMap"></api-link>\nimplementations can be used as the basis for this data provider.</p><p id="hierarchical_layout-incremental_layout-specifying_hints-198-simpara-021">An alternative basis for the data provider would be, e.g., an <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-014" data-member="" data-text="IDataMap" data-type="yfiles.algorithms.IDataMap"></api-link> as returned\nby method <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-015" data-member="createHashedDataMap()" data-text="createHashedDataMap" data-type="yfiles.algorithms.Maps"></api-link>, or any\ncustom <api-link id="hierarchical_layout-incremental_layout-specifying_hints-198-api-link-016" data-member="" data-text="IDataProvider" data-type="yfiles.algorithms.IDataProvider"></api-link> implementation that is\nnot restricted to one type of graph element.</p>'}]}]},{tagname:"section",id:"hierarchical_layout-constrained_layer_assignment",title:"Constrained Layer Assignment",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-001",content:'<span class="api">HierarchicLayout</span> supports user-defined constrained layer assignment for from-scratch\nlayout mode as well as for incrementally inserted graph elements in incremental layout mode.\nNodes can be restricted to be placed either'},{tagname:"para",content:'<ul id="hierarchical_layout-constrained_layer_assignment-199-itemizedlist-001"><li id="hierarchical_layout-constrained_layer_assignment-199-listitem-001"><p id="hierarchical_layout-constrained_layer_assignment-199-simpara-002">absolute, i.e., into the first or last layer of the layout, or</p></li><li id="hierarchical_layout-constrained_layer_assignment-199-listitem-002"><p id="hierarchical_layout-constrained_layer_assignment-199-simpara-003">relative to a given reference node into the same layer, a layer preceding that of\nthe reference node, or a layer following that of the reference node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-004",content:'The remaining nodes, that have no constraints defined, are processed using the layerer\nthat is set with <span class="api">HierarchicLayout</span>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-005",content:"Note that relative layer constraints in incremental layout mode can also be specified\nbetween nodes that belong to the sketch and nodes that shall be processed using incremental semantics.\nRelative constraints between nodes that both belong to the sketch are ignored."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-006",content:'<a href="#/dguide/fig_hierarchical_layout-constrained_layer_assignment">Constrained hierarchical layering</a> shows a resulting hierarchical layout\nwhere nodes with an absolute constraint specified for them are placed in the topmost\nlayer (note the emphasis on these nodes).\nNormally, i.e., when no constraints are specified, these nodes are placed in the\nvery center of the graph as can be observed in the original hierarchical layout.'},{tagname:"figure","class":"image",title:"Constrained hierarchical layering",id:"fig_hierarchical_layout-constrained_layer_assignment","float":0,children:[{tagname:"img",src:"assets/hierarchical_constraint_layering_nbt.686de6c1.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking constraints into account)</para>'},{tagname:"img",src:"assets/hierarchical_constraint_layering_topmost.cccbf901.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where the constrained nodes are placed in the topmost layer.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-007",content:'<api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-001" data-member="layerConstraints" data-text="HierarchicLayoutData.layerConstraints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link> returns an instance of <api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-002" data-member="" data-text="LayerConstraintData" data-type="yfiles.hierarchic.LayerConstraintData"></api-link>\nwhich provides the following methods to define both absolute and relative layer constraints for nodes.'},{tagname:"para",content:'<dl id="hierarchical_layout-constrained_layer_assignment-199-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-constrained_layer_assignment-199-term-001"><api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-003" data-member="placeAtTop(yfiles.graph.INode)" data-text="placeAtTop(node:&#xA0;INode):&#xA0;void" data-type="yfiles.hierarchic.LayerConstraintData"></api-link></dt><dt id="hierarchical_layout-constrained_layer_assignment-199-term-002"><api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-004" data-member="placeAtBottom(yfiles.graph.INode)" data-text="placeAtBottom(node:&#xA0;INode):&#xA0;void" data-type="yfiles.hierarchic.LayerConstraintData"></api-link></dt><dd id="hierarchical_layout-constrained_layer_assignment-199-listitem-003">\n<p id="hierarchical_layout-constrained_layer_assignment-199-simpara-008">Absolute constraints.</p>\n</dd>\n<dt id="hierarchical_layout-constrained_layer_assignment-199-term-003"><api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-005" data-member="placeInSameLayer(yfiles.graph.INode,yfiles.graph.INode)" data-text="placeInSameLayer(referenceNode:&#xA0;INode, sameLayerNode:&#xA0;INode):&#xA0;void" data-type="yfiles.hierarchic.LayerConstraintData"></api-link></dt><dt id="hierarchical_layout-constrained_layer_assignment-199-term-004"><api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-006" data-member="placeAbove(yfiles.graph.INode,yfiles.graph.INode,number,number)" data-text="placeAbove(referenceNode:&#xA0;INode, aboveNode:&#xA0;INode, minDistance:&#xA0;number, weight:&#xA0;number):&#xA0;void" data-type="yfiles.hierarchic.LayerConstraintData"></api-link></dt><dt id="hierarchical_layout-constrained_layer_assignment-199-term-005"><api-link id="hierarchical_layout-constrained_layer_assignment-199-api-link-007" data-member="placeBelow(yfiles.graph.INode,yfiles.graph.INode,number,number)" data-text="placeBelow(referenceNode:&#xA0;INode, belowNode:&#xA0;INode, minDistance:&#xA0;number, weight:&#xA0;number):&#xA0;void" data-type="yfiles.hierarchic.LayerConstraintData"></api-link></dt><dd id="hierarchical_layout-constrained_layer_assignment-199-listitem-004">\n<p id="hierarchical_layout-constrained_layer_assignment-199-simpara-009">Constraints relative to a given reference node from the same graph instance.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-010",content:'<a href="#/dguide/ex_hierarchical_layout-layerconstraintfactory_creation">Specifying layer constraints</a> shows how to specify layer constraints for two nodes.'},{tagname:"example",id:"ex_hierarchical_layout-layerconstraintfactory_creation",title:"Specifying layer constraints",content:'<pre class="programlisting javascript" id="hierarchical_layout-constrained_layer_assignment-199-programlisting-001" language="javascript" format="linespecific"><code>const hierarchicLayoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\nconst layerData = hierarchicLayoutData.layerConstraints\r\n// place node1 in the top layer\r\nlayerData.placeAtTop(node1)\r\n// place node2 in a layer below node1\r\nlayerData.placeBelow(node1, node2)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_layer_assignment-199-simpara-011",content:"The methods for defining relative constraints optionally support specifying a minimum distance\nto the relative node as well as a priority value of the constraint.\nA constraint’s priority is a positive integral value that is used to resolve conflicting\nconstraint definitions by not considering low-priority constraints."}]},{tagname:"section",id:"hierarchical_layout-constrained_node_sequencing",title:"Constrained Node Sequencing",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-001",content:"Constrained node sequencing enables user-defined ordering of nodes within a given layer.\nNodes can be restricted to be placed either"},{tagname:"para",content:'<ul id="hierarchical_layout-constrained_node_sequencing-200-itemizedlist-001"><li id="hierarchical_layout-constrained_node_sequencing-200-listitem-001"><p id="hierarchical_layout-constrained_node_sequencing-200-simpara-002">absolute, i.e., at the beginning or at the end of their layer, or</p></li><li id="hierarchical_layout-constrained_node_sequencing-200-listitem-002"><p id="hierarchical_layout-constrained_node_sequencing-200-simpara-003">relative to a given reference node before it or after it.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-004",content:"Any remaining nodes that have no constraints defined are placed by the algorithm\nat optimal positions within their respective layer.\nIn particular, this means that for a set of nodes {A, B, C} within a layer where\nrelative constraints specify a sequence like so: {A before B, B before C}, other\nnodes from the layer might still intermit the sequence in the resulting layout."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-005",content:'<a href="#/dguide/fig_hierarchical_layout-constrained_node_sequencing">Constrained node sequencing</a> shows resulting hierarchical layouts\nwhere nodes are placed according to different sequence constraints.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-006",content:"The first before/after pair shows a result where nodes with an absolute constraint\nspecified for them are placed at the beginning of their respective layers (note\nthe emphasis on these nodes).\nNormally, i.e., when no constraints are specified, these nodes are placed in the\nvery center of the graph as can be observed in the original hierarchical layout."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-007",content:"The other pair depicts the result of using relative constraints to achieve a specified\nsequence for some nodes within their layer."},{tagname:"figure","class":"image",title:"Constrained node sequencing",id:"fig_hierarchical_layout-constrained_node_sequencing","float":0,children:[{tagname:"img",src:"assets/hierarchical_sequence_head_before.09fdeb8e.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking constraints into account)</para>'},{tagname:"img",src:"assets/hierarchical_sequence_head.2516cb50.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where the constrained nodes are placed at the beginning of their respective layers.</para>'},{tagname:"img",src:"assets/hierarchical_sequence_abc_before.ec25058d.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking constraints into account).</para>'},{tagname:"img",src:"assets/hierarchical_sequence_abc.db0e134c.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where the constrained nodes are placed lexicographically ordered within their layer.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-008",content:'<api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-001" data-member="sequenceConstraints" data-text="HierarchicLayoutData.sequenceConstraints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link>\nallows to conveniently define both absolute and relative node order constraints. It returns an instance of <api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-002" data-member="" data-text="SequenceConstraintData" data-type="yfiles.hierarchic.SequenceConstraintData"></api-link>\nwhich provides provides the following methods to specify node order constraints:'},{tagname:"para",content:'<dl id="hierarchical_layout-constrained_node_sequencing-200-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-constrained_node_sequencing-200-term-001"><api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-003" data-member="placeAtHead(yfiles.graph.IModelItem)" data-text="placeAtHead(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.hierarchic.SequenceConstraintData"></api-link></dt><dt id="hierarchical_layout-constrained_node_sequencing-200-term-002"><api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-004" data-member="placeAtTail(yfiles.graph.IModelItem)" data-text="placeAtTail(item:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.hierarchic.SequenceConstraintData"></api-link></dt><dd id="hierarchical_layout-constrained_node_sequencing-200-listitem-003">\n<p id="hierarchical_layout-constrained_node_sequencing-200-simpara-009">Absolute constraints</p>\n</dd>\n<dt id="hierarchical_layout-constrained_node_sequencing-200-term-003"><api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-005" data-member="placeBefore(yfiles.graph.IModelItem,yfiles.graph.IModelItem)" data-text="placeBefore(item:&#xA0;IModelItem, beforeItem:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.hierarchic.SequenceConstraintData"></api-link></dt><dt id="hierarchical_layout-constrained_node_sequencing-200-term-004"><api-link id="hierarchical_layout-constrained_node_sequencing-200-api-link-006" data-member="placeAfter(yfiles.graph.IModelItem,yfiles.graph.IModelItem)" data-text="placeAfter(item:&#xA0;IModelItem, afterItem:&#xA0;IModelItem):&#xA0;void" data-type="yfiles.hierarchic.SequenceConstraintData"></api-link></dt><dd id="hierarchical_layout-constrained_node_sequencing-200-listitem-004">\n<p id="hierarchical_layout-constrained_node_sequencing-200-simpara-010">Constraints relative to a given reference item</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-constrained_node_sequencing-200-simpara-011",content:'<a href="#/dguide/ex_hierarchical_layout-sequenceconstraintfactory_creation">Specifying sequence constraints</a> shows how the sequence constraints can be\nspecified for given nodes'},{tagname:"example",id:"ex_hierarchical_layout-sequenceconstraintfactory_creation",title:"Specifying sequence constraints",content:'<pre class="programlisting javascript" id="hierarchical_layout-constrained_node_sequencing-200-programlisting-001" language="javascript" format="linespecific"><code>const hierarchicLayoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\nconst sequenceData = hierarchicLayoutData.sequenceConstraints\r\n// place node1 first\r\nsequenceData.placeAtHead(node1)\r\n// place node2 after node1\r\nsequenceData.placeAfter(node1, node2)\n</code></pre>'}]},{tagname:"section",id:"hierarchical_layout-undirected_edges",title:"Layer Assignment with Undirected Edges",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-001",content:"To determine the layering for the nodes of a graph, the layer assignment phase by\ndefault takes into account the directedness of all edges of the graph.\nFrom the very nature of the hierarchical layout style this means that the nodes\nof a graph are arranged such that the (majority of) edges show the same overall\norientation in the resulting diagram, for example, top-to-bottom."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-002",content:'With the support for <strong id="hierarchical_layout-undirected_edges-201-emphasis-001" class="bold" role="bold">undirected edges</strong>, <span class="api">HierarchicLayout</span>\nprovides a means to specify that in the resulting diagram a given edge should neither\nbe oriented with nor against the main direction, but that instead its nodes should\npreferably be placed into the same layer.\nNote that due to further optimization criteria it cannot be guaranteed that they\nare always placed into the same layer (see also <a href="#/dguide/undirected_edges_alternative_options">the tip below</a>).'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-003",content:"Generally, this feature allows to specify that a subset of edges should be considered\nirrelevant for the actual hierarchical structure of a diagram.\nIt is especially suited to achieve aesthetic layouts for diagrams where nodes have\nan attached non-structural element that is exclusively connected to them, like it\nis often the case in UML diagrams with 'note' or 'description' nodes, for example."},{tagname:"figure","class":"image",title:"Layer assignment with undirected edges",id:"hierarchical_layout-undirected_edges-201-figure-001","float":0,children:[{tagname:"img",src:"assets/hierarchical_undirected_edges_before.f2de55f8.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout.</para>'},{tagname:"img",src:"assets/hierarchical_undirected_edges.e7fe2c0d.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where nodes connected by undirected edges (note the emphasis) are placed into the same layer (ideally).</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-004",content:'Edges can be marked as being undirected by means of properly configured\n<a href="#/dguide/tab_hierarchical_keys_edge_directedness">supplemental layout data</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-005",content:'The layout data’s <api-link id="hierarchical_layout-undirected_edges-201-api-link-001" data-member="edgeDirectedness" data-text="edgeDirectedness" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link>\nproperty holds a floating point value per edge to specify\nthe edge’s directedness.\nAn edge can be marked using one of the following directedness values:'},{tagname:"para",content:'<ul id="hierarchical_layout-undirected_edges-201-itemizedlist-001"><li id="hierarchical_layout-undirected_edges-201-listitem-001"><p id="hierarchical_layout-undirected_edges-201-simpara-006"><strong id="hierarchical_layout-undirected_edges-201-emphasis-002" class="bold" role="bold">0</strong> denotes an undirected edge;\nthe algorithm tries to place the nodes connected by this edge into the same layer, if possible</p></li><li id="hierarchical_layout-undirected_edges-201-listitem-002"><p id="hierarchical_layout-undirected_edges-201-simpara-007"><strong id="hierarchical_layout-undirected_edges-201-emphasis-003" class="bold" role="bold">1</strong> denotes a regular edge that should be oriented with the main direction of the resulting hierarchical layout</p></li><li id="hierarchical_layout-undirected_edges-201-listitem-003"><p id="hierarchical_layout-undirected_edges-201-simpara-008"><strong id="hierarchical_layout-undirected_edges-201-emphasis-004" class="bold" role="bold">-1</strong> denotes an edge that should be oriented against the main direction of the resulting hierarchical layout</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-undirected_edges-201-simpara-009",content:"By default, all edges are assumed to have a directedness value of <code>1</code>."},{tagname:"para","class":"dguide-para tip",id:"undirected_edges_alternative_options",content:'<p id="hierarchical_layout-undirected_edges-201-simpara-010">To only achieve that a specific subset of edges points against the main direction\nin the resulting diagram, it can be faster to explicitly revert these edges before\nthe layout invocation and afterwards restore their original direction.\nThis can be conveniently done with the help of layout stage <api-link id="hierarchical_layout-undirected_edges-201-api-link-002" data-member="" data-text="ReverseEdgesStage" data-type="yfiles.layout.ReverseEdgesStage"></api-link>,\nfor example.</p><p id="hierarchical_layout-undirected_edges-201-simpara-011"><a href="#/dguide/hierarchical_layout-constrained_layer_assignment">Relative layer constraints</a>\ncan be used to fix an edge so that its nodes are always placed into the same layer.</p>'}]},{tagname:"section",id:"hierarchical_layout-sub_components",title:"Custom Sub-Components",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-sub_components-202-simpara-001",content:'<span class="api">HierarchicLayout</span> allows to easily define sub-components\n(i.e. a subset of nodes of the input graph) which are arranged by a specified, individual\n<span class="api">ILayoutAlgorithm</span> instance. Therefore, different components of the same graph\ncan be handled by different layout algorithms while the components on the top level are arranged in\nthe usual hierarchical way. Note that components can not be nested.'},{tagname:"section",id:"_example",title:"Example",children:[{tagname:"para","class":"dguide-para",id:"_example-203-simpara-001",content:"In <a href=\"#/dguide/fig_hierarchical_layout-sub_components_example\">Layout with three sub-components</a> a possible use case is illustrated. The example graph\ncontains three different sub-components indicated by node labels. Nodes that do not belong to any component\nare not labeled. The main hierarchical layout has top-to-bottom orientation and features orthogonal edge routes.\nThe first sub-component ('HL' labels) is also arranged by a hierarchical layout algorithm, but with\nleft-to-right orientation and polyline edge routes. The 'Tree' component is arranged by a tree layout\nalgorithm and, finally, the last component is handled by the organic layout algorithm ('O' labels)."},{tagname:"figure","class":"image",title:"Layout with three sub-components",id:"fig_hierarchical_layout-sub_components_example","float":0,children:[{tagname:"img",src:"assets/hierarchical_sub_components_example.e8c0ff14.jpg",alt:"",title:'<para class="dguide-para">The graph contains three different sub-components, each arranged using another layout algorithm.</para>'}]}]},{tagname:"section",id:"_usage",title:"Usage",children:[{tagname:"para","class":"dguide-para",id:"_usage-204-simpara-001",content:'To define sub-components use the layout data property\n<api-link id="_usage-204-api-link-001" data-member="subComponents" data-text="subComponents" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link>. Use the Add method of the property\nwhich takes the layout algorithm as parameter to create a new component that should be arranged with the\ngiven algorithm. The returned item collection allows to conveniently define which nodes should belong\nto the newly added sub-component. See the following code example that shows how to define a\nsub-component that should be arranged by an organic layout algorithm.'},{tagname:"example",id:"ex_hierarchical_layout-define_organic_sub-component",title:"Definition of a sub-component arranged by OrganicLayout",content:'<pre class="programlisting javascript" id="_usage-204-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst data = new yfiles.hierarchic.HierarchicLayoutData()\r\n\r\n// Retrieve an ItemCollection&lt;INode> which defines all nodes of a sub-component\r\n// The sub-component will be arranged by the provided OrganicLayout instance\r\nconst organicSubset = data.subComponents.add(new yfiles.organic.OrganicLayout())\r\n\r\n// Assign the nodes to the organic sub-component by using an ICollection&lt;INode>\r\norganicSubset.items = getMySubComponentNodes()\r\n\r\n// Apply the hierarchic layout with the defined sub-components\r\ngraph.applyLayout(new yfiles.hierarchic.HierarchicLayout(), data)\n</code></pre>'}]},{tagname:"section",id:"_inter_edges",title:"Inter-Edges",children:[{tagname:"para","class":"dguide-para",id:"_inter_edges-205-simpara-001",content:"There can be edges that connect nodes of different sub-components or nodes of a sub-component with\ntop-level nodes. These edges are referred to as inter-edges.\nWith respect to inter-edges, there are some minor restrictions. Their style might slightly differ from other,\nnormal hierarchical edges. Also, the minimum first/last segment length setting can not always be\nsatisfied for inter-edges."}]},{tagname:"section",id:"_grouped_graphs",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"_grouped_graphs-206-simpara-001",content:"Sub-components can be defined for grouped graphs, however, there are some restrictions:\nAll sub-component nodes must be on the same hierarchy level if the group node itself is not\npart of the sub-component. If a group is assigned to a sub-component, then all its descendants\n(including other group nodes) must be in the same component, too."}]}]},{tagname:"section",id:"hierarchical_layout-port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-001",content:'<span class="api">HierarchicLayout</span> supports both weak port constraints as well as\nstrong port constraints that are specified for the edges of a graph (more precisely, the edge ends).\nThe setup of port constraints is presented in <a href="#/dguide/layout-port_constraints">Port Constraints</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-002",content:'Using weak port constraints for the ends of an edge, it is possible to specify at\nwhich side of the source node or target node, respectively, an edge path must connect.\n<a href="#/dguide/fig_hierarchical_layout-weak_port_constraints">Constraint on which side edges should connect to nodes</a> shows the resulting hierarchical\nlayout of a graph where some edges are set up having weak port constraints.'},{tagname:"figure","class":"image",title:"Constraint on which side edges should connect to nodes",id:"fig_hierarchical_layout-weak_port_constraints","float":0,children:[{tagname:"img",src:"assets/hierarchical_port_constraints_weak_before.7d28c203.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking port constraints into account)</para>'},{tagname:"img",src:"assets/hierarchical_port_constraints_weak.6d6fe7b7.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout with weak port constraints</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-003",content:'Using strong port constraints, it is possible to specify the side of the node at\nwhich an edge must connect, and additionally also the exact position of the port.\n<a href="#/dguide/fig_hierarchical_layout-strong_port_constraints">Constraint at which exact points edges should connect to nodes</a> shows the resulting hierarchical\nlayout of a graph where some edges are set up having strong port constraints.'},{tagname:"figure","class":"image",title:"Constraint at which exact points edges should connect to nodes",id:"fig_hierarchical_layout-strong_port_constraints","float":0,children:[{tagname:"img",src:"assets/hierarchical_port_constraints_strong_before.1f32c648.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking port constraints into account)</para>'},{tagname:"img",src:"assets/hierarchical_port_constraints_strong.e81af0a6.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout with strong port constraints</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-004",content:"Carefully observe how the nodes A and B change their position in the resulting hierarchical\nlayout from the figure above.\nThis is due to the strong port constraints specified for the edge ends at the common\ntarget node, which would result in an edge crossing with the original node order."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-005",content:"Both weak port constraints and strong port constraints can be mixed easily in the drawing."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_constraints-207-simpara-006",content:'Configure <a href="#/dguide/hierarchical_layout-supplemental_layout_data">supplemental layout data</a>\nfor <a href="#/dguide/tab_hierarchical_keys_source_port_constraints">source port</a> and\n<a href="#/dguide/tab_hierarchical_keys_target_port_constraints">target port constraints</a> to use this feature.'}]},{tagname:"section",id:"hierarchical_layout-port_candidates",title:"Port Candidates",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_candidates-208-simpara-001",content:'In addition to the support provided for port constraints, <span class="api">HierarchicLayout</span>\nalso supports the concept of port candidates.\nBoth aspects, i.e., matching port candidates as well as modeling enhanced port constraints are supported.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_candidates-208-simpara-002",content:'For the matching of port candidates, the set of allowed anchor locations for\nedge ends at the nodes of a graph are retrieved from <a href="#/dguide/hierarchical_layout-supplemental_layout_data">supplemental layout data</a>\nvia the <a href="#/dguide/tab_hierarchical_keys_node_port_candidate_sets">node port candidate set</a>.\nThe subset of desired anchor locations where the source ports and target ports\nof edges like to connect to are specified by the <a href="#/dguide/tab_hierarchical_keys_source_port_candidates">source port candidate</a>\nand <a href="#/dguide/tab_hierarchical_keys_target_port_candidates">target port candidate</a> sets, respectively.\nNote that the candidates in both sets must be the same instances if the matching\nshould be able to detect that two candidates are equal. It does not suffice that candidates\nhave the same parameters.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_candidates-208-simpara-003",content:'The example in <a href="#/dguide/fig_hierarchical_layout-port_candidates">Using port candidates to control connection points</a> demonstrates the use of port candidates\nto distribute edges at defined connection points: one port candidate at each corner of the diamond\nnode allows one edge to connect. Additional candidates at the top and bottom allow edges to connect\nat these points when all other candidates are already occupied. These additional candidates are associated\nwith a higher cost to make sure they will be only used after all other candidates are occupied.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_candidates-208-simpara-004",content:'See <a href="#/dguide/layout-port_candidates">Port Candidates for Nodes</a> for a detailed description of the port candidates concept.'},{tagname:"figure","class":"image",title:"Using port candidates to control connection points",id:"fig_hierarchical_layout-port_candidates","float":0,children:[{tagname:"img",src:"assets/port_constraints_1in_1out.cadd1aa8.png",alt:"",title:'<para class="dguide-para">Incoming edges connect at the top, the first outgoing edge at the bottom…​</para>'},{tagname:"img",src:"assets/port_constraints_1in_2out.9ff329c8.png",alt:"",title:'<para class="dguide-para">…​ more outgoing edges occupy the right and left corners…​</para>'},{tagname:"img",src:"assets/port_constraints_2in_4out.ed7c8917.png",alt:"",title:'<para class="dguide-para">…​ when all corners are occupied</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_candidates-208-simpara-005",content:'For modeling enhanced port constraints, the set of possible port candidates for\nthe edges of a graph are retrieved from <a href="#/dguide/tab_hierarchical_keys_source_port_candidates">source port candidate</a>\nand <a href="#/dguide/tab_hierarchical_keys_target_port_candidates">target port candidate</a> sets, respectively.'}]},{tagname:"section",id:"hierarchical_layout-edge_grouping",title:"Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-edge_grouping-209-simpara-001",content:'Incremental hierarchical layout supports the notion of grouping together multiple\nedge ends to be anchored at the same location.\nThis can be specified for both source ends and target ends.\nThe general setup for edge groups is described in <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-edge_grouping-209-simpara-002",content:"Edges that belong to the same group at a specific end will additionally be routed\nin bus-style, i.e., if multiple edges start or end at nodes in the same layer and\nbelong to the same group, even if they do not share the same node at their ends,\nthey will be merged together in a bus structure in that layer."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-edge_grouping-209-simpara-003",content:'<span class="api">HierarchicLayout</span> supports both automatic and custom edge grouping.'},{tagname:"section",id:"hierarchical_layout-automatic_edge_grouping",title:"Automatic Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-automatic_edge_grouping-210-simpara-001",content:"Automatic edge grouping is disabled by default.\nIt can be enabled using the following property:"},{tagname:"para",content:'<dl id="hierarchical_layout-automatic_edge_grouping-210-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-automatic_edge_grouping-210-term-001"><api-link id="hierarchical_layout-automatic_edge_grouping-210-api-link-001" data-member="automaticEdgeGrouping" data-text="automaticEdgeGrouping" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-automatic_edge_grouping-210-listitem-001">\n<p id="hierarchical_layout-automatic_edge_grouping-210-simpara-002">Enables/Disables automatic edge grouping</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-automatic_edge_grouping-210-simpara-003",content:'Automatic edge grouping tries to group as many edges as possible, without changing the semantic of the graph.\nEdges are grouped either at a common source node or at a common target node.\nThey won’t be grouped, if grouping would lead to ambiguous paths.\nThe effect of automatic edge grouping is shown in <a href="#/dguide/fig_hierarchical_layout-automatic_edge_grouping">Automatic Edge Grouping</a>.\nNote that edges with a common source are grouped as well as edges with a common target.\nAlso note that the outgoing edges at node B are not grouped, because grouping at\nthis node would mock a connection between A and D.'},{tagname:"figure","class":"image",title:"Automatic Edge Grouping",id:"fig_hierarchical_layout-automatic_edge_grouping","float":0,children:[{tagname:"img",src:"assets/hierarchical_auto_edge_group_disabled.32e29539.jpg",alt:"",title:'<para class="dguide-para">Automatic edge grouping disabled</para>'},{tagname:"img",src:"assets/hierarchical_auto_edge_group_enabled.7508ad4a.jpg",alt:"",title:'<para class="dguide-para">Automatic edge grouping enabled</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-automatic_edge_grouping-210-simpara-004",content:'Edges are only grouped at their source (target) node if they do not have a\n<a href="#/dguide/layout-port_constraints">port constraint</a>/<a href="#/dguide/layout-port_candidates">port candidates</a>\nat this node.\nFurthermore, edges cannot be grouped at a node with specified port candidates.\nIf automatic edge grouping is enabled, user specified edge groups are ignored.'}]},{tagname:"section",id:"hierarchical_layout-custom_edge_grouping",title:"Custom Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-custom_edge_grouping-211-simpara-001",content:'If more flexibility is needed, edges can be grouped by specifying edge groups\nusing data providers as described in <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-custom_edge_grouping-211-simpara-002",content:"The general rule describing how bus structures are created can be summarized as follows:\nedge paths are merged from both sides, source and target, beginning as close to the respective edge ends as possible.\nFrom this rule, the following consequences arise:"},{tagname:"para",content:'<ul id="hierarchical_layout-custom_edge_grouping-211-itemizedlist-001"><li id="hierarchical_layout-custom_edge_grouping-211-listitem-001"><p id="hierarchical_layout-custom_edge_grouping-211-simpara-003">edges that start at a common node and belong to the same source group are\nmerged together such that they are anchored at the same location;\nthe same holds similarly for edges ending at a common node that belong to the same target group</p></li><li id="hierarchical_layout-custom_edge_grouping-211-listitem-002"><p id="hierarchical_layout-custom_edge_grouping-211-simpara-004">edges that start at nodes in different layers, but belong to the same source\ngroup are merged together in a cascading manner;\nthe same holds similarly for edges ending at nodes in different layers, but belong to the same target group</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-custom_edge_grouping-211-simpara-005",content:"From this rule it is also clear that edges being grouped at both ends will\nresult in edge routings where the paths are merged to the maximum extent possible."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-custom_edge_grouping-211-simpara-006",content:'<a href="#/dguide/tab_hierarchical_layout-custom_edge_grouping">Edge group configurations and resulting bus-style edge routings</a> presents some edge routing results (in the figures to the left) and describes their\nactual source and target group setup.\nNote that the figures to the right depict the edge routing that results when\nboth the edges are reversed and the source and target groups are exchanged.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_hierarchical_layout-custom_edge_grouping",rowsep:1,content:'<caption>Edge group configurations and resulting bus-style edge routings</caption><colgroup><col style="width:33%;"><col style="width:33%;"><col style="width:33%;"></colgroup><thead id="hierarchical_layout-custom_edge_grouping-211-thead-001"><tr id="hierarchical_layout-custom_edge_grouping-211-row-001"><th id="hierarchical_layout-custom_edge_grouping-211-entry-001" align="left" valign="top">\nFigure\n</th><th id="hierarchical_layout-custom_edge_grouping-211-entry-002" align="left" valign="top">\nDescription\n</th><th id="hierarchical_layout-custom_edge_grouping-211-entry-003" align="left" valign="top">\nFigure\n</th></tr></thead><tbody id="hierarchical_layout-custom_edge_grouping-211-tbody-001"><tr id="hierarchical_layout-custom_edge_grouping-211-row-002"><td id="hierarchical_layout-custom_edge_grouping-211-entry-004" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-007"><img src="assets/hierarchical_edge_grouping_1.3d541a6f.jpg"></para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-005" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-008">Edges starting at <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-001" class="bold" role="bold">A</strong> nodes are grouped at their source side using a common <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-002" class="bold" role="bold">A</strong> ID (for example).\nLikewise, edges starting at <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-003" class="bold" role="bold">B</strong> nodes are grouped at their source side using a common <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-004" class="bold" role="bold">B</strong> ID.\nAdditionally, at their target side the edges are grouped such that all <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-005" class="bold" role="bold">A</strong>\nedges share a common ID and all <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-006" class="bold" role="bold">B</strong> edges share a common ID.</para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-006" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-009"><img src="assets/hierarchical_edge_grouping_1_rev.cf9ab7a7.jpg"></para></td></tr><tr id="hierarchical_layout-custom_edge_grouping-211-row-003"><td id="hierarchical_layout-custom_edge_grouping-211-entry-007" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-010"><img src="assets/hierarchical_edge_grouping_2.8e4e33fb.jpg"></para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-008" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-011">Edges starting at the upper nodes are grouped at their target side using a common <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-007" class="bold" role="bold">A</strong> ID (for example).\nLikewise, edges starting at the middle nodes are grouped at their target side using a common <strong id="hierarchical_layout-custom_edge_grouping-211-emphasis-008" class="bold" role="bold">B</strong> ID.</para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-009" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-012"><img src="assets/hierarchical_edge_grouping_2_rev.2942ff81.jpg"></para></td></tr><tr id="hierarchical_layout-custom_edge_grouping-211-row-004"><td id="hierarchical_layout-custom_edge_grouping-211-entry-010" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-013"><img src="assets/hierarchical_edge_grouping_3.e67d5336.jpg"></para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-011" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-014">All edges are grouped at their target side using a common ID.</para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-012" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-015"><img src="assets/hierarchical_edge_grouping_3_rev.114b7f85.jpg"></para></td></tr><tr id="hierarchical_layout-custom_edge_grouping-211-row-005"><td id="hierarchical_layout-custom_edge_grouping-211-entry-013" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-016"><img src="assets/hierarchical_edge_grouping_4.d586b463.jpg"></para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-014" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-017">All edges are grouped at their source side using a common ID. Additionally, at their target side\nthe edges are also grouped such that they share a common ID.</para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-015" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-018"><img src="assets/hierarchical_edge_grouping_4_rev.75516f39.jpg"></para></td></tr><tr id="hierarchical_layout-custom_edge_grouping-211-row-006"><td id="hierarchical_layout-custom_edge_grouping-211-entry-016" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-019"><img src="assets/hierarchical_edge_grouping_5.d271530d.jpg"></para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-017" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-020">Edges are grouped at their source side using a common ID.</para></td><td id="hierarchical_layout-custom_edge_grouping-211-entry-018" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-custom_edge_grouping-211-simpara-021"><img src="assets/hierarchical_edge_grouping_5_rev.942df724.jpg"></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-custom_edge_grouping-211-simpara-022",content:'To specify which edges should be grouped and how, provide\n<a href="#/dguide/hierarchical_layout-supplemental_layout_data">supplemental layout data</a> with\nproperly configured <a href="#/dguide/tab_hierarchical_keys_source_group_ids">source</a> and\n<a href="#/dguide/tab_hierarchical_keys_target_group_ids">target group ids</a>.'}]}]},{tagname:"section",id:"hierarchical_layout-grid_placement",title:"Grid",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-001",content:'<span class="api">HierarchicLayout</span> provides support for placing nodes on grid coordinates.\nGrid placement is enabled by means of the following property, which at the same time\nalso determines the spacing between grid coordinates:'},{tagname:"para",content:'<dl id="hierarchical_layout-grid_placement-212-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-grid_placement-212-term-001"><api-link id="hierarchical_layout-grid_placement-212-api-link-001" data-member="gridSpacing" data-text="gridSpacing" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></dt><dd id="hierarchical_layout-grid_placement-212-listitem-001">\n<p id="hierarchical_layout-grid_placement-212-simpara-002">Setting a value strictly greater than 0.0 enables grid placement and\ndetermines the distance between grid coordinates.\nThe value is used both in vertical and in horizontal direction.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-003",content:"The graph’s edges will also be routed on the grid, i.e. their bends are placed on grid coordinates, if possible.\nPlacing bends on the grid isn’t always possible depending on other configurations, for example:"},{tagname:"para",content:'<ul id="hierarchical_layout-grid_placement-212-itemizedlist-001"><li id="hierarchical_layout-grid_placement-212-listitem-002"><p id="hierarchical_layout-grid_placement-212-simpara-004">the configured edge routing style</p></li><li id="hierarchical_layout-grid_placement-212-listitem-003"><p id="hierarchical_layout-grid_placement-212-simpara-005">the port coordinates of an edge end when there are strong port constraints set</p></li><li id="hierarchical_layout-grid_placement-212-listitem-004"><p id="hierarchical_layout-grid_placement-212-simpara-006">the <a href="#/dguide/hierarchical_layout-port_assignment">port assignment policy</a> at a node, which may place edge ends on non-grid coordinates (e.g.,\n<span class="api">DEFAULT</span>,\n<span class="api">ON_SUBGRID</span>)</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-007",content:'The following figures show the results of grid placement with the different edge\nrouting styles supported by <span class="api">HierarchicLayout</span>.\nObserve how the center of each node is placed on grid coordinates and edge paths\nrun on grid lines where possible.\nAll figures use a grid spacing of 10.0 [pixel].'},{tagname:"figure","class":"image",title:"Edge routing styles with enabled grid placement",id:"fig_hierarchical_layout-grid_edge_routing_styles","float":0,children:[{tagname:"img",src:"assets/hierarchical_grid-10px-orthogonal-gridbg.32f0bbc0.png",alt:"",title:'<para class="dguide-para">Orthogonal edge routing</para>'},{tagname:"img",src:"assets/hierarchical_grid-10px-octilinear-gridbg.b389a396.png",alt:"",title:'<para class="dguide-para">Octilinear edge routing</para>'},{tagname:"img",src:"assets/hierarchical_grid-10px-polyline-gridbg.887010ae.png",alt:"",title:'<para class="dguide-para">Polyline edge routing.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-008",content:"Different grid spacing values can be used to achieve an effect on a graph similar to a scaling transformation:"},{tagname:"figure","class":"image",title:"Resulting grid placements of the same graph with different grid spacings",id:"fig_hierarchical_layout-grid_spacing","float":0,children:[{tagname:"img",src:"assets/hierarchical_grid-10px-orthogonal-gridbg.32f0bbc0.png",alt:"",title:'<para class="dguide-para">Grid spacing = <code>10.0</code></para>'},{tagname:"img",src:"assets/hierarchical_grid-30px-orthogonal-gridbg.16662d2d.png",alt:"",title:'<para class="dguide-para">Grid spacing = <code>30.0</code></para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-009",content:"By default, nodes will be placed on the grid with their center.\nHowever, it is possible to define an alternative reference point for each node with which it is placed instead.\nFor example, if the upper left corner of a node should be on grid coordinates."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-010",content:'With the following property of <a href="#/dguide/hierarchical_layout-related_classes">class NodeLayoutDescriptor</a>\nthe reference point for a node can be set:'},{tagname:"para",content:'<dl id="hierarchical_layout-grid_placement-212-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-grid_placement-212-term-002"><api-link id="hierarchical_layout-grid_placement-212-api-link-002" data-member="gridReference" data-text="gridReference" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-grid_placement-212-listitem-005">\n<p id="hierarchical_layout-grid_placement-212-simpara-011">Determines a node’s reference point, which shall be placed on grid coordinates.\nBy default, a node’s center is used as its reference point.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-012",content:"Note that non-empty group nodes will always be placed such that their borders are on grid lines.\nThey are not affected by reference point configuration."},{tagname:"para","class":"dguide-para tip",id:"hierarchical_layout-grid_placement-212-tip-001",content:'<p id="hierarchical_layout-grid_placement-212-simpara-013">When using the <strong id="hierarchical_layout-grid_placement-212-emphasis-001" class="bold" role="bold">Layer Alignment</strong> property of the <span class="api">NodeLayoutDescriptor</span> class to top-align\n(bottom-align) all nodes of a layer, also adjust the reference points of the nodes\nto their top (bottom) for best results in conjunction with grid placement.</p>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-port_assignment",content:'To handle the edges of a graph, <span class="api">HierarchicLayout</span> supports different\nport assignment policies in conjunction with grid placement.\nThe policies determine how the edges at each side of a node will be distributed\nalong the respective side.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-015",content:'The <api-link id="hierarchical_layout-grid_placement-212-api-link-003" data-member="portAssignment" data-text="portAssignment" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link>\nproperty in class NodeLayoutDescriptor sets the port assignment policy for a given node.\nThe following policy constants are available:'},{tagname:"para",content:'<dl id="hierarchical_layout-grid_placement-212-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-grid_placement-212-term-003"><api-link id="hierarchical_layout-grid_placement-212-api-link-004" data-member="DEFAULT" data-text="DEFAULT" data-type="yfiles.hierarchic.PortAssignmentMode"></api-link></dt><dd id="hierarchical_layout-grid_placement-212-listitem-006">\n<p id="hierarchical_layout-grid_placement-212-simpara-016">Distributes the edges on each node side evenly without considering the grid.\nThis is the default setting that is also used when no grid is specified.</p>\n</dd>\n<dt id="hierarchical_layout-grid_placement-212-term-004"><api-link id="hierarchical_layout-grid_placement-212-api-link-005" data-member="ON_GRID" data-text="ON_GRID" data-type="yfiles.hierarchic.PortAssignmentMode"></api-link></dt><dd id="hierarchical_layout-grid_placement-212-listitem-007">\n<p id="hierarchical_layout-grid_placement-212-simpara-017">Distributes the edges on each node side on grid lines.\nIf there are less grid lines than there are edges at a side, multiple edges may connect at the same location.\nWhen the node is placed on the grid with a reference point on its border, it is\npossible that there is no grid line available at the node’s side.\nIn that case, all edges at that node side will be centered at the side.</p>\n</dd>\n<dt id="hierarchical_layout-grid_placement-212-term-005"><api-link id="hierarchical_layout-grid_placement-212-api-link-006" data-member="ON_SUBGRID" data-text="ON_SUBGRID" data-type="yfiles.hierarchic.PortAssignmentMode"></api-link></dt><dd id="hierarchical_layout-grid_placement-212-listitem-008">\n<p id="hierarchical_layout-grid_placement-212-simpara-018">Distributes the edges on each node side on grid lines.\nIf there are less grid lines than there are edges at a side, the grid will be subdivided\nuntil there is at least one grid line per edge available.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-019",content:"The following figures show the different port assignment policies with the same graph:"},{tagname:"figure","class":"image",title:"Different port assignment policies with grid placement",id:"fig_hierarchical_layout-port_assignments_grid","float":0,children:[{tagname:"img",src:"assets/hierarchical_grid-10px-portassignment-default-gridbg.59545c56.png",alt:"",title:'<para class="dguide-para"><span class="api">DEFAULT</span></para>'},{tagname:"img",src:"assets/hierarchical_grid-10px-portassignment-grid-gridbg.0f26f165.png",alt:"",title:'<para class="dguide-para"><span class="api">ON_GRID</span></para>'},{tagname:"img",src:"assets/hierarchical_grid-10px-portassignment-subgrid-gridbg.d4de9752.png",alt:"",title:'<para class="dguide-para"><span class="api">ON_SUBGRID</span></para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-grid_placement-212-simpara-020",content:'See also the description of the <span class="api">NodeLayoutDescriptor</span>\nclass in <a href="#/dguide/hierarchical_layout-related_classes">Related Classes</a>\nwhich provides the properties for setting individual reference points and configuring port assignment policies.'},{tagname:"para","class":"dguide-para note",id:"hierarchical_layout-grid_placement-212-note-001",content:'<p id="hierarchical_layout-grid_placement-212-simpara-021">The grid placement support of <span class="api">HierarchicLayout</span> does not work well with\nexact layer coordinate hints or exact sequence coordinate hints.</p>'}]},{tagname:"section",id:"hierarchical_layout-swimlane_layout",title:"Swimlanes",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout-213-simpara-001",content:'<span class="api">HierarchicLayout</span> provides support for so-called swimlane layout.\nThis type of layout uses the notion of adjacent lanes into which nodes are placed.\nThe lanes are oriented with the general layout direction, i.e., perpendicular to\nthe layers of the hierarchical layout.\nEach normal node of the graph is placed into a single lane, group nodes in a grouped\ngraph are allowed to stretch across multiple lanes such that they encompass all\ntheir contained nodes.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout-213-simpara-002",content:'<a href="#/dguide/fig_hierarchical_layout-swimlane_layout">Swimlanes</a> shows a resulting swimlane layout as calculated\nby <span class="api">HierarchicLayout</span> where the layout direction is from left to right.\nThe visual representation of the swimlanes is rendered by a group node that uses\nthe <a href="#/dguide/tables">TableNodeStyle</a> node style.'},{tagname:"figure","class":"image",title:"Swimlanes",id:"fig_hierarchical_layout-swimlane_layout","float":0,children:[{tagname:"img",src:"assets/hierarchical_swimlane_example.bb7f0320.png",alt:"",title:'<para class="dguide-para">Left-to-right swimlane layout with group nodes.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout-213-simpara-003",content:'Swimlane layout is a special case in the more general concept of so-called partitioned layout support.\nThe lanes present a one-dimensional partition within which the nodes of a diagram are organized.\nThe setup for partitioned layout is presented in <a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout-213-simpara-004",content:'<a href="#/dguide/fig_hierarchical_layout-partition_grid">Partition grid</a> shows a resulting partitioned layout.\nNote the two-dimensional partition which results from the rows and columns.'},{tagname:"figure","class":"image",title:"Partition grid",id:"fig_hierarchical_layout-partition_grid","float":0,children:[{tagname:"img",src:"assets/hierarchical_partition_grid_example.793879ce.png",alt:"",title:'<para class="dguide-para">Left-to-right partitioned layout</para>'}]},{tagname:"section",id:"hierarchical_layout-swimlane_layout_setup",title:"Setup",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-001",content:'With the classes from the yFiles for HTML Complete package, the setup for swimlane/partitioned\nlayout calculation of a graph with <a href="#/dguide/tables">table structures</a>\ncan be reduced to a minimum by using the\n<api-link id="hierarchical_layout-swimlane_layout_setup-214-api-link-001" data-member="morphLayout(yfiles.layout.ILayoutAlgorithm,yfiles.lang.TimeSpan,yfiles.layout.LayoutData)" data-text="morphLayout" data-type="yfiles.view.GraphComponent"></api-link>\nconvenience method as shown in <a href="#/dguide/ex_hierarchical_layout-table_layout_configurator">Swimlane/partitioned layout preparation</a>.\nInternally, this method uses the services of class <api-link id="hierarchical_layout-swimlane_layout_setup-214-api-link-002" data-member="" data-text="TableLayoutConfigurator" data-type="yfiles.layout.TableLayoutConfigurator"></api-link>\nto take care of all necessary configuration steps related to swimlane/partitioned layout.'},{tagname:"example",id:"ex_hierarchical_layout-table_layout_configurator",title:"Swimlane/partitioned layout preparation",content:'<pre class="programlisting javascript" id="hierarchical_layout-swimlane_layout_setup-214-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\nhl.componentLayoutEnabled = false\r\nhl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\nhl.orthogonalRouting = true\r\nhl.recursiveGroupLayering = false\r\nhl.nodePlacer.baryCenterMode = true\r\n\r\n// Invoke layout calculation.\r\n// Internally, MorphLayout uses TableLayoutConfigurator to prepare all\r\n// relevant information for a layout algorithm.\r\ngraphComponent\r\n  .morphLayout(hl, yfiles.lang.TimeSpan.fromMilliseconds(500))\r\n  .catch(error => console.log(error))\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"hierarchical_layout-swimlane_layout_setup-214-tip-001",content:'<p id="hierarchical_layout-swimlane_layout_setup-214-simpara-002">Convenience <a href="#/dguide/tables-layout">class  LayoutExecutor</a>\nalso uses the services of class <span class="api">TableLayoutConfigurator</span>, but additionally provides\naccess to its internal <span class="api">TableLayoutConfigurator</span> instance for configuration and customization.</p>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-003",content:'<a href="#/dguide/ex_hierarchical_layout-advanced_layout_concepts_partition_grid_setup_igraph">Swimlane/partitioned layout preparation (IGraph API)</a> demonstrates how to set up\na swimlane/partitioned layout without the convenience functionality from the yFiles for HTML\nComplete package.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-004",content:'<span class="api">HierarchicLayout</span> relies on the services of the\n<api-link id="hierarchical_layout-swimlane_layout_setup-214-api-link-003" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> class, which can be used to'},{tagname:"para",content:'<ul id="hierarchical_layout-swimlane_layout_setup-214-itemizedlist-001"><li id="hierarchical_layout-swimlane_layout_setup-214-listitem-001"><p id="hierarchical_layout-swimlane_layout_setup-214-simpara-005">define a grid-like structure consisting of rows and columns that represents a partition,</p></li><li id="hierarchical_layout-swimlane_layout_setup-214-listitem-002"><p id="hierarchical_layout-swimlane_layout_setup-214-simpara-006">create IDs for the cells of a partition, which result from the rows and columns, and</p></li><li id="hierarchical_layout-swimlane_layout_setup-214-listitem-003"><p id="hierarchical_layout-swimlane_layout_setup-214-simpara-007">assign the nodes of a diagram to these partition cells by means of the cell IDs.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-008",content:'Partitioned layout calculation needs a <span class="api">PartitionGrid</span> object and the mapping of nodes\nto cells provided to the layout algorithm via <a href="#/dguide/tab_hierarchical_partitiongrid_data">supplemental layout data</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-009",content:'Basically, the partition grid needs to be created, and the <api-link id="hierarchical_layout-swimlane_layout_setup-214-api-link-004" data-member="" data-text="PartitionGridData" data-type="yfiles.layout.PartitionGridData"></api-link> that holds\nthe necessary information about the <a href="#/dguide/tab_hierarchical_partitiongrid_grid">partition grid</a> and the\n<a href="#/dguide/tab_hierarchical_partitiongrid_cell_ids">mapping of nodes to cells</a>\nhas to be created, filled and assigned to the <span class="api">HierarchicLayoutData</span>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-010",content:"This process is demonstrated in the following example:"},{tagname:"example",id:"ex_hierarchical_layout-advanced_layout_concepts_partition_grid_setup_igraph",title:"Swimlane/partitioned layout preparation (IGraph API)",content:'<pre class="programlisting javascript" id="hierarchical_layout-swimlane_layout_setup-214-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n// Nodes \'n1\' and \'n2\' to \'n6\' (not shown here).\r\nconst n1 = getMyNode()\r\n\r\n// Create a grid having three rows and four columns.\r\nconst grid = new yfiles.layout.PartitionGrid(3, 4)\r\n\r\n// Create an IMapper to store the mapping of nodes to swimlanes, resp. partition\r\n// grid cells.\r\nconst cellMap = new yfiles.collections.Mapper()\r\n\r\n// Assign the nodes to the cells.\r\ncellMap.set(n1, grid.createCellId(1, 0))\r\ncellMap.set(n2, grid.createCellId(0, 1))\r\ncellMap.set(n3, grid.createCellId(2, 2))\r\ncellMap.set(n4, grid.createCellId(1, 3))\r\ncellMap.set(n5, grid.createCellId(0, 3))\r\ncellMap.set(n6, grid.createCellId(0, 3))\r\n\r\n// Create a context mapping that holds the cellMap. This is necessary for the partition grid layout data.\r\nconst cellIdMapping = new yfiles.layout.ContextItemMapping()\r\ncellIdMapping.mapper = cellMap\r\n\r\n// Create the layout data for the partition grid and assign the cellMapping and the grid to it.\r\nconst partitionGridData = new yfiles.layout.PartitionGridData()\r\npartitionGridData.grid = grid\r\npartitionGridData.cellIds = cellIdMapping\r\n\r\n// Create the supplemental layout data for the hierarchic layout ...\r\nconst layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n// ... and set the layout data for the partition grid accordingly.\r\nlayoutData.partitionGridData = partitionGridData\r\n\r\n// Create the layout algorithm...\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\nhl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\n// ... and start layout calculation.\r\ngraph.applyLayout(hl, layoutData)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-swimlane_layout_setup-214-simpara-011",content:'Note that <a href="#/dguide/ex_hierarchical_layout-advanced_layout_concepts_partition_grid_setup_igraph">Swimlane/partitioned layout preparation (IGraph API)</a> shows the basic\nsetup of the partition grid seen in <a href="#/dguide/fig_hierarchical_layout-partition_grid">Partition grid</a>.\nObserve how the layout algorithm respects the specified organization of the nodes\nwithin the partition cells.'}]},{tagname:"section",id:"hierarchical_layout-partition_grid",title:"Partition Grid",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-001",content:'For the calculation of a swimlane/partitioned layout, <span class="api">HierarchicLayout</span>\nuses the information in the so-called partition grid.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-002",content:'Class <api-link id="hierarchical_layout-partition_grid-215-api-link-001" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link>\nencapsulates a simple grid-like structure consisting of rows and columns.\nIn addition to the structure itself, the partition grid also holds geometric information\nrelated to both rows and columns, like, e.g. minimum heights/widths or insets.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-003",content:'The geometric information specific to a row or column is available through its descriptor\nobject, which is an instance of <api-link id="hierarchical_layout-partition_grid-215-api-link-002" data-member="" data-text="RowDescriptor" data-type="yfiles.layout.RowDescriptor"></api-link>\nor <api-link id="hierarchical_layout-partition_grid-215-api-link-003" data-member="" data-text="ColumnDescriptor" data-type="yfiles.layout.ColumnDescriptor"></api-link>,\nrespectively.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-004",content:'<span class="api">PartitionGrid</span> creates IDs for the cells of a partition,\nwhich result from the rows and columns.\nMost notably, these IDs are used to assign the nodes of a diagram to the partition cells.'},{tagname:"para",content:'<dl id="hierarchical_layout-partition_grid-215-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-partition_grid-215-term-001"><api-link id="hierarchical_layout-partition_grid-215-api-link-004" data-member="createCellId(number,number)" data-text="createCellId(rowIndex:&#xA0;number, columnIndex:&#xA0;number):&#xA0;PartitionCellId" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="hierarchical_layout-partition_grid-215-listitem-001">\n<p id="hierarchical_layout-partition_grid-215-simpara-005">Creates partition cell IDs for use with the nodes of a diagram.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-006",content:"Since group nodes in a swimlane diagram are allowed to stretch across multiple lanes,\nthey can also be assigned to a (two-dimensional) range of cells."},{tagname:"para",content:'<dl id="hierarchical_layout-partition_grid-215-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-partition_grid-215-term-002"><api-link id="hierarchical_layout-partition_grid-215-api-link-005" data-member="createCellSpanId(number,number,number,number)" data-text="createCellSpanId(fromRowIndex:&#xA0;number, fromColIndex:&#xA0;number, toRowIndex:&#xA0;number, toColIndex:&#xA0;number):&#xA0;PartitionCellId" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="hierarchical_layout-partition_grid-215-listitem-002">\n<p id="hierarchical_layout-partition_grid-215-simpara-007">Creates partition cell IDs for use with the group nodes of a diagram.\nThe cell ID represents a (two-dimensional) range of cells stretching the specified\nrows and columns.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-008",content:'The <span class="api">PartitionGrid</span> object enables further configuration of the layout outcome.\nThe following properties can be used to control whether the order of rows and columns\nin a swimlane layout shall be automatically determined.'},{tagname:"para",content:'<dl id="hierarchical_layout-partition_grid-215-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-partition_grid-215-term-003"><api-link id="hierarchical_layout-partition_grid-215-api-link-006" data-member="optimizeRowOrder" data-text="optimizeRowOrder" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="hierarchical_layout-partition_grid-215-listitem-003">\n<p id="hierarchical_layout-partition_grid-215-simpara-009">Optimize the order of rows to minimize the diagram’s overall edge lengths.</p>\n</dd>\n<dt id="hierarchical_layout-partition_grid-215-term-004"><api-link id="hierarchical_layout-partition_grid-215-api-link-007" data-member="optimizeColumnOrder" data-text="optimizeColumnOrder" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="hierarchical_layout-partition_grid-215-listitem-004">\n<p id="hierarchical_layout-partition_grid-215-simpara-010">Optimize the order of columns to minimize the diagram’s overall edge lengths.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-011",content:'To specify a swimlane/partitioned layout, provide <a href="#/dguide/hierarchical_layout-supplemental_layout_data">supplemental layout data</a>\nto the layout algorithm. The most convenient way is the layout data class\n<api-link id="hierarchical_layout-partition_grid-215-api-link-008" data-member="" data-text="PartitionGridData" data-type="yfiles.layout.PartitionGridData"></api-link>, which is a container for\nthe <a href="#/dguide/tab_hierarchical_partitiongrid_grid">partition grid</a> and the\n<a href="#/dguide/tab_hierarchical_partitiongrid_cell_ids">mapping of the nodes to the cells</a>.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-012",content:'<span class="api">HierarchicLayout</span>’s support for partitioned layout covers the configuration\noptions below for normal nodes and group nodes.\nDepending on the kind of partition cell ID that is associated with a normal node,\nthe layout algorithm will place the normal node:'},{tagname:"para",content:'<ul id="hierarchical_layout-partition_grid-215-itemizedlist-001"><li id="hierarchical_layout-partition_grid-215-listitem-005"><p id="hierarchical_layout-partition_grid-215-simpara-013"><strong id="hierarchical_layout-partition_grid-215-emphasis-001" class="bold" role="bold">none</strong> in a suitable partition cell of the partition grid structure</p></li><li id="hierarchical_layout-partition_grid-215-listitem-006"><p id="hierarchical_layout-partition_grid-215-simpara-014"><strong id="hierarchical_layout-partition_grid-215-emphasis-002" class="bold" role="bold">Single cell</strong> in the specified partition cell of the partition grid structure</p></li><li id="hierarchical_layout-partition_grid-215-listitem-007"><p id="hierarchical_layout-partition_grid-215-simpara-015"><strong id="hierarchical_layout-partition_grid-215-emphasis-003" class="bold" role="bold">Range of cells</strong> into one of the partition cells of the specified range</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-partition_grid-215-simpara-016",content:"Depending on the kind of the partition cell ID that is associated with a group node,\nthe layout algorithm will place the group node such that:"},{tagname:"para",content:'<ul id="hierarchical_layout-partition_grid-215-itemizedlist-002"><li id="hierarchical_layout-partition_grid-215-listitem-008"><p id="hierarchical_layout-partition_grid-215-simpara-017"><strong id="hierarchical_layout-partition_grid-215-emphasis-004" class="bold" role="bold">none</strong> it encompasses all its contained nodes.\nIf they are in multiple cells, the group node stretches across these cells.</p></li><li id="hierarchical_layout-partition_grid-215-listitem-009"><p id="hierarchical_layout-partition_grid-215-simpara-018"><strong id="hierarchical_layout-partition_grid-215-emphasis-005" class="bold" role="bold">Single cell</strong> its boundary corresponds to the bounds of the specified partition cell, independent\nof the cells of its contained nodes</p></li><li id="hierarchical_layout-partition_grid-215-listitem-010"><p id="hierarchical_layout-partition_grid-215-simpara-019"><strong id="hierarchical_layout-partition_grid-215-emphasis-006" class="bold" role="bold">Range of cells</strong>\nits boundary corresponds to the smallest rectangle encompassing the partition cells\nof the specified range, independent of the cells of its contained nodes</p></li></ul>'},{tagname:"para","class":"dguide-para important",id:"hierarchical_layout-partition_grid-215-important-001",content:'<p id="hierarchical_layout-partition_grid-215-simpara-020">When using the <strong id="hierarchical_layout-partition_grid-215-emphasis-007" class="bold" role="bold">Single cell</strong> and <strong id="hierarchical_layout-partition_grid-215-emphasis-008" class="bold" role="bold">Range of cells</strong> partition cell ID configurations\nfor a group node, all its contained nodes need to have corresponding partition cell\nID configurations (i.e., the cell ID of the group node isn’t automatically assigned\nto its content).</p>'}]}]},{tagname:"section",id:"hierarchical_layout-emphasizing_critical_paths",title:"Critical Paths",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-emphasizing_critical_paths-216-simpara-001",content:'<span class="api">HierarchicLayout</span> provides functionality that allows to align nodes\nthat are part of so-called critical paths.\nThis feature can be used to emphasize relevant edge paths in a diagram.'},{tagname:"figure","class":"image",title:"Alignment of nodes of a critical path",id:"fig_hierarchical_layout-critical_paths","float":0,children:[{tagname:"img",src:"assets/hierarchical_critical_path_before.61b2155b.jpg",alt:"",title:'<para class="dguide-para">Usual hierarchical layout (i.e. without taking critical paths into account).</para>'},{tagname:"img",src:"assets/hierarchical_critical_path.aeeadb5b.jpg",alt:"",title:'<para class="dguide-para">Resulting hierarchical layout where the nodes of a critical path are aligned.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-emphasizing_critical_paths-216-simpara-002",content:'A critical path in a graph is unambiguously defined by its edges.\nBy means of <a href="#/dguide/tab_hierarchical_keys_critical_edge_priorities">supplemental layout data</a>,\neach edge of a critical path is assigned a positive, non-zero integral value.\nThe value denotes that an edge is part of a critical path.\nIt also serves to define the priority of the edge, respectively the priority of\nthe critical path itself, if edges from different critical paths connect to a common node.\nThen, the edge with the highest priority determines the actual nodes to align.'}]},{tagname:"section",id:"hierarchical_layout-node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-node_halos-217-simpara-001",content:'<span class="api">HierarchicLayout</span> by default supports node halos as soon as they are\ndeclared.\nDuring layout calculation, it takes any specified additional padding around nodes\ninto consideration and keeps the areas clear of other graph elements.\nThe labels of a node and its adjacent edge segments are not affected and can still\nbe placed inside or cross the node’s halo.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-node_halos-217-simpara-002",content:'Node halos are specified by means of <a href="#/dguide/tab_hierarchical_keys_node_halos">supplemental layout data</a>.'}]},{tagname:"section",id:"hierarchical_layout-related_classes",title:"Related Classes",children:[{tagname:"section",id:"hierarchical_layout-class_LayoutDescriptor",title:"NodeLayoutDescriptor and EdgeLayoutDescriptor",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-001",content:'Classes <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-001" data-member="" data-text="NodeLayoutDescriptor" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link>\nand <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-002" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\n(together with class <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-003" data-member="" data-text="RoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link>)\ncan be used to configure node-related and edge-related layout and drawing options.\nFor example, the following options can be set for nodes and edges, respectively:'
},{tagname:"para",content:'<ul id="hierarchical_layout-class_LayoutDescriptor-219-itemizedlist-001"><li id="hierarchical_layout-class_LayoutDescriptor-219-listitem-001"><p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-002">relative alignment of nodes within their layer</p></li><li id="hierarchical_layout-class_LayoutDescriptor-219-listitem-002"><p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-003">preferred minimum distance from obstacles (both nodes and edges)</p></li><li id="hierarchical_layout-class_LayoutDescriptor-219-listitem-003"><p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-004">different routing styles for edges</p></li><li id="hierarchical_layout-class_LayoutDescriptor-219-listitem-004"><p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-005">minimum length of first and last edge segment, respectively</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-006",content:'The <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-004" data-member="" data-text="NodeLayoutDescriptor" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link> provides a number of options\nfor node configuration:'},{tagname:"para",content:'<dl id="hierarchical_layout-class_LayoutDescriptor-219-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-001" class="title" role="title">Layer Alignment</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-002"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-005" data-member="layerAlignment" data-text="layerAlignment" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-005">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-007">Determines the alignment of a node within its layer. Values can be set from 0.0 (top) to 1.0 (bottom).\nSee also <a href="#/dguide/fig_hierarchical_layout-node_related_options">Node-related layout and drawing options</a>.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-003" class="title" role="title">Minimum Layer Height</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-004"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-006" data-member="minimumLayerHeight" data-text="minimumLayerHeight" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-006">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-008">Determines the minimum height of the layer this node is assigned to. See also <a href="#/dguide/fig_hierarchical_layout-node_related_options">Node-related layout and drawing options</a>.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-005" class="title" role="title">Minimum Distance from Obstacles</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-006"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-007" data-member="minimumDistance" data-text="minimumDistance" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-007">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-009">Determines the <strong id="hierarchical_layout-class_LayoutDescriptor-219-emphasis-001" class="bold" role="bold">preferred</strong> minimum distance.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-007" class="title" role="title">Node Label Mode</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-008"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-008" data-member="nodeLabelMode" data-text="nodeLabelMode" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-008">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-010">Determines the consideration of node labels during the layout. See also <a href="#/dguide/fig_hierarchical_layout-node_label_modes">Node label modes</a>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-011",content:'For <a href="#/dguide/hierarchical_layout-grid_placement">grid placement support</a> in particular, these options are available:'},{tagname:"para",content:'<dl id="hierarchical_layout-class_LayoutDescriptor-219-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-009" class="title" role="title">Grid Reference Point</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-010"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-009" data-member="gridReference" data-text="gridReference" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-009">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-012">Determines a node’s reference point, which shall be placed on grid coordinates.\nBy default, a node’s center is used as its reference point.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-011" class="title" role="title">Port Assignment Policy</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-012"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-010" data-member="portAssignment" data-text="portAssignment" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-010">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-013">Sets the port assignment policy for a given node.\nThe policy determines how the edges at each side of the node will be distributed along the respective side.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-014",content:'A NodeLayoutDescriptor instance can be specified individually for single nodes by\nmeans of <a href="#/dguide/tab_hierarchical_keys_node_layout_descriptors">supplemental layout data</a>,\nfor example by setting the <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-011" data-member="nodeLayoutDescriptors" data-text="nodeLayoutDescriptors" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link> property\non the <span class="api">HierarchicLayoutData</span>.\nIn the absence of an individual descriptor for a node, the default\n<span class="api">NodeLayoutDescriptor</span>\ninstance that is registered with <span class="api">HierarchicLayout</span> will be used.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-015",content:'<a href="#/dguide/fig_hierarchical_layout-node_related_options">Node-related layout and drawing options</a> illustrates layer-related options from\n<span class="api">NodeLayoutDescriptor</span>.\nIn the left figure, the second and third node are aligned topmost in their layer.\nIn the right figure, the same nodes are still aligned topmost, however the minimum\nlayer height has been set to a value larger than the biggest node.'},{tagname:"figure","class":"image",title:"Node-related layout and drawing options",id:"fig_hierarchical_layout-node_related_options","float":0,children:[{tagname:"img",src:"assets/hierarchical_layer_alignment_topmost.31af8d91.png",alt:"",title:'<para class="dguide-para">Layer alignment; the second and third node are aligned topmost</para>'},{tagname:"img",src:"assets/hierarchical_layer_alignment_height.c71fc9c5.png",alt:"",title:'<para class="dguide-para">Same layer alignment in conjunction with a minimum layer height that is larger than the biggest node.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-016",content:'<a href="#/dguide/fig_hierarchical_layout-node_label_modes">Node label modes</a> illustrates the results for different\nnode label modes when calculating a hierarchical layout.\nThe figures show, from left to right, a long node label and how it is considered\nfor the layout using different settings available with NodeLayoutDescriptor.\nNote that the second figure shows the result with NodeLayoutDescriptor’s default setting.'},{tagname:"figure","class":"image",title:"Node label modes",id:"fig_hierarchical_layout-node_label_modes","float":0,children:[{tagname:"img",src:"assets/hierarchical_node_label_never.eb8ba580.jpg",alt:"",title:'<para class="dguide-para">Node labels <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-012" data-member="NEVER" data-text="never considered" data-type="yfiles.hierarchic.NodeLabelMode"></api-link>,…​</para>'},{tagname:"img",src:"assets/hierarchical_node_label_considered.c20bc3bb.jpg",alt:"",title:'<para class="dguide-para"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-013" data-member="CONSIDER_FOR_DRAWING" data-text="considered" data-type="yfiles.hierarchic.NodeLabelMode"></api-link> (the default), …​</para>'},{tagname:"img",src:"assets/hierarchical_node_label_selfloop.4532a220.jpg",alt:"",title:'<para class="dguide-para">…​ <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-014" data-member="CONSIDER_FOR_SELF_LOOPS" data-text="considered for self-loops" data-type="yfiles.hierarchic.NodeLabelMode"></api-link> also.</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-017",content:'The edge layout can be configured using class <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-015" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\ntogether with class <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-016" data-member="" data-text="RoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link>:'},{tagname:"para",content:'<dl id="hierarchical_layout-class_LayoutDescriptor-219-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-013" class="title" role="title">Routing Style</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-014"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-017" data-member="routingStyle" data-text="routingStyle" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-011">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-018">Configures the routing style for different edge types.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-015" class="title" role="title">Minimum Length of First and Last Segment</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-016"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-018" data-member="minimumFirstSegmentLength" data-text="minimumFirstSegmentLength" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-017"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-019" data-member="minimumLastSegmentLength" data-text="minimumLastSegmentLength" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-012">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-019">Determine the minimum length of the first (at the source) and last (at the target) edge segment.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-018" class="title" role="title">Minimum Length and Slope (Polyline Routing)</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-019"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-020" data-member="minimumLength" data-text="minimumLength" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-020"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-021" data-member="minimumSlope" data-text="minimumSlope" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-013">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-020">Determine the minimum length and the minimum slope of the edge’s mid segments in a vertical layout.\nApplies only to polyline routing style.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-021" class="title" role="title">Minimum Distance to Obstacles</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-022"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-022" data-member="minimumDistance" data-text="minimumDistance" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-014">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-021">Determines the <strong id="hierarchical_layout-class_LayoutDescriptor-219-emphasis-002" class="bold" role="bold">preferred</strong> minimum distance to obstacles.</p>\n</dd>\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-023" class="title" role="title">Recursive Edges Routing</dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-024"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-023" data-member="recursiveEdgeStyle" data-text="recursiveEdgeStyle" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-015">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-022">Configures how edges connecting nodes that belong to different groups are routed.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-023",content:'An <span class="api">EdgeLayoutDescriptor</span> instance can be specified individually for single edges\nby means of <a href="#/dguide/tab_hierarchical_keys_edge_layout_descriptors">supplemental layout data</a>,\nfor example by setting the <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-024" data-member="edgeLayoutDescriptors" data-text="edgeLayoutDescriptors" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link> property\non the <span class="api">HierarchicLayoutData</span>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeLayoutDescriptor</span>\ninstance that is registered with <span class="api">HierarchicLayout</span> will be used.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-024",content:'In conjunction with <span class="api">EdgeLayoutDescriptor</span>,\nclass <api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-025" data-member="" data-text="RoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link>\nenables configuration of different edge routing styles for different edge types\nlike backloop edges, same-layer edges, self-loops, and edges in edge groups.\nBy default, the routing style that is given at creation time of a\n<api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-026" data-member="" data-text="RoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link> instance\nis set uniformly for all edge types.\nThe following properties can be used to set different styles:'},{tagname:"para",content:'<dl id="hierarchical_layout-class_LayoutDescriptor-219-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_LayoutDescriptor-219-term-025"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-027" data-member="backLoopRoutingStyle" data-text="backLoopRoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link></dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-026"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-028" data-member="edgeGroupRoutingStyle" data-text="edgeGroupRoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link></dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-027"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-029" data-member="sameLayerEdgeRoutingStyle" data-text="sameLayerEdgeRoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link></dt><dt id="hierarchical_layout-class_LayoutDescriptor-219-term-028"><api-link id="hierarchical_layout-class_LayoutDescriptor-219-api-link-030" data-member="selfLoopRoutingStyle" data-text="selfLoopRoutingStyle" data-type="yfiles.hierarchic.RoutingStyle"></api-link></dt><dd id="hierarchical_layout-class_LayoutDescriptor-219-listitem-016">\n<p id="hierarchical_layout-class_LayoutDescriptor-219-simpara-025">Edge routing style configuration for different edge types.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-026",content:'<a href="#/dguide/fig_hierarchical_layout-edge_routing_options">Edge routing options</a> illustrates routing style-related options from\n<span class="api">EdgeLayoutDescriptor</span>.\nThe figures show the different routing style options available.'},{tagname:"figure","class":"image",title:"Edge routing options",id:"fig_hierarchical_layout-edge_routing_options","float":0,children:[{tagname:"img",src:"assets/hierarchical_routing_polyline.def207d6.jpg",alt:"",title:'<para class="dguide-para">Polyline edge routing</para>'},{tagname:"img",src:"assets/hierarchical_routing_orthogonal.182ccf7c.jpg",alt:"",title:'<para class="dguide-para">Orthogonal edge routing (with rounded bends)</para>'},{tagname:"img",src:"assets/hierarchical_routing_octilinear.6cd182cd.jpg",alt:"",title:'<para class="dguide-para">Octilinear edge routing</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-027",content:'<a href="#/dguide/fig_hierarchical_layout-edge_options">Edge-related layout and drawing options</a> illustrates different minimum\nlengths settings for the first and last edge segments when calculating a hierarchical\nlayout.'},{tagname:"figure","class":"image",title:"Edge-related layout and drawing options",id:"fig_hierarchical_layout-edge_options","float":0,children:[{tagname:"img",src:"assets/hierarchical_edge_segments_0px.5547a930.jpg",alt:"",title:'<para class="dguide-para">First and last segment length: 0px</para>'},{tagname:"img",src:"assets/hierarchical_edge_segments_15px.31529937.jpg",alt:"",title:'<para class="dguide-para">First and last segment length: 15px</para>'}]},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-028",content:"Polyline edge routing style is the default setting that is used by the default EdgeLayoutDescriptor for all edge types."},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_LayoutDescriptor-219-simpara-029",content:'To specify individual layout settings for nodes and edges, provide\n<a href="#/dguide/hierarchical_layout-supplemental_layout_data">supplemental layout data</a>\nfor <a href="#/dguide/tab_hierarchical_keys_node_layout_descriptors">node layout descriptors</a>\nand <a href="#/dguide/tab_hierarchical_keys_edge_layout_descriptors">edge layout descriptors</a>.'}]},{tagname:"section",id:"hierarchical_layout-class_simplexnodeplacer",title:"SimplexNodePlacer",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_simplexnodeplacer-220-simpara-001",content:'Class <api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-001" data-member="" data-text="SimplexNodePlacer" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link>\nis the default <api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-002" data-member="" data-text="INodePlacer" data-type="yfiles.hierarchic.INodePlacer"></api-link> implementation that is used by\n<span class="api">HierarchicLayout</span> during the drawing phase.\nIt can be retrieved via the <api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-003" data-member="nodePlacer" data-text="nodePlacer" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>\nproperty.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_simplexnodeplacer-220-simpara-002",content:'Most notably, <span class="api">SimplexNodePlacer</span> provides support for\nsymmetric placement of nodes where possible.'},{tagname:"para",content:'<dl id="hierarchical_layout-class_simplexnodeplacer-220-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_simplexnodeplacer-220-term-001"><api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-004" data-member="barycenterMode" data-text="barycenterMode" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link></dt><dd id="hierarchical_layout-class_simplexnodeplacer-220-listitem-001">\n<p id="hierarchical_layout-class_simplexnodeplacer-220-simpara-003">Enables drawing phase support for symmetric placement of nodes.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_simplexnodeplacer-220-simpara-004",content:'<span class="api">SimplexNodePlacer</span> also provides an optional post-processing step\nthat tries to remove bends from edges in order to straighten their paths.'},{tagname:"para",content:'<dl id="hierarchical_layout-class_simplexnodeplacer-220-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_simplexnodeplacer-220-term-002"><api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-005" data-member="straightenEdges" data-text="straightenEdges" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link></dt><dd id="hierarchical_layout-class_simplexnodeplacer-220-listitem-002">\n<p id="hierarchical_layout-class_simplexnodeplacer-220-simpara-005">Enables drawing phase support for optimized edge paths.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_simplexnodeplacer-220-simpara-006",content:"Additionally, it makes available drawing phase options that can be used in conjunction with grouped graphs."},{tagname:"para",content:'<dl id="hierarchical_layout-class_simplexnodeplacer-220-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_simplexnodeplacer-220-term-003"><api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-006" data-member="groupCompactionStrategy" data-text="groupCompactionStrategy" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link></dt><dd id="hierarchical_layout-class_simplexnodeplacer-220-listitem-003">\n<p id="hierarchical_layout-class_simplexnodeplacer-220-simpara-007">Allows to control whether the horizontal space occupied by group node content should be compacted.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-class_simplexnodeplacer-220-simpara-008",content:"The following setter can be used to place adjacent edge labels in a compact, stacked style:"},{tagname:"para",content:'<dl id="hierarchical_layout-class_simplexnodeplacer-220-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="hierarchical_layout-class_simplexnodeplacer-220-term-004"><api-link id="hierarchical_layout-class_simplexnodeplacer-220-api-link-007" data-member="labelCompaction" data-text="labelCompaction" data-type="yfiles.hierarchic.SimplexNodePlacer"></api-link></dt><dd id="hierarchical_layout-class_simplexnodeplacer-220-listitem-004">\n<p id="hierarchical_layout-class_simplexnodeplacer-220-simpara-009">Determines whether adjacent edge labels shall be placed in a compact manner.</p>\n</dd>\n</dl>'}]}]},{tagname:"section",id:"hierarchical_layout-layout_stages",title:"Applicable Layout Stages",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-layout_stages-221-simpara-001",content:'<a href="#/dguide/tab_hierarchical_layout-layout_stages">Layout Stages</a> lists layout stages that can\nbe used to enhance the layout process of class <span class="api">HierarchicLayout</span>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_hierarchical_layout-layout_stages",rowsep:1,content:'<caption>Layout Stages</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="hierarchical_layout-layout_stages-221-thead-001"><tr id="hierarchical_layout-layout_stages-221-row-001"><th id="hierarchical_layout-layout_stages-221-entry-001" align="left" valign="top">\nClass Name\n</th><th id="hierarchical_layout-layout_stages-221-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="hierarchical_layout-layout_stages-221-tbody-001"><tr id="hierarchical_layout-layout_stages-221-row-002"><td id="hierarchical_layout-layout_stages-221-entry-003" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-layout_stages-221-simpara-002"><api-link id="hierarchical_layout-layout_stages-221-api-link-001" data-member="" data-text="TopLevelGroupToSwimlaneStage" data-type="yfiles.hierarchic.TopLevelGroupToSwimlaneStage"></api-link></para></td><td id="hierarchical_layout-layout_stages-221-entry-004" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-layout_stages-221-simpara-003">Enables convenient swimlane setup using plain group nodes instead of a partition grid.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-layout_stages-221-simpara-004",content:'<span class="api">TopLevelGroupToSwimlaneStage</span> is an alternative to explicitly setting up swimlanes\nusing a partition grid as described in <a href="#/dguide/hierarchical_layout-swimlane_layout">Swimlanes</a>.\nIt presents a convenient means for specifying the setup for a swimlane layout using plain group nodes.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-layout_stages-221-simpara-005",content:"Each top-level group node is interpreted as holding the contents for one swimlane,\ni.e., all nodes within such a group node are assigned to the same lane when calculating\nthe swimlane layout.\nNaturally, this approach supports only swimlane setups where neither group nodes\nnor folder nodes stretch across multiple lanes."}]},{tagname:"section",id:"hierarchical_layout-tutorial",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-tutorial-222-simpara-001",content:'Using both the incremental as well as the non-incremental layout functionality of\nclass <api-link id="hierarchical_layout-tutorial-222-api-link-001" data-member="" data-text="HierarchicLayout" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>\nis presented in detail in the following tutorial demo applications:'},{tagname:"para",content:'<ul id="hierarchical_layout-tutorial-222-itemizedlist-001"><li id="hierarchical_layout-tutorial-222-listitem-001"><p id="hierarchical_layout-tutorial-222-simpara-002"><a href="..\\..\\demos\\layout\\incrementalhierarchic\\index.html" target="blank" class="demo-link" title="The incremental mode of the hierarchic layout style can fit new nodes and edges into the existing drawing.">Incremental Hierarchic Layout</a></p></li><li id="hierarchical_layout-tutorial-222-listitem-002"><p id="hierarchical_layout-tutorial-222-simpara-003"><a href="..\\..\\demos\\complete\\hierarchicgrouping\\index.html" target="blank" class="demo-link" title="The hierarchic layout nicely expands and collapses sub-graphs organized in groups.">Hierarchic Nesting</a></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-tutorial-222-simpara-004",content:'Layout setup for a diagram with swimlane nodes can be observed in tutorial demo application\n<a href="..\\..\\demos\\complete\\tableeditor\\index.html" target="blank" class="demo-link" title="Shows the support for diagrams that are organized in a tabular way, for example in a grid or a swimlane layout.">Table Editor</a>.'}]},{tagname:"section",id:"hierarchical_layout-supplemental_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-supplemental_layout_data-223-simpara-001",content:'When using class <span class="api">HierarchicLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-001" data-member="" data-text="HierarchicLayoutData" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_hierarchical_layout-supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">HierarchicLayoutData</span> and the corresponding look-up keys that\n<span class="api">HierarchicLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-supplemental_layout_data-223-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_hierarchical_layout-supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="hierarchical_layout-supplemental_layout_data-223-thead-001"><tr id="hierarchical_layout-supplemental_layout_data-223-row-001"><th id="hierarchical_layout-supplemental_layout_data-223-entry-001" align="left" valign="top">\nHierarchicLayoutData Property\n</th><th id="hierarchical_layout-supplemental_layout_data-223-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="hierarchical_layout-supplemental_layout_data-223-entry-003" align="left" valign="top">\nElement Type\n</th><th id="hierarchical_layout-supplemental_layout_data-223-entry-004" align="left" valign="top">\nValue Type\n</th><th id="hierarchical_layout-supplemental_layout_data-223-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="hierarchical_layout-supplemental_layout_data-223-tbody-001"><tr id="hierarchical_layout-supplemental_layout_data-223-row-002"><td id="hierarchical_layout-supplemental_layout_data-223-entry-006" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-003"><anchor id="tab_hierarchical_keys_incremental_hints" xreflabel="[tab_hierarchical_keys_incremental_hints]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-002" data-member="incrementalHints" data-text="incrementalHints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-007" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-004"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-003" data-member="INCREMENTAL_HINTS_DP_KEY" data-text="INCREMENTAL_HINTS_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-008" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-005">node, edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-009" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-006">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-010" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-007">For each incrementally added node or edge a hint object that marks the\nrespective graph element to be inserted into the hierarchical layout in an optimal manner.\nThe hint object is created by a hint factory, like, e.g., the hint factory that is returned by method\n<api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-004" data-member="createIncrementalHintsFactory()" data-text="createIncrementalHintsFactory" data-type="yfiles.hierarchic.HierarchicLayout"></api-link>.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-003"><td id="hierarchical_layout-supplemental_layout_data-223-entry-011" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-008"><anchor id="tab_hierarchical_keys_node_layout_descriptors" xreflabel="[tab_hierarchical_keys_node_layout_descriptors]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-005" data-member="nodeLayoutDescriptors" data-text="nodeLayoutDescriptors" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-012" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-009"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-006" data-member="NODE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="NODE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayoutCore"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-013" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-010">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-014" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-011">NodeLayoutDescriptor</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-015" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-012">For each node a <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-007" data-member="" data-text="NodeLayoutDescriptor" data-type="yfiles.hierarchic.NodeLayoutDescriptor"></api-link>\nobject that configures a number of node-related options.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-004"><td id="hierarchical_layout-supplemental_layout_data-223-entry-016" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-013"><anchor id="tab_hierarchical_keys_edge_layout_descriptors" xreflabel="[tab_hierarchical_keys_edge_layout_descriptors]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-008" data-member="edgeLayoutDescriptors" data-text="edgeLayoutDescriptors" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-017" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-014"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-009" data-member="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayoutCore"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-018" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-015">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-019" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-016">EdgeLayoutDescriptor</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-020" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-017">For each edge an <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-010" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link>\nobject that configures a number of edge-related options.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-005"><td id="hierarchical_layout-supplemental_layout_data-223-entry-021" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-018"><anchor id="tab_hierarchical_keys_source_group_ids" xreflabel="[tab_hierarchical_keys_source_group_ids]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-011" data-member="sourceGroupIds" data-text="sourceGroupIds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-022" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-019"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-012" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-023" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-020">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-024" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-021">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-025" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-022">For each edge an arbitrary Object indicating the group its source end is affiliated with.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-006"><td id="hierarchical_layout-supplemental_layout_data-223-entry-026" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-023"><anchor id="tab_hierarchical_keys_target_group_ids" xreflabel="[tab_hierarchical_keys_target_group_ids]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-013" data-member="targetGroupIds" data-text="targetGroupIds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-027" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-024"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-014" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-028" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-025">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-029" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-026">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-030" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-027">For each edge an arbitrary Object indicating the group its target end is affiliated with.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-007"><td id="hierarchical_layout-supplemental_layout_data-223-entry-031" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-028"><anchor id="tab_hierarchical_keys_source_port_group_ids" xreflabel="[tab_hierarchical_keys_source_port_group_ids]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-015" data-member="sourcePortGroupIds" data-text="sourcePortGroupIds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-032" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-029"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-016" data-member="SOURCE_PORT_GROUP_ID_DP_KEY" data-text="SOURCE_PORT_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-033" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-030">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-034" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-031">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-035" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-032">For each edge an arbitrary Object indicating the port group its source end is affiliated with.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-008"><td id="hierarchical_layout-supplemental_layout_data-223-entry-036" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-033"><anchor id="tab_hierarchical_keys_target_port_group_ids" xreflabel="[tab_hierarchical_keys_target_port_group_ids]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-017" data-member="targetPortGroupIds" data-text="targetPortGroupIds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-037" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-034"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-018" data-member="TARGET_PORT_GROUP_ID_DP_KEY" data-text="TARGET_PORT_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-038" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-035">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-039" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-036">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-040" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-037">For each edge an arbitrary Object indicating the port group its target end is affiliated with.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-009"><td id="hierarchical_layout-supplemental_layout_data-223-entry-041" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-038"><anchor id="tab_hierarchical_keys_source_port_constraints" xreflabel="[tab_hierarchical_keys_source_port_constraints]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-019" data-member="sourcePortConstraints" data-text="sourcePortConstraints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-042" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-039"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-020" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-043" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-040">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-044" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-041">PortConstraint</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-045" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-042">For each edge a PortConstraint object encoding its source end’s port constraint.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-010"><td id="hierarchical_layout-supplemental_layout_data-223-entry-046" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-043"><anchor id="tab_hierarchical_keys_target_port_constraints" xreflabel="[tab_hierarchical_keys_target_port_constraints]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-021" data-member="targetPortConstraints" data-text="targetPortConstraints" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-047" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-044"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-022" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-048" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-045">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-049" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-046">PortConstraint</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-050" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-047">For each edge a PortConstraint object encoding its target end’s port constraint.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-011"><td id="hierarchical_layout-supplemental_layout_data-223-entry-051" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-048"><anchor id="tab_hierarchical_keys_node_port_candidate_sets" xreflabel="[tab_hierarchical_keys_node_port_candidate_sets]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-023" data-member="nodePortCandidateSets" data-text="nodePortCandidateSets" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-052" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-049"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-024" data-member="NODE_PORT_CANDIDATE_SET_DP_KEY" data-text="NODE_PORT_CANDIDATE_SET_DP_KEY" data-type="yfiles.layout.PortCandidateSet"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-053" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-050">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-054" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-051">PortCandidateSet</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-055" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-052">For each node a PortCandidateSet object encoding the set of allowed anchor locations for edges.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-012"><td id="hierarchical_layout-supplemental_layout_data-223-entry-056" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-053"><anchor id="tab_hierarchical_keys_source_port_candidates" xreflabel="[tab_hierarchical_keys_source_port_candidates]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-025" data-member="sourcePortCandidates" data-text="sourcePortCandidates" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-057" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-054"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-026" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-058" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-055">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-059" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-056">Collection</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-060" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-057">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the source\nport likes to connect to.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-013"><td id="hierarchical_layout-supplemental_layout_data-223-entry-061" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-058"><anchor id="tab_hierarchical_keys_target_port_candidates" xreflabel="[tab_hierarchical_keys_target_port_candidates]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-027" data-member="targetPortCandidates" data-text="targetPortCandidates" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-062" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-059"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-028" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-063" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-060">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-064" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-061">Collection</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-065" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-062">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the target\nport likes to connect to.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-014"><td id="hierarchical_layout-supplemental_layout_data-223-entry-066" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-063"><anchor id="tab_hierarchical_keys_layer_constraint_factory" xreflabel="[tab_hierarchical_keys_layer_constraint_factory]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-029" data-member="layerConstraintFactory" data-text="layerConstraintFactory" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-067" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-064"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-030" data-member="LAYER_CONSTRAINTS_MEMENTO_DP_KEY" data-text="LAYER_CONSTRAINTS_MEMENTO_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-068" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-065">graph</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-069" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-066">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-070" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-067">For the graph a token that allows to bind a constraint factory.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-015"><td id="hierarchical_layout-supplemental_layout_data-223-entry-071" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-068"><anchor id="tab_hierarchical_keys_sequence_constraint_factory" xreflabel="[tab_hierarchical_keys_sequence_constraint_factory]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-031" data-member="sequenceConstraintFactory" data-text="sequenceConstraintFactory" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-072" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-069"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-032" data-member="SEQUENCE_CONSTRAINTS_MEMENTO_DP_KEY" data-text="SEQUENCE_CONSTRAINTS_MEMENTO_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-073" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-070">graph</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-074" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-071">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-075" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-072">For the graph a token that allows to bind a constraint factory.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-016"><td id="hierarchical_layout-supplemental_layout_data-223-entry-076" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-073"><anchor id="tab_hierarchical_keys_group" xreflabel="[tab_hierarchical_keys_group]"></anchor> -</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-077" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-074"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-033" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-078" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-075">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-079" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-076">boolean</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-080" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-077">For each node a boolean value indicating whether it is a group node or not.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-017"><td id="hierarchical_layout-supplemental_layout_data-223-entry-081" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-078"><anchor id="tab_hierarchical_keys_folder_nodes" xreflabel="[tab_hierarchical_keys_folder_nodes]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-034" data-member="folderNodes" data-text="folderNodes" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-082" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-079"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-035" data-member="FOLDER_NODES_DP_KEY" data-text="FOLDER_NODES_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-083" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-080">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-084" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-081">boolean</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-085" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-082">For marking folder nodes.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-018"><td id="hierarchical_layout-supplemental_layout_data-223-entry-086" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-083"><anchor id="tab_hierarchical_keys_node_id" xreflabel="[tab_hierarchical_keys_node_id]"></anchor> -</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-087" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-084"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-036" data-member="NODE_ID_DP_KEY" data-text="NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-088" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-085">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-089" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-086">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-090" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-087">For each node an Object that serves as a unique ID.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-019"><td id="hierarchical_layout-supplemental_layout_data-223-entry-091" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-088"><anchor id="tab_hierarchical_keys_parent_node_id" xreflabel="[tab_hierarchical_keys_parent_node_id]"></anchor> -</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-092" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-089"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-037" data-member="PARENT_NODE_ID_DP_KEY" data-text="PARENT_NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-093" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-090">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-094" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-091">Object</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-095" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-092">For each node an Object indicating the group node it belongs to.\nThe Object matches the unique ID of a group node that is in the same graph.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-020"><td id="hierarchical_layout-supplemental_layout_data-223-entry-096" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-093"><anchor id="tab_hierarchical_keys_minimum_node_size" xreflabel="[tab_hierarchical_keys_minimum_node_size]"></anchor> -</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-097" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-094"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-038" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-098" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-095">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-099" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-096">YDimension</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-100" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-097">For each group node a <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-039" data-member="" data-text="YDimension" data-type="yfiles.algorithms.YDimension"></api-link> object\nthat specifies the group node’s minimum size constraint.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-021"><td id="hierarchical_layout-supplemental_layout_data-223-entry-101" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-098"><anchor id="tab_hierarchical_keys_layer_indices" xreflabel="[tab_hierarchical_keys_layer_indices]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-040" data-member="layerIndices" data-text="layerIndices" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-102" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-099"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-041" data-member="LAYER_INDEX_DP_KEY" data-text="LAYER_INDEX_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-103" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-100">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-104" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-101">Integer</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-105" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-102">The layout algorithm writes an integer value for each node. The value represents the index of\nthe actual layer a node has been assigned to.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-022"><td id="hierarchical_layout-supplemental_layout_data-223-entry-106" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-103"><anchor id="tab_hierarchical_keys_sequence_indices" xreflabel="[tab_hierarchical_keys_sequence_indices]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-042" data-member="sequenceIndices" data-text="sequenceIndices" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-107" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-104"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-043" data-member="SEQUENCE_INDEX_DP_KEY" data-text="SEQUENCE_INDEX_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-108" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-105">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-109" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-106">Integer</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-110" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-107">The layout algorithm writes an integer value for each node. The value represents the index of the node inside the sequence of the according layer a node has been assigned to.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-023"><td id="hierarchical_layout-supplemental_layout_data-223-entry-111" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-108"><anchor id="tab_hierarchical_keys_given_layers" xreflabel="[tab_hierarchical_keys_given_layers]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-044" data-member="givenLayersLayererIds" data-text="givenLayersLayererIds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-112" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-109"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-045" data-member="LAYER_ID_DP_KEY" data-text="LAYER_ID_DP_KEY" data-type="yfiles.hierarchic.GivenLayersLayerer"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-113" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-110">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-114" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-111">Integer</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-115" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-112">For each node a non-negative integer value representing the layer ID of each node.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-024"><td id="hierarchical_layout-supplemental_layout_data-223-entry-116" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-113"><anchor id="tab_hierarchical_keys_critical_edge_priorities" xreflabel="[tab_hierarchical_keys_critical_edge_priorities]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-046" data-member="criticalEdgePriorities" data-text="criticalEdgePriorities" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-117" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-114"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-047" data-member="CRITICAL_EDGE_PRIORITY_DP_KEY" data-text="CRITICAL_EDGE_PRIORITY_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-118" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-115">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-119" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-116">int</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-120" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-117">For each edge of a critical path a positive, non-zero integral value that indicates\nthe priority of the edge/the critical path.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-025"><td id="hierarchical_layout-supplemental_layout_data-223-entry-121" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-118"><anchor id="tab_hierarchical_keys_node_halos" xreflabel="[tab_hierarchical_keys_node_halos]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-048" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-122" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-119"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-049" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-123" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-120">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-124" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-121">NodeHalo</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-125" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-122">A <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-050" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-026"><td id="hierarchical_layout-supplemental_layout_data-223-entry-126" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-123"><anchor id="tab_hierarchical_keys_abort_handler" xreflabel="[tab_hierarchical_keys_abort_handler]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-051" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-127" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-124"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-052" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-128" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-125">graph</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-129" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-126">AbortHandler</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-130" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-127">An <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-053" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-027"><td id="hierarchical_layout-supplemental_layout_data-223-entry-131" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-128"><anchor id="tab_hierarchical_keys_edge_thickness" xreflabel="[tab_hierarchical_keys_edge_thickness]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-054" data-member="edgeThickness" data-text="edgeThickness" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-132" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-129"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-055" data-member="EDGE_THICKNESS_DP_KEY" data-text="EDGE_THICKNESS_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-133" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-130">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-134" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-131">number</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-135" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-132">For each edge a non-negative floating point value that indicates the edge’s thickness.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-028"><td id="hierarchical_layout-supplemental_layout_data-223-entry-136" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-133"><anchor id="tab_hierarchical_keys_edge_directedness" xreflabel="[tab_hierarchical_keys_edge_directedness]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-056" data-member="edgeDirectedness" data-text="edgeDirectedness" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-137" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-134"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-057" data-member="EDGE_DIRECTEDNESS_DP_KEY" data-text="EDGE_DIRECTEDNESS_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-138" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-135">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-139" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-136">number</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-140" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-137">For each edge a floating point value that indicates the directedness of the edge.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-029"><td id="hierarchical_layout-supplemental_layout_data-223-entry-141" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-138"><anchor id="tab_hierarchical_keys_sub_components" xreflabel="[tab_hierarchical_keys_sub_components]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-058" data-member="subComponents" data-text="subComponents" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-142" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-139"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-059" data-member="SUB_COMPONENT_ID_DP_KEY" data-text="SUB_COMPONENT_ID_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link> and <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-060" data-member="SUB_COMPONENT_LAYOUT_ALGORITHM_DP_KEY" data-text="SUB_COMPONENT_LAYOUT_ALGORITHM_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-143" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-140">collection of nodes</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-144" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-141"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-061" data-member="" data-text="ILayoutAlgorithm" data-type="yfiles.layout.ILayoutAlgorithm"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-145" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-142">For each sub-component (a collection of nodes) the layout algorithm that should be applied to it.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-030"><td id="hierarchical_layout-supplemental_layout_data-223-entry-146" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-143"><anchor id="tab_hierarchical_keys_bfslayerer_core_nodes" xreflabel="[tab_hierarchical_keys_bfslayerer_core_nodes]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-062" data-member="bfsLayererCoreNodes" data-text="bfsLayererCoreNodes" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-147" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-144"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-063" data-member="CORE_NODES_DP_KEY" data-text="CORE_NODES_DP_KEY" data-type="yfiles.hierarchic.BFSLayerer"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-148" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-145">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-149" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-146">boolean</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-150" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-147">For identifying the core nodes of the BFS layering.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-031"><td id="hierarchical_layout-supplemental_layout_data-223-entry-151" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-148"><anchor id="tab_hierarchical_keys_alternative_edge_path" xreflabel="[tab_hierarchical_keys_alternative_edge_path]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-064" data-member="alternativeEdgePath" data-text="alternativeEdgePath" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-152" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-149"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-065" data-member="ALTERNATIVE_EDGE_PATH_DP_KEY" data-text="ALTERNATIVE_EDGE_PATH_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-153" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-150">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-154" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-151">YPointPath</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-155" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-152">For each edge an alternative path connecting to the content of the expanded/collapsed group.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-032"><td id="hierarchical_layout-supplemental_layout_data-223-entry-156" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-153"><anchor id="tab_hierarchical_keys_alternative_group_bounds" xreflabel="[tab_hierarchical_keys_alternative_group_bounds]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-066" data-member="alternativeGroupBounds" data-text="alternativeGroupBounds" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-157" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-154"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-067" data-member="ALTERNATIVE_GROUP_BOUNDS_DP_KEY" data-text="ALTERNATIVE_GROUP_BOUNDS_DP_KEY" data-type="yfiles.hierarchic.HierarchicLayout"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-158" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-155">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-159" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-156">YRectangle</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-160" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-157">For each group node, the original size of the group (before expanding/collapsing).</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-033"><td colspan="4" id="hierarchical_layout-supplemental_layout_data-223-entry-161" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-158"><anchor id="tab_hierarchical_partitiongrid_data" xreflabel="[tab_hierarchical_partitiongrid_data]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-068" data-member="partitionGridData" data-text="partitionGridData" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-162" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-159">Specifies a <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-069" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> for the hierarchic layout.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-034"><td id="hierarchical_layout-supplemental_layout_data-223-entry-163" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-160"><anchor id="tab_hierarchical_partitiongrid_grid" xreflabel="[tab_hierarchical_partitiongrid_grid]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-070" data-member="grid" data-text="PartitionGridData.grid" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-164" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-161"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-071" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-165" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-162">graph</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-166" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-163"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-072" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-167" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-164">Specifies the partition grid structure for the graph. Can also be defined using the <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-073" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-074" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-035"><td id="hierarchical_layout-supplemental_layout_data-223-entry-168" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-165"><anchor id="tab_hierarchical_partitiongrid_cell_ids" xreflabel="[tab_hierarchical_partitiongrid_cell_ids]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-075" data-member="cellIds" data-text="PartitionGridData.cellIds" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-169" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-166"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-076" data-member="PARTITION_CELL_ID_DP_KEY" data-text="PARTITION_CELL_ID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-170" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-167">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-171" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-168"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-077" data-member="" data-text="PartitionCellId" data-type="yfiles.layout.PartitionCellId"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-172" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-169">Specifies the partition cell id for a node. Alternatively, cell indices for a node can be specified using the <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-078" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-079" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-036"><td colspan="4" id="hierarchical_layout-supplemental_layout_data-223-entry-173" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-170"><anchor id="tab_hierarchical_selfloop_data" xreflabel="[tab_hierarchical_selfloop_data]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-080" data-member="selfLoopCalculatorData" data-text="selfLoopCalculatorData" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-174" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-171">Specifies settings for routing self-loops (i.e. edges that have the same source and target node).</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-037"><td id="hierarchical_layout-supplemental_layout_data-223-entry-175" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-172"><anchor id="tab_hierarchical_selfloop_octilinear" xreflabel="[tab_hierarchical_selfloop_octilinear]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-081" data-member="octilinearEdges" data-text="SelfLoopCalculatorData.octilinearEdges" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-176" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-173"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-082" data-member="OCTILINEAR_EDGES_DP_KEY" data-text="OCTILINEAR_EDGES_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-177" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-174">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-178" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-175">Collection</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-179" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-176">For specifying which self-loops should be octilinear.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-038"><td id="hierarchical_layout-supplemental_layout_data-223-entry-180" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-177"><anchor id="tab_hierarchical_selfloop_minimum_octilinear_segment_length" xreflabel="[tab_hierarchical_selfloop_minimum_octilinear_segment_length]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-083" data-member="minimumOctilinearSegmentLengths" data-text="SelfLoopCalculatorData.minimumOctilinearSegmentLengths" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-181" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-178"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-084" data-member="MINIMUM_OCTILINEAR_SEGMENT_LENGTH_DP_KEY" data-text="MINIMUM_OCTILINEAR_SEGMENT_LENGTH_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-182" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-179">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-183" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-180">double</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-184" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-181">For each octilinear self-loop a double value that specifies the minimum length of its octilinear segments.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-039"><td id="hierarchical_layout-supplemental_layout_data-223-entry-185" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-182"><anchor id="tab_hierarchical_selfloop_minimum_node_distances" xreflabel="[tab_hierarchical_selfloop_minimum_node_distances]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-085" data-member="minimumNodeDistances" data-text="SelfLoopCalculatorData.minimumNodeDistances" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-186" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-183"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-086" data-member="MINIMUM_NODE_DISTANCE_DP_KEY" data-text="MINIMUM_NODE_DISTANCE_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-187" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-184">node</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-188" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-185">double</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-189" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-186">For each node a double value that specifies the minimum distance to the self-loop edges.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-040"><td id="hierarchical_layout-supplemental_layout_data-223-entry-190" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-187"><anchor id="tab_hierarchical_selfloop_minimum_edge_distances" xreflabel="[tab_hierarchical_selfloop_minimum_edge_distances]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-087" data-member="minimumEdgeDistances" data-text="SelfLoopCalculatorData.minimumEdgeDistances" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-191" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-188"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-088" data-member="MINIMUM_EDGE_DISTANCE_DP_KEY" data-text="MINIMUM_EDGE_DISTANCE_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-192" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-189">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-193" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-190">double</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-194" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-191">For each edge a double value that specifies the minimum distance to the next edge or node side.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-041"><td id="hierarchical_layout-supplemental_layout_data-223-entry-195" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-192"><anchor id="tab_hierarchical_selfloop_minimum_first_segment_length" xreflabel="[tab_hierarchical_selfloop_minimum_first_segment_length]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-089" data-member="minimumFirstSegmentLengths" data-text="SelfLoopCalculatorData.minimumFirstSegmentLengths" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-196" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-193"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-090" data-member="MINIMUM_FIRST_SEGMENT_LENGTH_DP_KEY" data-text="MINIMUM_FIRST_SEGMENT_LENGTH_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-197" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-194">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-198" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-195">double</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-199" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-196">For each self-loop a double value that specifies the minimum length of its first segment.</para></td></tr><tr id="hierarchical_layout-supplemental_layout_data-223-row-042"><td id="hierarchical_layout-supplemental_layout_data-223-entry-200" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-197"><anchor id="tab_hierarchical_selfloop_minimum_last_segment_length" xreflabel="[tab_hierarchical_selfloop_minimum_last_segment_length]"></anchor><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-091" data-member="minimumLastSegmentLengths" data-text="SelfLoopCalculatorData.minimumLastSegmentLengths" data-type="yfiles.hierarchic.SelfLoopCalculatorData"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-201" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-198"><api-link id="hierarchical_layout-supplemental_layout_data-223-api-link-092" data-member="MINIMUM_LAST_SEGMENT_LENGTH_DP_KEY" data-text="MINIMUM_LAST_SEGMENT_LENGTH_DP_KEY" data-type="yfiles.hierarchic.SelfLoopCalculator"></api-link></para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-202" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-199">edge</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-203" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-200">double</para></td><td id="hierarchical_layout-supplemental_layout_data-223-entry-204" align="left" valign="top"><para class="dguide-para" id="hierarchical_layout-supplemental_layout_data-223-simpara-201">For each self-loop a double value that specifies the minimum length of its last segment.</para></td></tr></tbody>'
},{tagname:"para","class":"dguide-para",id:"hierarchical_layout-supplemental_layout_data-223-simpara-202",content:'Setup of a grouped graph’s hierarchy of nodes (using <span class="api">GROUP_DP_KEY</span>,\n<span class="api">NODE_ID_DP_KEY</span>,\nand <span class="api">PARENT_NODE_ID_DP_KEY</span>)\nis done transparently by the <span class="api">IGraph</span>-related adapter mechanisms.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.'}]},{tagname:"section",id:"hierarchical_layout-related_algorithms",title:"Related Layout Algorithms",children:[{tagname:"para","class":"dguide-para",id:"hierarchical_layout-related_algorithms-224-simpara-001",content:'The yFiles diagramming library includes other layout algorithms that offer similar\nlayout results compared to <span class="api">HierarchicLayout</span>.'},{tagname:"para",content:'<ul id="hierarchical_layout-related_algorithms-224-itemizedlist-001"><li id="hierarchical_layout-related_algorithms-224-listitem-001"><p id="hierarchical_layout-related_algorithms-224-simpara-002">Among the tree layout algorithms, classes <a href="#/dguide/tree_layout">Tree Layout</a>\nand <a href="#/dguide/classic_tree_layout">Classic Tree Layout</a> also generate drawings\nthat present the flow in a directed graph.\nWhile they can be used for general graphs, too (needs some setup), they are best\nsuited for actual <span class="def">trees</span> (hence their name), a special subset of the set of directed\nacyclic graphs.\nBoth these classes can be set up so that their layout results show layers similar\nto hierarchical layouts calculated by <span class="api">HierarchicLayout</span>.\nNote that they also support orthogonal as well as polyline edge routing.</p></li><li id="hierarchical_layout-related_algorithms-224-listitem-002"><p id="hierarchical_layout-related_algorithms-224-simpara-003">Class OrthogonalLayouter <a href="#/dguide/orthogonal_layout-directed">with directed edges</a>,\nwhich is part of the orthogonal layout style classes, can be used to generate drawings\nthat emphasize the common direction of a specific subset of edges in a directed\ngraph.\nThe direction of the remaining set of edges can be arbitrary in such drawings.\nMost notably, this algorithm can be used to generate UML-style class diagrams where\nthe inheritance relation among classes is of primary interest.</p></li></ul>'}]}]},{tagname:"section",id:"organic_layout",title:"Organic Layouts",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-225-simpara-001",content:"The organic layout style is based on the force-directed layout paradigm.\nWhen calculating a layout, the nodes are considered to be physical objects with\nmutually repulsive forces, like, e.g., protons or electrons.\nThe connections between nodes also follow the physical analogy and are considered\nto be springs attached to the pair of nodes.\nThese springs produce repulsive or attractive forces between their end points if\nthey are too short or too long.\nThe layout algorithm simulates these physical forces and rearranges the positions\nof the nodes in such a way that the sum of the forces emitted by the nodes and the\nedges reaches a (local) minimum."},{tagname:"para","class":"dguide-para",id:"organic_layout-225-simpara-002",content:"Resulting layouts often expose the inherent symmetric and clustered structure of\na graph, they show a well-balanced distribution of nodes and have few edge crossings."},{tagname:"figure","class":"image",title:"Samples of the organic layout style",id:"organic_layout-225-figure-001","float":0,children:[{tagname:"img",src:"assets/organic_sample1-thumb.6c32c9ca.jpg",alt:"",title:'<para class="dguide-para">A diagram that represents mount point relationships in a shared file system.</para>'},{tagname:"img",src:"assets/organic_sample2-thumb.5bf2630e.jpg",alt:"",title:'<para class="dguide-para">The inherent symmetry of this recursively defined graph gets exposed nicely.</para>'},{tagname:"img",src:"assets/organic_sample3-thumb.25d3658a.jpg",alt:"",title:'<para class="dguide-para">Symmetry in a grid where the corners are connected.</para>'}]},{tagname:"para","class":"dguide-para",id:"organic_layout-225-simpara-003",content:"This layout style is well suited for the visualization of highly connected backbone\nregions with attached peripheral ring or star structures.\nThese structurally different regions of a network can be easily identified by looking\nat a drawing produced by organic layout algorithms."},{tagname:"section",id:"_application_areas_2",title:"Application Areas",children:[{tagname:"para","class":"dguide-para",id:"_application_areas_2-226-simpara-001",content:"The organic layout style presents a multi-purpose layout for undirected graphs.\nIt produces clear representations of complex networks and is especially fit for\napplication areas such as:"},{tagname:"para",content:'<ul id="_application_areas_2-226-itemizedlist-001"><li id="_application_areas_2-226-listitem-001"><p id="_application_areas_2-226-simpara-002">Bioinformatics</p></li><li id="_application_areas_2-226-listitem-002"><p id="_application_areas_2-226-simpara-003">Enterprise networking</p></li><li id="_application_areas_2-226-listitem-003"><p id="_application_areas_2-226-simpara-004">Knowledge representation</p></li><li id="_application_areas_2-226-listitem-004"><p id="_application_areas_2-226-simpara-005">System management</p></li><li id="_application_areas_2-226-listitem-005"><p id="_application_areas_2-226-simpara-006">WWW visualization</p></li><li id="_application_areas_2-226-listitem-006"><p id="_application_areas_2-226-simpara-007">Mesh visualization</p></li></ul>'}]},{tagname:"section",id:"organic_layout-organiclayout",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-organiclayout-227-simpara-001",content:'<a href="#/dguide/tab_organic_layout-classes">Relevant classes for this style</a> lists the relevant classes for the organic\nlayout style.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_organic_layout-classes",rowsep:1,content:'<caption>Relevant classes for this style</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="organic_layout-organiclayout-227-thead-001"><tr id="organic_layout-organiclayout-227-row-001"><th id="organic_layout-organiclayout-227-entry-001" align="left" valign="top">\nClass Name\n</th><th id="organic_layout-organiclayout-227-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="organic_layout-organiclayout-227-tbody-001"><tr id="organic_layout-organiclayout-227-row-002"><td id="organic_layout-organiclayout-227-entry-003" align="left" valign="top"><para class="dguide-para" id="organic_layout-organiclayout-227-simpara-002"><api-link id="organic_layout-organiclayout-227-api-link-001" data-member="" data-text="OrganicLayout" data-type="yfiles.organic.OrganicLayout"></api-link></para></td><td id="organic_layout-organiclayout-227-entry-004" align="left" valign="top"><para class="dguide-para" id="organic_layout-organiclayout-227-simpara-003">Main algorithm. See <a href="#/dguide/organic_layout-organiclayout">the description</a> below.</para></td></tr><tr id="organic_layout-organiclayout-227-row-003"><td id="organic_layout-organiclayout-227-entry-005" align="left" valign="top"><para class="dguide-para" id="organic_layout-organiclayout-227-simpara-004"><api-link id="organic_layout-organiclayout-227-api-link-002" data-member="" data-text="InteractiveOrganicLayout" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></para></td><td id="organic_layout-organiclayout-227-entry-006" align="left" valign="top"><para class="dguide-para" id="organic_layout-organiclayout-227-simpara-005">This class provides organic layout in an interactive environment where a user\n  directly manipulates a diagram and updates to the diagram’s layout are calculated\n  continuously. See the description of this class in <a href="#/dguide/interactive_organic_layout">Interactive Organic Layout</a>.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"organic_layout-organiclayout-227-simpara-006",content:'Besides <span class="api">OrganicLayout</span> (OL), the yFiles diagramming library includes a legacy layout\nalgorithm for the organic layout style, class <span class="api">ClassicOrganicLayout</span>.\nOL supersedes this class and adds features to prevent node (label) overlaps and\nto keep minimum distances between the nodes.\nSee also <a href="#/dguide/organic_layout-related">Related Layout Algorithms</a>.'},{tagname:"para","class":"dguide-para",id:"organic_layout-organiclayout-227-simpara-007",content:'Class <api-link id="organic_layout-organiclayout-227-api-link-003" data-member="" data-text="OrganicLayout" data-type="yfiles.organic.OrganicLayout"></api-link> is an\norganic layout provider that supports both complete re-layout of a given diagram\nas well as incremental layout where only a subset of a diagram should be rearranged.'},{tagname:"para","class":"dguide-para",id:"organic_layout-organiclayout-227-simpara-008",content:'One of the strengths of <span class="api">OrganicLayout</span> is its ability to control the ratio\nof quality versus running time, as well as its ability to produce organic layouts\nwhile guaranteeing the absence of node overlaps.\nAdditionally, <span class="api">OrganicLayout</span> also prevents node label overlaps and keeps minimum distances\nbetween nodes.'},{tagname:"para","class":"dguide-para",id:"organic_layout-organiclayout-227-simpara-009",content:'<span class="api">OrganicLayout</span> provides a set of options that influence the layout behavior.'}]},{tagname:"section",id:"organic_layout-drawing_options",title:"Basic Options",children:[{tagname:"para",content:'<dl id="organic_layout-drawing_options-228-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-drawing_options-228-term-001" class="title" role="title">Preferred Edge Length</dt><dt id="organic_layout-drawing_options-228-term-002"><api-link id="organic_layout-drawing_options-228-api-link-001" data-member="preferredEdgeLength" data-text="preferredEdgeLength" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-001">\n<p id="organic_layout-drawing_options-228-simpara-001">Allows to specify the general preferred length of all edges.\nThe layout algorithm tries to arrange the nodes in such a way that the edges have\nthe desired edge length.\nIf "Node Size Aware" is checked, then the edge length is measured from node\nborder to node border.\nOtherwise, the edge length is measured from node center to node center.</p>\n<p id="organic_layout-drawing_options-228-simpara-002">To specify the preferred edge length for each edge individually, provide\n<a href="#/dguide/tab_organic_layout-data_preferred-edge-lengths">supplemental layout data</a>,\nfor example using the property\n<api-link id="organic_layout-drawing_options-228-api-link-002" data-member="preferredEdgeLengths" data-text="OrganicLayoutData.preferredEdgeLengths" data-type="yfiles.organic.OrganicLayoutData"></api-link>\nNote that in the absence of an individual preferred edge length the general\npreferred edge length will be used.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-003" class="title" role="title">Node Size Aware</dt><dt id="organic_layout-drawing_options-228-term-004"><api-link id="organic_layout-drawing_options-228-api-link-003" data-member="considerNodeSizes" data-text="considerNodeSizes" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-002">\n<p id="organic_layout-drawing_options-228-simpara-003">Whether or not to obey the size of the nodes when calculating the layout.\nThe distance between two nodes is calculated with respect to the node sizes, i.e.,\nfor equal preferred edge lengths, activating this feature will lead to bigger layouts.\nNote that enabling "Consider Node Labels" also enables this property.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-005" class="title" role="title">Consider Node Labels</dt><dt id="organic_layout-drawing_options-228-term-006"><api-link id="organic_layout-drawing_options-228-api-link-004" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-003">\n<p id="organic_layout-drawing_options-228-simpara-004">Enables node label-aware layout calculation.\nNote that enabling this option also enables the "Node Size Aware" property.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-007" class="title" role="title">Node Overlaps Allowed</dt><dt id="organic_layout-drawing_options-228-term-008"><api-link id="organic_layout-drawing_options-228-api-link-005" data-member="nodeOverlapsAllowed" data-text="nodeOverlapsAllowed" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-004">\n<p id="organic_layout-drawing_options-228-simpara-005">Whether or not nodes are allowed to overlap.\nIf this feature is disabled, the "Minimal Node Distance" will be used to\narrange the nodes in such a way that the given distance will be obeyed.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-009" class="title" role="title">Minimal Node Distance</dt><dt id="organic_layout-drawing_options-228-term-010"><api-link id="organic_layout-drawing_options-228-api-link-006" data-member="minimumNodeDistance" data-text="minimumNodeDistance" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-005">\n<p id="organic_layout-drawing_options-228-simpara-006">The minimal node distance which will be used if "Node Overlaps Allowed" is disabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-drawing_options-228-simpara-007",content:'Using property "Node Overlaps Allowed," organic layout can be configured to guarantee\nthe absence of node overlaps even for very dense graphs.\nFurther improvements can be achieved using the "Consider Node Labels" property,\nwhich prevents that node label overlap with graph elements.'},{tagname:"para","class":"dguide-para",id:"organic_layout-drawing_options-228-simpara-008",content:'Additionally, using property "Minimal Node Distance," it is possible to specify\na minimal node distance, i.e., it can be guaranteed that there will be a\ncertain amount of space around each node, which is not occupied by other nodes.'},{tagname:"para",content:'<dl id="organic_layout-drawing_options-228-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-drawing_options-228-term-011" class="title" role="title">Compactness</dt><dt id="organic_layout-drawing_options-228-term-012"><api-link id="organic_layout-drawing_options-228-api-link-007" data-member="compactnessFactor" data-text="compactnessFactor" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-006">\n<p id="organic_layout-drawing_options-228-simpara-009">Adjusting this value can lead to a variety of differing layouts.\nFor small values, the resulting layout will use a lot of space and nodes tend to\nbe far away from each other.\nValues around 0.5 lead to evenly distributed nodes, whereas values\nnear 1.0 produce highly compact layouts.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-drawing_options-228-simpara-010",content:'<a href="#/dguide/fig_organic_layout-compactness">Layout results when using different compactness settings</a> shows the results of layout calculations using\ndifferent compactness values.'},{tagname:"figure","class":"image",title:"Layout results when using different compactness settings",id:"fig_organic_layout-compactness","float":0,children:[{tagname:"img",src:"assets/organic_compactness_02.c87e870a.png",alt:"",title:'<para class="dguide-para">Compactness = 0.2</para>'},{tagname:"img",src:"assets/organic_compactness_05.6f72b440.png",alt:"",title:'<para class="dguide-para">Compactness = 0.5</para>'},{tagname:"img",src:"assets/organic_compactness_09.4c2318a6.png",alt:"",title:'<para class="dguide-para">Compactness = 0.9</para>'}]},{tagname:"para",content:'<dl id="organic_layout-drawing_options-228-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-drawing_options-228-term-013" class="title" role="title">Output Restriction</dt><dt id="organic_layout-drawing_options-228-term-014"><api-link id="organic_layout-drawing_options-228-api-link-008" data-member="outputRestriction" data-text="outputRestriction" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-007">\n<p id="organic_layout-drawing_options-228-simpara-011">Allows to impose so-called "output restrictions" on the result of the layout calculation.\nMore precisely, the layout result can be specified to fit into a (simple) geometric\nshape, like, e.g., a rectangle or a circle.\nAlso, the layout result can be restricted to a specified aspect ratio.</p>\n<p id="organic_layout-drawing_options-228-simpara-012">Class <api-link id="organic_layout-drawing_options-228-api-link-009" data-member="" data-text="OutputRestriction" data-type="yfiles.organic.OutputRestriction"></api-link> serves as\na factory to create predefined output restrictions that can be used in conjunction\nwith this property.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-algorithm_options",content:"Organic layout can choose between different strategies, combinations and\nconfigurations of a couple of related algorithms to control the running time\nversus the quality of the layout."},{tagname:"para","class":"dguide-para",id:"organic_layout-drawing_options-228-simpara-014",content:'Using small values for property "Quality/Time Ratio," it is possible to produce\nacceptable layouts for huge graphs (thousands of nodes within seconds), whereas\nsetting this value to greater values leads to high-quality layouts, which may\ntake longer (up to a few minutes for hundreds of nodes).'},{tagname:"para",content:'<dl id="organic_layout-drawing_options-228-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-drawing_options-228-term-015" class="title" role="title">Quality/Time Ratio</dt><dt id="organic_layout-drawing_options-228-term-016"><api-link id="organic_layout-drawing_options-228-api-link-010" data-member="qualityTimeRatio" data-text="qualityTimeRatio" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-008">\n<p id="organic_layout-drawing_options-228-simpara-015">This setting can be used to adjust the quality versus the running time of the\nlayout algorithm.\nSmall values lead to short running times, while greater values result in better\nquality.\nFor large graph structures (hundreds and thousands of nodes) it is advisable to\nbegin with smaller values and to gradually increase them.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-017" class="title" role="title">Maximum Duration</dt><dt id="organic_layout-drawing_options-228-term-018"><api-link id="organic_layout-drawing_options-228-api-link-011" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-009">\n<p id="organic_layout-drawing_options-228-simpara-016">Sets the maximal duration of the layout process in milliseconds.\nIf this upper bound is hit during the layout process, the quality of the layout\nmay not be optimal.\nIncreasing this values increases the likeliness of an optimal layout.</p>\n</dd>\n<dt id="organic_layout-drawing_options-228-term-019" class="title" role="title">Deterministic</dt><dt id="organic_layout-drawing_options-228-term-020"><api-link id="organic_layout-drawing_options-228-api-link-012" data-member="deterministic" data-text="deterministic" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-drawing_options-228-listitem-010">\n<p id="organic_layout-drawing_options-228-simpara-017">Whether or not the layout process should be deterministic.\nIn deterministic mode the layout algorithm produces identical results for identical\ninput graphs and identical settings.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_labeling_2",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"_labeling_2-229-simpara-001",content:'Edge labels can be placed automatically using the generic labeling support as described\nin <a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, which is available with all yFiles layout\nalgorithms.\nAdditionally, <span class="api">OrganicLayout</span> can be set up to take node labels into account\nduring layout.\nNode labels do not need to be placed, but instead their size needs to be considered\nfor the placement of adjacent graph elements.\nTaking node labels into consideration during layout calculation guarantees that\nthey will not overlap nodes in the diagram.'},{tagname:"para","class":"dguide-para",id:"_labeling_2-229-simpara-002",content:'Node label awareness is enabled using the "Consider Node Labels" property.\nSee the description of the options in <a href="#/dguide/organic_layout-drawing_options">Basic Options</a>.'}]},{tagname:"section",id:"organic_layout-grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-001",content:'<span class="api">OrganicLayout</span> directly supports layout of grouped graphs.\nBoth position and dimension of group nodes will be calculated by the algorithm.'},{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-002",content:'Minimum size constraints for group nodes, which can be conveniently used in order\nto accommodate for the size of its label, are handled by the <api-link id="organic_layout-grouping-230-api-link-001" data-member="" data-text="MinimumSizeGroupBoundsCalculator" data-type="yfiles.layout.MinimumSizeGroupBoundsCalculator"></api-link>\ninstance that is registered with <span class="api">OrganicLayout</span>.\nIf a data provider is registered with the graph using the look-up key\n<api-link id="organic_layout-grouping-230-api-link-002" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link>,\nany individual minimum size constraints for group nodes held by this data provider\nare respected by default.'},{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-003",content:'Additional size requirements for group nodes can be handled by registering a custom\n<api-link id="organic_layout-grouping-230-api-link-003" data-member="" data-text="IGroupBoundsCalculator" data-type="yfiles.layout.IGroupBoundsCalculator"></api-link> implementation,\nreplacing the default MinimumSizeGroupBoundsCalculator instance.'},{tagname:"para",content:'<dl id="organic_layout-grouping-230-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-grouping-230-term-001"><api-link id="organic_layout-grouping-230-api-link-004" data-member="groupBoundsCalculator" data-text="groupBoundsCalculator" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-grouping-230-listitem-001">\n<p id="organic_layout-grouping-230-simpara-004">Setting another IGroupBoundsCalculator implementation.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Organic layout of a grouped graph",id:"organic_layout-grouping-230-figure-001","float":0,children:[{tagname:"img",src:"assets/organic_node-groups1a.ff500d9a.gif",alt:"organic node groups1a",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-005",content:'You can achieve fine-grained control over group node handling during layout calculation\nby specifying <api-link id="organic_layout-grouping-230-api-link-005" data-member="" data-text="GroupNodeMode" data-type="yfiles.organic.GroupNodeMode"></api-link> for nodes via <a href="#/dguide/tab_organic_layout-data_group-node-modes">supplemental layout data</a>.\nThe following constants are available to instruct the algorithm how to treat a specific\ngroup node:'},{tagname:"para",content:'<dl id="organic_layout-grouping-230-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-grouping-230-term-002"><api-link id="organic_layout-grouping-230-api-link-006" data-member="NORMAL" data-text="NORMAL" data-type="yfiles.organic.GroupNodeMode"></api-link></dt><dd id="organic_layout-grouping-230-listitem-002">\n<p id="organic_layout-grouping-230-simpara-006">The contents of the group node will be processed by the layout algorithm.\nAlso, the group node’s size and position will be determined by the algorithm.</p>\n</dd>\n<dt id="organic_layout-grouping-230-term-003"><api-link id="organic_layout-grouping-230-api-link-007" data-member="FIX_CONTENTS" data-text="FIX_CONTENTS" data-type="yfiles.organic.GroupNodeMode"></api-link></dt><dd id="organic_layout-grouping-230-listitem-003">\n<p id="organic_layout-grouping-230-simpara-007">Size and position of the group node will be determined by the algorithm.\nThe contents of the group node are not processed by the algorithm, but are moved\nwith the group node.</p>\n</dd>\n<dt id="organic_layout-grouping-230-term-004"><api-link id="organic_layout-grouping-230-api-link-008" data-member="FIX_BOUNDS" data-text="FIX_BOUNDS" data-type="yfiles.organic.GroupNodeMode"></api-link></dt><dd id="organic_layout-grouping-230-listitem-004">\n<p id="organic_layout-grouping-230-simpara-008">The contents of the group node will be processed by the layout algorithm, however,\nwith respect to the original bounds of the group node which will not change.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-009",content:'Note that in conjunction with <a href="#/dguide/organic_layout-partitioned_layout">partitioned layout</a>,\nonly the first constant is supported.'},{tagname:"para","class":"dguide-para tip",id:"organic_layout-grouping-230-tip-001",content:'<p id="organic_layout-grouping-230-simpara-010">Using the <api-link id="organic_layout-grouping-230-api-link-009" data-member="FIX_CONTENTS" data-text="FIX_CONTENTS" data-type="yfiles.organic.GroupNodeMode"></api-link>\n     or <api-link id="organic_layout-grouping-230-api-link-010" data-member="FIX_BOUNDS" data-text="FIX_BOUNDS" data-type="yfiles.organic.GroupNodeMode"></api-link>\n     constant for group nodes also enables additional incremental layout behavior specifically\n     for group nodes.</p>'},{tagname:"para","class":"dguide-para",id:"organic_layout-grouping-230-simpara-011",content:'In conjunction with the layout for grouped graphs, <span class="api">OrganicLayout</span> recognizes\nseveral <a href="#/dguide/organic_layout-supplemental_layout_data">supplemental layout data</a>\nsuch as <a href="#/dguide/tab_organic_layout-data_group">GROUP_DPKEY</a>,\n<a href="#/dguide/tab_organic_layout-data_node-id">NODE_ID_DPKEY</a>,\n<a href="#/dguide/tab_organic_layout-data_parent-node-id">PARENT_NODE_ID_DPKEY</a> and\n<a href="#/dguide/tab_organic_layout-data_minimum-node-size">MINIMUM_NODE_SIZE_DPKEY</a>. Additionally,\n<api-link id="organic_layout-grouping-230-api-link-011" data-member="" data-text="OrganicLayoutData" data-type="yfiles.organic.OrganicLayoutData"></api-link> provides a property for the\naforementioned <a href="#/dguide/tab_organic_layout-data_group-node-modes">group node modes</a>.'}]},{tagname:"section",id:"organic_layout-incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-001",content:'<span class="api">OrganicLayout</span> supports different kinds of <span class="def">incremental layout</span>\nstrategies through the <strong id="organic_layout-incremental-231-emphasis-001" class="bold" role="bold">Scope</strong> feature.'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-002",content:'The <api-link id="organic_layout-incremental-231-api-link-001" data-member="scope" data-text="scope" data-type="yfiles.organic.OrganicLayout"></api-link>\nproperty determines the set of nodes from the graph that should be processed.\nIn conjunction with a specified subset of the nodes of a graph, this property can\nbe used to switch between non-incremental and incremental layout.'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-003",content:'By default, <span class="api">OrganicLayout</span> re-computes the entire layout of a given graph, i.e., it performs\na non-incremental layout.\nWhen only a subset of the graph should be rearranged, i.e., when the scope is changed\nfrom its default value, <a href="#/dguide/tab_organic_layout-data_affected-nodes">supplemental layout data</a>\nholding the selection state for each node is queried.\nThe specified subset of nodes is then arranged in an incremental manner.'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-004",content:"The following scope constants are available:"},{tagname:"para",content:'<dl id="organic_layout-incremental-231-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-incremental-231-term-001"><api-link id="organic_layout-incremental-231-api-link-002" data-member="ALL" data-text="ALL" data-type="yfiles.organic.Scope"></api-link></dt><dd id="organic_layout-incremental-231-listitem-001">\n<p id="organic_layout-incremental-231-simpara-005">The whole graph will be considered for layout, i.e., a complete re-layout will be\ncalculated.\nThis is the default setting.</p>\n</dd>\n<dt id="organic_layout-incremental-231-term-002"><api-link id="organic_layout-incremental-231-api-link-003" data-member="MAINLY_SUBSET" data-text="MAINLY_SUBSET" data-type="yfiles.organic.Scope"></api-link></dt><dd id="organic_layout-incremental-231-listitem-002">\n<p id="organic_layout-incremental-231-simpara-006">The selected nodes will be rearranged.\nThe unselected nodes are only allowed to move to a certain degree.</p>\n</dd>\n<dt id="organic_layout-incremental-231-term-003"><api-link id="organic_layout-incremental-231-api-link-004" data-member="SUBSET" data-text="SUBSET" data-type="yfiles.organic.Scope"></api-link></dt><dd id="organic_layout-incremental-231-listitem-003">\n<p id="organic_layout-incremental-231-simpara-007">Only the selected nodes will be rearranged.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-008",content:'<a href="#/dguide/fig_organic_layout-incremental_layout">Incremental layout of augmented graph</a> shows the resulting diagrams for different\nScope settings for the initial (augmented) graph from <a href="#/dguide/fig_organic_layout-incremental_graphs">Initial graph and an augmentation</a>.\nOnly (or mostly) the nodes from the specified subset get arranged by <span class="api">OrganicLayout</span>.\nThe other nodes keep their position.'},{tagname:"figure","class":"image",title:"Initial graph and an augmentation",id:"fig_organic_layout-incremental_graphs","float":0,children:[{tagname:"img",src:"assets/organic_noextra.5072811e.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/organic_extra.4c93301e.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"figure","class":"image",title:"Incremental layout of augmented graph",id:"fig_organic_layout-incremental_layout","float":0,children:[{tagname:"img",src:"assets/organic_extra-all.c38de3ab.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/organic_extra-only-selection.87571d2d.jpg",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/organic_extra-mainly-selection.fe012341.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para note",id:"organic_layout-incremental-231-note-001",content:'<p id="organic_layout-incremental-231-simpara-009">When only a subset of nodes should be rearranged, the "Node Overlaps Allowed" property\n      should be enabled, otherwise unselected nodes might be moved to resolve node overlaps.</p>'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-010",content:"In unconnected graphs, i.e., graphs with multiple components, the following additional\noption can be used to improve the results of an incremental layout calculation."},{tagname:"para",content:'<dl id="organic_layout-incremental-231-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-incremental-231-term-004"><api-link id="organic_layout-incremental-231-api-link-005" data-member="smartComponentLayout" data-text="smartComponentLayout" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-incremental-231-listitem-004">\n<p id="organic_layout-incremental-231-simpara-011">When enabled, the <span class="api">ComponentLayout</span> that is used with this <span class="api">MultiStageLayout</span>\nis configured in such a way that separate components containing nodes which should\nnot be moved will not be rearranged.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-012",content:'You can achieve further incremental layout behavior specifically for group nodes\nthrough <a href="#/dguide/organic_layout-supplemental_layout_data">supplemental layout data</a>, more specifically\n<a href="#/dguide/tab_organic_layout-data_group-node-modes">group node modes</a>.\nSee also the corresponding description for layout data in <a href="#/dguide/organic_layout-grouping">Grouped Graphs</a>.'},{tagname:"para","class":"dguide-para",id:"organic_layout-incremental-231-simpara-013",content:'<a href="#/dguide/tab_organic_layout-data_affected-nodes">Affected nodes</a> are also\nrespected in conjunction with incremental layout.'}]},{tagname:"section",id:"organic_layout-partitioned_layout",title:"Tables",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-001",content:'\n\n<span class="api">OrganicLayout</span> provides support for so-called partitioned layout.\nThis type of layout uses the notion of cells in a table-like grid structure into\nwhich nodes are placed.\nEach normal node of the graph is placed into a single cell and the contents of group\nnodes belong to the same single cell as the group node itself.\nThe setup for partitioned layout is presented in <a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a>.'},{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-002",content:'<a href="#/dguide/fig_organic_layout-partition_grid">Partitioned layout as calculated by OrganicLayout</a> shows a resulting partitioned layout as\ncalculated by <span class="api">OrganicLayout</span>.\nThe visual representation as a table is rendered by a group node that uses the\n<a href="#/dguide/tables">TableNodeStyle</a> node style.'},{tagname:"figure","class":"image",title:"Partitioned layout as calculated by OrganicLayout",id:"fig_organic_layout-partition_grid","float":0,children:[{tagname:"img",src:"assets/organic_partitioned.e1dbd862.png",alt:"Partitioned layout.",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-003",content:'<span class="api">OrganicLayout</span>’s support for partitioned layout covers the configuration options\nbelow for normal nodes and group nodes.\nDepending on the kind of partition cell ID that is associated with a normal node,\nthe layout algorithm will place the normal node:'},{tagname:"para",content:'<dl id="organic_layout-partitioned_layout-232-variablelist-001"><dt id="organic_layout-partitioned_layout-232-term-001">none</dt><dd id="organic_layout-partitioned_layout-232-listitem-001"><p id="organic_layout-partitioned_layout-232-simpara-004">in a suitable partition cell of the partition grid structure</p></dd><dt id="organic_layout-partitioned_layout-232-term-002">Single cell</dt><dd id="organic_layout-partitioned_layout-232-listitem-002"><p id="organic_layout-partitioned_layout-232-simpara-005">in the specified partition cell of the partition grid structure</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-006",content:"Depending on the kind of the partition cell ID that is associated with a group node,\nthe layout algorithm will place the group node such that:"},{tagname:"para",content:'<dl id="organic_layout-partitioned_layout-232-variablelist-002"><dt id="organic_layout-partitioned_layout-232-term-003">none</dt><dd id="organic_layout-partitioned_layout-232-listitem-003"><p id="organic_layout-partitioned_layout-232-simpara-007">it encompasses all its contained nodes</p></dd><dt id="organic_layout-partitioned_layout-232-term-004">Single cell</dt><dd id="organic_layout-partitioned_layout-232-listitem-004"><p id="organic_layout-partitioned_layout-232-simpara-008">its boundary corresponds to the bounds of the specified partition cell</p></dd><dt id="organic_layout-partitioned_layout-232-term-005">Range of cells</dt><dd id="organic_layout-partitioned_layout-232-listitem-005"><p id="organic_layout-partitioned_layout-232-simpara-009">its boundary corresponds to the smallest rectangle encompassing the partition cells\nof the specified range, independent of the cells of its contained nodes</p></dd></dl>'},{tagname:"para","class":"dguide-para important",id:"organic_layout-partitioned_layout-232-important-001",content:'<p id="organic_layout-partitioned_layout-232-simpara-010">A node contained in a group node can have either no partition cell ID configuration\n           associated with it (<strong id="organic_layout-partitioned_layout-232-emphasis-001" class="bold" role="bold">none</strong>) or a <strong id="organic_layout-partitioned_layout-232-emphasis-002" class="bold" role="bold">single cell</strong> partition cell ID configuration.\n           All nodes with the latter, however, need to use the same partition cell ID configuration.</p>'},{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-011",content:'In conjunction with the <a href="#/dguide/organic_layout-grouping">group node handling</a>\noption, partitioned layout calculation does not support group nodes that are associated\nwith group node mode constants other than <api-link id="organic_layout-partitioned_layout-232-api-link-001" data-member="NORMAL" data-text="NORMAL" data-type="yfiles.organic.GroupNodeMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"organic_layout-partitioned_layout-232-simpara-012",content:'To configure a swimlane/partitioned layout with <span class="api">OrganicLayout</span>,\nuse <a href="#/dguide/tab_organic_layout-data_partitiongrid-data">partitionGridData</a>\nas <a href="#/dguide/organic_layout-supplemental_layout_data">supplemental layout data</a>.'}]},{tagname:"section",id:"organic_layout-substructures",title:"Layout of Regular Substructures",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-001",content:"The organic layout algorithm can identify regular substructures in a graph, like,\ne.g.,"},{tagname:"para",content:'<ul id="organic_layout-substructures-233-itemizedlist-001"><li id="organic_layout-substructures-233-listitem-001"><p id="organic_layout-substructures-233-simpara-002">chains</p></li><li id="organic_layout-substructures-233-listitem-002"><p id="organic_layout-substructures-233-simpara-003">stars</p></li><li id="organic_layout-substructures-233-listitem-003"><p id="organic_layout-substructures-233-simpara-004">cycles</p></li><li id="organic_layout-substructures-233-listitem-004"><p id="organic_layout-substructures-233-simpara-005">parallel structures</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-006",content:"and arrange them in an optimized manner depending on the kind of substructure.\nThis makes them easily recognizable in the resulting layout."},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-007",content:"For example, the diagram in the following figure has star substructures of different\nsizes, a chain, a cycle, and a parallel substructure."},{tagname:"figure","class":"image",title:"Regular substructures in an organic layout",id:"organic_layout-substructures-233-figure-001","float":0,children:[{tagname:"img",src:"assets/organic_substructures_none.9f343ccd.jpg",alt:"",title:'<para class="dguide-para">Usual organic layout.</para>'},{tagname:"img",src:"assets/organic_substructures_four_kinds.8d610498.jpg",alt:"",title:'<para class="dguide-para">Resulting organic layout with identified and arranged regular substructures.</para>'}]},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-008",content:"To enable the support for identifying and arranging regular substructures, the following\nproperties are available."},{tagname:"para",content:'<dl id="organic_layout-substructures-233-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="organic_layout-substructures-233-term-001"><api-link id="organic_layout-substructures-233-api-link-001" data-member="chainSubstructureStyle" data-text="chainSubstructureStyle" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dt id="organic_layout-substructures-233-term-002"><api-link id="organic_layout-substructures-233-api-link-002" data-member="cycleSubstructureStyle" data-text="cycleSubstructureStyle" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dt id="organic_layout-substructures-233-term-003"><api-link id="organic_layout-substructures-233-api-link-003" data-member="parallelSubstructureStyle" data-text="parallelSubstructureStyle" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dt id="organic_layout-substructures-233-term-004"><api-link id="organic_layout-substructures-233-api-link-004" data-member="starSubstructureStyle" data-text="starSubstructureStyle" data-type="yfiles.organic.OrganicLayout"></api-link></dt><dd id="organic_layout-substructures-233-listitem-005">\n<p id="organic_layout-substructures-233-simpara-009">The properties to enable/disable the logic for finding the respective substructures\nand to configure the layout style for each kind of substructure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-010",content:'As an option, the logic to identify the regular substructures can take the edge\ndirectedness into account.\nThis means that within a substructure all edges need to have the same direction.\nTo enable this option, define <a href="#/dguide/tab_organic_layout-data_edge-directedness">supplemental layout data</a>\nthat specifies the directedness for edges, for example by setting the\n<api-link id="organic_layout-substructures-233-api-link-005" data-member="edgeDirectedness" data-text="OrganicLayoutData.edgeDirectedness" data-type="yfiles.organic.OrganicLayoutData"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-011",content:"An edge can be marked using one of the following directedness values:"},{tagname:"para",content:'<ul id="organic_layout-substructures-233-itemizedlist-002"><li id="organic_layout-substructures-233-listitem-006"><p id="organic_layout-substructures-233-simpara-012"><strong id="organic_layout-substructures-233-emphasis-001" class="bold" role="bold">0</strong> denotes a regular, i.e., undirected edge</p></li><li id="organic_layout-substructures-233-listitem-007"><p id="organic_layout-substructures-233-simpara-013"><strong id="organic_layout-substructures-233-emphasis-002" class="bold" role="bold">1</strong> denotes an edge that should be oriented from source to target</p></li><li id="organic_layout-substructures-233-listitem-008"><p id="organic_layout-substructures-233-simpara-014"><strong id="organic_layout-substructures-233-emphasis-003" class="bold" role="bold">-1</strong> denotes an edge that should be oriented from target to source</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-015",content:"Carefully observe that this support for edge directedness is only provided by the\nlogic that identifies the regular substructures in a graph and is only taken into\naccount in conjunction with substructure layout.\nThe organic layout algorithm in general has no notion of edge direction.\nConsequently, by default, all edges are assumed to have a directedness value of <code>0</code>."},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-016",content:'For the layout of stars (style <api-link id="organic_layout-substructures-233-api-link-006" data-member="SEPARATED_RADIAL" data-text="separated radial" data-type="yfiles.organic.StarSubstructureStyle"></api-link> only)\nand parallel substructures, edge groups that are specified for the edge ends at\nthe substructure’s root node or its common end nodes will automatically be observed.\nEdges that belong to the same group at an end will be routed in a bus-style manner\nwith an additional bend inserted into the edge path.'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-017",content:"The following figure shows the resulting layout of a parallel substructure with\none edge group at each of the end nodes:"},{tagname:"figure","class":"image",title:"Parallel substructure layout in combination with edge grouping",id:"organic_layout-substructures-233-figure-002","float":0,children:[{tagname:"img",src:"assets/organic_parallel_substructure.5bb4b7eb.jpg",alt:"",title:'<para class="dguide-para">Parallel substructure layout…​</para>'},{tagname:"img",src:"assets/organic_edge_grouping.ba5263df.jpg",alt:"",title:'<para class="dguide-para">…​ with one edge group at each of the end nodes.</para>'}]},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-018",content:'The general setup for edge groups is described in section <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'},{tagname:"para","class":"dguide-para",id:"organic_layout-substructures-233-simpara-019",content:'You can configure the substructure layout component of <span class="api">OrganicLayout</span>\nvia <a href="#/dguide/organic_layout-supplemental_layout_data">supplemental layout data</a>\nsuch as <a href="#/dguide/tab_organic_layout-data_edge-directedness">edge directedness</a>,\n<a href="#/dguide/tab_organic_layout-data_source-groupid">source group ids</a> and\n<a href="#/dguide/tab_organic_layout-data_target-groupid">target group ids</a>.'}]},{tagname:"section",id:"organic_layout-node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-node_halos-234-simpara-001",content:'<span class="api">OrganicLayout</span> by default supports node halos as soon as they are declared.\nIt considers any specified additional padding around nodes, however, due to the\nstraight-line routing of the edges, they can cross through these areas in the resulting\ndiagram.\nAlso, node halo overlaps may occur if:'},{tagname:"para",content:'<ul id="organic_layout-node_halos-234-itemizedlist-001"><li id="organic_layout-node_halos-234-listitem-001"><p id="organic_layout-node_halos-234-simpara-002">option "Node Overlaps Allowed" is enabled</p></li><li id="organic_layout-node_halos-234-listitem-002"><p id="organic_layout-node_halos-234-simpara-003">"Scope" is set to <api-link id="organic_layout-node_halos-234-api-link-001" data-member="SUBSET" data-text="SUBSET" data-type="yfiles.organic.Scope"></api-link> or <api-link id="organic_layout-node_halos-234-api-link-002" data-member="MAINLY_SUBSET" data-text="MAINLY_SUBSET" data-type="yfiles.organic.Scope"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"organic_layout-node_halos-234-simpara-004",content:'You can specify node halos by means of <a href="#/dguide/tab_organic_layout-data_node-halos">supplemental layout data</a>.'}]},{tagname:"section",id:"organic_layout-supplemental_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-supplemental_layout_data-235-simpara-001",content:'When using class <span class="api">OrganicLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="organic_layout-supplemental_layout_data-235-api-link-001" data-member="" data-text="OrganicLayoutData" data-type="yfiles.organic.OrganicLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_organic_layout-supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">OrganicLayoutData</span> and the corresponding look-up keys that\n<span class="api">OrganicLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"organic_layout-supplemental_layout_data-235-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_organic_layout-supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="organic_layout-supplemental_layout_data-235-thead-001"><tr id="organic_layout-supplemental_layout_data-235-row-001"><th id="organic_layout-supplemental_layout_data-235-entry-001" align="left" valign="top">\nOrganicLayoutData Property\n</th><th id="organic_layout-supplemental_layout_data-235-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="organic_layout-supplemental_layout_data-235-entry-003" align="left" valign="top">\nElement Type\n</th><th id="organic_layout-supplemental_layout_data-235-entry-004" align="left" valign="top">\nValue Type\n</th><th id="organic_layout-supplemental_layout_data-235-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="organic_layout-supplemental_layout_data-235-tbody-001"><tr id="organic_layout-supplemental_layout_data-235-row-002"><td id="organic_layout-supplemental_layout_data-235-entry-006" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-003"><anchor id="tab_organic_layout-data_group" xreflabel="[tab_organic_layout-data_group]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-007" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-004"><api-link id="organic_layout-supplemental_layout_data-235-api-link-002" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-008" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-005">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-009" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-006">boolean</para></td><td id="organic_layout-supplemental_layout_data-235-entry-010" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-007">For each node a boolean value indicating whether it is a group node or not.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-003"><td id="organic_layout-supplemental_layout_data-235-entry-011" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-008"><anchor id="tab_organic_layout-data_node-id" xreflabel="[tab_organic_layout-data_node-id]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-012" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-009"><api-link id="organic_layout-supplemental_layout_data-235-api-link-003" data-member="NODE_ID_DP_KEY" data-text="NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-013" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-010">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-014" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-011">Object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-015" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-012">For each node an Object that serves as a unique ID.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-004"><td id="organic_layout-supplemental_layout_data-235-entry-016" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-013"><anchor id="tab_organic_layout-data_parent-node-id" xreflabel="[tab_organic_layout-data_parent-node-id]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-017" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-014"><api-link id="organic_layout-supplemental_layout_data-235-api-link-004" data-member="PARENT_NODE_ID_DP_KEY" data-text="PARENT_NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-018" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-015">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-019" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-016">Object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-020" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-017">For each node an Object indicating the group node it belongs to.\n  The Object matches the unique ID of a group node that is in the same graph.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-005"><td id="organic_layout-supplemental_layout_data-235-entry-021" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-018"><anchor id="tab_organic_layout-data_group-node-modes" xreflabel="[tab_organic_layout-data_group-node-modes]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-005" data-member="groupNodeModes" data-text="groupNodeModes" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-022" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-019"><api-link id="organic_layout-supplemental_layout_data-235-api-link-006" data-member="GROUP_NODE_MODE_DP_KEY" data-text="GROUP_NODE_MODE_DP_KEY" data-type="yfiles.organic.OrganicLayout"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-023" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-020">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-024" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-021">Object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-025" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-022">For each group node an Object indicating how to proceed with it during the layout process.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-006"><td id="organic_layout-supplemental_layout_data-235-entry-026" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-023"><anchor id="tab_organic_layout-data_affected-nodes" xreflabel="[tab_organic_layout-data_affected-nodes]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-007" data-member="affectedNodes" data-text="affectedNodes" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-027" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-024"><api-link id="organic_layout-supplemental_layout_data-235-api-link-008" data-member="AFFECTED_NODES_DP_KEY" data-text="AFFECTED_NODES_DP_KEY" data-type="yfiles.organic.OrganicLayout"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-028" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-025">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-029" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-026">boolean</para></td><td id="organic_layout-supplemental_layout_data-235-entry-030" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-027">For each node a boolean value indicating whether it should be treated as selected or not.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-007"><td id="organic_layout-supplemental_layout_data-235-entry-031" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-028"><anchor id="tab_organic_layout-data_preferred-edge-lengths" xreflabel="[tab_organic_layout-data_preferred-edge-lengths]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-009" data-member="preferredEdgeLengths" data-text="preferredEdgeLengths" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-032" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-029"><api-link id="organic_layout-supplemental_layout_data-235-api-link-010" data-member="PREFERRED_EDGE_LENGTH_DP_KEY" data-text="PREFERRED_EDGE_LENGTH_DP_KEY" data-type="yfiles.organic.OrganicLayout"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-033" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-030">edge</para></td><td id="organic_layout-supplemental_layout_data-235-entry-034" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-031">int</para></td><td id="organic_layout-supplemental_layout_data-235-entry-035" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-032">For each edge an integral value that indicates its preferred length.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-008"><td id="organic_layout-supplemental_layout_data-235-entry-036" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-033"><anchor id="tab_organic_layout-data_minimum-node-size" xreflabel="[tab_organic_layout-data_minimum-node-size]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-037" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-034"><api-link id="organic_layout-supplemental_layout_data-235-api-link-011" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-038" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-035">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-039" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-036">YDimension</para></td><td id="organic_layout-supplemental_layout_data-235-entry-040" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-037">For each group node a <api-link id="organic_layout-supplemental_layout_data-235-api-link-012" data-member="" data-text="YDimension" data-type="yfiles.algorithms.YDimension"></api-link> object\n  that specifies the group node’s minimum size constraint.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-009"><td id="organic_layout-supplemental_layout_data-235-entry-041" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-038"><anchor id="tab_organic_layout-data_node-halos" xreflabel="[tab_organic_layout-data_node-halos]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-013" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-042" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-039"><api-link id="organic_layout-supplemental_layout_data-235-api-link-014" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-043" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-040">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-044" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-041">NodeHalo</para></td><td id="organic_layout-supplemental_layout_data-235-entry-045" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-042">A <api-link id="organic_layout-supplemental_layout_data-235-api-link-015" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-010"><td id="organic_layout-supplemental_layout_data-235-entry-046" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-043"><anchor id="tab_organic_layout-data_abort-handler" xreflabel="[tab_organic_layout-data_abort-handler]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-016" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-047" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-044"><api-link id="organic_layout-supplemental_layout_data-235-api-link-017" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-048" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-045">graph</para></td><td id="organic_layout-supplemental_layout_data-235-entry-049" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-046">AbortHandler</para></td><td id="organic_layout-supplemental_layout_data-235-entry-050" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-047">An <api-link id="organic_layout-supplemental_layout_data-235-api-link-018" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\n  by the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-011"><td id="organic_layout-supplemental_layout_data-235-entry-051" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-048"><anchor id="tab_organic_layout-data_edge-directedness" xreflabel="[tab_organic_layout-data_edge-directedness]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-019" data-member="edgeDirectedness" data-text="edgeDirectedness" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-052" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-049"><api-link id="organic_layout-supplemental_layout_data-235-api-link-020" data-member="EDGE_DIRECTEDNESS_DP_KEY" data-text="EDGE_DIRECTEDNESS_DP_KEY" data-type="yfiles.organic.OrganicLayout"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-053" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-050">edge</para></td><td id="organic_layout-supplemental_layout_data-235-entry-054" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-051">number</para></td><td id="organic_layout-supplemental_layout_data-235-entry-055" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-052">For each edge a floating point value that indicates the directedness of the edge.\n  Note that the directedness is only taken into account in conjunction with substructures.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-012"><td id="organic_layout-supplemental_layout_data-235-entry-056" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-053"><anchor id="tab_organic_layout-data_source-groupid" xreflabel="[tab_organic_layout-data_source-groupid]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-057" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-054"><api-link id="organic_layout-supplemental_layout_data-235-api-link-021" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-058" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-055">edge</para></td><td id="organic_layout-supplemental_layout_data-235-entry-059" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-056">object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-060" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-057">For each edge an arbitrary object indicating the group its source end is affiliated with.\n  Note that edge groups are only observed in conjunction with substructure layout.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-013"><td id="organic_layout-supplemental_layout_data-235-entry-061" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-058"><anchor id="tab_organic_layout-data_target-groupid" xreflabel="[tab_organic_layout-data_target-groupid]"></anchor> -</para></td><td id="organic_layout-supplemental_layout_data-235-entry-062" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-059"><api-link id="organic_layout-supplemental_layout_data-235-api-link-022" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-063" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-060">edge</para></td><td id="organic_layout-supplemental_layout_data-235-entry-064" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-061">object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-065" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-062">For each edge an arbitrary Object indicating the group its target end is affiliated with.\n  Note that edge groups are only observed in conjunction with substructure layout.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-014"><td id="organic_layout-supplemental_layout_data-235-entry-066" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-063"><anchor id="tab_organic_layout-data_minimum-node-distances" xreflabel="[tab_organic_layout-data_minimum-node-distances]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-023" data-member="minimumNodeDistances" data-text="minimumNodeDistances" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-067" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-064"><api-link id="organic_layout-supplemental_layout_data-235-api-link-024" data-member="MINIMUM_DISTANCE_DP_KEY" data-text="MINIMUM_DISTANCE_DP_KEY" data-type="yfiles.organic.ShuffleLayout"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-068" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-065">edge</para></td><td id="organic_layout-supplemental_layout_data-235-entry-069" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-066">object</para></td><td id="organic_layout-supplemental_layout_data-235-entry-070" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-067">For each edge an arbitrary Object indicating the group its target end is affiliated with.\n  Note that edge groups are only observed in conjunction with substructure layout.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-015"><td colspan="4" id="organic_layout-supplemental_layout_data-235-entry-071" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-068"><anchor id="tab_organic_layout-data_partitiongrid-data" xreflabel="[tab_organic_layout-data_partitiongrid-data]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-025" data-member="partitionGridData" data-text="partitionGridData" data-type="yfiles.organic.OrganicLayoutData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-072" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-069">Specifies a <api-link id="organic_layout-supplemental_layout_data-235-api-link-026" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> for the hierarchic layout.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-016"><td id="organic_layout-supplemental_layout_data-235-entry-073" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-070"><anchor id="tab_organic_layout-data_partitiongrid-grid" xreflabel="[tab_organic_layout-data_partitiongrid-grid]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-027" data-member="grid" data-text="PartitionGridData.grid" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-074" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-071"><api-link id="organic_layout-supplemental_layout_data-235-api-link-028" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-075" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-072">graph</para></td><td id="organic_layout-supplemental_layout_data-235-entry-076" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-073"><api-link id="organic_layout-supplemental_layout_data-235-api-link-029" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-077" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-074">Specifies the partition grid structure for the graph. Can also be defined using the <api-link id="organic_layout-supplemental_layout_data-235-api-link-030" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="organic_layout-supplemental_layout_data-235-api-link-031" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr><tr id="organic_layout-supplemental_layout_data-235-row-017"><td id="organic_layout-supplemental_layout_data-235-entry-078" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-075"><anchor id="tab_organic_layout-data_partitiongrid-cell_ids" xreflabel="[tab_organic_layout-data_partitiongrid-cell_ids]"></anchor><api-link id="organic_layout-supplemental_layout_data-235-api-link-032" data-member="cellIds" data-text="PartitionGridData.cellIds" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-079" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-076"><api-link id="organic_layout-supplemental_layout_data-235-api-link-033" data-member="PARTITION_CELL_ID_DP_KEY" data-text="PARTITION_CELL_ID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-080" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-077">node</para></td><td id="organic_layout-supplemental_layout_data-235-entry-081" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-078"><api-link id="organic_layout-supplemental_layout_data-235-api-link-034" data-member="" data-text="PartitionCellId" data-type="yfiles.layout.PartitionCellId"></api-link></para></td><td id="organic_layout-supplemental_layout_data-235-entry-082" align="left" valign="top"><para class="dguide-para" id="organic_layout-supplemental_layout_data-235-simpara-079">Specifies the partition cell id for a node. Alternatively, cell indices for a node can be specified using the <api-link id="organic_layout-supplemental_layout_data-235-api-link-035" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="organic_layout-supplemental_layout_data-235-api-link-036" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"organic_layout-supplemental_layout_data-235-simpara-080",content:'Setup of a grouped graph’s hierarchy of nodes (using GROUP_DPKEY, NODE_ID_DPKEY,\nand PARENT_NODE_ID_DPKEY) is done transparently by the IGraph-related adapter mechanisms.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.'}]},{tagname:"section",id:"organic_layout-related",title:"Related Layout Algorithms",children:[{tagname:"para","class":"dguide-para",id:"organic_layout-related-236-simpara-001",content:'The yFiles diagramming library includes an other layout algorithm that offers similar\nlayout results compared to OL, class <api-link id="organic_layout-related-236-api-link-001" data-member="" data-text="ClassicOrganicLayout" data-type="yfiles.organic.ClassicOrganicLayout"></api-link>\n(COL).\nOL supersedes this class and adds features to prevent node (label) overlaps and\nto keep minimum distances between the nodes.'}]},{tagname:"section",id:"interactive_organic_layout",title:"Interactive Organic Layout",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-237-simpara-001",content:'Class <api-link id="interactive_organic_layout-237-api-link-001" data-member="" data-text="InteractiveOrganicLayout" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link>\nprovides <a href="#/dguide/organic_layout">organic layout</a> for use in\ninteractive environments.\nIts strength is its capability to generate continuous updates to the layout of a graph during calculation.\nFurthermore, it also allows a user to seemingly simultaneously perform\narbitrary modifications to a graph, which are subsequently accounted for in the layout calculation.'},{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-237-simpara-002",content:'In contrast to the majority of yFiles for HTML layout algorithms, class\n<span class="api">InteractiveOrganicLayout</span> does not inherit from\n<span class="api">MultiStageLayout</span>, but is instead provided as an implementation of the\n<api-link id="interactive_organic_layout-237-api-link-002" data-member="" data-text="ILayoutAlgorithm" data-type="yfiles.layout.ILayoutAlgorithm"></api-link> interface.'},{tagname:"para","class":"dguide-para important",id:"interactive_organic_layout-237-important-001",content:'<p id="interactive_organic_layout-237-simpara-003">Due to the interactive nature of this layout algorithm, the <span class="api">IGraph</span>-related adapter\nmechanisms to run a layout algorithm are not applicable.</p>'},{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-237-simpara-004",content:"Among other things, this means that there is no special support for routing of\neither self-loops or parallel edges, for example.\nIn particular, when a graph contains parallel edges, they will be routed using overlapping edge paths."},{tagname:"section",id:"interactive_organic-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-options-238-simpara-001",content:'Interactive organic layout provides a set of options that affect its behavior.\nThese options can be set using the properties of class <span class="api">InteractiveOrganicLayout</span>.'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="interactive_organic_maximum_runtime_api">\n<dt id="interactive_organic-options-238-term-001"><api-link id="interactive_organic-options-238-api-link-001" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-options-238-listitem-001">\n<p id="interactive_organic-options-238-simpara-002">Sets the maximal duration of the layout process in milliseconds. If this upper bound is hit during the layout process,\nthe quality of the layout may not be optimal. Increasing the value increases the likeliness of an optimal layout.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-options-238-simpara-003",content:'After the layout process has finished or the time specified using <api-link id="interactive_organic-options-238-api-link-002" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link>\nis spent, <span class="api">InteractiveOrganicLayout</span> will sleep, i.e., it has to be awakened before\nanother layout process can be invoked (see also the description of\n<a href="#/dguide/interactive_organic-state">running/sleeping state of  InteractiveOrganicLayout</a>).'},{tagname:"para",content:'<dl id="interactive_organic-options-238-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-options-238-term-002"><api-link id="interactive_organic-options-238-api-link-003" data-member="preferredNodeDistance" data-text="preferredNodeDistance" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-options-238-listitem-002">\n<p id="interactive_organic-options-238-simpara-004">The preferred node distance which will be used to calculate the layout.\nThe layout algorithm tries to arrange the nodes in such a way that the desired distance is complied with.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-options-238-simpara-005",content:"The following methods allow to specify both the general preferred length for all\nedges as well as individual preferred edge lengths.\nThe layout algorithm tries to arrange the nodes in such a way that the edges have\nthe desired edge length.\nNote that the edge length is measured from node border to node border."},{tagname:"para",content:'<dl id="interactive_organic-options-238-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-options-238-term-003"><api-link id="interactive_organic-options-238-api-link-004" data-member="preferredEdgeLength" data-text="preferredEdgeLength:&#xA0;number" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-options-238-term-004"><api-link id="interactive_organic-options-238-api-link-005" data-member="setPreferredEdgeLength(yfiles.algorithms.Edge,number)" data-text="setPreferredEdgeLength(edge:&#xA0;Edge, newEdgeLength:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-options-238-listitem-003">\n<p id="interactive_organic-options-238-simpara-006">Property and setter method for both general preferred edge lengths as well as individual preferred edge lengths.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-options-238-simpara-007",content:'Alternatively, to specify the preferred edge length for each edge individually,\na data provider holding such supplemental layout data can be bound to the graph.\nThe data provider is expected to be registered with the graph using key\n<api-link id="interactive_organic-options-238-api-link-006" data-member="PREFERRED_EDGE_LENGTH_DP_KEY" data-text="PREFERRED_EDGE_LENGTH_DP_KEY" data-type="yfiles.organic.ClassicOrganicLayout"></api-link>.\nNote that in the absence of an individual preferred edge length the general preferred edge length will be used.'},{tagname:"para","class":"dguide-para important",id:"interactive_organic-options-238-important-001",content:'<p id="interactive_organic-options-238-simpara-008">Although the data provider look-up key defined in class <span class="api">ClassicOrganicLayout</span> is\nused to specify individual preferred edge lengths, the actual type of data provided are double values.</p>'},{tagname:"para",content:'<dl id="interactive_organic-options-238-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-options-238-term-005"><api-link id="interactive_organic-options-238-api-link-007" data-member="qualityTimeRatio" data-text="qualityTimeRatio" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-options-238-listitem-004">\n<p id="interactive_organic-options-238-simpara-009">This setting can be used to adjust the quality of the layout calculated by the layout algorithm.\nSmall values lead to short running times, while greater values result in better quality.\nFor large graph structures (hundreds and thousands of nodes) it is advisable to\nbegin with smaller values and to gradually increase them.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-options-238-simpara-010",content:'Class <span class="api">InteractiveOrganicLayout</span> allows to impose so-called\n"output restrictions" on the result of the layout calculcation.\nMore precisely, the layout result can be determined to fit into a specified\nregion, e.g., a rectangle or a circle.\nAlso, the layout result can be restricted to a specified aspect ratio, too.'},{tagname:"para",content:'<dl id="interactive_organic-options-238-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-options-238-term-006"><api-link id="interactive_organic-options-238-api-link-008" data-member="outputRestriction" data-text="outputRestriction" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-options-238-listitem-005">\n<p id="interactive_organic-options-238-simpara-011">Class <api-link id="interactive_organic-options-238-api-link-009" data-member="" data-text="OutputRestriction" data-type="yfiles.organic.OutputRestriction"></api-link> serves as\na factory to create predefined output restrictions that can be used in conjunction with this property.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_general_usage",title:"General Usage",children:[{tagname:"para","class":"dguide-para",id:"_general_usage-239-simpara-001",content:'In the single-threaded JavaScript execution environment, <span class="api">InteractiveOrganicLayout</span>\nis designed to be used in a cooperative setup where the layout algorithm does its calculations\nin defined time slices after which it yields back control to the application.\nThis enables an application that presents a graphical user interface (GUI) to the user to remain\nnearly fully interactive while the layout algorithm, at least perceived simultaneously, performs its calculations.\nThis setup also enables modifications to the graph seemingly simultaneous to the layout calculation.'}]},{tagname:"section",id:"interactive_organic_layout-setup",title:"Setup",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-setup-240-simpara-001",content:'First and foremost, the setup for using interactive organic layout in a single-threaded execution environment\nneeds an implementation of interface\n<api-link id="interactive_organic_layout-setup-240-api-link-001" data-member="" data-text="InteractiveOrganicLayoutExecutionContext" data-type="yfiles.organic.InteractiveOrganicLayoutExecutionContext"></api-link>.\nThis so-called context object is used to control the layout calculation.\nWhen starting the algorithm, class <span class="api">InteractiveOrganicLayout</span>\nreturns an appropriate implementation:'},{tagname:"para",content:'<dl id="interactive_organic_layout-setup-240-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic_layout-setup-240-term-001"><api-link id="interactive_organic_layout-setup-240-api-link-002" data-member="startLayout(yfiles.layout.LayoutGraph)" data-text="startLayout(graph:&#xA0;LayoutGraph):&#xA0;InteractiveOrganicLayoutExecutionContext" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic_layout-setup-240-listitem-001">\n<p id="interactive_organic_layout-setup-240-simpara-002">Starts the layout algorithm and creates the context object to control layout calculation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-setup-240-simpara-003",content:'<span class="api">InteractiveOrganicLayoutExecutionContext</span>\nin particular defines the following method that can be used\nin an application to yield time to the layout algorithm:'},{tagname:"para",content:'<dl id="interactive_organic_layout-setup-240-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic_layout-setup-240-term-002"><api-link id="interactive_organic_layout-setup-240-api-link-003" data-member="continueLayout(number)" data-text="continueLayout(duration:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayoutExecutionContext"></api-link></dt><dd id="interactive_organic_layout-setup-240-listitem-002">\n<p id="interactive_organic_layout-setup-240-simpara-004">Triggers layout calculation lasting the specified amount of time.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-setup-240-simpara-005",content:'If the graph that is to be processed by <span class="api">InteractiveOrganicLayout</span> is intended\nto allow structural modifications by a user, then it is strongly recommended to\nuse an instance of <api-link id="interactive_organic_layout-setup-240-api-link-004" data-member="" data-text="CopiedLayoutGraph" data-type="yfiles.layout.CopiedLayoutGraph"></api-link> instead of a simple LayoutGraph.\nDoing so helps avoiding race conditions and synchronization problems that occur\nwhen nodes and/or edges can be added to or removed from the graph while the\nlayout algorithm performs its calculations.'},{tagname:"para","class":"dguide-para",id:"interactive_organic_layout-setup-240-simpara-006",content:'Creation of the layout thread using a copy of the original graph is shown in <a href="#/dguide/ex_interactive_organic_layout-thread">Creating the layout thread</a>.'},{tagname:"example",id:"ex_interactive_organic_layout-thread",title:"Creating the layout thread",content:'<pre class="programlisting javascript" id="interactive_organic_layout-setup-240-programlisting-001" language="javascript" format="linespecific"><code>// Create a copy of the given graph. Using an instance of CopiedLayoutGraph\r\n// helps avoiding race conditions with graph *structure* modifications from a\r\n// user.\r\n// graph is of type yfiles.graph.IGraph\r\nconst adapter = new yfiles.layout.LayoutGraphAdapter(graph, null)\r\nconst layoutGraph = adapter.createCopiedLayoutGraph()\r\nconst organicLayout = new yfiles.organic.InteractiveOrganicLayout()\r\nconst layoutContext = organicLayout.startLayout(layoutGraph)\n</code></pre>'}]},{tagname:"section",id:"interactive_organic-state",title:"Life Cycle",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-state-241-simpara-001",content:'Interactive organic layout algorithm can be in either of three states: running, sleeping, or stopped.\nWhen running, the algorithm lives on the allowed maximal runtime and\ncontinuously calculates "intermediate" layouts for the given graph.\nWhen sleeping, the algorithm does nothing, but is still "alive."\nIn contrast, when stopped, the algorithm is terminated.\n<a href="#/dguide/fig_interactive_organic-state">State diagram for InteractiveOrganicLayout</a> depicts the states and the possible state\ntransitions of <span class="api">InteractiveOrganicLayout</span>.'},{tagname:"figure","class":"image",title:"State diagram for InteractiveOrganicLayout",id:"fig_interactive_organic-state","float":0,children:[{tagname:"img",src:"assets/organic_interactive_states.fe11c8fd.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"interactive_organic-state-241-simpara-002",content:'The following properties can be used to query the current state of an <span class="api">InteractiveOrganicLayout</span>\ninstance, change its state, and set the maximal runtime.\nNote that when an instance is changed from "sleeping" to "running" state, the maximal runtime is again fully available.'},{tagname:"para",content:'<dl id="interactive_organic-state-241-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-state-241-term-001"><api-link id="interactive_organic-state-241-api-link-001" data-member="running" data-text="running" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-state-241-term-002"><api-link id="interactive_organic-state-241-api-link-002" data-member="sleeping" data-text="sleeping" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-state-241-term-003"><api-link id="interactive_organic-state-241-api-link-003" data-member="stopped" data-text="stopped" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-state-241-listitem-001">\n<p id="interactive_organic-state-241-simpara-003">Properties to query the algorithm’s current state.</p>\n</dd>\n<dt id="interactive_organic-state-241-term-004"><api-link id="interactive_organic-state-241-api-link-004" data-member="wakeUp()" data-text="wakeUp():&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-state-241-term-005"><api-link id="interactive_organic-state-241-api-link-005" data-member="stop()" data-text="stop():&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-state-241-term-006"><api-link id="interactive_organic-state-241-api-link-006" data-member="stopAndWait()" data-text="stopAndWait():&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-state-241-listitem-002">\n<p id="interactive_organic-state-241-simpara-004">Methods to change the current state.</p>\n</dd>\n<dt id="interactive_organic-state-241-term-007"><api-link id="interactive_organic-state-241-api-link-007" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-state-241-listitem-003">\n<p id="interactive_organic-state-241-simpara-005">Determines the maximal runtime when in "running" state.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"interactive_organic-polling_for_results",title:"Polling for Results",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-polling_for_results-242-simpara-001",content:'The concurrent setup as used with <span class="api">InteractiveOrganicLayout</span> means that the\nlayout process does not return a single result by itself, but instead\ncontinuously generates "intermediate" results as long as it is in "running" state.\nThese results are in the layout algorithm’s data structures only, but can be\npolled by a user at any time and be used as continuous updates to the layout of a graph.'},{tagname:"para","class":"dguide-para",id:"interactive_organic-polling_for_results-242-simpara-002",content:"The following methods allow to easily poll either the current coordinates of single\nnodes or commit all current positions of nodes to the original graph at once:"},{tagname:"para",content:'<dl id="interactive_organic-polling_for_results-242-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-polling_for_results-242-term-001"><api-link id="interactive_organic-polling_for_results-242-api-link-001" data-member="getCenterX(yfiles.algorithms.Node)" data-text="getCenterX(node:&#xA0;Node):&#xA0;number" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-polling_for_results-242-term-002"><api-link id="interactive_organic-polling_for_results-242-api-link-002" data-member="getCenterY(yfiles.algorithms.Node)" data-text="getCenterY(node:&#xA0;Node):&#xA0;number" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-polling_for_results-242-term-003"><api-link id="interactive_organic-polling_for_results-242-api-link-003" data-member="getCenter(yfiles.algorithms.Node)" data-text="getCenter(node:&#xA0;Node):&#xA0;YPoint" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-polling_for_results-242-listitem-001">\n<p id="interactive_organic-polling_for_results-242-simpara-003">Retrieve the current center coordinate(s) of a single node from <span class="api">InteractiveOrganicLayout</span>’s\ndata structures.</p>\n</dd>\n<dt id="interactive_organic-polling_for_results-242-term-004"><api-link id="interactive_organic-polling_for_results-242-api-link-004" data-member="commitPositions()" data-text="commitPositions():&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-polling_for_results-242-term-005"><api-link id="interactive_organic-polling_for_results-242-api-link-005" data-member="commitPositionsSmoothly(number,number)" data-text="commitPositionsSmoothly(maxMovement:&#xA0;number, factor:&#xA0;number):&#xA0;number" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-polling_for_results-242-listitem-002">\n<p id="interactive_organic-polling_for_results-242-simpara-004">Updates all node locations with the coordinates from <span class="api">InteractiveOrganicLayout</span>’s\ndata structures.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-polling_for_results-242-simpara-005",content:'Typically, to assign the "intermediate" results in a continuous fashion to the\noriginal graph, a technique similar to that outlined in\n<a href="#/dguide/ex_interactive_organic-polling_for_results">Callback setup to repeatedly calculate and assign node positions</a> can be used.\nThe current positions of all nodes are repeatedly polled by means of a\n<api-link id="interactive_organic-polling_for_results-242-api-link-006" data-member="" data-text="Animator" data-type="yfiles.view.Animator"></api-link>.'},{tagname:"para","class":"dguide-para",id:"interactive_organic-polling_for_results-242-simpara-006",content:'In tutorial demo application <a href="..\\..\\demos\\layout\\interactiveorganic\\index.html" target="blank" class="demo-link" title="Shows the &apos;interactive organic&apos; layout algorithm.">Interactive Organic Layout</a>\nthe "intermediate" results are repeatedly calculated and assigned to the original\ngraph in a continuous fashion by means of a callback function in an animation:'},{tagname:"example",id:"ex_interactive_organic-polling_for_results",title:"Callback setup to repeatedly calculate and assign node positions",content:'<pre class="programlisting javascript" id="interactive_organic-polling_for_results-242-programlisting-001" language="javascript" format="linespecific"><code>// Create and start an infinite animation. Each animation step will\r\n// continue the layout calculation and poll the given organic layout\r\n// to update the node positions in the original graph.\r\nconst animator = new yfiles.view.Animator(graphComponent)\r\nanimator.autoInvalidation = false\r\nanimator.allowUserInteraction = true\r\n\r\nanimator.animate(() => {\r\n  layoutContext.continueLayout(100)\r\n  if (organicLayout.commitPositionsSmoothly(50, 0.05) > 0) {\r\n    graphComponent.updateVisual()\r\n  }\r\n}, yfiles.lang.TimeSpan.fromSeconds(Number.POSITIVE_INFINITY))\n</code></pre>'}]},{tagname:"section",id:"interactive_organic-interaction",title:"Interaction",
children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-interaction-243-simpara-001",content:'The interactive organic layout algorithm allows a user to seemingly\nsimultaneously modify node positions and also node-related parameters while layout calculation takes place.\nThe following methods can be used to update <span class="api">InteractiveOrganicLayout</span>’s data structures\nwith new node positions, and also to specify further node-related parameters that\ndetermine, e.g., the size of a node or its inertia:'},{tagname:"para",content:'<dl id="interactive_organic-interaction-243-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="interactive_organic-interaction-243-term-001"><api-link id="interactive_organic-interaction-243-api-link-001" data-member="setCenterX(yfiles.algorithms.Node,number)" data-text="setCenterX(node:&#xA0;Node, x:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-interaction-243-term-002"><api-link id="interactive_organic-interaction-243-api-link-002" data-member="setCenterY(yfiles.algorithms.Node,number)" data-text="setCenterY(node:&#xA0;Node, y:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-interaction-243-term-003"><api-link id="interactive_organic-interaction-243-api-link-003" data-member="setCenter(yfiles.algorithms.Node,number,number)" data-text="setCenter(node:&#xA0;Node, x:&#xA0;number, y:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-interaction-243-listitem-001">\n<p id="interactive_organic-interaction-243-simpara-002">Set the current center coordinate(s) of a single node in <span class="api">InteractiveOrganicLayout</span>’s\ndata structures.</p>\n</dd>\n<dt id="interactive_organic-interaction-243-term-004"><api-link id="interactive_organic-interaction-243-api-link-004" data-member="setInertia(yfiles.algorithms.Node,number)" data-text="setInertia(node:&#xA0;Node, inertia:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dt id="interactive_organic-interaction-243-term-005"><api-link id="interactive_organic-interaction-243-api-link-005" data-member="setRadius(yfiles.algorithms.Node,number)" data-text="setRadius(node:&#xA0;Node, radius:&#xA0;number):&#xA0;void" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link></dt><dd id="interactive_organic-interaction-243-listitem-002">\n<p id="interactive_organic-interaction-243-simpara-003">Further node-related parameters used by <span class="api">InteractiveOrganicLayout</span>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-interaction-243-simpara-004",content:'In addition, <span class="api">InteractiveOrganicLayout</span> optionally also supports modifications\nto the original graph’s structure, i.e., nodes and/or edges can be added to or\nremoved from the graph and the layout calculation subsequently properly accounts for these changes.'},{tagname:"para","class":"dguide-para important",id:"interactive_organic-interaction-243-important-001",content:'<p id="interactive_organic-interaction-243-simpara-005">To avoid race conditions and synchronization problems when structural changes\nto the graph are allowed, it is strongly recommended to provide\n<span class="api">InteractiveOrganicLayout</span> a copy of the original graph using an instance of\n<span class="api">CopiedLayoutGraph</span>.\nSee also <a href="#/dguide/interactive_organic_layout-setup">Setup</a>.</p>'},{tagname:"para","class":"dguide-para",id:"interactive_organic-interaction-243-simpara-006",content:'To properly support arbitrary structural modifications to the original graph,\ninteractive organic layout relies on proper notification of structural changes to the graph.\nTo this end, the structure of the\noriginal graph can be synchronized using code similar to that\nshown in <a href="#/dguide/ex_interactive_organic-structure_updates">Performing explicit structure updates</a>.'},{tagname:"example",id:"ex_interactive_organic-structure_updates",title:"Performing explicit structure updates",content:'<pre class="programlisting javascript" id="interactive_organic-interaction-243-programlisting-001" language="javascript" format="linespecific"><code>const organicLayout = this.getMyInteractiveOrganicLayout()\r\n\r\n// Here: perform the actual graph structure modifications on the original graph.\r\n// For example, remove some nodes and edges...\r\nthis.$modifyOriginalGraphStructureHere()\r\n\r\n// After the changes have been done:\r\n// synchronize the structure of the original graph with that of the copy given\r\n// to InteractiveOrganicLayout.\r\norganicLayout.syncStructure()\n</code></pre>'}]},{tagname:"section",id:"interactive_organic-supplemental_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-supplemental_data-244-simpara-001",content:'Class <span class="api">InteractiveOrganicLayout</span> retrieves\nsupplemental layout data for the preferred length of edges.\nThe data is bound to the graph by means of a data provider, which is registered using a given look-up key.'},{tagname:"para","class":"dguide-para",id:"interactive_organic-supplemental_data-244-simpara-002",content:'Binding supplemental layout data to a graph is described in\n<a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_interactive_organic-supplemental_data",rowsep:1,content:'<caption>Data provider look-up keys</caption><colgroup><col style="width:25%;"><col style="width:10%;"><col style="width:10%;"><col style="width:55%;"></colgroup><tbody id="interactive_organic-supplemental_data-244-tbody-001"><tr id="interactive_organic-supplemental_data-244-row-001"><td id="interactive_organic-supplemental_data-244-entry-001" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-003">Data Provider Key</para></td><td id="interactive_organic-supplemental_data-244-entry-002" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-004">Element Type</para></td><td id="interactive_organic-supplemental_data-244-entry-003" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-005">Value Type</para></td><td id="interactive_organic-supplemental_data-244-entry-004" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-006">Description</para></td></tr><tr id="interactive_organic-supplemental_data-244-row-002"><td id="interactive_organic-supplemental_data-244-entry-005" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-007"><api-link id="interactive_organic-supplemental_data-244-api-link-001" data-member="PREFERRED_EDGE_LENGTH_DP_KEY" data-text="PREFERRED_EDGE_LENGTH_DP_KEY" data-type="yfiles.organic.ClassicOrganicLayout"></api-link></para></td><td id="interactive_organic-supplemental_data-244-entry-006" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-008">Edge</para></td><td id="interactive_organic-supplemental_data-244-entry-007" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-009">double</para></td><td id="interactive_organic-supplemental_data-244-entry-008" align="left" valign="top"><para class="dguide-para" id="interactive_organic-supplemental_data-244-simpara-010">For each edge a double value that indicates its preferred length.</para></td></tr></tbody>'}]},{tagname:"section",id:"interactive_organic-tutorial",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"interactive_organic-tutorial-245-simpara-001",content:'Tutorial demo application <a href="..\\..\\demos\\layout\\interactiveorganic\\index.html" target="blank" class="demo-link" title="Shows the &apos;interactive organic&apos; layout algorithm.">Interactive Organic Layout</a>\nshows how to use the layout functionality of class <api-link id="interactive_organic-tutorial-245-api-link-001" data-member="" data-text="InteractiveOrganicLayout" data-type="yfiles.organic.InteractiveOrganicLayout"></api-link>\nin an interactive environment where the user can "live"-drag nodes and freely modify the graph structure.'}]}]}]},{tagname:"section",id:"tree_layouts",title:"Tree Layouts",children:[{tagname:"para","class":"dguide-para",id:"tree_layouts-246-simpara-001",content:"The yFiles tree layout algorithm family specializes in the layout of tree-structured\ngraphs.\nThe need to visualize directed or undirected trees arises in many application\nareas, e.g.,"},{tagname:"para",content:'<ul id="tree_layouts-246-itemizedlist-001"><li id="tree_layouts-246-listitem-001"><p id="tree_layouts-246-simpara-002">Dataflow analysis</p></li><li id="tree_layouts-246-listitem-002"><p id="tree_layouts-246-simpara-003">Software engineering</p></li><li id="tree_layouts-246-listitem-003"><p id="tree_layouts-246-simpara-004">Network management</p></li><li id="tree_layouts-246-listitem-004"><p id="tree_layouts-246-simpara-005">Bioinformatics</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tree_layouts-246-simpara-006",content:"The tree layouts are provided in a number of different styles:"},{tagname:"para",content:'<ul id="tree_layouts-246-itemizedlist-002"><li id="tree_layouts-246-listitem-005"><p id="tree_layouts-246-simpara-007"><a href="#/dguide/classic_tree_layout">Classic Tree Layout</a></p></li><li id="tree_layouts-246-listitem-006"><p id="tree_layouts-246-simpara-008"><a href="#/dguide/tree_layout">Tree Layout</a></p></li><li id="tree_layouts-246-listitem-007"><p id="tree_layouts-246-simpara-009"><a href="#/dguide/balloon_layout">Balloon Tree Layout</a></p></li><li id="tree_layouts-246-listitem-008"><p id="tree_layouts-246-simpara-010"><a href="#/dguide/ar_tree_layout">Aspect Ratio Tree Layout</a></p></li></ul>'},{tagname:"figure","class":"image",title:"Sample layouts produced with the tree layouters from namespace ",id:"tree_layouts-246-figure-001","float":0,children:[{tagname:"img",src:"assets/tree-layout-1d-thumb.2f4bf6de.gif",alt:"",title:'<para class="dguide-para">Using <api-link id="tree_layouts-246-api-link-002" data-member="" data-text="TreeLayout" data-type="yfiles.tree.TreeLayout"></api-link>.</para>'},{tagname:"img",src:"assets/classic_tree_layout_1b_thumb.f6e65709.gif",alt:"",title:'<para class="dguide-para">Using <api-link id="tree_layouts-246-api-link-003" data-member="" data-text="ClassicTreeLayout" data-type="yfiles.tree.ClassicTreeLayout"></api-link>.</para>'},{tagname:"img",src:"assets/classic_tree_layout_1c_thumb.f699839a.gif",alt:"",title:'<para class="dguide-para">Using <api-link id="tree_layouts-246-api-link-004" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link>.</para>'}]},{tagname:"section",id:"tree_layouts_usage",title:"General",children:[{tagname:"section",id:"tree_layouts_sorting",title:"Sorting Child Nodes",children:[{tagname:"para","class":"dguide-para",id:"tree_layouts_sorting-248-simpara-001",content:'The tree layout algorithms support sorting the child nodes in a subtree using\na <api-link id="tree_layouts_sorting-248-api-link-001" data-member="" data-text="NodeOrderComparer" data-type="yfiles.tree.NodeOrderComparer"></api-link> in\nconjunction with a data provider that is registered with the graph using the\nlook-up key\n<api-link id="tree_layouts_sorting-248-api-link-002" data-member="NODE_ORDER_COMPARABLE_DP_KEY" data-text="NODE_ORDER_COMPARABLE_DP_KEY" data-type="yfiles.tree.NodeOrderComparer"></api-link>.\nThe following property registers custom Comparer implementations with a tree\nlayout algorithm.\nExcept <span class="api">TreeLayout</span>, this property is available in all tree layout algorithms.'},{tagname:"para",content:'<dl id="tree_layouts_sorting-248-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tree_layouts_sorting-248-term-001"><api-link id="tree_layouts_sorting-248-api-link-003" data-member="comparer" data-text="comparer" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="tree_layouts_sorting-248-listitem-001">\n<p id="tree_layouts_sorting-248-simpara-002">Comparer registration.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layouts_sorting-248-simpara-003",content:'Class <span class="api">NodeOrderComparer</span>, when given the outgoing edges of a (sub)tree’s root\nnode, uses the target nodes of the edges for querying the data provider.\nThe <api-link id="tree_layouts_sorting-248-api-link-004" data-member="" data-text="IComparable" data-type="yfiles.lang.IComparable"></api-link> objects, which the comparer\nexpects in return, are then used to determine the order of the child nodes.'}]},{tagname:"section",id:"tree_layouts_stages",title:"Enhancing the Layout Process of a Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"tree_layouts_stages-249-simpara-001",content:'<a href="#/dguide/tab_tree_layouts_stages">Layout Stages</a> lists the layout stages that can be\nused with all tree layout algorithms to enhance the layout process.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tree_layouts_stages",rowsep:1,content:'<caption>Layout Stages</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="tree_layouts_stages-249-thead-001"><tr id="tree_layouts_stages-249-row-001"><th id="tree_layouts_stages-249-entry-001" align="left" valign="top">\nClass Name\n</th><th id="tree_layouts_stages-249-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tree_layouts_stages-249-tbody-001"><tr id="tree_layouts_stages-249-row-002"><td id="tree_layouts_stages-249-entry-003" align="left" valign="top"><para class="dguide-para" id="tree_layouts_stages-249-simpara-002"><api-link id="tree_layouts_stages-249-api-link-001" data-member="" data-text="TreeReductionStage" data-type="yfiles.tree.TreeReductionStage"></api-link></para></td><td id="tree_layouts_stages-249-entry-004" align="left" valign="top"><para class="dguide-para" id="tree_layouts_stages-249-simpara-003">Adds support for tree-like graphs.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tree_layouts_stages-249-simpara-004",content:"Class TreeReductionStage is a layout stage that transforms graphs into proper\ntrees.\nIt automatically removes all non-tree edges prior to an algorithm’s run and\nre-inserts them thereafter.\nWhen the edges are re-inserted, different routing styles can be applied."}]},{tagname:"section",id:"treereduction_edge_bundling",title:"Edge Bundling",children:[{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-001",content:'One of the routing styles that is supported by <span class="api">TreeReductionStage</span>\nis edge bundling.\nWith this routing style, the paths of the non-tree edges in a diagram are bundled\nso that they follow similar routes.'},{tagname:"figure","class":"image",title:"Tree layout with edge bundling of non-tree edges",id:"fig_treereduction_edge_bundling","float":0,children:[{tagname:"img",src:"assets/tree-edgebundling.732ba513.png",alt:"",title:'<para class="dguide-para">Edge bundling of non-tree edges in a directed tree layout…​</para>'},{tagname:"img",src:"assets/balloon-edgebundling.9b69ea11.png",alt:"",title:'<para class="dguide-para">... and in a balloon tree layout.</para>'}]},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-002",content:"Using edge bundling significantly reduces the visual clutter in drawings of large\ngraphs with many edges.\nIn addition, high-level patterns of edge routes and relations between different\ngroups of nodes can be highlighted and easily recognized.\nEdge bundling is commonly used in bio-informatics, social network analysis, telecommunications,\nand in fraud detection."},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-003",content:'Edge bundling in <span class="api">TreeReductionStage</span> is supported\nfor the non-tree edges of a diagram.'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-004",content:'The actual setup and edge bundling configuration is the responsibility of the <api-link id="treereduction_edge_bundling-250-api-link-001" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nclass.\n<span class="api">TreeReductionStage</span> provides the following property\nto access the instance it holds of this class:'},{tagname:"para",content:'<dl id="treereduction_edge_bundling-250-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="treereduction_edge_bundling-250-term-001"><api-link id="treereduction_edge_bundling-250-api-link-002" data-member="edgeBundling" data-text="edgeBundling:&#xA0;EdgeBundling" data-type="yfiles.tree.TreeReductionStage"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-001">\n<p id="treereduction_edge_bundling-250-simpara-005">Property to access the <span class="api">EdgeBundling</span> instance to\nconfigure edge bundling-related drawing options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-006",content:'This <span class="api">EdgeBundling</span> instance holds an instance of class\n<api-link id="treereduction_edge_bundling-250-api-link-003" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> to store and retrieve\ndefault edge bundling values for non-tree edges.\nThe following property can be used to retrieve this default <span class="api">EdgeBundleDescriptor</span>\ninstance:'},{tagname:"para",content:'<dl id="treereduction_edge_bundling-250-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="treereduction_edge_bundling-250-term-002"><api-link id="treereduction_edge_bundling-250-api-link-004" data-member="defaultBundleDescriptor" data-text="defaultBundleDescriptor:&#xA0;EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-002">\n<p id="treereduction_edge_bundling-250-simpara-007">Property to access the default edge bundling descriptor held by <span class="api">EdgeBundling</span>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-008",content:'In addition to the instance held by <span class="api">EdgeBundling</span>,\nedge bundling descriptors can also be associated with single non-tree edges in order\nto specify individual settings for them.\nSetting individual descriptors for non-tree edges is done through a data provider\nthat is bound to the graph.'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-009",content:'Classes <api-link id="treereduction_edge_bundling-250-api-link-005" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link> and <api-link id="treereduction_edge_bundling-250-api-link-006" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>\nprovide the means to configure drawing options related to the edge bundling support\nin <span class="api">TreeReductionStage</span>.\nClass <span class="api">EdgeBundling</span> defines global settings regarding\nthe edge bundling, for example, the strength and the quality of the bundling.\nIt also holds a default <span class="api">EdgeBundleDescriptor</span> instance\nwith fallback settings for the edges of a graph.\nClass <span class="api">EdgeBundleDescriptor</span> can be used to configure\nthe bundling settings of an individual edge.\nIt can be specified whether or not:'},{tagname:"para",content:'<ul id="treereduction_edge_bundling-250-itemizedlist-001"><li id="treereduction_edge_bundling-250-listitem-003"><p id="treereduction_edge_bundling-250-simpara-010">an edge shall be bundled</p></li><li id="treereduction_edge_bundling-250-listitem-004"><p id="treereduction_edge_bundling-250-simpara-011">the direction of an edge should be taken into consideration</p></li><li id="treereduction_edge_bundling-250-listitem-005"><p id="treereduction_edge_bundling-250-simpara-012">an edge should be approximated by a cubic Bezier curve</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-013",content:'To configure the global edge bundling settings class <api-link id="treereduction_edge_bundling-250-api-link-007" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nprovides the following properties:'},{tagname:"para",content:'<dl id="treereduction_edge_bundling-250-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="treereduction_edge_bundling-250-term-003" class="title" role="title">Bundling Strength</dt><dt id="treereduction_edge_bundling-250-term-004"><api-link id="treereduction_edge_bundling-250-api-link-008" data-member="bundlingStrength" data-text="bundlingStrength:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-006">\n<p id="treereduction_edge_bundling-250-simpara-014">Determines the tightness of the edge bundles.\nIt takes values from interval [0.0, 1.0] where 0.0 corresponds\nto straight-line, non-bundled edges and 1.0 to strongly bundled edges.\nFor good readability featuring clearly visible bundles, a bundling strength greater\nthan 0.8 is recommended.</p>\n</dd>\n<dt id="treereduction_edge_bundling-250-term-005" class="title" role="title">Bundling Quality</dt><dt id="treereduction_edge_bundling-250-term-006"><api-link id="treereduction_edge_bundling-250-api-link-009" data-member="bundlingQuality" data-text="bundlingQuality:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-007">\n<p id="treereduction_edge_bundling-250-simpara-015">Determines the quality of the edge bundling.\nHigher values require more sophisticated methods to calculate the bundles and, thus,\nthe running time can significantly increase.\nThe setting can take values from interval [0.0, 1.0].\nFor large graphs, values smaller than 0.2 are recommended.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-016",content:'The per-edge settings can be configured via the following properties in class <api-link id="treereduction_edge_bundling-250-api-link-010" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>:'},{tagname:"para",content:'<dl id="treereduction_edge_bundling-250-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="treereduction_edge_bundling-250-term-007" class="title" role="title">Bundle Edge</dt><dt id="treereduction_edge_bundling-250-term-008"><api-link id="treereduction_edge_bundling-250-api-link-011" data-member="bundled" data-text="bundled:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-008">\n<p id="treereduction_edge_bundling-250-simpara-017">Determines whether or not an edge shall be bundled.</p>\n</dd>\n<dt id="treereduction_edge_bundling-250-term-009" class="title" role="title">Consider Edge Direction</dt><dt id="treereduction_edge_bundling-250-term-010"><api-link id="treereduction_edge_bundling-250-api-link-012" data-member="considerDirection" data-text="considerDirection:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-009">\n<p id="treereduction_edge_bundling-250-simpara-018">Determines if the direction of an edge should be taken into consideration.\nIf enabled, incoming and outgoing edges incident to a node are bundled separately.</p>\n</dd>\n<dt id="treereduction_edge_bundling-250-term-011" class="title" role="title">Use Bezier Fitting</dt><dt id="treereduction_edge_bundling-250-term-012"><api-link id="treereduction_edge_bundling-250-api-link-013" data-member="bezierFitting" data-text="bezierFitting:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="treereduction_edge_bundling-250-listitem-010">\n<p id="treereduction_edge_bundling-250-simpara-019">Determines whether or not the path of an edge should be approximated by a cubic\nBezier curve.\nThe number of bends may be significantly reduced by the approximation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"treereduction_edge_bundling-250-simpara-020",content:'An <span class="api">EdgeBundleDescriptor</span> instance can be specified\nindividually for single edges by means of a data provider that is bound to the graph.\nThe data provider is expected to be registered with the graph using key\n<api-link id="treereduction_edge_bundling-250-api-link-014" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeBundleDescriptor</span>\ninstance that is registered with <span class="api">EdgeBundling</span> will\nbe used.'}]},{tagname:"section",id:"tree_layouts_tutorial",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"tree_layouts_tutorial-251-simpara-001",content:'Tutorial demo application <a href="..\\..\\demos\\complete\\collapse\\index.html" target="blank" class="demo-link" title="Shows interactive collapsing and expanding of subtrees of a graph.">Collapsible Trees</a>\npresents the setup of many tree layout algorithms in an application context.'}]}]},{tagname:"section",id:"classic_tree_layout",title:"Classic Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_layout-252-simpara-001",content:'Class <api-link id="classic_tree_layout-252-api-link-001" data-member="" data-text="ClassicTreeLayout" data-type="yfiles.tree.ClassicTreeLayout"></api-link> is a layout algorithm\nmainly used for directed trees that have a unique root element.\nStarting with the root node the nodes are arranged either from top to bottom,\nleft to right, right to left, or bottom to top.\nThe edges of a graph can either be routed as straight lines or in an orthogonal\nbus-like fashion.'},{tagname:"section",id:"classic_tree_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_options-253-simpara-001",content:'These options configure class <span class="api">ClassicTreeLayout</span> in detail.'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-001" class="title" role="title">Minimal Layer Distance</dt><dt id="classic_tree_options-253-term-002"><api-link id="classic_tree_options-253-api-link-001" data-member="minimumLayerDistance" data-text="minimumLayerDistance" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-001">\n<p id="classic_tree_options-253-simpara-002">Determines the minimal distance between parent and child nodes.</p>\n</dd>\n<dt id="classic_tree_options-253-term-003" class="title" role="title">Minimal Node Distance</dt><dt id="classic_tree_options-253-term-004"><api-link id="classic_tree_options-253-api-link-002" data-member="minimumNodeDistance" data-text="minimumNodeDistance" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-002">\n<p id="classic_tree_options-253-simpara-003">Determines the minimal distance between the siblings of a node.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-005" class="title" role="title">Layout Orientation</dt><dt id="classic_tree_options-253-term-006"><api-link id="classic_tree_options-253-api-link-003" data-member="layoutOrientation" data-text="layoutOrientation" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-003">\n<p id="classic_tree_options-253-simpara-004">Determines the main layout orientation, i.e., the overall orientation for the edges\nin a layout.\nThis property is inherited from <span class="api">MultiStageLayout</span>, the direct superclass of\n<span class="api">ClassicTreeLayout</span>.\nThe layout algorithm tries to arrange nodes in such a way that all edges point in\nthe main layout direction.\nBy default, the overall orientation for the edges will be from top to bottom.\nThe other three layout directions can be set using the constants from the\n<api-link id="classic_tree_options-253-api-link-004" data-member="" data-text="LayoutOrientation" data-type="yfiles.layout.LayoutOrientation"></api-link> enum type.\n<a href="#/dguide/ex_classic_tree_layout_orientation">Setting the layout orientation</a> shows how to set the layout direction.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"classic_tree_options-253-note-001",content:'<p id="classic_tree_options-253-simpara-005">The documentation for the other layout options assumes that this default orientation\nis being used.</p>'},{tagname:"example",id:"ex_classic_tree_layout_orientation",title:"Setting the layout orientation",content:'<pre class="programlisting javascript" id="classic_tree_options-253-programlisting-001" language="javascript" format="linespecific"><code>const tl = new yfiles.tree.ClassicTreeLayout()\r\n// Use left-to-right main layout direction.\r\ntl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\n</code></pre>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-007"><api-link id="classic_tree_options-253-api-link-005" data-member="portStyle" data-text="portStyle" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-004">\n<p id="classic_tree_options-253-simpara-006">Determines the port assignment policy to be used.\nPorts can be placed</p>\n<para><ul id="classic_tree_options-253-itemizedlist-001"><li id="classic_tree_options-253-listitem-005"><p id="classic_tree_options-253-simpara-007">at the center of the corresponding nodes,</p></li><li id="classic_tree_options-253-listitem-006"><p id="classic_tree_options-253-simpara-008">in the middle of the border, or</p></li><li id="classic_tree_options-253-listitem-007"><p id="classic_tree_options-253-simpara-009">distributed along the border of the corresponding nodes.</p></li></ul></para>\n<p id="classic_tree_options-253-simpara-010">Policies can be set using the constants from the <api-link id="classic_tree_options-253-api-link-006" data-member="" data-text="PortStyle" data-type="yfiles.tree.PortStyle"></api-link>\nenum type.</p>\n</dd>\n<dt id="classic_tree_options-253-term-008" class="title" role="title">Edge Routing Style</dt><dt id="classic_tree_options-253-term-009"><api-link id="classic_tree_options-253-api-link-007" data-member="edgeRoutingStyle" data-text="edgeRoutingStyle" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-008">\n<p id="classic_tree_options-253-simpara-011">If set, all edges will be routed orthogonally in a bus-like fashion.\nIf not set, the edges will be routed as straight-line segments.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-010" class="title" role="title">Bus Alignment</dt><dt id="classic_tree_options-253-term-011"><api-link id="classic_tree_options-253-api-link-008" data-member="busAlignment" data-text="busAlignment" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-009">\n<p id="classic_tree_options-253-simpara-012">Determines vertical bus alignment within the space between two layers for edges from\na given (root) node to its children that are routed in an orthogonal bus-like fashion.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-012" class="title" role="title">Vertical Alignment</dt><dt id="classic_tree_options-253-term-013"><api-link id="classic_tree_options-253-api-link-009" data-member="verticalAlignment" data-text="verticalAlignment" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-010">\n<p id="classic_tree_options-253-simpara-013">Specifies vertical alignment of nodes that are in the same layer.\nThe value for the vertical alignment is interpreted relative to a layer’s height,\nwhich is determined by the maximum of the node heights.\nA value of 0.0 means top alignment, 1.0 means bottom alignment.\nThe default value is 0.5, which means center alignment of all nodes\nin the same layer.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-006" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-014" class="title" role="title">Child Placement Policy</dt><dt id="classic_tree_options-253-term-015"><api-link id="classic_tree_options-253-api-link-010" data-member="leafPlacement" data-text="leafPlacement" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-011">\n<p id="classic_tree_options-253-simpara-014">Determines the placement of child nodes in a given tree.\nDepending on the actual child placement policy, an optimal area utilization can\nbe achieved.\nThe following policies are supported:</p>\n<para><ul id="classic_tree_options-253-itemizedlist-002"><li id="classic_tree_options-253-listitem-012"><p id="classic_tree_options-253-simpara-015"><api-link id="classic_tree_options-253-api-link-011" data-member="SIBLINGS_ON_SAME_LAYER" data-text="SIBLINGS_ON_SAME_LAYER" data-type="yfiles.tree.LeafPlacement"></api-link>\nConfigures the algorithm to place leaf nodes that have the same parent node in the\nsame layer.\nThis option is useful in order to make a graph vertically more compact.</p></li><li id="classic_tree_options-253-listitem-013"><p id="classic_tree_options-253-simpara-016"><api-link id="classic_tree_options-253-api-link-012" data-member="ALL_LEAVES_ON_SAME_LAYER" data-text="ALL_LEAVES_ON_SAME_LAYER" data-type="yfiles.tree.LeafPlacement"></api-link>\nThis setting results in a Dendrogram-like style and places all leaf nodes of the\ntree in the bottommost layer of the layout.</p></li><li id="classic_tree_options-253-listitem-014"><p id="classic_tree_options-253-simpara-017"><api-link id="classic_tree_options-253-api-link-013" data-member="LEAVES_STACKED_LEFT" data-text="LEAVES_STACKED_LEFT" data-type="yfiles.tree.LeafPlacement"></api-link>\nConfigures the algorithm for a stacked style of leaf nodes consisting of a single\n"stack."</p></li><li id="classic_tree_options-253-listitem-015"><p id="classic_tree_options-253-simpara-018"><api-link id="classic_tree_options-253-api-link-014" data-member="LEAVES_STACKED_RIGHT" data-text="LEAVES_STACKED_RIGHT" data-type="yfiles.tree.LeafPlacement"></api-link>\nConfigures the algorithm for a stacked style of leaf nodes consisting of a single\n"stack."</p></li><li id="classic_tree_options-253-listitem-016"><p id="classic_tree_options-253-simpara-019"><api-link id="classic_tree_options-253-api-link-015" data-member="LEAVES_STACKED_LEFT_AND_RIGHT" data-text="LEAVES_STACKED_LEFT_AND_RIGHT" data-type="yfiles.tree.LeafPlacement"></api-link>\nConfigures the algorithm for a stacked style of leaf nodes consisting of two "stacks."</p></li><li id="classic_tree_options-253-listitem-017"><p id="classic_tree_options-253-simpara-020"><api-link id="classic_tree_options-253-api-link-016" data-member="LEAVES_STACKED" data-text="LEAVES_STACKED" data-type="yfiles.tree.LeafPlacement"></api-link>\nConfigures the algorithm for a stacked style of leaf nodes that aims to balance\n"stack" heights.\nFor each subtree, the algorithm decides about the actual policy depending on the\nnumber of leaf nodes: either child placement policy\n<api-link id="classic_tree_options-253-api-link-017" data-member="LEAVES_STACKED_RIGHT" data-text="LEAVES_STACKED_RIGHT" data-type="yfiles.tree.LeafPlacement"></api-link>\nor\n<api-link id="classic_tree_options-253-api-link-018" data-member="LEAVES_STACKED_LEFT_AND_RIGHT" data-text="LEAVES_STACKED_LEFT_AND_RIGHT" data-type="yfiles.tree.LeafPlacement"></api-link>\nis used.</p></li></ul></para>\n<p id="classic_tree_options-253-simpara-021">In the above context, "stacked" means that leaf nodes at the same parent node are\nplaced non-overlapping below their parent node in a row that extends downwards.\nThis allows to make a graph horizontally more compact.\n"Left" and "right" indicate where, relative to the center of the parent node, the\nrow is placed.\nNote that the "stacked" policies only have an effect on subtrees where all children\nare leaf nodes.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="classic_tree_options-253-variablelist-007" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_options-253-term-016" class="title" role="title">Global Layering</dt><dt id="classic_tree_options-253-term-017"><api-link id="classic_tree_options-253-api-link-019" data-member="enforceGlobalLayering" data-text="enforceGlobalLayering" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_options-253-listitem-018">\n<p id="classic_tree_options-253-simpara-022">If set, the algorithm ensures that large nodes never span more than their layer.\nOtherwise, a more compact layout can be achieved when large nodes span two or more\nlayers.\nThis setting is useful, if the hierarchical structure of the tree should be more\nemphasized.\nNote that when disabled, the value set for the <a href="#/dguide/classic_tree_vertical_alignment_api">Vertical Alignment</a>\nof nodes within their layer is ignored.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"classic_tree_integrated_labeling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_integrated_labeling-254-simpara-001",content:'Besides the generic labeling support as described in\n<a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, which is available with all yFiles layout\nalgorithms, <span class="api">ClassicTreeLayout</span> additionally features integrated labeling.'},{tagname:"para","class":"dguide-para",id:"classic_tree_integrated_labeling-254-simpara-002",content:"Integrated labeling is available for node labels and edge labels.\nThey are taken into consideration when determining the positions for the nodes\nof the tree.\nWith this strategy it is guaranteed that no label will overlap other objects in\nthe diagram.\nIntegrated labeling can be enabled or disabled using the following properties:"},{tagname:"para",content:'<dl id="classic_tree_integrated_labeling-254-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_integrated_labeling-254-term-001"><api-link id="classic_tree_integrated_labeling-254-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dt id="classic_tree_integrated_labeling-254-term-002"><api-link id="classic_tree_integrated_labeling-254-api-link-002" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_integrated_labeling-254-listitem-001">\n<p id="classic_tree_integrated_labeling-254-simpara-003">Determines whether integrated labeling is enabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"classic_tree_integrated_labeling-254-simpara-004",content:'See also <a href="#/dguide/label_placement-integrated_labeling">Integrated Labeling</a>.'},{tagname:"para","class":"dguide-para tip",id:"classic_tree_integrated_labeling-254-tip-001",content:'<p id="classic_tree_integrated_labeling-254-simpara-005">Optimal label placement with integrated labeling can be achieved using <api-link id="classic_tree_integrated_labeling-254-api-link-003" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\nas the label model for the edges.\nAs explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\nsuited in combination with integrated labeling and yields the best match for a label\nlocation that is computed by <span class="api">ClassicTreeLayout</span>.</p>'}]},{tagname:"section",id:"classic_tree_incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_incremental-255-simpara-001",content:'Class <span class="api">ClassicTreeLayout</span> supports incremental layout by means of a\n<api-link id="classic_tree_incremental-255-api-link-001" data-member="" data-text="IComparer&lt;T&gt;" data-type="yfiles.collections.IComparer"></api-link>\nimplementation that provides dynamic rearrangement of all child nodes in a given\nsubtree according to their relative coordinates.\nBased on this scheme, the default comparer is able to incrementally insert\nnew child nodes at optimal positions with respect to already arranged child\nnodes.'},{tagname:"para","class":"dguide-para",id:"classic_tree_incremental-255-simpara-002",content:"The following property registers custom Comparer implementations that act\nglobally on the entire tree:"},{tagname:"para",content:'<dl id="classic_tree_incremental-255-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="classic_tree_incremental-255-term-001"><api-link id="classic_tree_incremental-255-api-link-002" data-member="comparer" data-text="comparer" data-type="yfiles.tree.ClassicTreeLayout"></api-link></dt><dd id="classic_tree_incremental-255-listitem-001">\n<p id="classic_tree_incremental-255-simpara-003">Comparer registration.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"classic_tree_incremental-255-simpara-004",content:'Alternatively, class\n<api-link id="classic_tree_incremental-255-api-link-003" data-member="" data-text="NodeOrderComparer" data-type="yfiles.tree.NodeOrderComparer"></api-link> can be used to\nsort the child nodes of a subtree, too.\nSee also <a href="#/dguide/tree_layouts_sorting">Sorting Child Nodes</a>.'}]},{tagname:"section",id:"classic_tree_node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_node_halos-256-simpara-001",content:'<span class="api">ClassicTreeLayout</span> by default supports node halos as soon as they are declared using the\ndata provider key <api-link id="classic_tree_node_halos-256-api-link-001" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link>.\nDuring layout calculation, it takes any specified additional padding around nodes\ninto consideration and keeps the areas clear of other graph elements.\nThe labels of a node and its adjacent edge segments are not affected and can still\nbe placed inside or cross the node’s halo.'}]},{tagname:"section",id:"classic_tree_layout_dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"classic_tree_layout_dataprovider-257-simpara-001",content:'When using class <span class="api">ClassicTreeLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by means of layout data or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_classic_tree_layout_keys">Supplemental layout data</a> lists all look-up keys that\n<span class="api">ClassicTreeLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"classic_tree_layout_dataprovider-257-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_classic_tree_layout_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="classic_tree_layout_dataprovider-257-thead-001"><tr id="classic_tree_layout_dataprovider-257-row-001"><th id="classic_tree_layout_dataprovider-257-entry-001" align="left" valign="top">\nLayoutData Property\n</th><th id="classic_tree_layout_dataprovider-257-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="classic_tree_layout_dataprovider-257-entry-003" align="left" valign="top">\nElement Type\n</th><th id="classic_tree_layout_dataprovider-257-entry-004" align="left" valign="top">\nValue Type\n</th><th id="classic_tree_layout_dataprovider-257-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="classic_tree_layout_dataprovider-257-tbody-001"><tr id="classic_tree_layout_dataprovider-257-row-002"><td id="classic_tree_layout_dataprovider-257-entry-006" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-003"><anchor id="tab_classic_tree_layout_keys_node_order_comparable" xreflabel="[tab_classic_tree_layout_keys_node_order_comparable]"></anchor> -</para></td><td id="classic_tree_layout_dataprovider-257-entry-007" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-004"><api-link id="classic_tree_layout_dataprovider-257-api-link-001" data-member="NODE_ORDER_COMPARABLE_DP_KEY" data-text="NODE_ORDER_COMPARABLE_DP_KEY" data-type="yfiles.tree.NodeOrderComparer"></api-link></para></td><td id="classic_tree_layout_dataprovider-257-entry-008" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-005">node</para></td><td id="classic_tree_layout_dataprovider-257-entry-009" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-006">Comparable</para></td><td id="classic_tree_layout_dataprovider-257-entry-010" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-007">For each subtree’s root the order of its child nodes.</para></td></tr><tr id="classic_tree_layout_dataprovider-257-row-003"><td id="classic_tree_layout_dataprovider-257-entry-011" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-008"><anchor id="tab_classic_tree_layout_keys_node_halo" xreflabel="[tab_classic_tree_layout_keys_node_halo]"></anchor> -</para></td><td id="classic_tree_layout_dataprovider-257-entry-012" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-009"><api-link id="classic_tree_layout_dataprovider-257-api-link-002" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="classic_tree_layout_dataprovider-257-entry-013" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-010">node</para></td><td id="classic_tree_layout_dataprovider-257-entry-014" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-011">NodeHalo</para></td><td id="classic_tree_layout_dataprovider-257-entry-015" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-012">A <api-link id="classic_tree_layout_dataprovider-257-api-link-003" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="classic_tree_layout_dataprovider-257-row-004"><td id="classic_tree_layout_dataprovider-257-entry-016" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-013"><anchor id="tab_classic_tree_layout_keys_edge_bundle_descriptor" xreflabel="[tab_classic_tree_layout_keys_edge_bundle_descriptor]"></anchor><api-link id="classic_tree_layout_dataprovider-257-api-link-004" data-member="edgeBundleDescriptors" data-text="TreeReductionStageData.edgeBundleDescriptors" data-type="yfiles.tree.TreeReductionStageData"></api-link></para></td><td id="classic_tree_layout_dataprovider-257-entry-017" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-014"><api-link id="classic_tree_layout_dataprovider-257-api-link-005" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="classic_tree_layout_dataprovider-257-entry-018" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-015">edge</para></td><td id="classic_tree_layout_dataprovider-257-entry-019" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-016"><span class="api">EdgeBundleDescriptor</span></para></td><td id="classic_tree_layout_dataprovider-257-entry-020" align="left" valign="top"><para class="dguide-para" id="classic_tree_layout_dataprovider-257-simpara-017">For each edge an <api-link id="classic_tree_layout_dataprovider-257-api-link-006" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"tree_layout",title:"Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"tree_layout-258-simpara-001",content:'Class <api-link id="tree_layout-258-api-link-001" data-member="" data-text="TreeLayout" data-type="yfiles.tree.TreeLayout"></api-link> defines\na generic basis for tree layout that supports a multitude of different styles\nand arrangements.\nMajor aspects of layout calculation can be customized for an invocation both\nglobally for the entire tree, but also individually per subtree.\nThis powerful scheme allows entirely different layout styles to be applied to\nthe subtrees of a given tree.'},{tagname:"section",id:"tree_layout_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_options-259-simpara-001",content:'<span class="api">TreeLayout</span> delegates major aspects of layout calculation to\nimplementations for interfaces\n<api-link id="tree_layout_options-259-api-link-001" data-member="" data-text="INodePlacer" data-type="yfiles.tree.INodePlacer"></api-link> and\n<api-link id="tree_layout_options-259-api-link-002" data-member="" data-text="IPortAssignment" data-type="yfiles.tree.IPortAssignment"></api-link>:'},{tagname:"para",content:'<ul id="tree_layout_options-259-itemizedlist-001"><li id="tree_layout_options-259-listitem-001"><p id="tree_layout_options-259-simpara-002">INodePlacer is responsible for recursively arranging a subtree’s root node\ntogether with its children (starting at the leaf nodes of a tree),</p></li><li id="tree_layout_options-259-listitem-002"><p id="tree_layout_options-259-simpara-003">IPortAssignment encapsulates edge port assignment for a node’s edges.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tree_layout_options-259-simpara-004",content:'Classes <api-link id="tree_layout_options-259-api-link-003" data-member="" data-text="DefaultNodePlacer" data-type="yfiles.tree.DefaultNodePlacer"></api-link> and\n<api-link id="tree_layout_options-259-api-link-004" data-member="" data-text="DefaultPortAssignment" data-type="yfiles.tree.DefaultPortAssignment"></api-link> are used as\nthe default implementations for INodePlacer and IPortAssignment, respectively.'},{tagname:"para","class":"dguide-para",id:"tree_layout_options-259-simpara-005",content:'Both INodePlacer as well as IPortAssignment implementations can be registered\nwith <span class="api">TreeLayout</span> to handle all nodes, i.e., act globally on the entire\ntree, or to handle only a specific root node, i.e., act locally on a subtree.\nThe <a href="#/dguide/tab_tree_layout_keys_node_placers">node placer</a> or <a href="#/dguide/tab_tree_layout_keys_port_assignment">port assignment</a> can be specified for each subtree individually\nby means of <a href="#/dguide/layout-layout_data">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"tree_layout_options-259-simpara-006",content:"Note that in the absence of an individual node placer or port assignment\nimplementation the respective default implementation will be used for a given\nnode.\nThe following properties can be used to register default node placer and port assignment\nimplementations:"},{tagname:"para",content:'<dl id="tree_layout_options-259-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_options-259-term-001"><api-link id="tree_layout_options-259-api-link-005" data-member="defaultNodePlacer" data-text="defaultNodePlacer" data-type="yfiles.tree.TreeLayout"></api-link></dt><dd id="tree_layout_options-259-listitem-003">\n<p id="tree_layout_options-259-simpara-007">Determines the globally used node placer implementation.</p>\n</dd>\n<dt id="tree_layout_options-259-term-002"><api-link id="tree_layout_options-259-api-link-006" data-member="defaultPortAssignment" data-text="defaultPortAssignment" data-type="yfiles.tree.TreeLayout"></api-link></dt><dd id="tree_layout_options-259-listitem-004">\n<p id="tree_layout_options-259-simpara-008">Determines the globally used port assignment implementation.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"tree_layout_node_placer",title:"Predefined Node Placers",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-001",content:'In addition to class DefaultNodePlacer, package\n<api-link id="tree_layout_node_placer-260-api-link-001" data-member="" data-text="yfiles.tree" data-type=""></api-link> contains further\npredefined node placer implementations that provide a variety of subtree\narrangement schemes.\nTheir common superclass, abstract class\n<api-link id="tree_layout_node_placer-260-api-link-002" data-member="" data-text="RotatableNodePlacerBase" data-type="yfiles.tree.RotatableNodePlacerBase"></api-link>,\nenables these node placers to transparently deal with child nodes that are\nactually rotated subtrees.\n<a href="#/dguide/fig_tree_layout_node_placer">Node placer hierarchy</a> depicts the node placer class hierarchy.'},{tagname:"figure","class":"image",title:"Node placer hierarchy",id:"fig_tree_layout_node_placer","float":0,children:[{tagname:"img",src:"assets/tree_node_placer_all.3ae3304f.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-002",content:'<a href="#/dguide/tab_tree_layout_node_placer">Node placer implementations</a> lists the predefined node placer\nimplementations that extend abstract class AbstractNodePlacer.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tree_layout_node_placer",rowsep:1,content:'<caption>Node placer implementations</caption><colgroup><col style="width:25%;"><col style="width:75%;"></colgroup><thead id="tree_layout_node_placer-260-thead-001"><tr id="tree_layout_node_placer-260-row-001"><th id="tree_layout_node_placer-260-entry-001" align="left" valign="top">\nClass Name\n</th><th id="tree_layout_node_placer-260-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tree_layout_node_placer-260-tbody-001"><tr id="tree_layout_node_placer-260-row-002"><td id="tree_layout_node_placer-260-entry-003" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-003"><api-link id="tree_layout_node_placer-260-api-link-003" data-member="" data-text="AspectRatioNodePlacer" data-type="yfiles.tree.AspectRatioNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-004" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-004">All subtrees are placed such that a given aspect ratio for the entire tree is\nobeyed.</para></td></tr><tr id="tree_layout_node_placer-260-row-003"><td id="tree_layout_node_placer-260-entry-005" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-005"><api-link id="tree_layout_node_placer-260-api-link-004" data-member="" data-text="CompactNodePlacer" data-type="yfiles.tree.CompactNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-006" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-006">Uses a dynamic optimization approach that chooses a placement strategy of\nthe children such that the overall result is compact with respect to a specified aspect ratio.</para></td></tr><tr id="tree_layout_node_placer-260-row-004"><td id="tree_layout_node_placer-260-entry-007" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-007"><api-link id="tree_layout_node_placer-260-api-link-005" data-member="" data-text="DefaultNodePlacer" data-type="yfiles.tree.DefaultNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-008" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-008">Child nodes are placed horizontally aligned below their root node.\nThe bus-like routing for all edges to the child nodes extends horizontally.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-009",content:'<a href="#/dguide/tab_tree_layout_node_placer_rotated">Node placer implementations that support rotation</a> lists predefined node placer\nimplementations that support rotated subtrees.\nNote that the given descriptions assume a "canonic subtree orientation," where\nchild nodes are placed (more or less) below their root node.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tree_layout_node_placer_rotated",rowsep:1,content:'<caption>Node placer implementations that support rotation</caption><colgroup><col style="width:25%;"><col style="width:75%;"></colgroup><thead id="tree_layout_node_placer-260-thead-002"><tr id="tree_layout_node_placer-260-row-005"><th id="tree_layout_node_placer-260-entry-009" align="left" valign="top">\nClass Name\n</th><th id="tree_layout_node_placer-260-entry-010" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tree_layout_node_placer-260-tbody-002"><tr id="tree_layout_node_placer-260-row-006"><td id="tree_layout_node_placer-260-entry-011" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-010"><api-link id="tree_layout_node_placer-260-api-link-006" data-member="" data-text="AssistantNodePlacer" data-type="yfiles.tree.AssistantNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-012" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-011">Applies a composite placement scheme where two kinds of nodes are\ndifferentiated; <a href="#/dguide/tree_layout_assistant">see below</a> for a more\ndetailed description.</para></td></tr><tr id="tree_layout_node_placer-260-row-007"><td id="tree_layout_node_placer-260-entry-013" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-012"><api-link id="tree_layout_node_placer-260-api-link-007" data-member="" data-text="BusNodePlacer" data-type="yfiles.tree.BusNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-014" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-013">Child nodes are placed evenly distributed to the left and right of their root\nnode and also in a second line below the root node.\nThe nodes within each line are horizontally aligned.\nThe bus-like routing for all edges to the child nodes extends horizontally.</para></td></tr><tr id="tree_layout_node_placer-260-row-008"><td id="tree_layout_node_placer-260-entry-015" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-014"><api-link id="tree_layout_node_placer-260-api-link-008" data-member="" data-text="DelegatingNodePlacer" data-type="yfiles.tree.DelegatingNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-016" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-015">Applies a composite placement scheme where two node placers are used to each\narrange one half of the child nodes.</para></td></tr><tr id="tree_layout_node_placer-260-row-009"><td id="tree_layout_node_placer-260-entry-017" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-016"><api-link id="tree_layout_node_placer-260-api-link-009" data-member="" data-text="DoubleLineNodePlacer" data-type="yfiles.tree.DoubleLineNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-018" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-017">Child nodes are placed staggered in two lines below their root node, each\nline containing one half of the nodes.\nThe nodes within each line are horizontally aligned.\nThe bus-like routing for all edges to the child nodes extends horizontally.</para></td></tr><tr id="tree_layout_node_placer-260-row-010"><td id="tree_layout_node_placer-260-entry-019" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-018"><api-link id="tree_layout_node_placer-260-api-link-010" data-member="" data-text="FreeNodePlacer" data-type="yfiles.tree.FreeNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-020" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-019">Child nodes can be placed anywhere, their coordinates are not modified.\nThe bus-like routing for all edges to the child nodes extends horizontally.</para></td></tr><tr id="tree_layout_node_placer-260-row-011"><td id="tree_layout_node_placer-260-entry-021" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-020"><api-link id="tree_layout_node_placer-260-api-link-011" data-member="" data-text="LayeredNodePlacer" data-type="yfiles.tree.LayeredNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-022" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-021">Subtrees can be placed such that child nodes from the same layer (i.e., nodes\nhaving the same BFS distance to the tree’s root node) are aligned.</para></td></tr><tr id="tree_layout_node_placer-260-row-012"><td id="tree_layout_node_placer-260-entry-023" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-022"><api-link id="tree_layout_node_placer-260-api-link-012" data-member="" data-text="LeftRightNodePlacer" data-type="yfiles.tree.LeftRightNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-024" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-023">Child nodes are placed below their root node to the left and right of the\ndownward extending bus-like routing for all edges to the child nodes.</para></td></tr><tr id="tree_layout_node_placer-260-row-013"><td id="tree_layout_node_placer-260-entry-025" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-024"><api-link id="tree_layout_node_placer-260-api-link-013" data-member="" data-text="SimpleNodePlacer" data-type="yfiles.tree.SimpleNodePlacer"></api-link></para></td><td id="tree_layout_node_placer-260-entry-026" align="left" valign="top"><para class="dguide-para" id="tree_layout_node_placer-260-simpara-025">Child nodes are placed horizontally aligned below their root node.\nThe bus-like routing for all edges to the child nodes extends horizontally.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-026",content:'<span class="api">RotatableNodePlacerBase</span> provides support for eight different subtree\norientation schemes which are expressed using suitable modification matrices of\ntype\n<api-link id="tree_layout_node_placer-260-api-link-014" data-member="" data-text="RotatableNodePlacerMatrix" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link>.\n<a href="#/dguide/fig_tree_layout_rotation">Supported subtree orientations</a> shows all orientations beginning with the\nso-called "canonic subtree orientation."\nNote that the rotations provided by nested class\n<span class="api">RotatableNodePlacerBase</span>.Matrix are using mathematical rotation sense, i.e.,\nthey are counter-clockwise.'},{tagname:"figure","class":"image",title:"Supported subtree orientations",id:"fig_tree_layout_rotation","float":0,children:[{tagname:"img",src:"assets/tree_layout_dir_default.175e3822.jpg",alt:"",title:'<para class="dguide-para">Default orientation (a.k.a. canonic subtree orientation): <api-link id="tree_layout_node_placer-260-api-link-015" data-member="DEFAULT" data-text="DEFAULT" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_90.a5ac9605.jpg",alt:"",title:'<para class="dguide-para">90 degree: <api-link id="tree_layout_node_placer-260-api-link-016" data-member="ROT90" data-text="ROT90" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_90_vert.80f9c153.jpg",alt:"",title:'<para class="dguide-para">90 degree, mirrored vertically: <api-link id="tree_layout_node_placer-260-api-link-017" data-member="MIR_VERT_ROT90" data-text="MIR_VERT_ROT90" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_vert.3a902914.jpg",alt:"",title:'<para class="dguide-para">Mirrored vertically: <api-link id="tree_layout_node_placer-260-api-link-018" data-member="MIR_VERT" data-text="MIR_VERT" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_hor.e1d06a93.jpg",alt:"",title:'<para class="dguide-para">Mirrored horizontally: <api-link id="tree_layout_node_placer-260-api-link-019" data-member="MIR_HOR" data-text="MIR_HOR" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_90_hor.dea6a6f0.jpg",alt:"",title:'<para class="dguide-para">90 degree, mirrored horizontally: <api-link id="tree_layout_node_placer-260-api-link-020" data-member="MIR_HOR_ROT90" data-text="MIR_HOR_ROT90" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_270.b7401689.jpg",alt:"",title:'<para class="dguide-para">270 degree: <api-link id="tree_layout_node_placer-260-api-link-021" data-member="ROT270" data-text="ROT270" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'},{tagname:"img",src:"assets/tree_layout_dir_180.1cf15b42.jpg",alt:"",title:'<para class="dguide-para">180 degree: <api-link id="tree_layout_node_placer-260-api-link-022" data-member="ROT180" data-text="ROT180" data-type="yfiles.tree.RotatableNodePlacerMatrix"></api-link></para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-027",content:'A concrete subclass of <span class="api">RotatableNodePlacerBase</span> is given the modification\nmatrix that describes the desired subtree orientation at initialization time.\n<a href="#/dguide/tree_layout_rotation_api">Predefined Node Placers</a> lists the properties/constructors that\nprovide matrix-related configuration support.'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="tree_layout_rotation_api">\n<dt id="tree_layout_node_placer-260-term-001"><api-link id="tree_layout_node_placer-260-api-link-023" data-member="RotatableNodePlacerBase(yfiles.tree.RotatableNodePlacerMatrix)" data-text="RotatableNodePlacerBase" data-type="yfiles.tree.RotatableNodePlacerBase"></api-link></dt><dd id="tree_layout_node_placer-260-listitem-001">\n<p id="tree_layout_node_placer-260-simpara-028">Constructor of <span class="api">RotatableNodePlacerBase</span>. (To be overridden in concrete subclasses.)</p>\n</dd>\n<dt id="tree_layout_node_placer-260-term-002"><api-link id="tree_layout_node_placer-260-api-link-024" data-member="modificationMatrix" data-text="modificationMatrix" data-type="yfiles.tree.RotatableNodePlacerBase"></api-link></dt><dd id="tree_layout_node_placer-260-listitem-002">\n<p id="tree_layout_node_placer-260-simpara-029">Gets the current modification matrix.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layout_node_placer-260-simpara-030",content:'<a href="#/dguide/fig_tree_layout_all_placers">Subtree arrangement with NodePlacer implementations</a> shows arrangements of an example\n(sub)tree (in canonic subtree orientation) using different node placer\nimplementations.\nNote the (sub)tree’s emphasized root node.'},{tagname:"figure","class":"image",title:"Subtree arrangement with NodePlacer implementations",id:"fig_tree_layout_all_placers","float":0,children:[{tagname:"img",src:"assets/tree_layout_simple_node.7df7764d.jpg",alt:"",title:'<para class="dguide-para">SimpleNodePlacer</para>'},{tagname:"img",src:"assets/tree_layout_left_right.96582bf2.jpg",alt:"",title:'<para class="dguide-para">LeftRightPlacer</para>'},{tagname:"img",src:"assets/tree_layout_free.136a00c8.jpg",alt:"",title:'<para class="dguide-para">FreePlacer</para>'},{tagname:"img",src:"assets/tree_layout_double_line.f4ccae85.jpg",alt:"",title:'<para class="dguide-para">DoubleLinePlacer</para>'},{tagname:"img",src:"assets/tree_layout_bus.19788513.jpg",alt:"",title:'<para class="dguide-para">BusPlacer</para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_assistant",content:'Class AssistantPlacer uses <a href="#/dguide/tab_tree_layout_keys_assistant_nodes">layout data</a> to determine\nwhether a node is a so-called "assistant" or not.\nAssistants are placed using LeftRightPlacer, non-assistants are placed using\nanother node placer which can be configured using a property.\n<a href="#/dguide/fig_tree_layout_assistant">Subtree arrangement provided by AssistentPlacer</a> depicts the supported arrangements for the\nso-called non-assistant nodes.'},{tagname:"figure","class":"image",title:"Subtree arrangement provided by AssistentPlacer",id:"fig_tree_layout_assistant","float":0,children:[{tagname:"img",src:"assets/tree_layout_assistant_simple.2cbaf22e.jpg",alt:"",title:'<para class="dguide-para">Using SimpleNodePlacer for non-assistants.</para>'},{tagname:"img",src:"assets/tree_layout_assistant_double_line.ce958583.jpg",alt:"",title:'<para class="dguide-para">Using DoubleLinePlacer for non-assistants.</para>'}]}]},{tagname:"section",id:"tree_layout_integrated_labeling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_integrated_labeling-261-simpara-001",content:'Besides the generic labeling support as described in\n<a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, which is available with all yFiles layout\nalgorithms, generic tree layout additionally features integrated labeling.'},{tagname:"para","class":"dguide-para",id:"tree_layout_integrated_labeling-261-simpara-002",content:"Integrated labeling is available for node labels and edge labels.\nThey are taken into consideration when determining the shape of a subtree.\nWith this strategy it is guaranteed that no label will overlap other objects in\nthe diagram.\nThe following properties can be used to enable integrated labeling:"},{tagname:"para",content:'<dl id="tree_layout_integrated_labeling-261-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_integrated_labeling-261-term-001"><api-link id="tree_layout_integrated_labeling-261-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.tree.TreeLayout"></api-link></dt><dt id="tree_layout_integrated_labeling-261-term-002"><api-link id="tree_layout_integrated_labeling-261-api-link-002" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.tree.TreeLayout"></api-link></dt><dd id="tree_layout_integrated_labeling-261-listitem-001">\n<p id="tree_layout_integrated_labeling-261-simpara-003">Enables/disables integrated edge labeling and node labeling, respectively.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layout_integrated_labeling-261-simpara-004",content:'See also <a href="#/dguide/label_placement-integrated_labeling">Integrated Labeling</a>.'},{tagname:"para","class":"dguide-para tip",id:"tree_layout_integrated_labeling-261-tip-001",content:'<p id="tree_layout_integrated_labeling-261-simpara-005">Optimal label placement with integrated labeling can be achieved using <api-link id="tree_layout_integrated_labeling-261-api-link-003" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\nas the label model for the edges.\nAs explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\nsuited in combination with integrated labeling and yields the best match for a label\nlocation that is computed by <span class="api">TreeLayout</span>.</p>'}]},{tagname:"section",id:"tree_layout_grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_grouping-262-simpara-001",content:'By default, <span class="api">TreeLayout</span> supports layout of tree structures where entire\nsubtrees are contained in group nodes.\nBoth position and dimension of group nodes will be calculated by the algorithm.\nThe\n<api-link id="tree_layout_grouping-262-api-link-001" data-member="groupingSupported" data-text="setGroupingSupported" data-type="yfiles.tree.TreeLayout"></api-link>\nproperty can be used to control this functionality.'}]},{tagname:"section",id:"tree_layout_incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_incremental-263-simpara-001",content:'<span class="api">TreeLayout</span> can be used in combination with a\n<api-link id="tree_layout_incremental-263-api-link-001" data-member="" data-text="IComparer&lt;T&gt;" data-type="yfiles.collections.IComparer"></api-link> implementation that allows to\ndynamically determine the sequence of child nodes in a subtree.\nSupplied with a root node’s outgoing tree edges, the comparer decides on\ntheir precedence.\nBased on this scheme, the comparer that is conveniently returned by class\nDefaultNodePlacer provides support for incrementally inserting new child nodes\nat optimal positions with respect to already arranged child nodes.'},{tagname:"para","class":"dguide-para",id:"tree_layout_incremental-263-simpara-002",content:"Comparers can be registered both to handle all nodes, i.e., act globally on\nthe entire tree, or to handle only a specific root node, i.e., act locally on a\nsubtree.\nThe following property can be used to configure the default comparer for an entire\ntree:"},{tagname:"para",content:'<dl id="tree_layout_incremental-263-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_incremental-263-term-001"><api-link id="tree_layout_incremental-263-api-link-002" data-member="defaultOutEdgeComparer" data-text="defaultOutEdgeComparer" data-type="yfiles.tree.TreeLayout"></api-link></dt><dd id="tree_layout_incremental-263-listitem-001">\n<p id="tree_layout_incremental-263-simpara-003">Sets the default <api-link id="tree_layout_incremental-263-api-link-003" data-member="" data-text="IComparer&lt;T&gt;" data-type="yfiles.collections.IComparer"></api-link> implementation for a tree.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layout_incremental-263-simpara-004",content:'<a href="#/dguide/tab_tree_layout_keys_out_edge_comparers">Comparers individually for each subtree</a>\ncan be specified by means of <a href="#/dguide/layout-layout_data">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"tree_layout_incremental-263-simpara-005",content:'Class DefaultNodePlacer provides a suitable default comparer that can\nconveniently be used to support incremental tree layout scenarios with\nsubtrees.\nThe comparer enables dynamic rearrangement of all child nodes in a given\nsubtree according to their relative coordinates.\n<a href="#/dguide/ex_tree_layout_incremental">Setup for incremental layout with TreeLayout</a> demonstrates the setup of\n<span class="api">TreeLayout</span> using the default node placer and port assignment\nimplementations, and additionally registering the default comparer from class\nDefaultNodePlacer.'},{tagname:"example",id:"ex_tree_layout_incremental",title:"Setup for incremental layout with TreeLayout",content:'<pre class="programlisting javascript" id="tree_layout_incremental-263-programlisting-001" language="javascript" format="linespecific"><code>// Create a TreeLayout object that uses default node placer and\r\n// port assignment implementations, i.e., classes DefaultNodePlacer and\r\n// DefaultPortAssignment, respectively.\r\nconst tl = new yfiles.tree.TreeLayout()\r\n// Register the comparer returned by class DefaultNodePlacer to take care of\r\n// the sequences of child nodes in each subtree.\r\ntl.defaultOutEdgeComparer = tl.defaultNodePlacer.createComparer()\n</code></pre>'}]},{tagname:"section",id:"tree_layout_port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_port_constraints-264-simpara-001",content:"Obeying port constraints for edges is part of the responsibilities of a node\nplacer implementation.\nA node placer determines:"},{tagname:"para",content:'<ul id="tree_layout_port_constraints-264-itemizedlist-001"><li id="tree_layout_port_constraints-264-listitem-001"><p id="tree_layout_port_constraints-264-simpara-002">the source ports of all edges that connect a subtree’s root node to its child\nnodes</p></li><li id="tree_layout_port_constraints-264-listitem-002"><p id="tree_layout_port_constraints-264-simpara-003">the target port of the edge that connects to the subtree’s root node</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tree_layout_port_constraints-264-simpara-004",content:'The predefined node placer implementations from package <api-link id="tree_layout_port_constraints-264-api-link-001" data-member="" data-text="yfiles.tree" data-type=""></api-link>\nobey both types of port constraints, weak and strong.\nThe port constraints can be specified for the <a href="#/dguide/tab_tree_layout_keys_source_port_constraints">source</a>\nas well as for the <a href="#/dguide/tab_tree_layout_keys_target_port_constraints">target</a> node for each edge by means of <a href="#/dguide/layout-layout_data">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"tree_layout_port_constraints-264-simpara-005",content:'By means of interface IPortAssignment the ports of all edges adjacent to a\ngiven tree node can be assigned.\nTo this end, method\n<api-link id="tree_layout_port_constraints-264-api-link-002" data-member="assignPorts(yfiles.layout.LayoutGraph,yfiles.algorithms.Node)" data-text="assignPorts" data-type="yfiles.tree.IPortAssignment"></api-link>\nis called immediately before a subtree’s node placer is invoked.\nObviously, assigning edge ports at a tree node is confined to the target port\nof the incoming edge from the parent node, and the source ports of all outgoing\nedges to child nodes.'}]},{tagname:"section",id:"tree_layout_node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_node_halos-265-simpara-001",content:'<span class="api">TreeLayout</span> by default supports node halos as soon as they are <a href="#/dguide/tab_tree_layout_keys_node_halos">declared</a> via <a href="#/dguide/layout-layout_data">layout data</a>.\nDuring layout calculation, it takes any specified additional padding around nodes\ninto consideration and keeps the areas clear of other graph elements.\nThe labels of a node and its adjacent edge segments are not affected and can still\nbe placed inside or cross the node’s halo.'}]},{tagname:"section",id:"tree_layout_multiparent",title:"Multi-parent Structures",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-001",content:'<span class="api">TreeLayout</span> provides special support for so-called multi-parent structures,\nwhere multiple nodes share both the same direct predecessor node(s) as well as the\nsame direct successor node(s).\nMulti-parent structures that are contained in group nodes are also supported.\nIt is important, however, that all nodes belonging to the same multi-parent structure\nare contained in the same group node.'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-002",content:"Technically, such a structure does not fit the very definition of a tree graph.\nNevertheless, it can be handled within the context of tree graphs very well.\nHowever, to properly detect and handle these structures, the special support needs\nto be explicitly enabled using the following property:"},{tagname:"para",content:'<dl id="tree_layout_multiparent-266-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_multiparent-266-term-001"><api-link id="tree_layout_multiparent-266-api-link-001" data-member="multiParentAllowed" data-text="multiParentAllowed" data-type="yfiles.tree.TreeLayout"></api-link></dt><dd id="tree_layout_multiparent-266-listitem-001">\n<p id="tree_layout_multiparent-266-simpara-003">Enables <span class="api">TreeLayout</span>’s special support for multi-parent structures.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-004",content:"The following figure shows a graph containing multi-parent structures (note the\nemphasis on the nodes).\nAll nodes belonging to such a structure are placed side by side.\nBy default, the edges incident to these nodes are routed using bus-style edge routing."},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-005",content:'Note that the two nodes at the root of the graph also constitute a multi-parent\nstructure: they share an "imaginary" direct predecessor.'},{tagname:"figure","class":"image",title:"Graph with multi-parent structures",id:"fig_tree_layout_multiparent","float":0,children:[{tagname:"img",src:"assets/tree_layout_multiparent.b8fb5261.jpg",alt:"#",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-006",content:'To configure layout and drawing options of a multi-parent structure, class <api-link id="tree_layout_multiparent-266-api-link-002" data-member="" data-text="MultiParentDescriptor" data-type="yfiles.tree.MultiParentDescriptor"></api-link>\ncan be used.\nFor example, the following options can be set:'},{tagname:"para",content:'<ul id="tree_layout_multiparent-266-itemizedlist-001"><li id="tree_layout_multiparent-266-listitem-002"><p id="tree_layout_multiparent-266-simpara-007">relative alignment of nodes within their layer</p></li><li id="tree_layout_multiparent-266-listitem-003"><p id="tree_layout_multiparent-266-simpara-008">preferred minimum distances</p></li><li id="tree_layout_multiparent-266-listitem-004"><p id="tree_layout_multiparent-266-simpara-009">different routing styles for edges</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-010",content:'A MultiParentDescriptor instance can be specified for the nodes of a multi-parent\nstructure by means of <a href="#/dguide/tab_tree_layout_keys_multi_parent_descriptor">layout data</a>.\nIt is important that all nodes belonging to the same multi-parent structure yield\nthe same descriptor instance.'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-011",content:"These options are available:"},{tagname:"para",content:'<dl id="tree_layout_multiparent-266-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_multiparent-266-term-002" class="title" role="title">Minimum Node Distance</dt><dt id="tree_layout_multiparent-266-term-003"><api-link id="tree_layout_multiparent-266-api-link-003" data-member="minimumNodeDistance" data-text="minimumNodeDistance" data-type="yfiles.tree.MultiParentDescriptor"></api-link></dt><dd id="tree_layout_multiparent-266-listitem-005">\n<p id="tree_layout_multiparent-266-simpara-012">Determines the minimum distance between the nodes of a multi-parent structure.</p>\n</dd>\n<dt id="tree_layout_multiparent-266-term-004" class="title" role="title">Minimum Bus Distance</dt><dt id="tree_layout_multiparent-266-term-005"><api-link id="tree_layout_multiparent-266-api-link-004" data-member="minimumBusDistance" data-text="minimumBusDistance" data-type="yfiles.tree.MultiParentDescriptor"></api-link></dt><dd id="tree_layout_multiparent-266-listitem-006">\n<p id="tree_layout_multiparent-266-simpara-013">Determines the minimum distance between the nodes of a multi-parent structure and\ntheir incident edges that are routed bus-style.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="classic_tree_vertical_alignment_api">\n<dt id="tree_layout_multiparent-266-term-006" class="title" role="title">Vertical Alignment</dt><dt id="tree_layout_multiparent-266-term-007"><api-link id="tree_layout_multiparent-266-api-link-005" data-member="verticalAlignment" data-text="verticalAlignment" data-type="yfiles.tree.MultiParentDescriptor"></api-link></dt><dd id="tree_layout_multiparent-266-listitem-007">\n<p id="tree_layout_multiparent-266-simpara-014">Determines the vertical alignment of the nodes of a multi-parent structure within their layer.\nValues can be set from 0.0 (top) to 1.0 (bottom).\nSee also <a href="#/dguide/fig_tree_layout_multiparent_vertical_alignment">Vertical alignment of the nodes of a multi-parent structure</a>.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Vertical alignment of the nodes of a multi-parent structure",id:"fig_tree_layout_multiparent_vertical_alignment","float":0,children:[{tagname:"img",src:"assets/tree_layout_mp_valign_top.5b8acf23.jpg",alt:"",title:'<para class="dguide-para">Aligned at the top with Vertical Alignment = <code>0.0</code></para>'},{tagname:"img",src:"assets/tree_layout_mp_valign_middle.efc43cdd.jpg",alt:"",title:'<para class="dguide-para">... in the middle with Vertical Alignment = <code>0.5</code></para>'},{tagname:"img",src:"assets/tree_layout_mp_valign_bottom.17b5178b.jpg",alt:"",title:'<para class="dguide-para">... at the bottom with Vertical Alignment = <code>1.0</code></para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-015",content:"The routing style of the edges incident to nodes of the multi-parent structure can\nbe configured through the following property:"},{tagname:"para",content:'<dl id="tree_layout_multiparent-266-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="tree_layout_multiparent-266-term-008"><api-link id="tree_layout_multiparent-266-api-link-006" data-member="edgeStyle" data-text="edgeStyle" data-type="yfiles.tree.MultiParentDescriptor"></api-link></dt><dd id="tree_layout_multiparent-266-listitem-008">\n<p id="tree_layout_multiparent-266-simpara-016">Configures the routing style for edges incident to the nodes of a multi-parent structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-017",content:"The following figure shows the different edge routing styles side by side:"},{tagname:"figure","class":"image",title:"Edge routing styles determined by the MultiParentDescriptor",id:"fig_tree_layout_multiparent_edge_routing","float":0,children:[{tagname:"img",src:"assets/tree_layout_mp_orthogonal.d9a255d1.jpg",alt:"",title:'<para class="dguide-para">Orthogonal edge routing (with rounded bends).</para>'},{tagname:"img",src:"assets/tree_layout_mp_polyline.3b545f09.jpg",alt:"",title:'<para class="dguide-para">Polyline edge routing.</para>'},{tagname:"img",src:"assets/tree_layout_mp_straightline.4142a053.jpg",alt:"",title:'<para class="dguide-para">Straight-line edge routing.</para>'}]},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-018",content:'It is important to note that the routes of edges incident to the nodes of multi-parent\nstructures are only half-way determined by the routing style configured in the MultiParentDescriptor.\nThe other half is under the control of the actual NodePlacer implementation that\nis used by <span class="api">TreeLayout</span>.'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-019",content:'With regard to edge routing, NodePlacer implementation <api-link id="tree_layout_multiparent-266-api-link-007" data-member="" data-text="DefaultNodePlacer" data-type="yfiles.tree.DefaultNodePlacer"></api-link>\nyields the best results in conjunction with multi-parent structures.\nMulti-parent support also harmonizes well with <api-link id="tree_layout_multiparent-266-api-link-008" data-member="" data-text="BusNodePlacer" data-type="yfiles.tree.BusNodePlacer"></api-link>,\n<api-link id="tree_layout_multiparent-266-api-link-009" data-member="" data-text="LeftRightNodePlacer" data-type="yfiles.tree.LeftRightNodePlacer"></api-link>, and <api-link id="tree_layout_multiparent-266-api-link-010" data-member="" data-text="DendrogramNodePlacer" data-type="yfiles.tree.DendrogramNodePlacer"></api-link>.\nHowever, the following options of DefaultNodePlacer are not supported in conjunction\nwith multi-parent structures:'},{tagname:"para",content:'<ul id="tree_layout_multiparent-266-itemizedlist-002"><li id="tree_layout_multiparent-266-listitem-009"><p id="tree_layout_multiparent-266-simpara-020">routing style option ForkAtRoot</p></li><li id="tree_layout_multiparent-266-listitem-010"><p id="tree_layout_multiparent-266-simpara-021">root alignment options LeadingOnBus and TrailingOnBus</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tree_layout_multiparent-266-simpara-022",content:'Also with regard to edge routing, if port assignment implementations are registered\nfor the nodes of a multi-parent structure, certain aspects of <a href="#/dguide/layout-port_constraints">port constraint configuration</a>\nof the incident edges will be ignored in order to prevent situations where this\nwould lead to confusing (or even conflicting) edge routes in the resulting layout.\nIn particular, this applies to the direction specified by a port constraint of an\nincident edge: the edge is instead always routed in flow direction.\nNote that all nodes of a multi-parent structure should yield the same port assignment,\nif any.'}]},{tagname:"section",id:"tree_layout_dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_dataprovider-267-simpara-001",content:'When using class <span class="api">TreeLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="tree_layout_dataprovider-267-api-link-001" data-member="" data-text="TreeLayoutData" data-type="yfiles.tree.TreeLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_tree_layout_keys">Supplemental layout data</a> lists all properties of\n<span class="api">TreeLayoutData</span> and the corresponding look-up keys that\n<span class="api">TreeLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"tree_layout_dataprovider-267-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tree_layout_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="tree_layout_dataprovider-267-thead-001"><tr id="tree_layout_dataprovider-267-row-001"><th id="tree_layout_dataprovider-267-entry-001" align="left" valign="top">\nTreeLayoutData Property\n</th><th id="tree_layout_dataprovider-267-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="tree_layout_dataprovider-267-entry-003" align="left" valign="top">\nElement Type\n</th><th id="tree_layout_dataprovider-267-entry-004" align="left" valign="top">\nValue Type\n</th><th id="tree_layout_dataprovider-267-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tree_layout_dataprovider-267-tbody-001"><tr id="tree_layout_dataprovider-267-row-002"><td id="tree_layout_dataprovider-267-entry-006" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-003"><anchor id="tab_tree_layout_keys_custom_groups" xreflabel="[tab_tree_layout_keys_custom_groups]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-007" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-004"><api-link id="tree_layout_dataprovider-267-api-link-002" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-008" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-005">node</para></td><td id="tree_layout_dataprovider-267-entry-009" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-006">boolean</para></td><td id="tree_layout_dataprovider-267-entry-010" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-007">For each node a boolean value indicating whether it is a group node or not.</para></td></tr><tr id="tree_layout_dataprovider-267-row-003"><td id="tree_layout_dataprovider-267-entry-011" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-008"><anchor id="tab_tree_layout_keys_node_ids" xreflabel="[tab_tree_layout_keys_node_ids]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-012" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-009"><api-link id="tree_layout_dataprovider-267-api-link-003" data-member="NODE_ID_DP_KEY" data-text="NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-013" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-010">node</para></td><td id="tree_layout_dataprovider-267-entry-014" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-011">Object</para></td><td id="tree_layout_dataprovider-267-entry-015" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-012">For each node an Object that serves as a unique ID.</para></td></tr><tr id="tree_layout_dataprovider-267-row-004"><td id="tree_layout_dataprovider-267-entry-016" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-013"><anchor id="tab_tree_layout_keys_parent_node_ids" xreflabel="[tab_tree_layout_keys_parent_node_ids]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-017" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-014"><api-link id="tree_layout_dataprovider-267-api-link-004" data-member="PARENT_NODE_ID_DP_KEY" data-text="PARENT_NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-018" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-015">node</para></td><td id="tree_layout_dataprovider-267-entry-019" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-016">Object</para></td><td id="tree_layout_dataprovider-267-entry-020" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-017">For each node an Object indicating the group node it belongs to.\nThe Object matches the unique ID of a group node that is in the same graph.</para></td></tr><tr id="tree_layout_dataprovider-267-row-005"><td id="tree_layout_dataprovider-267-entry-021" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-018"><anchor id="tab_tree_layout_keys_group_node_insets" xreflabel="[tab_tree_layout_keys_group_node_insets]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-022" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-019"><api-link id="tree_layout_dataprovider-267-api-link-005" data-member="GROUP_NODE_INSETS_DP_KEY" data-text="GROUP_NODE_INSETS_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-023" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-020">Node</para></td><td id="tree_layout_dataprovider-267-entry-024" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-021"><span class="api">Insets</span></para></td><td id="tree_layout_dataprovider-267-entry-025" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-022">For each group node an <api-link id="tree_layout_dataprovider-267-api-link-006" data-member="" data-text="Insets" data-type="yfiles.algorithms.Insets"></api-link> object that encodes the group node’s insets.</para></td></tr><tr id="tree_layout_dataprovider-267-row-006"><td id="tree_layout_dataprovider-267-entry-026" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-023"><anchor id="tab_tree_layout_keys_minimum_node_size" xreflabel="[tab_tree_layout_keys_minimum_node_size]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-027" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-024"><api-link id="tree_layout_dataprovider-267-api-link-007" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-028" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-025">node</para></td><td id="tree_layout_dataprovider-267-entry-029" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-026"><span class="api">YDimension</span></para></td><td id="tree_layout_dataprovider-267-entry-030" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-027">For each group node a <api-link id="tree_layout_dataprovider-267-api-link-008" data-member="" data-text="YDimension" data-type="yfiles.algorithms.YDimension"></api-link> object that specifies the group node’s minimum size constraint.</para></td></tr><tr id="tree_layout_dataprovider-267-row-007"><td id="tree_layout_dataprovider-267-entry-031" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-028"><anchor id="tab_tree_layout_keys_out_edge_comparers" xreflabel="[tab_tree_layout_keys_out_edge_comparers]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-009" data-member="outEdgeComparers" data-text="outEdgeComparers" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-032" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-029"><api-link id="tree_layout_dataprovider-267-api-link-010" data-member="OUT_EDGE_COMPARER_DP_KEY" data-text="OUT_EDGE_COMPARER_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-033" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-030">node</para></td><td id="tree_layout_dataprovider-267-entry-034" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-031">Comparer</para></td><td id="tree_layout_dataprovider-267-entry-035" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-032">For each node a <api-link id="tree_layout_dataprovider-267-api-link-011" data-member="" data-text="IComparer&lt;T&gt;" data-type="yfiles.collections.IComparer"></api-link> that is used to sort the outgoing edges.</para></td></tr><tr id="tree_layout_dataprovider-267-row-008"><td id="tree_layout_dataprovider-267-entry-036" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-033"><anchor id="tab_tree_layout_keys_edge_label_layout" xreflabel="[tab_tree_layout_keys_edge_label_layout]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-037" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-034"><api-link id="tree_layout_dataprovider-267-api-link-012" data-member="EDGE_LABEL_LAYOUT_DP_KEY" data-text="EDGE_LABEL_LAYOUT_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-038" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-035">edge</para></td><td id="tree_layout_dataprovider-267-entry-039" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-036">LabelLayoutData[]</para></td><td id="tree_layout_dataprovider-267-entry-040" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-037">For each edge an array of LabelLayoutData objects that encode size and preferred\nplacement for all labels of the edge.</para></td></tr><tr id="tree_layout_dataprovider-267-row-009"><td id="tree_layout_dataprovider-267-entry-041" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-038"><anchor id="tab_tree_layout_keys_node_label_layout" xreflabel="[tab_tree_layout_keys_node_label_layout]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-042" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-039"><api-link id="tree_layout_dataprovider-267-api-link-013" data-member="NODE_LABEL_LAYOUT_DP_KEY" data-text="NODE_LABEL_LAYOUT_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-043" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-040">node</para></td><td id="tree_layout_dataprovider-267-entry-044" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-041">LabelLayoutData[]</para></td><td id="tree_layout_dataprovider-267-entry-045" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-042">For each node an array of LabelLayoutData objects that encode size and preferred\nplacement for all labels of the node.</para></td></tr><tr id="tree_layout_dataprovider-267-row-010"><td id="tree_layout_dataprovider-267-entry-046" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-043"><anchor id="tab_tree_layout_keys_node_placers" xreflabel="[tab_tree_layout_keys_node_placers]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-014" data-member="nodePlacers" data-text="nodePlacers" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-047" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-044"><api-link id="tree_layout_dataprovider-267-api-link-015" data-member="NODE_PLACER_DP_KEY" data-text="NODE_PLACER_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-048" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-045">node</para></td><td id="tree_layout_dataprovider-267-entry-049" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-046">INodePlacer</para></td><td id="tree_layout_dataprovider-267-entry-050" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-047">For each node a <api-link id="tree_layout_dataprovider-267-api-link-016" data-member="" data-text="INodePlacer" data-type="yfiles.tree.INodePlacer"></api-link>\nimplementation that places the node itself and its subtree.</para></td></tr><tr id="tree_layout_dataprovider-267-row-011"><td id="tree_layout_dataprovider-267-entry-051" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-048"><anchor id="tab_tree_layout_keys_port_assignment" xreflabel="[tab_tree_layout_keys_port_assignment]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-017" data-member="portAssignments" data-text="portAssignments" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-052" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-049"><api-link id="tree_layout_dataprovider-267-api-link-018" data-member="PORT_ASSIGNMENT_DP_KEY" data-text="PORT_ASSIGNMENT_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-053" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-050">node</para></td><td id="tree_layout_dataprovider-267-entry-054" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-051">IPortAssignment</para></td><td id="tree_layout_dataprovider-267-entry-055" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-052">For each node a\n<api-link id="tree_layout_dataprovider-267-api-link-019" data-member="" data-text="IPortAssignment" data-type="yfiles.tree.IPortAssignment"></api-link> implementation\nthat assigns ports to the edges of a node.</para></td></tr><tr id="tree_layout_dataprovider-267-row-012"><td id="tree_layout_dataprovider-267-entry-056" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-053"><anchor id="tab_tree_layout_keys_critical_edge" xreflabel="[tab_tree_layout_keys_critical_edge]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-057" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-054"><api-link id="tree_layout_dataprovider-267-api-link-020" data-member="CRITICAL_EDGE_DP_KEY" data-text="CRITICAL_EDGE_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-058" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-055">edge</para></td><td id="tree_layout_dataprovider-267-entry-059" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-056">int</para></td><td id="tree_layout_dataprovider-267-entry-060" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-057">For each edge of a critical path a positive, non-zero integral value that indicates\nthe priority of the edge/the critical path.</para></td></tr><tr id="tree_layout_dataprovider-267-row-013"><td id="tree_layout_dataprovider-267-entry-061" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-058"><anchor id="tab_tree_layout_keys_source_port_constraints" xreflabel="[tab_tree_layout_keys_source_port_constraints]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-021" data-member="sourcePortConstraints" data-text="sourcePortConstraints" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-062" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-059"><api-link id="tree_layout_dataprovider-267-api-link-022" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-063" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-060">edge</para></td><td id="tree_layout_dataprovider-267-entry-064" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-061">PortConstraint</para></td><td id="tree_layout_dataprovider-267-entry-065" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-062">For each edge a PortConstraint object encoding its source end’s port\nconstraint.</para></td></tr><tr id="tree_layout_dataprovider-267-row-014"><td id="tree_layout_dataprovider-267-entry-066" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-063"><anchor id="tab_tree_layout_keys_target_port_constraints" xreflabel="[tab_tree_layout_keys_target_port_constraints]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-023" data-member="targetPortConstraints" data-text="targetPortConstraints" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-067" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-064"><api-link id="tree_layout_dataprovider-267-api-link-024" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-068" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-065">edge</para></td><td id="tree_layout_dataprovider-267-entry-069" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-066">PortConstraint</para></td><td id="tree_layout_dataprovider-267-entry-070" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-067">For each edge a PortConstraint object encoding its target end’s port\nconstraint.</para></td></tr><tr id="tree_layout_dataprovider-267-row-015"><td id="tree_layout_dataprovider-267-entry-071" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-068"><anchor id="tab_tree_layout_keys_node_halos" xreflabel="[tab_tree_layout_keys_node_halos]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-025" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-072" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-069"><api-link id="tree_layout_dataprovider-267-api-link-026" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-073" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-070">node</para></td><td id="tree_layout_dataprovider-267-entry-074" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-071">NodeHalo</para></td><td id="tree_layout_dataprovider-267-entry-075" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-072">A <api-link id="tree_layout_dataprovider-267-api-link-027" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo\nsizes at each side of a node.</para></td></tr><tr id="tree_layout_dataprovider-267-row-016"><td id="tree_layout_dataprovider-267-entry-076" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-073"><anchor id="tab_tree_layout_keys_multi_parent_descriptor" xreflabel="[tab_tree_layout_keys_multi_parent_descriptor]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-077" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-074"><api-link id="tree_layout_dataprovider-267-api-link-028" data-member="MULTI_PARENT_DESCRIPTOR_DP_KEY" data-text="MULTI_PARENT_DESCRIPTOR_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-078" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-075">node</para></td><td id="tree_layout_dataprovider-267-entry-079" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-076">MultiParentDescriptor</para></td><td id="tree_layout_dataprovider-267-entry-080" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-077">For each node of a multi-parent structure a <api-link id="tree_layout_dataprovider-267-api-link-029" data-member="" data-text="MultiParentDescriptor" data-type="yfiles.tree.MultiParentDescriptor"></api-link>\nobject that configures a number of options.</para></td></tr><tr id="tree_layout_dataprovider-267-row-017"><td id="tree_layout_dataprovider-267-entry-081" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-078"><anchor id="tab_tree_layout_keys_edge_bundle_descriptors" xreflabel="[tab_tree_layout_keys_edge_bundle_descriptors]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-030" data-member="edgeBundleDescriptors" data-text="TreeReductionStageData.edgeBundleDescriptors" data-type="yfiles.tree.TreeReductionStageData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-082" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-079"><api-link id="tree_layout_dataprovider-267-api-link-031" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-083" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-080">edge</para></td><td id="tree_layout_dataprovider-267-entry-084" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-081"><span class="api">EdgeBundleDescriptor</span></para></td><td id="tree_layout_dataprovider-267-entry-085" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-082">For each edge an <api-link id="tree_layout_dataprovider-267-api-link-032" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr><tr id="tree_layout_dataprovider-267-row-018"><td id="tree_layout_dataprovider-267-entry-086" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-083"><anchor id="tab_tree_layout_keys_tree_root" xreflabel="[tab_tree_layout_keys_tree_root]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-033" data-member="treeRoot" data-text="treeRoot" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-087" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-084"><api-link id="tree_layout_dataprovider-267-api-link-034" data-member="SELECTED_ROOT_DP_KEY" data-text="SELECTED_ROOT_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-088" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-085">node</para></td><td id="tree_layout_dataprovider-267-entry-089" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-086">boolean</para></td><td id="tree_layout_dataprovider-267-entry-090" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-087">A boolean value for marking the node that will be used as root node of the tree.</para></td></tr><tr id="tree_layout_dataprovider-267-row-019"><td id="tree_layout_dataprovider-267-entry-091" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-088"><anchor id="tab_tree_layout_keys_assistant_nodes" xreflabel="[tab_tree_layout_keys_assistant_nodes]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-035" data-member="assistantNodes" data-text="assistantNodes" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-092" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-089"><api-link id="tree_layout_dataprovider-267-api-link-036" data-member="ASSISTANT_NODE_DP_KEY" data-text="ASSISTANT_NODE_DP_KEY" data-type="yfiles.tree.AssistantNodePlacer"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-093" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-090">node</para></td><td id="tree_layout_dataprovider-267-entry-094" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-091">boolean</para></td><td id="tree_layout_dataprovider-267-entry-095" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-092">A boolean value for marking the nodes that will be placed as assistants.</para></td></tr><tr id="tree_layout_dataprovider-267-row-020"><td id="tree_layout_dataprovider-267-entry-096" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-093"><anchor id="tab_tree_layout_keys_delegating_node_placers_primary_nodes" xreflabel="[tab_tree_layout_keys_delegating_node_placers_primary_nodes]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-037" data-member="delegatingNodePlacersPrimaryNodes" data-text="delegatingNodePlacersPrimaryNodes" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-097" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-094"><api-link id="tree_layout_dataprovider-267-api-link-038" data-member="PRIMARY_NODES_DP_KEY" data-text="PRIMARY_NODES_DP_KEY" data-type="yfiles.tree.DelegatingNodePlacer"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-098" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-095">node</para></td><td id="tree_layout_dataprovider-267-entry-099" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-096">boolean</para></td><td id="tree_layout_dataprovider-267-entry-100" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-097">Nodes marked with <code>true</code> are placed left of the root and the remaining nodes are placed right of the root.</para></td></tr><tr id="tree_layout_dataprovider-267-row-021"><td id="tree_layout_dataprovider-267-entry-101" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-098"><anchor id="tab_tree_layout_keys_left_right_placers_left_nodes" xreflabel="[tab_tree_layout_keys_left_right_placers_left_nodes]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-039" data-member="leftRightPlacersLeftNodes" data-text="leftRightPlacersLeftNodes" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-102" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-099"><api-link id="tree_layout_dataprovider-267-api-link-040" data-member="LEFT_RIGHT_DP_KEY" data-text="LEFT_RIGHT_DP_KEY" data-type="yfiles.tree.LeftRightNodePlacer"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-103" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-100">node</para></td><td id="tree_layout_dataprovider-267-entry-104" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-101">boolean</para></td><td id="tree_layout_dataprovider-267-entry-105" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-102">Nodes marked with <code>true</code> are placed left of the bus and the remaining nodes are placed right of the bus.</para></td></tr><tr id="tree_layout_dataprovider-267-row-022"><td id="tree_layout_dataprovider-267-entry-106" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-103"><anchor id="tab_tree_layout_keys_grid_node_placer_row_indices" xreflabel="[tab_tree_layout_keys_grid_node_placer_row_indices]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-041" data-member="gridNodePlacerRowIndices" data-text="gridNodePlacerRowIndices" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-107" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-104"><api-link id="tree_layout_dataprovider-267-api-link-042" data-member="ROW_INDEX_DP_KEY" data-text="ROW_INDEX_DP_KEY" data-type="yfiles.tree.GridNodePlacer"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-108" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-105">node</para></td><td id="tree_layout_dataprovider-267-entry-109" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-106">integer</para></td><td id="tree_layout_dataprovider-267-entry-110" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-107">The index of the row the node should be placed in.</para></td></tr><tr id="tree_layout_dataprovider-267-row-023"><td id="tree_layout_dataprovider-267-entry-111" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-108"><anchor id="tab_tree_layout_keys_abort_handler" xreflabel="[tab_tree_layout_keys_abort_handler]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-043" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-112" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-109"><api-link id="tree_layout_dataprovider-267-api-link-044" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-113" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-110">graph</para></td><td id="tree_layout_dataprovider-267-entry-114" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-111">AbortHandler</para></td><td id="tree_layout_dataprovider-267-entry-115" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-112">An <api-link id="tree_layout_dataprovider-267-api-link-045" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="tree_layout_dataprovider-267-row-024"><td id="tree_layout_dataprovider-267-entry-116" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-113"><anchor id="tab_tree_layout_keys_node_order_comparable" xreflabel="[tab_tree_layout_keys_node_order_comparable]"></anchor> -</para></td><td id="tree_layout_dataprovider-267-entry-117" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-114"><api-link id="tree_layout_dataprovider-267-api-link-046" data-member="NODE_ORDER_COMPARABLE_DP_KEY" data-text="NODE_ORDER_COMPARABLE_DP_KEY" data-type="yfiles.tree.NodeOrderComparer"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-118" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-115">node</para></td><td id="tree_layout_dataprovider-267-entry-119" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-116">Comparable</para></td><td id="tree_layout_dataprovider-267-entry-120" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-117">For each subtree’s root the order of its child nodes.</para></td></tr><tr id="tree_layout_dataprovider-267-row-025"><td id="tree_layout_dataprovider-267-entry-121" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-118"><anchor id="tab_tree_layout_keys_critical_edge_priorities" xreflabel="[tab_tree_layout_keys_critical_edge_priorities]"></anchor><api-link id="tree_layout_dataprovider-267-api-link-047" data-member="criticalEdgePriorities" data-text="criticalEdgePriorities" data-type="yfiles.tree.TreeLayoutData"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-122" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-119"><api-link id="tree_layout_dataprovider-267-api-link-048" data-member="CRITICAL_EDGE_DP_KEY" data-text="CRITICAL_EDGE_DP_KEY" data-type="yfiles.tree.TreeLayout"></api-link></para></td><td id="tree_layout_dataprovider-267-entry-123" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-120">edge</para></td><td id="tree_layout_dataprovider-267-entry-124" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-121">integer</para></td><td id="tree_layout_dataprovider-267-entry-125" align="left" valign="top"><para class="dguide-para" id="tree_layout_dataprovider-267-simpara-122">The priority of critical edges. The layout tries to align each node pair that is connected by a critical edge (integer value > 0).</para></td></tr></tbody>'
}]},{tagname:"section",id:"tree_layout_tutorial",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"tree_layout_tutorial-268-simpara-001",content:'Tutorial demo application <a href="..\\..\\demos\\complete\\collapse\\index.html" target="blank" class="demo-link" title="Shows interactive collapsing and expanding of subtrees of a graph.">Collapsible Trees</a> uses\nthe default setup of <span class="api">TreeLayout</span> with the default node placer and port assignment\nimplementations.'}]}]},{tagname:"section",id:"balloon_layout",title:"Balloon Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout-269-simpara-001",content:'Class <api-link id="balloon_layout-269-api-link-001" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link> is a tree\nlayout algorithm that positions the subtrees rooted at a node in a radial fashion\naround that node.\nIt is ideally suited for huge trees (say, 10,000 nodes) since it computes fast\nlayouts that are quite compact.'},{tagname:"figure","class":"image",title:"Sample layout of a tree that contains 10,000 nodes",id:"balloon_layout-269-figure-001","float":0,children:[{tagname:"img",src:"assets/balloon_layout_2a.fe17471a.gif",alt:"balloon layout 2a",title:'<para class="dguide-para"></para>'}]},{tagname:"section",id:"balloon_layout_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout_options-270-simpara-001",content:'These options configure class <span class="api">BalloonLayout</span> in detail.'},{tagname:"para",content:'<dl id="balloon_layout_options-270-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_options-270-term-001"><api-link id="balloon_layout_options-270-api-link-001" data-member="rootNodePolicy" data-text="rootNodePolicy" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-001">\n<p id="balloon_layout_options-270-simpara-002">Determines which node should be used as root of the tree.\nAvailable options are:</p>\n<para><ul id="balloon_layout_options-270-itemizedlist-001"><li id="balloon_layout_options-270-listitem-002"><p id="balloon_layout_options-270-simpara-003"><api-link id="balloon_layout_options-270-api-link-002" data-member="DIRECTED_ROOT" data-text="DIRECTED_ROOT" data-type="yfiles.tree.RootNodePolicy"></api-link>\nChooses a node with indegree zero, if present.\nA good choice for directed rooted trees.</p></li><li id="balloon_layout_options-270-listitem-003"><p id="balloon_layout_options-270-simpara-004"><api-link id="balloon_layout_options-270-api-link-003" data-member="CENTER_ROOT" data-text="CENTER_ROOT" data-type="yfiles.tree.RootNodePolicy"></api-link>\nChooses the root such that the depth of the resulting tree gets minimized.</p></li><li id="balloon_layout_options-270-listitem-004"><p id="balloon_layout_options-270-simpara-005"><api-link id="balloon_layout_options-270-api-link-004" data-member="WEIGHTED_CENTER_ROOT" data-text="WEIGHTED_CENTER_ROOT" data-type="yfiles.tree.RootNodePolicy"></api-link>\nChooses the root such that the number of paths between any two nodes that\ntraverse the root is maximal.\nThis seems to be a natural root for undirected trees.</p></li></ul></para>\n</dd>\n<dt id="balloon_layout_options-270-term-002"><api-link id="balloon_layout_options-270-api-link-005" data-member="preferredRootWedge" data-text="preferredRootWedge" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-005">\n<p id="balloon_layout_options-270-simpara-006">This setting determines the angular range of the sector that will be reserved\naround the root node of the graph to accommodate the attached subtrees.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-003"><api-link id="balloon_layout_options-270-api-link-006" data-member="preferredChildWedge" data-text="preferredChildWedge" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-006">\n<p id="balloon_layout_options-270-simpara-007">This setting determines the angular range of the sector that will be reserved\nfor the children of a root node.\nThe possible angular range lies between 1 and 359.\nThe remaining angular range (360 minus x) will be automatically used to\naccommodate the edge that connects to the root node.\nThe smaller the chosen value, the more the impression that the nodes drive away\nfrom their root nodes and the center of the graph.\nGenerally speaking, the compactness of the layout will decrease with smaller\nvalues.\nVery small values will lead to layouts that consume a lot of space.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-004"><api-link id="balloon_layout_options-270-api-link-007" data-member="minimumEdgeLength" data-text="minimumEdgeLength" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-007">\n<p id="balloon_layout_options-270-simpara-008">Determines the minimal length of an edge.\nThe smaller the chosen value the more compact the resulting layout.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-005"><api-link id="balloon_layout_options-270-api-link-008" data-member="compactnessFactor" data-text="compactnessFactor" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-008">\n<p id="balloon_layout_options-270-simpara-009">This parameter influences the length of the tree edges as it is computed by the\nlayout algorithm.\nThe smaller the compactness factor, the shorter the tree-edges and the more\ncompact the overall layout.\nThe bigger the compactness factor, the more difficult, and hence slower, the\nlayout computation.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-006"><api-link id="balloon_layout_options-270-api-link-009" data-member="interleavedMode" data-text="interleavedMode" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-009">\n<p id="balloon_layout_options-270-simpara-010">Child nodes at the same parent tree node can be placed in an interleaving fashion.\nEspecially if some tree node has many child nodes and if they have similar sizes,\nthe diagram can become more compact.\nAvailable options are:</p>\n<para><ul id="balloon_layout_options-270-itemizedlist-002"><li id="balloon_layout_options-270-listitem-010"><p id="balloon_layout_options-270-simpara-011"><api-link id="balloon_layout_options-270-api-link-010" data-member="OFF" data-text="OFF" data-type="yfiles.tree.InterleavedMode"></api-link>\nDisables interleaved child node placement for all tree nodes.\nThis is the default setting.</p></li><li id="balloon_layout_options-270-listitem-011"><p id="balloon_layout_options-270-simpara-012"><api-link id="balloon_layout_options-270-api-link-011" data-member="ALL_NODES" data-text="ALL_NODES" data-type="yfiles.tree.InterleavedMode"></api-link>\nAt each tree node child nodes will be placed interleaved.</p></li><li id="balloon_layout_options-270-listitem-012"><p id="balloon_layout_options-270-simpara-013"><api-link id="balloon_layout_options-270-api-link-012" data-member="MARKED_NODES" data-text="MARKED_NODES" data-type="yfiles.tree.InterleavedMode"></api-link>\nEnables interleaved child node placement for a custom selection of tree nodes that\nis given by the user.\nThese nodes can be specified by means of <a href="#/dguide/tab_balloon_layout_keys_interleaved_nodes">layout data</a>,\notherwise a simple heuristic is used to decide for which\ntree node the child nodes should be placed interleaved.</p></li></ul></para>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Effects of interleaved child node placement",id:"fig_balloon_layout_interleaved","float":0,children:[{tagname:"img",src:"assets/balloon_layout_interleaved_off.0c248597.jpg",alt:"",title:'<para class="dguide-para">Tree layout by <api-link id="balloon_layout_options-270-api-link-013" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link> …​</para>'},{tagname:"img",src:"assets/balloon_layout_interleaved_all.9861e49c.jpg",alt:"",title:'<para class="dguide-para">…​ with interleaved child node placement enabled.</para>'}]},{tagname:"para","class":"dguide-para note",id:"balloon_layout_options-270-note-001",content:'<p id="balloon_layout_options-270-simpara-014">If there is enough space to place the child nodes of a tree node without\n      interleaving, they will be placed normally, even when "Interleaved Child\n      Node Placement" is enabled.</p>'},{tagname:"para",content:'<dl id="balloon_layout_options-270-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_options-270-term-007"><api-link id="balloon_layout_options-270-api-link-014" data-member="childAlignmentPolicy" data-text="childAlignmentPolicy" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-013">\n<p id="balloon_layout_options-270-simpara-015">Determines the policy for aligning the child nodes at a tree node.\nAvailable options are:</p>\n<para><ul id="balloon_layout_options-270-itemizedlist-003"><li id="balloon_layout_options-270-listitem-014"><p id="balloon_layout_options-270-simpara-016"><api-link id="balloon_layout_options-270-api-link-015" data-member="PLAIN" data-text="PLAIN" data-type="yfiles.tree.ChildAlignmentPolicy"></api-link>\nChild nodes at the same parent tree node are aligned such that each child node has\nthe same border-to-border distance to the parent node.\nWhen interleaved child node placement is active, two different distances will be\nrealized.</p></li><li id="balloon_layout_options-270-listitem-015"><p id="balloon_layout_options-270-simpara-017"><api-link id="balloon_layout_options-270-api-link-016" data-member="SAME_CENTER" data-text="SAME_CENTER" data-type="yfiles.tree.ChildAlignmentPolicy"></api-link>\nChild nodes at the same parent tree node are aligned such that each child node has\nthe same center-to-center distance to the parent node.\nTherefore all nodes will be placed on one common radius around their root.\nWhen interleaved child node placement is active, two different radii will be realized.</p></li><li id="balloon_layout_options-270-listitem-016"><p id="balloon_layout_options-270-simpara-018"><api-link id="balloon_layout_options-270-api-link-017" data-member="COMPACT" data-text="COMPACT" data-type="yfiles.tree.ChildAlignmentPolicy"></api-link>\nChild nodes at the same parent tree node are aligned such that the resulting drawing\nwill be as compact as possible, not considering any symmetric constraints.\nThis is the default setting.</p></li><li id="balloon_layout_options-270-listitem-017"><p id="balloon_layout_options-270-simpara-019"><api-link id="balloon_layout_options-270-api-link-018" data-member="SMART" data-text="SMART" data-type="yfiles.tree.ChildAlignmentPolicy"></api-link>\nChild nodes at the same parent tree node are aligned using a heuristic for a well-balanced\nand symmetric layout.\nWhen interleaved child node placement is active, plain alignment will be used instead\nof the heuristic.</p></li></ul></para>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Child node alignment policies",id:"fig_balloon_layout_child_alignment","float":0,children:[{tagname:"img",src:"assets/balloon_layout_child_alignment_plain.634996b3.jpg",alt:"",title:'<para class="dguide-para">Child node aligment plain…​</para>'},{tagname:"img",src:"assets/balloon_layout_child_alignment_radius.811acc3e.jpg",alt:"",title:'<para class="dguide-para">...same center…​</para>'},{tagname:"img",src:"assets/balloon_layout_child_alignment_compact.81dd2234.jpg",alt:"",title:'<para class="dguide-para">...compact.</para>'}]},{tagname:"para",content:'<dl id="balloon_layout_options-270-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_options-270-term-008"><api-link id="balloon_layout_options-270-api-link-019" data-member="chainStraighteningMode" data-text="chainStraighteningMode" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-018">\n<p id="balloon_layout_options-270-simpara-020">If activated, all nodes in a chain will be placed on a straight line.\nThis may lead to smoother and more symmetric layouts.\nBy default, this feature is turned off.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-009"><api-link id="balloon_layout_options-270-api-link-020" data-member="allowOverlaps" data-text="allowOverlaps" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-019">\n<p id="balloon_layout_options-270-simpara-021">If activated, this option further increases compactness of the resulting\nlayout, but potentially introduces slight node overlaps.</p>\n</dd>\n<dt id="balloon_layout_options-270-term-010"><api-link id="balloon_layout_options-270-api-link-021" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_options-270-listitem-020">\n<p id="balloon_layout_options-270-simpara-022">Enables node label-aware layout calculation.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"balloon_layout_integrated_labeling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-001",content:'Besides the generic labeling support as described in\n<a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, which is available with all yFiles layout\nalgorithms, <span class="api">BalloonLayout</span> additionally features integrated labeling.'},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-002",content:"Integrated labeling is available for node labels and edge labels.\nThey are taken into consideration when determining the positions for the nodes\nof the tree.\nWith this strategy it is guaranteed that no label will overlap other objects in\nthe diagram.\nIntegrated labeling can be enabled or disabled using the following properties:"},{tagname:"para",content:'<dl id="balloon_layout_integrated_labeling-271-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_integrated_labeling-271-term-001"><api-link id="balloon_layout_integrated_labeling-271-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dt id="balloon_layout_integrated_labeling-271-term-002"><api-link id="balloon_layout_integrated_labeling-271-api-link-002" data-member="integratedNodeLabeling" data-text="integratedNodeLabeling" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_integrated_labeling-271-listitem-001">\n<p id="balloon_layout_integrated_labeling-271-simpara-003">Determines whether integrated labeling is enabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-004",content:'See also <a href="#/dguide/label_placement-integrated_labeling">Integrated Labeling</a>.'},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-005",content:'Enabling the integrated node labeling support of class <span class="api">BalloonLayout</span> means that\neach node label will be placed and arranged by <span class="api">BalloonLayout</span> such that there are\nno overlaps of node labels with each other or with graph elements (other than their\nrespective node).'},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-006",content:'<span class="api">BalloonLayout</span> supports different node labeling policies that can be configured\nusing the\n<api-link id="balloon_layout_integrated_labeling-271-api-link-003" data-member="nodeLabelingPolicy" data-text="nodeLabelingPolicy" data-type="yfiles.tree.BalloonLayout"></api-link>\nproperty.\nThe following policies are available:'},{tagname:"para",content:'<dl id="balloon_layout_integrated_labeling-271-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_integrated_labeling-271-term-003"><api-link id="balloon_layout_integrated_labeling-271-api-link-004" data-member="HORIZONTAL" data-text="HORIZONTAL" data-type="yfiles.tree.NodeLabelingPolicy"></api-link></dt><dd id="balloon_layout_integrated_labeling-271-listitem-002">\n<p id="balloon_layout_integrated_labeling-271-simpara-007">Each node label will be placed at the center of its node, with horizontal orientation.\nMultiple node labels will be placed center aligned and stacked.</p>\n</dd>\n<dt id="balloon_layout_integrated_labeling-271-term-004"><api-link id="balloon_layout_integrated_labeling-271-api-link-005" data-member="RAY_LIKE" data-text="RAY_LIKE" data-type="yfiles.tree.NodeLabelingPolicy"></api-link></dt><dd id="balloon_layout_integrated_labeling-271-listitem-003">\n<p id="balloon_layout_integrated_labeling-271-simpara-008">Node labels of leaf nodes and node labels of nodes having exactly one successor\n(thus possibly forming a chain) will be oriented ray-like, i.e. with the same orientation\nas their node’s incoming edge.\nAdditionally, the node labels of leaf nodes will be placed outside of their node.\nMultiple, ray-like oriented node labels will be left aligned.\nNode labels of nodes having more than one successor will be placed at the center\nof their node, with horizontal orientation.\nAlso, node labels that do not use a "free" label model, will be placed this way.\nSee also <a href="#/dguide/p_balloon_layout_raylike">below</a>.\nThis is the default setting.</p>\n</dd>\n<dt id="balloon_layout_integrated_labeling-271-term-005"><api-link id="balloon_layout_integrated_labeling-271-api-link-006" data-member="RAY_LIKE_LEAVES" data-text="RAY_LIKE_LEAVES" data-type="yfiles.tree.NodeLabelingPolicy"></api-link></dt><dd id="balloon_layout_integrated_labeling-271-listitem-004">\n<p id="balloon_layout_integrated_labeling-271-simpara-009">Node labels of leaf nodes will be oriented ray-like, i.e. with the same orientation\nas their node’s incoming edge.\nAdditionally, these node labels will be placed outside of their node.\nOther node labels will be placed at the center of their node, with horizontal orientation.\nAlso, node labels that do not use a "free" label model, will be placed this way.\nSee also <a href="#/dguide/p_balloon_layout_raylike">below</a>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"p_balloon_layout_raylike",content:'Note that ray-like oriented node labels are only supported by integrated labeling\nfor node labels that use a "free" label model, e.g.,\n<api-link id="balloon_layout_integrated_labeling-271-api-link-007" data-member="" data-text="FreeNodeLabelModel" data-type="yfiles.graph.FreeNodeLabelModel"></api-link>.'},{tagname:"figure","class":"image",title:"Results with different Node Labeling policies",id:"fig_balloon_layout_node_labeling","float":0,children:[{tagname:"img",src:"assets/balloon_layout_nodelabels_raylike.148ba842.jpg",alt:"",title:'<para class="dguide-para">NODE_LABELING_RAYLIKE</para>'},{tagname:"img",src:"assets/balloon_layout_nodelabels_horizontal.4f3d03c3.jpg",alt:"",title:'<para class="dguide-para">NODE_LABELING_HORIZONTAL</para>'}]},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-011",content:'Enabling the integrated edge labeling support of class <span class="api">BalloonLayout</span> instructs\nthe algorithm to find optimal placements for edge labels such that there are no\noverlaps of edge labels with each other or with graph elements.\nIn addition, the edge labels are also oriented and arranged by <span class="api">BalloonLayout</span>.'},{tagname:"figure","class":"image",title:"Edge labeling",id:"fig_balloon_layout_edge_labeling","float":0,children:[{tagname:"img",src:"assets/balloon_layout_edge_labeling.c93ed0c5.jpg",alt:"",title:'<para class="dguide-para">Edge label placement where labels are configured with preferred placement atthe target node and on the right side of the edge.</para>'}]},{tagname:"para","class":"dguide-para",id:"balloon_layout_integrated_labeling-271-simpara-012",content:'Note that edge label placement configurations by means of the <a href="#/dguide/label_placement-preferred_placement">PreferredPlacementDescriptor</a>\nare currently only partially supported by the integrated edge labeling of <span class="api">BalloonLayout</span>.\nPlacement of the edge label at a specified preferred side of the edge can be guaranteed.\nPreferred placement of the edge label at the source node or target node, however,\ncannot be guaranteed entirely.'},{tagname:"para","class":"dguide-para tip",id:"balloon_layout_integrated_labeling-271-tip-001",content:'<p id="balloon_layout_integrated_labeling-271-simpara-013">Optimal label placement with integrated edge labeling can be achieved using\n<api-link id="balloon_layout_integrated_labeling-271-api-link-008" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\nas the label model for the edge labels.\nAs explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\nsuited in combination with integrated edge labeling and yields the best match for\na label location that is computed by <span class="api">BalloonLayout</span>.</p>'}]},{tagname:"section",id:"balloon_layout_incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout_incremental-272-simpara-001",content:'<span class="api">BalloonLayout</span> can be set to "layout from sketch" mode to provide support for\nincremental layout.\nIn this mode, a diagram’s current drawing is taken into account when\ncalculating a new layout.\nThe following property enables "layout from sketch" mode:'},{tagname:"para",content:'<dl id="balloon_layout_incremental-272-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="balloon_layout_incremental-272-term-001"><api-link id="balloon_layout_incremental-272-api-link-001" data-member="fromSketchMode" data-text="fromSketchMode" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="balloon_layout_incremental-272-listitem-001">\n<p id="balloon_layout_incremental-272-simpara-002">Enables "layout from sketch" mode.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"balloon_layout_node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout_node_halos-273-simpara-001",content:'<span class="api">BalloonLayout</span> by default supports node halos as soon as they are\ndeclared using <a href="#/dguide/tab_balloon_layout_keys_node_halos">layout data</a>.\nIt considers any specified additional padding around nodes, however, due to the\nstraight-line routing of the edges, they can cross through these areas in the resulting\ndiagram.\nAlso, node halo overlaps may occur if option "Allow Overlaps" is activated.'}]},{tagname:"section",id:"balloon_layout_dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"balloon_layout_dataprovider-274-simpara-001",content:'When using class <span class="api">BalloonLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="balloon_layout_dataprovider-274-api-link-001" data-member="" data-text="BalloonLayoutData" data-type="yfiles.tree.BalloonLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/balloon_layout_keys">Supplemental layout data</a> lists all properties of\n<span class="api">BalloonLayoutData</span> and the corresponding look-up keys that\n<span class="api">BalloonLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"balloon_layout_dataprovider-274-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"balloon_layout_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="balloon_layout_dataprovider-274-thead-001"><tr id="balloon_layout_dataprovider-274-row-001"><th id="balloon_layout_dataprovider-274-entry-001" align="left" valign="top">\nBalloonLayoutData Property\n</th><th id="balloon_layout_dataprovider-274-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="balloon_layout_dataprovider-274-entry-003" align="left" valign="top">\nElement Type\n</th><th id="balloon_layout_dataprovider-274-entry-004" align="left" valign="top">\nValue Type\n</th><th id="balloon_layout_dataprovider-274-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="balloon_layout_dataprovider-274-tbody-001"><tr id="balloon_layout_dataprovider-274-row-002"><td id="balloon_layout_dataprovider-274-entry-006" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-003"><anchor id="tab_balloon_layout_keys_interleaved_nodes" xreflabel="[tab_balloon_layout_keys_interleaved_nodes]"></anchor><api-link id="balloon_layout_dataprovider-274-api-link-002" data-member="interleavedNodes" data-text="interleavedNodes" data-type="yfiles.tree.BalloonLayoutData"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-007" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-004"><api-link id="balloon_layout_dataprovider-274-api-link-003" data-member="INTERLEAVED_NODES_DP_KEY" data-text="INTERLEAVED_NODES_DP_KEY" data-type="yfiles.tree.BalloonLayout"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-008" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-005">node</para></td><td id="balloon_layout_dataprovider-274-entry-009" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-006">boolean</para></td><td id="balloon_layout_dataprovider-274-entry-010" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-007">For each node a boolean value indicating whether interleaved child node placement\nshould be enabled.</para></td></tr><tr id="balloon_layout_dataprovider-274-row-003"><td id="balloon_layout_dataprovider-274-entry-011" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-008"><anchor id="tab_balloon_layout_keys_node_halos" xreflabel="[tab_balloon_layout_keys_node_halos]"></anchor><api-link id="balloon_layout_dataprovider-274-api-link-004" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.tree.BalloonLayoutData"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-012" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-009"><api-link id="balloon_layout_dataprovider-274-api-link-005" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-013" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-010">node</para></td><td id="balloon_layout_dataprovider-274-entry-014" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-011">NodeHalo</para></td><td id="balloon_layout_dataprovider-274-entry-015" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-012">A <api-link id="balloon_layout_dataprovider-274-api-link-006" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo\nsizes at each side of a node.</para></td></tr><tr id="balloon_layout_dataprovider-274-row-004"><td id="balloon_layout_dataprovider-274-entry-016" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-013"><anchor id="tab_balloon_layout_keys_tree_root" xreflabel="[tab_balloon_layout_keys_tree_root]"></anchor><api-link id="balloon_layout_dataprovider-274-api-link-007" data-member="treeRoot" data-text="treeRoot" data-type="yfiles.tree.BalloonLayoutData"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-017" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-014"><api-link id="balloon_layout_dataprovider-274-api-link-008" data-member="SELECTED_ROOT_DP_KEY" data-text="SELECTED_ROOT_DP_KEY" data-type="yfiles.tree.BalloonLayout"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-018" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-015">node</para></td><td id="balloon_layout_dataprovider-274-entry-019" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-016">boolean</para></td><td id="balloon_layout_dataprovider-274-entry-020" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-017">A boolean value for marking the node that will be used as root node of the tree.</para></td></tr><tr id="balloon_layout_dataprovider-274-row-005"><td id="balloon_layout_dataprovider-274-entry-021" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-018"><anchor id="tab_balloon_layout_keys_edge_bundle_descriptor" xreflabel="[tab_balloon_layout_keys_edge_bundle_descriptor]"></anchor><api-link id="balloon_layout_dataprovider-274-api-link-009" data-member="edgeBundleDescriptors" data-text="TreeReductionStageData.edgeBundleDescriptors" data-type="yfiles.tree.TreeReductionStageData"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-022" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-019"><api-link id="balloon_layout_dataprovider-274-api-link-010" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-023" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-020">edge</para></td><td id="balloon_layout_dataprovider-274-entry-024" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-021"><span class="api">EdgeBundleDescriptor</span></para></td><td id="balloon_layout_dataprovider-274-entry-025" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-022">For each edge an <api-link id="balloon_layout_dataprovider-274-api-link-011" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr><tr id="balloon_layout_dataprovider-274-row-006"><td id="balloon_layout_dataprovider-274-entry-026" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-023"><anchor id="tab_balloon_layout_keys_abort_handler" xreflabel="[tab_balloon_layout_keys_abort_handler]"></anchor><api-link id="balloon_layout_dataprovider-274-api-link-012" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.tree.BalloonLayoutData"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-027" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-024"><api-link id="balloon_layout_dataprovider-274-api-link-013" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-028" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-025">graph</para></td><td id="balloon_layout_dataprovider-274-entry-029" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-026">AbortHandler</para></td><td id="balloon_layout_dataprovider-274-entry-030" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-027">An <api-link id="balloon_layout_dataprovider-274-api-link-014" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="balloon_layout_dataprovider-274-row-007"><td id="balloon_layout_dataprovider-274-entry-031" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-028"><anchor id="tab_tree_layout_keys_node_order_comparable" xreflabel="[tab_tree_layout_keys_node_order_comparable]"></anchor> -</para></td><td id="balloon_layout_dataprovider-274-entry-032" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-029"><api-link id="balloon_layout_dataprovider-274-api-link-015" data-member="NODE_ORDER_COMPARABLE_DP_KEY" data-text="NODE_ORDER_COMPARABLE_DP_KEY" data-type="yfiles.tree.NodeOrderComparer"></api-link></para></td><td id="balloon_layout_dataprovider-274-entry-033" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-030">node</para></td><td id="balloon_layout_dataprovider-274-entry-034" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-031">Comparable</para></td><td id="balloon_layout_dataprovider-274-entry-035" align="left" valign="top"><para class="dguide-para" id="balloon_layout_dataprovider-274-simpara-032">For each subtree’s root the order of its child nodes.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"ar_tree_layout",title:"Aspect Ratio Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"ar_tree_layout-275-simpara-001",content:'Class <api-link id="ar_tree_layout-275-api-link-001" data-member="" data-text="AspectRatioTreeLayout" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link> generates\ncompact orthogonal tree drawings.\nAs a layout constraint a preferred aspect ratio (relation of width to height)\ncan be given.\nThis is especially useful when the graph should fit perfectly on a page of\ngiven size.'},{tagname:"figure","class":"image",title:"Sample layouts of the same tree using different preferred aspect ratio settings",id:"ar_tree_layout-275-figure-001","float":0,children:[{tagname:"img",src:"assets/ar_tree_layout_3a_thumb.52aedfa0.gif",alt:"",title:'<para class="dguide-para">Using aspect ratio 2.0</para>'},{tagname:"img",src:"assets/ar_tree_layout_3b_thumb.b7043d6c.gif",alt:"",title:'<para class="dguide-para">Using aspect ratio 1.0</para>'},{tagname:"img",src:"assets/ar_tree_layout_3c_thumb.4f638026.gif",alt:"",title:'<para class="dguide-para">Using aspect ratio 0.5</para>'}]},{tagname:"section",id:"tab_ar_tree_layout_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"tab_ar_tree_layout_options-276-simpara-001",content:'These options configure class <span class="api">AspectRatioTreeLayout</span> in detail.'},{tagname:"para",content:'<dl id="tab_ar_tree_layout_options-276-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tab_ar_tree_layout_options-276-term-001" class="title" role="title">Horizontal Space</dt><dt id="tab_ar_tree_layout_options-276-term-002"><api-link id="tab_ar_tree_layout_options-276-api-link-001" data-member="horizontalDistance" data-text="horizontalDistance" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></dt><dd id="tab_ar_tree_layout_options-276-listitem-001">\n<p id="tab_ar_tree_layout_options-276-simpara-002">The minimal horizontal distance between adjacent nodes.</p>\n</dd>\n<dt id="tab_ar_tree_layout_options-276-term-003" class="title" role="title">Vertical Space</dt><dt id="tab_ar_tree_layout_options-276-term-004"><api-link id="tab_ar_tree_layout_options-276-api-link-002" data-member="verticalDistance" data-text="verticalDistance" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></dt><dd id="tab_ar_tree_layout_options-276-listitem-002">\n<p id="tab_ar_tree_layout_options-276-simpara-003">The minimal vertical distance between adjacent nodes.</p>\n</dd>\n<dt id="tab_ar_tree_layout_options-276-term-005" class="title" role="title">Bend Distance</dt><dt id="tab_ar_tree_layout_options-276-term-006"><api-link id="tab_ar_tree_layout_options-276-api-link-003" data-member="bendDistance" data-text="bendDistance" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></dt><dd id="tab_ar_tree_layout_options-276-listitem-003">\n<p id="tab_ar_tree_layout_options-276-simpara-004">Determines the preferred minimal distance between each two bends of an edge and\nbetween the first and last edges and the corresponding ports.</p>\n</dd>\n<dt id="tab_ar_tree_layout_options-276-term-007" class="title" role="title">Preferred Aspect Ratio</dt><dt id="tab_ar_tree_layout_options-276-term-008"><api-link id="tab_ar_tree_layout_options-276-api-link-004" data-member="aspectRatio" data-text="aspectRatio" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></dt><dd id="tab_ar_tree_layout_options-276-listitem-004">\n<p id="tab_ar_tree_layout_options-276-simpara-005">Determines the preferred aspect ratio (width by height) of the resulting\nlayout.\nThis option allows for creating layouts which, e.g., fit perfectly onto the\npage of a book.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"ar_tree_layout_dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"ar_tree_layout_dataprovider-277-simpara-001",content:'When using class <span class="api">AspectRatioTreeLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="ar_tree_layout_dataprovider-277-api-link-001" data-member="" data-text="AspectRatioTreeLayoutData" data-type="yfiles.tree.AspectRatioTreeLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_ar_tree_layout_keys">Supplemental layout data</a> lists all properties of\n<span class="api">AspectRatioTreeLayoutData</span> and the corresponding look-up keys that\n<span class="api">AspectRatioTreeLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"ar_tree_layout_dataprovider-277-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_ar_tree_layout_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="ar_tree_layout_dataprovider-277-thead-001"><tr id="ar_tree_layout_dataprovider-277-row-001"><th id="ar_tree_layout_dataprovider-277-entry-001" align="left" valign="top">\nAspectRatioTreeLayoutData Property\n</th><th id="ar_tree_layout_dataprovider-277-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="ar_tree_layout_dataprovider-277-entry-003" align="left" valign="top">\nElement Type\n</th><th id="ar_tree_layout_dataprovider-277-entry-004" align="left" valign="top">\nValue Type\n</th><th id="ar_tree_layout_dataprovider-277-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="ar_tree_layout_dataprovider-277-tbody-001"><tr id="ar_tree_layout_dataprovider-277-row-002"><td id="ar_tree_layout_dataprovider-277-entry-006" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-003"><anchor id="tab_ar_tree_layout_keys_subtree_aspect_ratios" xreflabel="[tab_ar_tree_layout_keys_subtree_aspect_ratios]"></anchor><api-link id="ar_tree_layout_dataprovider-277-api-link-002" data-member="subtreeAspectRatios" data-text="subtreeAspectRatios" data-type="yfiles.tree.AspectRatioTreeLayoutData"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-007" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-004"><api-link id="ar_tree_layout_dataprovider-277-api-link-003" data-member="SUBTREE_ASPECT_RATIO_DP_KEY" data-text="SUBTREE_ASPECT_RATIO_DP_KEY" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-008" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-005">node</para></td><td id="ar_tree_layout_dataprovider-277-entry-009" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-006">Number</para></td><td id="ar_tree_layout_dataprovider-277-entry-010" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-007">For each root node a Number object encapsulating a double value\nthat indicates the subtree’s aspect ratio.</para></td></tr><tr id="ar_tree_layout_dataprovider-277-row-003"><td id="ar_tree_layout_dataprovider-277-entry-011" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-008"><anchor id="tab_ar_tree_layout_keys_root_placements" xreflabel="[tab_ar_tree_layout_keys_root_placements]"></anchor><api-link id="ar_tree_layout_dataprovider-277-api-link-004" data-member="rootPlacements" data-text="rootPlacements" data-type="yfiles.tree.AspectRatioTreeLayoutData"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-012" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-009"><api-link id="ar_tree_layout_dataprovider-277-api-link-005" data-member="ROOT_PLACEMENT_DP_KEY" data-text="ROOT_PLACEMENT_DP_KEY" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-013" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-010">node</para></td><td id="ar_tree_layout_dataprovider-277-entry-014" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-011">Object</para></td><td id="ar_tree_layout_dataprovider-277-entry-015" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-012">For each root node one of\n<api-link id="ar_tree_layout_dataprovider-277-api-link-006" data-member="TOP" data-text="TOP" data-type="yfiles.tree.RootPlacement"></api-link>,\n<api-link id="ar_tree_layout_dataprovider-277-api-link-007" data-member="CORNER" data-text="CORNER" data-type="yfiles.tree.RootPlacement"></api-link>,\n<api-link id="ar_tree_layout_dataprovider-277-api-link-008" data-member="CORNER_SIDE" data-text="CORNER_SIDE" data-type="yfiles.tree.RootPlacement"></api-link>,\nor\n<api-link id="ar_tree_layout_dataprovider-277-api-link-009" data-member="CORNER_TOP" data-text="CORNER_TOP" data-type="yfiles.tree.RootPlacement"></api-link>\nto indicate the root node’s placement.</para></td></tr><tr id="ar_tree_layout_dataprovider-277-row-004"><td id="ar_tree_layout_dataprovider-277-entry-016" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-013"><anchor id="tab_ar_tree_layout_keys_subtree_routing_policies" xreflabel="[tab_ar_tree_layout_keys_subtree_routing_policies]"></anchor><api-link id="ar_tree_layout_dataprovider-277-api-link-010" data-member="subtreeRoutingPolicies" data-text="subtreeRoutingPolicies" data-type="yfiles.tree.AspectRatioTreeLayoutData"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-017" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-014"><api-link id="ar_tree_layout_dataprovider-277-api-link-011" data-member="SUBTREE_ROUTING_POLICY_DP_KEY" data-text="SUBTREE_ROUTING_POLICY_DP_KEY" data-type="yfiles.tree.AspectRatioTreeLayout"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-018" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-015">node</para></td><td id="ar_tree_layout_dataprovider-277-entry-019" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-016">Object</para></td><td id="ar_tree_layout_dataprovider-277-entry-020" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-017">For each root node either\n<api-link id="ar_tree_layout_dataprovider-277-api-link-012" data-member="HORIZONTAL" data-text="HORIZONTAL" data-type="yfiles.tree.SubtreeArrangement"></api-link>\nor\n<api-link id="ar_tree_layout_dataprovider-277-api-link-013" data-member="VERTICAL" data-text="VERTICAL" data-type="yfiles.tree.SubtreeArrangement"></api-link>\nto indicate horizontal or vertical edge routing.</para></td></tr><tr id="ar_tree_layout_dataprovider-277-row-005"><td id="ar_tree_layout_dataprovider-277-entry-021" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-018"><anchor id="tab_ar_tree_layout_keys_edge_bundle_descriptor" xreflabel="[tab_ar_tree_layout_keys_edge_bundle_descriptor]"></anchor><api-link id="ar_tree_layout_dataprovider-277-api-link-014" data-member="edgeBundleDescriptors" data-text="TreeReductionStageData.edgeBundleDescriptors" data-type="yfiles.tree.TreeReductionStageData"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-022" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-019"><api-link id="ar_tree_layout_dataprovider-277-api-link-015" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-023" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-020">edge</para></td><td id="ar_tree_layout_dataprovider-277-entry-024" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-021"><span class="api">EdgeBundleDescriptor</span></para></td><td id="ar_tree_layout_dataprovider-277-entry-025" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-022">For each edge an <api-link id="ar_tree_layout_dataprovider-277-api-link-016" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr><tr id="ar_tree_layout_dataprovider-277-row-006"><td id="ar_tree_layout_dataprovider-277-entry-026" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-023"><anchor id="tab_tree_layout_keys_node_order_comparable" xreflabel="[tab_tree_layout_keys_node_order_comparable]"></anchor> -</para></td><td id="ar_tree_layout_dataprovider-277-entry-027" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-024"><api-link id="ar_tree_layout_dataprovider-277-api-link-017" data-member="NODE_ORDER_COMPARABLE_DP_KEY" data-text="NODE_ORDER_COMPARABLE_DP_KEY" data-type="yfiles.tree.NodeOrderComparer"></api-link></para></td><td id="ar_tree_layout_dataprovider-277-entry-028" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-025">node</para></td><td id="ar_tree_layout_dataprovider-277-entry-029" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-026">Comparable</para></td><td id="ar_tree_layout_dataprovider-277-entry-030" align="left" valign="top"><para class="dguide-para" id="ar_tree_layout_dataprovider-277-simpara-027">For each subtree’s root the order of its child nodes.</para></td></tr></tbody>'}]}]}]},{tagname:"section",id:"treemap_layout",title:"Tree Map Layout",children:[{tagname:"para","class":"dguide-para",id:"treemap_layout-278-simpara-001",content:'Class <api-link id="treemap_layout-278-api-link-001" data-member="" data-text="TreeMapLayout" data-type="yfiles.tree.TreeMapLayout"></api-link> is a layout algorithm that allows to generate\n<strong id="treemap_layout-278-emphasis-001" class="bold" role="bold">tree maps</strong>. A tree map visualizes hierarchical data using nested rectangles, where the\nsize of a rectangle encodes a weight associated with it.'},{tagname:"para","class":"dguide-para",id:"treemap_layout-278-simpara-002",content:"Tree maps are useful to show the distribution of some dimension of data (weight) among the entities\nof a hierarchy while also showing the hierarchical relation.\nTree maps can, for example, be used to show a file structure on a hard disk, where the weight\nis the size of the files/folders."},{tagname:"figure","class":"image",title:"Sample layout by class TreeMapLayout. The node label text corresponds to the weight value of a node.",id:"treemap_layout_sample","float":0,children:[{tagname:"img",src:"assets/treemap_sample.8bfaf5c6.png",alt:"Sample tree map layout",title:'<para class="dguide-para"></para>'}]},{tagname:"section",id:"treemap_layout_terminology",title:"Terminology",children:[{tagname:"para","class":"dguide-para",id:"treemap_layout_terminology-279-simpara-001",content:"In terms of yFiles, the graphs' nodes correspond to the rectangles.\nEach node gets an area relative to the weight associated with it.\nThis means that the tree map layout algorithm actually changes the size of the nodes."},{tagname:"para","class":"dguide-para",id:"treemap_layout_terminology-279-simpara-002",content:"The hierarchical relation between nodes is visualized by placing child nodes inside their\nparent node."},{tagname:"para","class":"dguide-para",id:"treemap_layout_terminology-279-simpara-003",content:"In a tree map layout, edges are not important and are not routed but simply\nreset to a straight line."}]},{tagname:"section",id:"treemap_layout_input",title:"Input",children:[{tagname:"para","class":"dguide-para",id:"treemap_layout_input-280-simpara-001",content:'<span class="api">TreeMapLayout</span> supports two different kind of inputs to create a tree map layout:'},{tagname:"para",content:'<ol id="treemap_layout_input-280-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="treemap_layout_input-280-listitem-001"><p id="treemap_layout_input-280-simpara-002">A <strong id="treemap_layout_input-280-emphasis-001" class="bold" role="bold">hierarchic grouping structure</strong> that defines the nesting. Note that for group nodes,\nthe specified insets are considered. If the graph is a tree graph, then the grouping structure is ignored - see\nthe second input variant. To continue using the hierarchy information of the grouping structure on a tree graph,\none can temporarily hide the tree edges before running the layout.</p></li><li id="treemap_layout_input-280-listitem-002"><p id="treemap_layout_input-280-simpara-003">A <strong id="treemap_layout_input-280-emphasis-002" class="bold" role="bold">directed tree graph</strong>. The parent-child relation is taken from the graph’s tree structure.\nIf the graph also contains group nodes, the hierarchy relation induced by them is ignored.\nThe tree graph must be directed from the root node to the children. An undirected tree can\n(temporarily) be directed prior to the layout run; see <a href="#/dguide/analysis-trees">Trees</a> for instructions.\nAlso note that a forest is no valid input.</p></li></ol>'},{tagname:"section",id:"_defining_the_weight_of_nodes",title:"Defining the Weight of Nodes",children:[{tagname:"para","class":"dguide-para",id:"_defining_the_weight_of_nodes-281-simpara-001",content:'The weight of a node represents the central piece of input that defines how the tree map\nlooks like. The weight data is bound to the graph by means of a data provider or using class\n<api-link id="_defining_the_weight_of_nodes-281-api-link-001" data-member="" data-text="TreeMapLayoutData" data-type="yfiles.tree.TreeMapLayoutData"></api-link>. For details, see also Section <a href="#/dguide/treemap_layout_data">Layout Data</a>.'},{tagname:"para","class":"dguide-para",id:"_defining_the_weight_of_nodes-281-simpara-002",content:"Each leaf-node (node without further children) must get a positive weight value, otherwise\nthe input is not valid. Nodes that have children should for most use cases have a weight of zero.\nIf they get a positive weight value, the algorithm produces free space inside the\nnode rectangle with a size relative to the specified weight (i.e. the parent node is larger than the combined children)"},{tagname:"para","class":"dguide-para note",id:"_defining_the_weight_of_nodes-281-note-001",content:'<p id="_defining_the_weight_of_nodes-281-simpara-003">If the range of the provided weights is large, i.e., the difference\n      between the minimum and maximum weight value is large, then the resulting tree map might become really large\n      in size, making readability bad. The reason is that the relative weight differences need to be considered\n      while still satisfying the minimum node size for the nodes with low weight.\n      A solution would be to interpolate the weight values before running the layout to a more narrow range.</p>'}]}]},{tagname:"section",id:"treemap_layout_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"treemap_layout_options-282-simpara-001",content:"In the following, the most important options to configure the tree map layout are listed."},{tagname:"section",id:"_tiling_policy",title:"Tiling Policy",children:[{tagname:"para","class":"dguide-para",id:"_tiling_policy-283-simpara-001",content:'<api-link id="_tiling_policy-283-api-link-001" data-member="tilingPolicy" data-text="tilingPolicy" data-type="yfiles.tree.TreeMapLayout"></api-link> defines the main layout style because it\nspecifies how rectangles are placed within the available area of their parent rectangle.\nThe following different tiling policies are available:'},{tagname:"para",content:'<dl id="_tiling_policy-283-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_tiling_policy-283-term-001"><api-link id="_tiling_policy-283-api-link-002" data-member="SLICE_AND_DICE" data-text="SLICE_AND_DICE" data-type="yfiles.tree.TilingPolicy"></api-link></dt><dd id="_tiling_policy-283-listitem-001">\n<p id="_tiling_policy-283-simpara-002">Places the child nodes one after another inside the parent node.\n   Child nodes are either tiled vertically (slice), one on top of the other with the width equal to the\n   parent’s width. Or they are tiled horizontally (dice), one next to the other with the height equal to\n   the parent’s height. The tiling strategy alternates with the hierarchy levels, e.g., level 1 uses\n   slice, level 2 uses dice, level 3 uses slice and so on.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_tiling_policy-283-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_tiling_policy-283-term-002"><api-link id="_tiling_policy-283-api-link-003" data-member="SQUARIFIED" data-text="SQUARIFIED" data-type="yfiles.tree.TilingPolicy"></api-link></dt><dd id="_tiling_policy-283-listitem-002">\n<p id="_tiling_policy-283-simpara-003">This policy uses the so-called \'squarify\' algorithm.\nIt tries to generate nodes with a size close to the specified\n<api-link id="_tiling_policy-283-api-link-004" data-member="aspectRatio" data-text="aspectRatio" data-type="yfiles.tree.TreeMapLayout"></api-link>.\nThis increases the readability of the tree maps. The order is not strictly from top to bottom or from\nleft to right, but it might differ for different subsets of children.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_tiling_policy-283-simpara-004",content:'Figure <a href="#/dguide/treemap_layout_policies">Comparison of Tiling Policies</a> shows the difference between the two\ndescribed policies.'},{tagname:"figure","class":"image",title:"Comparison of Tiling Policies",id:"treemap_layout_policies","float":0,children:[{tagname:"img",src:"assets/treemap_policy_slice_and_dice.335877d4.png",alt:"",title:"<para class=\"dguide-para\">Tiling policy 'Slice-And-Dice'</para>"},{tagname:"img",src:"assets/treemap_policy_squarified.4a75be0b.png",alt:"",title:"<para class=\"dguide-para\">Tiling policy 'Squarified'</para>"}]}]},{tagname:"section",id:"_more_settings",title:"More Settings",children:[{tagname:"para","class":"dguide-para",id:"_more_settings-284-simpara-001",content:"There are several additional settings that allow to customize the style of the tree map\nto ones specific needs. See the following list for an overview and consult the respective\nAPI documentation for details."},{tagname:"para",content:'<ul id="_more_settings-284-itemizedlist-001"><li id="_more_settings-284-listitem-001"><p id="_more_settings-284-simpara-002"><api-link id="_more_settings-284-api-link-001" data-member="preferredSize" data-text="preferredSize" data-type="yfiles.tree.TreeMapLayout"></api-link></p></li><li id="_more_settings-284-listitem-002"><p id="_more_settings-284-simpara-003"><api-link id="_more_settings-284-api-link-002" data-member="minimumNodeSize" data-text="minimumNodeSize" data-type="yfiles.tree.TreeMapLayout"></api-link></p></li><li id="_more_settings-284-listitem-003"><p id="_more_settings-284-simpara-004"><api-link id="_more_settings-284-api-link-003" data-member="spacing" data-text="spacing" data-type="yfiles.tree.TreeMapLayout"></api-link></p></li><li id="_more_settings-284-listitem-004"><p id="_more_settings-284-simpara-005"><api-link id="_more_settings-284-api-link-004" data-member="nodeComparer" data-text="nodeComparer" data-type="yfiles.tree.TreeMapLayout"></api-link></p></li><li id="_more_settings-284-listitem-005"><p id="_more_settings-284-simpara-006"><api-link id="_more_settings-284-api-link-005" data-member="aspectRatio" data-text="aspectRatio" data-type="yfiles.tree.TreeMapLayout"></api-link></p></li></ul>'}]}]},{tagname:"section",id:"treemap_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"treemap_layout_data-285-simpara-001",content:'When using class <span class="api">TreeMapLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="treemap_layout_data-285-api-link-001" data-member="" data-text="TreeMapLayoutData" data-type="yfiles.tree.TreeMapLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_treemap_supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">TreeMapLayoutData</span> and the corresponding look-up keys that\n<span class="api">TreeMapLayout</span> tests during the layout process in order to query supplemental data.'},{tagname:"para","class":"dguide-para",id:"treemap_layout_data-285-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_treemap_supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="treemap_layout_data-285-thead-001"><tr id="treemap_layout_data-285-row-001"><th id="treemap_layout_data-285-entry-001" align="left" valign="top">\nTreeMapLayoutData Property\n</th><th id="treemap_layout_data-285-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="treemap_layout_data-285-entry-003" align="left" valign="top">\nElement Type\n</th><th id="treemap_layout_data-285-entry-004" align="left" valign="top">\nValue Type\n</th><th id="treemap_layout_data-285-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="treemap_layout_data-285-tbody-001"><tr id="treemap_layout_data-285-row-002"><td id="treemap_layout_data-285-entry-006" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-003"><anchor id="tab_treemap_layout_keys_node_weight" xreflabel="[tab_treemap_layout_keys_node_weight]"></anchor><api-link id="treemap_layout_data-285-api-link-002" data-member="nodeWeights" data-text="nodeWeights" data-type="yfiles.tree.TreeMapLayoutData"></api-link></para></td><td id="treemap_layout_data-285-entry-007" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-004"><api-link id="treemap_layout_data-285-api-link-003" data-member="NODE_WEIGHT_DP_KEY" data-text="NODE_WEIGHT_DP_KEY" data-type="yfiles.tree.TreeMapLayout"></api-link></para></td><td id="treemap_layout_data-285-entry-008" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-005">node</para></td><td id="treemap_layout_data-285-entry-009" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-006">number</para></td><td id="treemap_layout_data-285-entry-010" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-007">For each node a non-negative weight value (must be greater than zero for leaf nodes).</para></td></tr><tr id="treemap_layout_data-285-row-003"><td id="treemap_layout_data-285-entry-011" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-008"><anchor id="tab_treemap_layout_keys_abort_handler" xreflabel="[tab_treemap_layout_keys_abort_handler]"></anchor><api-link id="treemap_layout_data-285-api-link-004" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.tree.TreeMapLayoutData"></api-link></para></td><td id="treemap_layout_data-285-entry-012" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-009"><api-link id="treemap_layout_data-285-api-link-005" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="treemap_layout_data-285-entry-013" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-010">graph</para></td><td id="treemap_layout_data-285-entry-014" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-011">AbortHandler</para></td><td id="treemap_layout_data-285-entry-015" align="left" valign="top"><para class="dguide-para" id="treemap_layout_data-285-simpara-012">An <api-link id="treemap_layout_data-285-api-link-006" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried by the layout algorithm to determine whether\nlayout calculation shall be terminated.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"orthogonal_layout",title:"Orthogonal Layouts",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-286-simpara-001",content:'Class <api-link id="orthogonal_layout-286-api-link-001" data-member="" data-text="OrthogonalLayout" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link> is\na multi-purpose layout provider for undirected graphs.\nIt produces clear representations of complex networks and is especially fit for\napplication areas such as'},{tagname:"para",content:'<ul id="orthogonal_layout-286-itemizedlist-001"><li id="orthogonal_layout-286-listitem-001"><p id="orthogonal_layout-286-simpara-002">Software engineering</p></li><li id="orthogonal_layout-286-listitem-002"><p id="orthogonal_layout-286-simpara-003">Database schema</p></li><li id="orthogonal_layout-286-listitem-003"><p id="orthogonal_layout-286-simpara-004">System management</p></li><li id="orthogonal_layout-286-listitem-004"><p id="orthogonal_layout-286-simpara-005">Knowledge representation</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-286-simpara-006",content:"The orthogonal layout algorithm is based on the topology-shape-metrics approach\nand consists of three phases.\nIn the first phase the edge crossings in the drawing are calculated.\nThe second phase computes the bends in the drawing, in the third phase the\nfinal coordinates are determined."},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-286-simpara-007",content:"The layout algorithm is well suited for medium-sized sparse graphs.\nIt produces compact drawings with no overlaps, few crossings, and few bends."},{tagname:"figure","class":"image",title:"Sample layouts produced by class OrthogonalLayout",id:"orthogonal_layout-286-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_sample_uml.c2605b06.gif",alt:"",title:'<para class="dguide-para">UML class diagram representing a part of the layout interface of yFiles</para>'},{tagname:"img",src:"assets/orthogonal_sample_automaton.f6dd7c3f.gif",alt:"",title:'<para class="dguide-para">This diagram shows finite state automaton from an industrial application.</para>'}]},{tagname:"section",id:"orthogonal_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-options-287-simpara-001",content:'The global layout style of <span class="api">OrthogonalLayout</span> is set using the\n<api-link id="orthogonal_layout-options-287-api-link-001" data-member="layoutStyle" data-text="layoutStyle" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link> property.\nAvailable options are:'},{tagname:"para",content:'<dl id="orthogonal_layout-options-287-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout-options-287-term-001"><api-link id="orthogonal_layout-options-287-api-link-002" data-member="NORMAL" data-text="NORMAL" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-001">\n<p id="orthogonal_layout-options-287-simpara-002">Node sizes will not be changed by this layout algorithm.\nThe drawing will contain very few bends only.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-002"><api-link id="orthogonal_layout-options-287-api-link-003" data-member="UNIFORM" data-text="UNIFORM" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-002">\n<p id="orthogonal_layout-options-287-simpara-003">All node sizes will be changed to equal size before the graph is processed.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-003"><api-link id="orthogonal_layout-options-287-api-link-004" data-member="BOX" data-text="BOX" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-003">\n<p id="orthogonal_layout-options-287-simpara-004">Nodes are resized according to the number and position of their neighbors to\nreduce the overall number of bends.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-004"><api-link id="orthogonal_layout-options-287-api-link-005" data-member="MIXED" data-text="MIXED" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-004">\n<p id="orthogonal_layout-options-287-simpara-005">Resembles <span class="api">BOX</span>, but resizes all nodes to equal size.\nIntroduces additional bends and routes the last edge segment of these edges\nnon-orthogonally to their adjacent nodes.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-005"><api-link id="orthogonal_layout-options-287-api-link-006" data-member="FIXED_MIXED" data-text="FIXED_MIXED" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-005">\n<p id="orthogonal_layout-options-287-simpara-006">Proceeds similar to <span class="api">MIXED</span>, but maintains original node sizes.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-006"><api-link id="orthogonal_layout-options-287-api-link-007" data-member="FIXED_BOX" data-text="FIXED_BOX" data-type="yfiles.orthogonal.LayoutStyle"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-006">\n<p id="orthogonal_layout-options-287-simpara-007">Proceeds similar to <span class="api">BOX</span>, but maintains original node\nsizes.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Sample layouts for the available orthogonal layout styles",id:"orthogonal_layout-options-287-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_style_normal.f1d01a23.jpg",alt:"",title:'<para class="dguide-para"><span class="api">NORMAL</span></para>'},{tagname:"img",src:"assets/orthogonal_style_uniform.e6620e13.jpg",alt:"",title:'<para class="dguide-para"><span class="api">UNIFORM</span></para>'},{tagname:"img",src:"assets/orthogonal_style_node_boxes.fbb87aa3.jpg",alt:"",title:'<para class="dguide-para"><span class="api">BOX</span></para>'},{tagname:"img",src:"assets/orthogonal_style_mixed.b7b0ec1c.jpg",alt:"",title:'<para class="dguide-para"><span class="api">MIXED</span></para>'}]},{tagname:"para","class":"dguide-para important",id:"orthogonal_layout-options-287-important-001",content:'<p id="orthogonal_layout-options-287-simpara-008">The layout style settings will be ignored for <a href="#/dguide/orthogonal_layout-grouping">grouped graphs</a>\nand <a href="#/dguide/orthogonal_layout-directed">directed orthogonal layout</a>. Orthogonal layouts\nwith one of these features enabled always use <span class="api">NORMAL</span>.</p>'},{tagname:"para",content:'<dl id="orthogonal_layout-options-287-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout-options-287-term-007" class="title" role="title">Grid</dt><dt id="orthogonal_layout-options-287-term-008"><api-link id="orthogonal_layout-options-287-api-link-008" data-member="gridSpacing" data-text="gridSpacing" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-007">\n<p id="orthogonal_layout-options-287-simpara-009">Defines the virtual grid spacing used by the layout algorithm.\nEach node will be placed in such a way that its center point lies on a grid point.\nEdges will be routed in such a way that their segments lie on grid lines, if\nthe terminal nodes of the edges allow to place the ports accordingly.\nNote that this option is only guaranteed to be obeyed for <span class="api">LayoutStyle.NORMAL</span>,\nfor all other styles it is used as a hint only.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-009" class="title" role="title">Length Reduction</dt><dt id="orthogonal_layout-options-287-term-010"><api-link id="orthogonal_layout-options-287-api-link-009" data-member="edgeLengthReduction" data-text="edgeLengthReduction" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-008">\n<p id="orthogonal_layout-options-287-simpara-010">If enabled, the overall edge lengths will be reduced, often making layouts significantly more compact.\nThe cost for the reduction is an increased execution time of the layout algorithm.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-011" class="title" role="title">Optimize Perceived Bends</dt><dt id="orthogonal_layout-options-287-term-012"><api-link id="orthogonal_layout-options-287-api-link-010" data-member="optimizePerceivedBends" data-text="optimizePerceivedBends" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-009">\n<p id="orthogonal_layout-options-287-simpara-011">If enabled, avoids helical arrangement of chains of nodes.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-013" class="title" role="title">Crossing Postprocessing</dt><dt id="orthogonal_layout-options-287-term-014"><api-link id="orthogonal_layout-options-287-api-link-011" data-member="crossingReduction" data-text="crossingReduction" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-010">\n<p id="orthogonal_layout-options-287-simpara-012">If enabled, the overall number of edge crossings will be reduced.\nThe cost for the reduction is increased execution time of the layout algorithm (especially\nwhen the graph has many edge crossings).</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-015" class="title" role="title">Use Randomization</dt><dt id="orthogonal_layout-options-287-term-016"><api-link id="orthogonal_layout-options-287-api-link-012" data-member="randomization" data-text="randomization" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-011">\n<p id="orthogonal_layout-options-287-simpara-013">If enabled, the overall layout quality will increase with high probability.\nThe cost for this layout optimization is increased execution time and\nnon-deterministic results for subsequent layout invocations.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-017" class="title" role="title">Uniform Port Assignment</dt><dt id="orthogonal_layout-options-287-term-018"><api-link id="orthogonal_layout-options-287-api-link-013" data-member="uniformPortAssignment" data-text="uniformPortAssignment" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-012">\n<p id="orthogonal_layout-options-287-simpara-014">If enabled, the algorithm may insert additional bends in order to obtain a more\nuniform port assignment of edges incident to the same node side.</p>\n</dd>\n<dt id="orthogonal_layout-options-287-term-019" class="title" role="title">Maximum Duration</dt><dt id="orthogonal_layout-options-287-term-020"><api-link id="orthogonal_layout-options-287-api-link-014" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-013">\n<p id="orthogonal_layout-options-287-simpara-015">Specifies the preferred time limit in milliseconds. This setting is useful to\nrestrict the running time of orthogonal layout. If there is a time limit, the algorithm may automatically\ndisable some of the optimization settings mentioned above. Restricting the running time may result in a\nlower layout quality. Furthermore, the real runtime may exceed the specified maximum duration since\nthe layout algorithm still has to find a valid solution.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="orthogonal_layout-options-287-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout-options-287-term-021" class="title" role="title">Use Existing Drawing as Sketch</dt><dt id="orthogonal_layout-options-287-term-022"><api-link id="orthogonal_layout-options-287-api-link-015" data-member="fromSketchMode" data-text="fromSketchMode" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-014">\n<p id="orthogonal_layout-options-287-simpara-016">If enabled, the layout algorithm interprets the initial graph layout as a\nsketch for the desired outcome of the layout process. The layout algorithm will try to orthogonalize\nthe given sketch without making too many modifications with respect to the original drawing.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-options-287-simpara-017",content:'Class <api-link id="orthogonal_layout-options-287-api-link-016" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.orthogonal.EdgeLayoutDescriptor"></api-link> can be used to specify further edge-related layout options.\nAn instance of this class is held by <span class="api">OrthogonalLayout</span> to store and retrieve default\nvalues for edges.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-options-287-simpara-018",content:'<span class="api">OrthogonalLayout</span> provides access to the default EdgeLayoutDescriptor instance\nthrough:'},{tagname:"para",content:'<dl id="orthogonal_layout-options-287-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout-options-287-term-023" class="title" role="title">Edge Layout Descriptor</dt><dt id="orthogonal_layout-options-287-term-024"><api-link id="orthogonal_layout-options-287-api-link-017" data-member="edgeLayoutDescriptor" data-text="edgeLayoutDescriptor" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout-options-287-listitem-015">\n<p id="orthogonal_layout-options-287-simpara-019">Edge-related layout options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-options-287-simpara-020",content:'In addition to the instance held directly by <span class="api">OrthogonalLayout</span>, layout descriptors\ncan also be associated with single edges in order to specify individual settings for them.\nSetting individual descriptors for edges is done through <a href="#/dguide/tab_orthogonal_layout_keys_edge_layout_descriptors">layout data</a>.\nSee <a href="#/dguide/orthogonal_layout-related_classes">Related Classes</a>.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-options-287-simpara-021",content:'In addition to these options, <span class="api">OrthogonalLayout</span> by default also supports node halos\nas soon as they are declared using <a href="#/dguide/tab_orthogonal_layout_keys_node_halos">layout data</a>.'}]},{tagname:"section",id:"orthogonal_layout_labeling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout_labeling-288-simpara-001",content:'Integrated labeling is available for edge labels and can be used in conjunction with <span class="api">LayoutStyle.NORMAL</span>.\nThey are taken into consideration when determining both node placement and edge path generation.\nWith this strategy it is guaranteed that no edge label will overlap other objects in the diagram.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout_labeling-288-simpara-002",content:"Integrated labeling can be enabled or disabled using the following property:"},{tagname:"para",content:'<dl id="orthogonal_layout_labeling-288-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout_labeling-288-term-001"><api-link id="orthogonal_layout_labeling-288-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout_labeling-288-listitem-001">\n<p id="orthogonal_layout_labeling-288-simpara-003">Determines whether integrated labeling is enabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout_labeling-288-simpara-004",content:'See also <a href="#/dguide/label_placement-integrated_labeling">Integrated Labeling</a>.'},{tagname:"para","class":"dguide-para tip",id:"orthogonal_layout_labeling-288-tip-001",content:'<p id="orthogonal_layout_labeling-288-simpara-005">Optimal label placement with integrated labeling can be achieved using <api-link id="orthogonal_layout_labeling-288-api-link-002" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\nas the label model for the edges.\nAs explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\nsuited in combination with integrated labeling and yields the best match for a label\nlocation that is computed by <span class="api">OrthogonalLayout</span>.</p>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout_labeling-288-simpara-006",content:'<span class="api">OrthogonalLayout</span> provides support for node label-aware orthogonal layout.\nNode labels do not need to be placed, but instead their size needs to be considered\nfor the placement of adjacent graph elements.\nTaking node labels into consideration during layout calculation guarantees that\nthey will not overlap nodes in the diagram.'},{tagname:"para",content:'<dl id="orthogonal_layout_labeling-288-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout_labeling-288-term-002" class="title" role="title">Consider Node Labels</dt><dt id="orthogonal_layout_labeling-288-term-003"><api-link id="orthogonal_layout_labeling-288-api-link-003" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></dt><dd id="orthogonal_layout_labeling-288-listitem-002">\n<p id="orthogonal_layout_labeling-288-simpara-007">Enables node label-aware layout calculation.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"orthogonal_layout-grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-grouping-289-simpara-001",content:'The <span class="api">OrthogonalLayout</span> directly supports layout of grouped graphs. Both position\nand dimension of group nodes will be calculated by the algorithm.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-grouping-289-simpara-002",content:"Those parts of a graph that belong to the same group will be placed in a way\nthat they share a common rectangular area in the layout space.\nThe positions and sizes of these group nodes will be calculated by the algorithm."},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-grouping-289-simpara-003",content:"The layout algorithm is well suited for medium-sized sparse graphs.\nIt produces compact drawings with no overlaps, few crossings, and few bends."},{tagname:"figure","class":"image",title:"Sample group layouts produced by class OrthogonalLayout",id:"orthogonal_layout-grouping-289-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_grouped.e479ab61.jpg",alt:"",title:'<para class="dguide-para">A diagram with four groups and edges connecting nodes within these groups</para>'},{tagname:"img",src:"assets/orthogonal_grouped_groups.b8b38c40.jpg",alt:"",title:'<para class="dguide-para">A diagram with grouped groups</para>'}]},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-grouping-289-simpara-004",content:'Setup of a grouped graph’s hierarchy of nodes (using <span class="api">GROUP_DP_KEY</span>,\n<span class="api">NODE_ID_DP_KEY</span>,\n<span class="api">PARENT_NODE_ID_DP_KEY</span>,\n<span class="api">GROUP_NODE_INSETS_DP_KEY</span>, and\n<span class="api">MINIMUM_NODE_SIZE_DP_KEY</span>)\nis done transparently by the <span class="api">IGraph</span>-related adapter mechanisms.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.'},{tagname:"para","class":"dguide-para important",id:"orthogonal_layout-grouping-289-important-001",content:'<p id="orthogonal_layout-grouping-289-simpara-005">Some features like <a href="#/dguide/orthogonal_layout-directed">directed edges</a>,\n<a href="#/dguide/orthogonal_layout-substructures">substructures</a> and the from-sketch mode (see <a href="#/dguide/orthogonal_layout-options">Basic Options</a>)\nare not available in conjunction with grouped graphs.</p>'}]},{tagname:"section",id:"orthogonal_layout-substructures",title:"Substructure Support",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures-290-simpara-001",content:'<span class="api">OrthogonalLayout</span> is able to process several graph substructures in a specific\nway. The goal of this feature is to explicitly emphasize a certain structure by arranging it in\nan optimized fashion. Emphasizing such substructures can significantly improve the readability and clarity\nof orthogonal layouts. The user can choose among multiple styles for each type of substructure.\nConcretely, there is support for <strong id="orthogonal_layout-substructures-290-emphasis-001" class="bold" role="bold">tree</strong>, <strong id="orthogonal_layout-substructures-290-emphasis-002" class="bold" role="bold">chain</strong> and <strong id="orthogonal_layout-substructures-290-emphasis-003" class="bold" role="bold">cycle</strong> structures available.'},{tagname:"figure","class":"image",title:"Sample orthogonal layout featuring multiple substructures",id:"orthogonal_layout-substructures-290-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_substructures.b9a42908.jpg",alt:"",title:'<para class="dguide-para">The layout contains a chain, tree and cycle substructure which were all arranged explicitly using the substructure feature</para>'}]},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures-290-simpara-002",content:'Settings related to substructures and their styles are available directly on the\n<span class="api">OrthogonalLayout</span> instance.'},{tagname:"para","class":"dguide-para important",id:"orthogonal_layout-substructures-290-important-001",content:'<p id="orthogonal_layout-substructures-290-simpara-003">The substructure feature works in conjunction with <a href="#/dguide/orthogonal_layout-directed">directed edges</a> but\nis disabled if the graph is grouped. As soon as a data provider is registered under the key\n<api-link id="orthogonal_layout-substructures-290-api-link-001" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link>, the graph is considered grouped. This is the case\nfor grouped graphs if the IGraph-related adapter mechanisms are used.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.</p>'},{tagname:"section",id:"orthogonal_layout-substructures_directedness",title:"Substructures - Edge Directedness",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_directedness-291-simpara-001",content:'It is possible to define the directedness of an edge for the detection of substructures via\nthe layout data property <api-link id="orthogonal_layout-substructures_directedness-291-api-link-001" data-member="edgeDirectedness" data-text="edgeDirectedness" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link>. It allows to\nspecify the directedness as a floating point value that is interpreted as follows:'},{tagname:"para",content:'<ul id="orthogonal_layout-substructures_directedness-291-itemizedlist-001"><li id="orthogonal_layout-substructures_directedness-291-listitem-001"><p id="orthogonal_layout-substructures_directedness-291-simpara-002">0: undirected edge</p></li><li id="orthogonal_layout-substructures_directedness-291-listitem-002"><p id="orthogonal_layout-substructures_directedness-291-simpara-003">1: edge is directed from the source to the target node</p></li><li id="orthogonal_layout-substructures_directedness-291-listitem-003"><p id="orthogonal_layout-substructures_directedness-291-simpara-004">-1: edge is directed from the target to the source node (reverse directed)</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_directedness-291-simpara-005",content:"The directedness feature enables more control about which structures the algorithm should handle explicitly.\nA substructure is only detected as such if all edges are either undirected or consistently directed with respect\nto the direction value. If no custom directedness is specified, an edge is considered to be undirected."},{tagname:"para","class":"dguide-para important",id:"orthogonal_layout-substructures_directedness-291-important-001",content:'<p id="orthogonal_layout-substructures_directedness-291-simpara-006">The edge directedness must not be confused with the <a href="#/dguide/orthogonal_layout-directed">Directed Edge Drawings</a> feature. The directedness value\nis solely used in conjunction with the detection of substructures.</p>'}]},{tagname:"section",id:"orthogonal_layout-substructures_trees",title:"Tree Substructures",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_trees-292-simpara-001",content:"Tree substructure"},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_trees-292-simpara-002",content:'The available styles for tree substructures are shown in the following figures. The style is configured by using\nproperty <api-link id="orthogonal_layout-substructures_trees-292-api-link-001" data-member="treeStyle" data-text="treeStyle" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link>.'},{tagname:"figure","class":"image",title:"Comparison of the different tree layout styles (same input graph for all results)",id:"orthogonal_layout-substructures_trees-292-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_tree_style_none.5e03b744.jpg",alt:"",title:'<para class="dguide-para">Trees not handled explicitly (style <api-link id="orthogonal_layout-substructures_trees-292-api-link-002" data-member="NONE" data-text="NONE" data-type="yfiles.orthogonal.TreeLayoutStyle"></api-link>)</para>'},{tagname:"img",src:"assets/orthogonal_tree_style_default.58f0f17e.jpg",alt:"",title:'<para class="dguide-para">Tree style <api-link id="orthogonal_layout-substructures_trees-292-api-link-003" data-member="DEFAULT" data-text="DEFAULT" data-type="yfiles.orthogonal.TreeLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_tree_style_integrated.717314bd.jpg",alt:"",title:'<para class="dguide-para">Tree style <api-link id="orthogonal_layout-substructures_trees-292-api-link-004" data-member="INTEGRATED" data-text="INTEGRATED" data-type="yfiles.orthogonal.TreeLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_tree_style_compact.713827ce.jpg",alt:"",title:'<para class="dguide-para">Tree style <api-link id="orthogonal_layout-substructures_trees-292-api-link-005" data-member="COMPACT" data-text="COMPACT" data-type="yfiles.orthogonal.TreeLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_tree_style_ar.319ba281.jpg",alt:"",title:'<para class="dguide-para">Tree style <api-link id="orthogonal_layout-substructures_trees-292-api-link-006" data-member="ASPECT_RATIO" data-text="ASPECT_RATIO" data-type="yfiles.orthogonal.TreeLayoutStyle"></api-link></para>'}]},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_trees-292-simpara-003",content:"Other settings with respect to tree substructures are (see API documentation for more details):"},{tagname:"para",content:'<ul id="orthogonal_layout-substructures_trees-292-itemizedlist-001"><li id="orthogonal_layout-substructures_trees-292-listitem-001"><p id="orthogonal_layout-substructures_trees-292-simpara-004"><api-link id="orthogonal_layout-substructures_trees-292-api-link-007" data-member="treeSize" data-text="treeSize" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></p></li><li id="orthogonal_layout-substructures_trees-292-listitem-002"><p id="orthogonal_layout-substructures_trees-292-simpara-005"><api-link id="orthogonal_layout-substructures_trees-292-api-link-008" data-member="treeOrientation" data-text="treeOrientation" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para tip",id:"orthogonal_layout-substructures_trees-292-tip-001",content:'<p id="orthogonal_layout-substructures_trees-292-simpara-006">The general style of the two tree layout styles <span class="api">DEFAULT</span>\nand <span class="api">INTEGRATED</span> is quite similar. The difference lies\nin the internal approach. For the default style, a dedicated tree layout algorithm is applied to the tree\nstructure and the computed layout is inserted into the orthogonal layout of the rest of the graph. In contrast,\nthe integrated approach models the tree style internally, using the orthogonal layout framework. The integrated\nstyle can in consequence lead to results where the overall layout is more homogeneous and the grid is perfectly\nconsidered, whereas the generic approach might yield more compact layouts where trees are easily\nrecognizable due to the highly different arrangement style.</p>'}]},{tagname:"section",id:"orthogonal_layout-substructures_chains",title:"Chain Substructures",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_chains-293-simpara-001",content:'The supported chain layout styles are depicted in the following figures. The style can be configured using\nproperty <api-link id="orthogonal_layout-substructures_chains-293-api-link-001" data-member="chainStyle" data-text="chainStyle" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link>.'},{tagname:"figure","class":"image",title:"Comparison of the different chain layout styles (same input graph for all results)",id:"orthogonal_layout-substructures_chains-293-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_chain_style_none.5042390f.jpg",alt:"",title:'<para class="dguide-para">Chains not handled explicitly (style <api-link id="orthogonal_layout-substructures_chains-293-api-link-002" data-member="NONE" data-text="NONE" data-type="yfiles.orthogonal.ChainLayoutStyle"></api-link>)</para>'},{tagname:"img",src:"assets/orthogonal_chain_style_straight.ee57b92b.jpg",alt:"",title:'<para class="dguide-para">Chain style <api-link id="orthogonal_layout-substructures_chains-293-api-link-003" data-member="STRAIGHT" data-text="STRAIGHT" data-type="yfiles.orthogonal.ChainLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_chain_style_wrapped_at_nodes.d265d725.jpg",alt:"",title:'<para class="dguide-para">Chain style <api-link id="orthogonal_layout-substructures_chains-293-api-link-004" data-member="WRAPPED_WITH_NODES_AT_TURNS" data-text="WRAPPED_WITH_NODES_AT_TURNS" data-type="yfiles.orthogonal.ChainLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_chain_style_wrapped_at_edges.e09d8ea1.jpg",alt:"",title:'<para class="dguide-para">Chain style <api-link id="orthogonal_layout-substructures_chains-293-api-link-005" data-member="WRAPPED_WITH_BENDS_AT_TURNS" data-text="WRAPPED_WITH_BENDS_AT_TURNS" data-type="yfiles.orthogonal.ChainLayoutStyle"></api-link></para>'}]},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_chains-293-simpara-002",content:'Additionally, it is possible to define the minimum size (number of nodes) a chain needs to have in order to\nbe explicitly handled as a substructure by using property <api-link id="orthogonal_layout-substructures_chains-293-api-link-006" data-member="chainSize" data-text="chainSize" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link>.'}]},{tagname:"section",id:"orthogonal_layout-substructures_cycles",title:"Cycle Substructures",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_cycles-294-simpara-001",content:'The supported layout styles for cycle substructures are shown in the following figures.\nThe style is specified by using property <api-link id="orthogonal_layout-substructures_cycles-294-api-link-001" data-member="cycleStyle" data-text="cycleStyle" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link>.'},{tagname:"figure","class":"image",title:"Comparison of the different cycle layout styles (same input graph for all results)",id:"orthogonal_layout-substructures_cycles-294-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_cycle_style_none.d8735e0b.jpg",alt:"",title:'<para class="dguide-para">Cycles not handled explicitly (style <api-link id="orthogonal_layout-substructures_cycles-294-api-link-002" data-member="NONE" data-text="NONE" data-type="yfiles.orthogonal.CycleLayoutStyle"></api-link>)</para>'},{tagname:"img",src:"assets/orthogonal_cycle_style_circular_nodes_at_corners.c4972c44.jpg",alt:"",title:'<para class="dguide-para">Cycle style <api-link id="orthogonal_layout-substructures_cycles-294-api-link-003" data-member="CIRCULAR_WITH_NODES_AT_CORNERS" data-text="CIRCULAR_WITH_NODES_AT_CORNERS" data-type="yfiles.orthogonal.CycleLayoutStyle"></api-link></para>'},{tagname:"img",src:"assets/orthogonal_cycle_style_circular_bends_at_corners.91556859.jpg",alt:"",title:'<para class="dguide-para">Cycle style <api-link id="orthogonal_layout-substructures_cycles-294-api-link-004" data-member="CIRCULAR_WITH_BENDS_AT_CORNERS" data-text="CIRCULAR_WITH_BENDS_AT_CORNERS" data-type="yfiles.orthogonal.CycleLayoutStyle"></api-link></para>'}]},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-substructures_cycles-294-simpara-002",content:'It is also possible to define the minimum size (number of nodes) a cycle needs to have in order to\nbe explicitly handled as a substructure by using property <api-link id="orthogonal_layout-substructures_cycles-294-api-link-005" data-member="cycleSize" data-text="cycleSize" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link>.'}]}]},{tagname:"section",id:"orthogonal_layout-related_classes",title:"Related Classes",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-related_classes-295-simpara-001",content:'Class <api-link id="orthogonal_layout-related_classes-295-api-link-001" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.orthogonal.EdgeLayoutDescriptor"></api-link> can be used to configure edge-related layout options.\nThe following options can be set for edges:'},{tagname:"para",content:'<dl id="orthogonal_layout-related_classes-295-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="orthogonal_layout-related_classes-295-term-001"><api-link id="orthogonal_layout-related_classes-295-api-link-002" data-member="minimumFirstSegmentLength" data-text="minimumFirstSegmentLength" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dt id="orthogonal_layout-related_classes-295-term-002"><api-link id="orthogonal_layout-related_classes-295-api-link-003" data-member="minimumLastSegmentLength" data-text="minimumLastSegmentLength" data-type="yfiles.hierarchic.EdgeLayoutDescriptor"></api-link></dt><dd id="orthogonal_layout-related_classes-295-listitem-001">\n<p id="orthogonal_layout-related_classes-295-simpara-002">Determine the minimum length of the first (at the source) and last (at the target) edge segment.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-related_classes-295-simpara-003",content:'An <span class="api">EdgeLayoutDescriptor</span> instance can be specified individually for single edges\nby means of <a href="#/dguide/tab_orthogonal_layout_keys_edge_layout_descriptors">layout data</a>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeLayoutDescriptor</span>\ninstance that is registered with <span class="api">OrthogonalLayout</span> will be used.'}]},{tagname:"section",id:"orthogonal_layout-layout_stages",title:"Applicable Layout Stages",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-layout_stages-296-simpara-001",content:'<a href="#/dguide/tab_orthogonal_layout-layout_stages">Layout Stages</a> lists layout stages that can be used to\nenhance the layout process of class <span class="api">OrthogonalLayout</span>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_orthogonal_layout-layout_stages",rowsep:1,content:'<caption>Layout Stages</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><tbody id="orthogonal_layout-layout_stages-296-tbody-001"><tr id="orthogonal_layout-layout_stages-296-row-001"><td id="orthogonal_layout-layout_stages-296-entry-001" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-layout_stages-296-simpara-002">Class Name</para></td><td id="orthogonal_layout-layout_stages-296-entry-002" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-layout_stages-296-simpara-003">Description</para></td></tr><tr id="orthogonal_layout-layout_stages-296-row-002"><td id="orthogonal_layout-layout_stages-296-entry-003" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-layout_stages-296-simpara-004"><api-link id="orthogonal_layout-layout_stages-296-api-link-001" data-member="" data-text="PolylineLayoutStage" data-type="yfiles.router.PolylineLayoutStage"></api-link></para></td><td id="orthogonal_layout-layout_stages-296-entry-004" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-layout_stages-296-simpara-005">With class <span class="api">OrthogonalLayout</span> as the core layout algorithm, this stage adds octilinear\nedge routing to the diagram that results from the orthogonal layout calculation.</para></td></tr></tbody>'
}]},{tagname:"section",id:"orthogonal_layout-supplemental_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-supplemental_data-297-simpara-001",content:'When using class <span class="api">OrthogonalLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="orthogonal_layout-supplemental_data-297-api-link-001" data-member="" data-text="OrthogonalLayoutData" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_orthogonal_layout-supplemental_data">Supplemental layout data</a> lists all properties of\n<span class="api">OrthogonalLayoutData</span> and the corresponding look-up keys that\n<span class="api">OrthogonalLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-supplemental_data-297-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_orthogonal_layout-supplemental_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="orthogonal_layout-supplemental_data-297-thead-001"><tr id="orthogonal_layout-supplemental_data-297-row-001"><th id="orthogonal_layout-supplemental_data-297-entry-001" align="left" valign="top">\nOrthogonalLayoutData Property\n</th><th id="orthogonal_layout-supplemental_data-297-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="orthogonal_layout-supplemental_data-297-entry-003" align="left" valign="top">\nElement Type\n</th><th id="orthogonal_layout-supplemental_data-297-entry-004" align="left" valign="top">\nValue Type\n</th><th id="orthogonal_layout-supplemental_data-297-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="orthogonal_layout-supplemental_data-297-tbody-001"><tr id="orthogonal_layout-supplemental_data-297-row-002"><td id="orthogonal_layout-supplemental_data-297-entry-006" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-003"><anchor id="tab_orthogonal_layout_keys_custom_groups" xreflabel="[tab_orthogonal_layout_keys_custom_groups]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-007" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-004"><api-link id="orthogonal_layout-supplemental_data-297-api-link-002" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-008" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-005">node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-009" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-006">boolean</para></td><td id="orthogonal_layout-supplemental_data-297-entry-010" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-007">For each node a boolean value indicating whether it is a group node or not.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-003"><td id="orthogonal_layout-supplemental_data-297-entry-011" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-008"><anchor id="tab_orthogonal_layout_keys_node_ids" xreflabel="[tab_orthogonal_layout_keys_node_ids]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-012" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-009"><api-link id="orthogonal_layout-supplemental_data-297-api-link-003" data-member="NODE_ID_DP_KEY" data-text="NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-013" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-010">node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-014" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-011">Object</para></td><td id="orthogonal_layout-supplemental_data-297-entry-015" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-012">For each node an Object that serves as a unique ID.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-004"><td id="orthogonal_layout-supplemental_data-297-entry-016" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-013"><anchor id="tab_orthogonal_layout_keys_parent_node_ids" xreflabel="[tab_orthogonal_layout_keys_parent_node_ids]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-017" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-014"><api-link id="orthogonal_layout-supplemental_data-297-api-link-004" data-member="PARENT_NODE_ID_DP_KEY" data-text="PARENT_NODE_ID_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-018" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-015">node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-019" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-016">Object</para></td><td id="orthogonal_layout-supplemental_data-297-entry-020" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-017">For each node an Object indicating the group node it belongs to.\nThe Object matches the unique ID of a group node that is in the same graph.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-005"><td id="orthogonal_layout-supplemental_data-297-entry-021" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-018"><anchor id="tab_orthogonal_layout_keys_group_node_insets" xreflabel="[tab_orthogonal_layout_keys_group_node_insets]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-022" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-019"><api-link id="orthogonal_layout-supplemental_data-297-api-link-005" data-member="GROUP_NODE_INSETS_DP_KEY" data-text="GROUP_NODE_INSETS_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-023" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-020">Node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-024" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-021"><span class="api">Insets</span></para></td><td id="orthogonal_layout-supplemental_data-297-entry-025" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-022">For each group node an <api-link id="orthogonal_layout-supplemental_data-297-api-link-006" data-member="" data-text="Insets" data-type="yfiles.algorithms.Insets"></api-link> object that encodes the group node’s insets.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-006"><td id="orthogonal_layout-supplemental_data-297-entry-026" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-023"><anchor id="tab_orthogonal_layout_keys_minimum_node_size" xreflabel="[tab_orthogonal_layout_keys_minimum_node_size]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-027" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-024"><api-link id="orthogonal_layout-supplemental_data-297-api-link-007" data-member="MINIMUM_NODE_SIZE_DP_KEY" data-text="MINIMUM_NODE_SIZE_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-028" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-025">node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-029" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-026"><span class="api">YDimension</span></para></td><td id="orthogonal_layout-supplemental_data-297-entry-030" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-027">For each group node a <api-link id="orthogonal_layout-supplemental_data-297-api-link-008" data-member="" data-text="YDimension" data-type="yfiles.algorithms.YDimension"></api-link> object that specifies the group node’s minimum size constraint.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-007"><td id="orthogonal_layout-supplemental_data-297-entry-031" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-028"><anchor id="tab_orthogonal_layout_keys_minimum_node_size" xreflabel="[tab_orthogonal_layout_keys_minimum_node_size]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-032" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-029"><api-link id="orthogonal_layout-supplemental_data-297-api-link-009" data-member="EDGE_LABEL_LAYOUT_DP_KEY" data-text="EDGE_LABEL_LAYOUT_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-033" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-030">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-034" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-031"><span class="api">LabelLayoutData</span>[]</para></td><td id="orthogonal_layout-supplemental_data-297-entry-035" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-032">For each edge an array of LabelLayoutData objects that encode size and preferred placement for all labels of the edge.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-008"><td id="orthogonal_layout-supplemental_data-297-entry-036" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-033"><anchor id="tab_orthogonal_layout_keys_edge_layout_descriptors" xreflabel="[tab_orthogonal_layout_keys_edge_layout_descriptors]"></anchor> -</para></td><td id="orthogonal_layout-supplemental_data-297-entry-037" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-034"><api-link id="orthogonal_layout-supplemental_data-297-api-link-010" data-member="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-038" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-035">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-039" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-036"><span class="api">EdgeLayoutDescriptor</span></para></td><td id="orthogonal_layout-supplemental_data-297-entry-040" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-037">For each edge an <api-link id="orthogonal_layout-supplemental_data-297-api-link-011" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.orthogonal.EdgeLayoutDescriptor"></api-link> object that configures edge-related options.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-009"><td id="orthogonal_layout-supplemental_data-297-entry-041" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-038"><anchor id="tab_orthogonal_layout_keys_directed_edges" xreflabel="[tab_orthogonal_layout_keys_directed_edges]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-012" data-member="directedEdges" data-text="directedEdges" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-042" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-039"><api-link id="orthogonal_layout-supplemental_data-297-api-link-013" data-member="DIRECTED_EDGE_DP_KEY" data-text="DIRECTED_EDGE_DP_KEY" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-043" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-040">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-044" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-041">boolean</para></td><td id="orthogonal_layout-supplemental_data-297-entry-045" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-042">For each edge a boolean value indicating whether it should be routed having main layout direction. See also\n<a href="#/dguide/orthogonal_layout-directed">Directed Edge Drawings</a>.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-010"><td id="orthogonal_layout-supplemental_data-297-entry-046" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-043"><anchor id="tab_orthogonal_layout_keys_directedness" xreflabel="[tab_orthogonal_layout_keys_directedness]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-014" data-member="edgeDirectedness" data-text="edgeDirectedness" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-047" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-044"><api-link id="orthogonal_layout-supplemental_data-297-api-link-015" data-member="EDGE_DIRECTEDNESS_DP_KEY" data-text="EDGE_DIRECTEDNESS_DP_KEY" data-type="yfiles.orthogonal.OrthogonalLayout"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-048" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-045">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-049" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-046">double</para></td><td id="orthogonal_layout-supplemental_data-297-entry-050" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-047">For each edge a floating point value that indicates the directedness of the edge, used for the detection of\n<a href="#/dguide/orthogonal_layout-substructures_directedness">substructures</a>. A value of zero means undirected,\na positive value means directed and a negative value means reverse directed.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-011"><td id="orthogonal_layout-supplemental_data-297-entry-051" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-048"><anchor id="tab_orthogonal_layout_keys_source_group_ids" xreflabel="[tab_orthogonal_layout_keys_source_group_ids]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-016" data-member="sourceGroupIds" data-text="sourceGroupIds" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-052" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-049"><api-link id="orthogonal_layout-supplemental_data-297-api-link-017" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-053" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-050">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-054" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-051">Object</para></td><td id="orthogonal_layout-supplemental_data-297-entry-055" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-052">For each edge an arbitrary Object indicating the group its source end is affiliated with.\nEdge grouping is only supported in conjunction with <a href="#/dguide/orthogonal_layout-directed">directed edges</a>.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-012"><td id="orthogonal_layout-supplemental_data-297-entry-056" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-053"><anchor id="tab_orthogonal_layout_keys_target_group_ids" xreflabel="[tab_orthogonal_layout_keys_target_group_ids]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-018" data-member="targetGroupIds" data-text="targetGroupIds" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-057" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-054"><api-link id="orthogonal_layout-supplemental_data-297-api-link-019" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-058" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-055">edge</para></td><td id="orthogonal_layout-supplemental_data-297-entry-059" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-056">Object</para></td><td id="orthogonal_layout-supplemental_data-297-entry-060" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-057">For each edge an arbitrary Object indicating the group its target end is affiliated with.\nEdge grouping is only supported in conjunction with <a href="#/dguide/orthogonal_layout-directed">directed edges</a>.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-013"><td id="orthogonal_layout-supplemental_data-297-entry-061" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-058"><anchor id="tab_orthogonal_layout_keys_node_halos" xreflabel="[tab_orthogonal_layout_keys_node_halos]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-020" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-062" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-059"><api-link id="orthogonal_layout-supplemental_data-297-api-link-021" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-063" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-060">node</para></td><td id="orthogonal_layout-supplemental_data-297-entry-064" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-061"><span class="api">NodeHalo</span></para></td><td id="orthogonal_layout-supplemental_data-297-entry-065" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-062">A <api-link id="orthogonal_layout-supplemental_data-297-api-link-022" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="orthogonal_layout-supplemental_data-297-row-014"><td id="orthogonal_layout-supplemental_data-297-entry-066" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-063"><anchor id="tab_orthogonal_layout_keys_abort_handler" xreflabel="[tab_orthogonal_layout_keys_abort_handler]"></anchor><api-link id="orthogonal_layout-supplemental_data-297-api-link-023" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.orthogonal.OrthogonalLayoutData"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-067" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-064"><api-link id="orthogonal_layout-supplemental_data-297-api-link-024" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="orthogonal_layout-supplemental_data-297-entry-068" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-065">graph</para></td><td id="orthogonal_layout-supplemental_data-297-entry-069" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-066"><span class="api">AbortHandler</span></para></td><td id="orthogonal_layout-supplemental_data-297-entry-070" align="left" valign="top"><para class="dguide-para" id="orthogonal_layout-supplemental_data-297-simpara-067">An <api-link id="orthogonal_layout-supplemental_data-297-api-link-025" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'}]},{tagname:"section",id:"orthogonal_layout-directed",title:"Directed Edge Drawings",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed-298-simpara-001",content:'The <span class="api">OrthogonalLayout</span> optionally supports directed edge drawings\n(although not in combination with hierarchically nested graphs or the non-default layout styles).\nApplication domains of directed orthogonal drawings include, for example, software engineering,\ndatabase schema and system management.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed-298-simpara-002",content:"It supports advanced edge path generation"},{tagname:"para",content:'<ul id="orthogonal_layout-directed-298-itemizedlist-001"><li id="orthogonal_layout-directed-298-listitem-001"><p id="orthogonal_layout-directed-298-simpara-003">with respect to the so-called <span class="def">main layout direction</span>, a predefined orientation, like, e.g., bottom-to-top, and also</p></li><li id="orthogonal_layout-directed-298-listitem-002"><p id="orthogonal_layout-directed-298-simpara-004">using a common anchor point and common edge segments for edges that connect to a common node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed-298-simpara-005",content:'The latter is also referred to as edge/port grouping, which is described in <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed-298-simpara-006",content:"Together these features enable high-quality graph layout which is a perfect\nmatch for UML-style class diagrams, for example.\nThe layout algorithm is well suited for medium-sized graphs where a subset of\nedges should be routed with respect to the main layout direction.\nIt produces compact drawings with no overlaps and few crossings."},{tagname:"figure","class":"image",title:"Sample layout with directed edges",id:"orthogonal_layout-directed-298-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_directed.b2e7ea69.jpg",alt:"",title:'<para class="dguide-para">A diagram with UML-style edge routing and edge groups</para>'}]},{tagname:"para","class":"dguide-para important",id:"orthogonal_layout-directed-298-important-001",content:'<p id="orthogonal_layout-directed-298-simpara-007">This feature is not available with a grouped graph. As soon as a data provider is registered under the key\n<api-link id="orthogonal_layout-directed-298-api-link-001" data-member="GROUP_DP_KEY" data-text="GROUP_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link> this feature will be disabled. This is the case\nfor grouped graphs if the IGraph-related adapter mechanisms are used.\nSee also <a href="#/dguide/layout-grouping">Layout of Grouped Graphs</a> and <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a>.</p>'},{tagname:"section",id:"orthogonal_layout-directed_edges",title:"Directed Edges",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed_edges-299-simpara-001",content:'You can specify\na subset of so-called <span class="def">directed</span> edges that should be routed with\nrespect to the main layout direction by means of\n<a href="#/dguide/tab_orthogonal_layout_keys_directed_edges">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed_edges-299-simpara-002",content:'The main layout direction can be configured using the services of class\n<api-link id="orthogonal_layout-directed_edges-299-api-link-001" data-member="" data-text="OrientationLayout" data-type="yfiles.layout.OrientationLayout"></api-link> as outlined in\n<a href="#/dguide/ex_orthogonal_layout-directed_edges-orientation">Configuring the main layout direction</a>\nNote that the default layout direction is top-to-bottom.'},{tagname:"example",id:"ex_orthogonal_layout-directed_edges-orientation",title:"Configuring the main layout direction",content:'<pre class="programlisting javascript" id="orthogonal_layout-directed_edges-299-programlisting-001" language="javascript" format="linespecific"><code>const orthogonal = getMyOrthogonalLayout()\r\n\r\n// Set the main layout direction using the OrientationLayout provided by\r\n// MultiStageLayout (the superclass of OrthogonalLayout).\r\nconst ol = orthogonal.orientationLayout\r\nol.orientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\n\r\n// Invoke the layout.\r\ngraph.applyLayout(orthogonal)\n</code></pre>'}]},{tagname:"section",id:"orthogonal_layout-directed_edges-edge_groups",title:"Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"orthogonal_layout-directed_edges-edge_groups-300-simpara-001",content:'A special feature of the directed orthogonal layout algorithm is its ability to\ngroup multiple ports (edge end points) together to be anchored at the same location.\nYou can specify this for both <a href="#/dguide/tab_orthogonal_layout_keys_source_group_ids">source ports</a> and <a href="#/dguide/tab_orthogonal_layout_keys_target_group_ids">target ports</a> by means of layout data.\nThe setup of edge groups is described in <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'}]}]},{tagname:"section",id:"compact_orthogonal_layout",title:"Compact Orthogonal Layout",children:[{tagname:"para","class":"dguide-para",id:"compact_orthogonal_layout-301-simpara-001",content:'Class\n<api-link id="compact_orthogonal_layout-301-api-link-001" data-member="" data-text="CompactOrthogonalLayout" data-type="yfiles.orthogonal.CompactOrthogonalLayout"></api-link> is\na specialized variant of the\n<a href="#/dguide/orthogonal_layout">orthogonal layout algorithm</a>.\nIt uses a divide-and-conquer approach to achieve compact orthogonal layouts\nthat fit into, respectively are near, a desired aspect ratio.'},{tagname:"para","class":"dguide-para",id:"compact_orthogonal_layout-301-simpara-002",content:'In contrast to the majority of yFiles layout algorithms, class\n<span class="api">CompactOrthogonalLayout</span> does not inherit from\n<span class="api">MultiStageLayout</span>, but is instead an extension of abstract class\n<api-link id="compact_orthogonal_layout-301-api-link-002" data-member="" data-text="LayoutStageBase" data-type="yfiles.layout.LayoutStageBase"></api-link>.'},{tagname:"para","class":"dguide-para",id:"compact_orthogonal_layout-301-simpara-003",content:'<span class="api">CompactOrthogonalLayout</span> combines different phases that:'},{tagname:"para",content:'<ol id="compact_orthogonal_layout-301-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="compact_orthogonal_layout-301-listitem-001"><p id="compact_orthogonal_layout-301-simpara-004">find partitions in the node set of the graph</p></li><li id="compact_orthogonal_layout-301-listitem-002"><p id="compact_orthogonal_layout-301-simpara-005">calculate the orthogonal layout for the partitions</p></li><li id="compact_orthogonal_layout-301-listitem-003"><p id="compact_orthogonal_layout-301-simpara-006">arrange the partitions in a compact manner</p></li><li id="compact_orthogonal_layout-301-listitem-004"><p id="compact_orthogonal_layout-301-simpara-007">route the connecting edges between partitions</p></li></ol>'},{tagname:"figure","class":"image",title:"Sample layout produced by class CompactOrthogonalLayout",id:"compact_orthogonal_layout-301-figure-001","float":0,children:[{tagname:"img",src:"assets/orthogonal_compact.810b4cf1.jpg",alt:"",title:'<para class="dguide-para">A compact orthogonal diagram with an aspect ratio of 1.0</para>'}]},{tagname:"section",id:"compact_orthogonal_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"compact_orthogonal_layout-options-302-simpara-001",content:'This specialized layout algorithm provides only few options by itself.\nHowever, the respective classes that are used for the different layout phases can be customized individually.\nIn particular, this also includes the <a href="#/dguide/orthogonal_layout">orthogonal layout algorithm</a> which is\nused as the core layout algorithm.'},{tagname:"para",content:'<dl id="compact_orthogonal_layout-options-302-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="compact_orthogonal_layout-options-302-term-001"><api-link id="compact_orthogonal_layout-options-302-api-link-001" data-member="gridSpacing" data-text="gridSpacing" data-type="yfiles.orthogonal.CompactOrthogonalLayout"></api-link></dt><dd id="compact_orthogonal_layout-options-302-listitem-001">\n<p id="compact_orthogonal_layout-options-302-simpara-002">Defines the virtual grid spacing used by the layout algorithm.\nEach node is placed in such a way that its center point lies on a grid point.</p>\n</dd>\n<dt id="compact_orthogonal_layout-options-302-term-002"><api-link id="compact_orthogonal_layout-options-302-api-link-002" data-member="aspectRatio" data-text="aspectRatio" data-type="yfiles.orthogonal.CompactOrthogonalLayout"></api-link></dt><dd id="compact_orthogonal_layout-options-302-listitem-002">\n<p id="compact_orthogonal_layout-options-302-simpara-003">Specifies the desired aspect ratio that the resulting diagram should fit into.\nThe algorithm tries to reach this value, depending on the actual graph\nstructure, however, this may not always be feasible.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"compact_orthogonal_layout-stages",title:"Applicable Layout Stages",children:[{tagname:"para","class":"dguide-para",id:"compact_orthogonal_layout-stages-303-simpara-001",content:'<a href="#/dguide/tab_compact_orthogonal_layout-stages">Layout Stages</a> lists layout stages that can be used to enhance\nthe layout process of class <span class="api">CompactOrthogonalLayout</span>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_compact_orthogonal_layout-stages",rowsep:1,content:'<caption>Layout Stages</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><tbody id="compact_orthogonal_layout-stages-303-tbody-001"><tr id="compact_orthogonal_layout-stages-303-row-001"><td id="compact_orthogonal_layout-stages-303-entry-001" align="left" valign="top"><para class="dguide-para" id="compact_orthogonal_layout-stages-303-simpara-002">Class Name</para></td><td id="compact_orthogonal_layout-stages-303-entry-002" align="left" valign="top"><para class="dguide-para" id="compact_orthogonal_layout-stages-303-simpara-003">Description</para></td></tr><tr id="compact_orthogonal_layout-stages-303-row-002"><td id="compact_orthogonal_layout-stages-303-entry-003" align="left" valign="top"><para class="dguide-para" id="compact_orthogonal_layout-stages-303-simpara-004"><api-link id="compact_orthogonal_layout-stages-303-api-link-001" data-member="" data-text="PolylineLayoutStage" data-type="yfiles.router.PolylineLayoutStage"></api-link></para></td><td id="compact_orthogonal_layout-stages-303-entry-004" align="left" valign="top"><para class="dguide-para" id="compact_orthogonal_layout-stages-303-simpara-005">With class <span class="api">CompactOrthogonalLayout</span> as the core layout algorithm,\nthis stage adds octilinear edge routing to the diagram that results from the orthogonal layout calculation.</para></td></tr></tbody>'}]}]}]},{tagname:"section",id:"circular_layout",title:"Circular Layout",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-304-simpara-001",content:'Class <api-link id="circular_layout-304-api-link-001" data-member="" data-text="CircularLayout" data-type="yfiles.circular.CircularLayout"></api-link> is a\nlayout algorithm that portraits interconnected ring and star topologies and is\nexcellent for applications in:'},{tagname:"para",content:'<ul id="circular_layout-304-itemizedlist-001"><li id="circular_layout-304-listitem-001"><p id="circular_layout-304-simpara-002">Social networking (criminology, economics, etc.)</p></li><li id="circular_layout-304-listitem-002"><p id="circular_layout-304-simpara-003">Network management</p></li><li id="circular_layout-304-listitem-003"><p id="circular_layout-304-simpara-004">WWW visualization</p></li><li id="circular_layout-304-listitem-004"><p id="circular_layout-304-simpara-005">eCommerce</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"circular_layout-304-simpara-006",content:'<span class="api">CircularLayout</span> produces layouts that emphasize group and tree structures\nwithin a network.\nIt creates node partitions by analyzing the connectivity structure of the\nnetwork, and arranges the partitions as separate circles.\nThe circles themselves are arranged in a radial tree layout fashion.\n<span class="api">CircularLayout</span> delegates these two major layout\ntasks to other, more specialized layout providers, namely classes\n<api-link id="circular_layout-304-api-link-002" data-member="" data-text="SingleCycleLayout" data-type="yfiles.circular.SingleCycleLayout"></api-link> and\n<api-link id="circular_layout-304-api-link-003" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link>.'},{tagname:"figure","class":"image",title:"Sample layouts produced by class CircularLayout",id:"circular_layout-304-figure-001","float":0,children:[{tagname:"img",src:"assets/circular_example_automaton.dedee5c1.gif",alt:"",title:'<para class="dguide-para">This diagram shows finite state automaton from an industrial application.</para>'},{tagname:"img",src:"assets/circular_example_host_hierarchy.bbc8064f.gif",alt:"",title:'<para class="dguide-para">This diagram represents a host hierarchy defined within a NIS (Network Information Service) system.</para>'},{tagname:"img",src:"assets/circular_example_compactness.13e5ebc5.gif",alt:"",title:'<para class="dguide-para">This diagram demonstrates the attainable compactness, while keeping the number of object overlaps at a minimum.</para>'}]},{tagname:"section",id:"circular_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-001",content:'Class <span class="api">CircularLayout</span> provides a set of options that affect its layout\nbehavior.\nThese options can be set using the properties of class <span class="api">CircularLayout</span>.\nThe options are documented within the API documentation of class\n<api-link id="circular_layout-options-305-api-link-001" data-member="" data-text="CircularLayout" data-type="yfiles.circular.CircularLayout"></api-link>.'},{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-002",content:'Additionally, there are properties that grant access to the layout\ndelegates <api-link id="circular_layout-options-305-api-link-002" data-member="" data-text="SingleCycleLayout" data-type="yfiles.circular.SingleCycleLayout"></api-link>\nand <api-link id="circular_layout-options-305-api-link-003" data-member="" data-text="BalloonLayout" data-type="yfiles.tree.BalloonLayout"></api-link>.\nThese layout algorithms are responsible for arranging the circle and the tree\ncomponents of the diagram, respectively.\nModifying the options of these layout algorithms does also affect the overall\nlayout behavior of <span class="api">CircularLayout</span>.'},{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-003",content:'The options for <span class="api">CircularLayout</span> affect the general layout strategy and the\ninterplay between <span class="api">SingleCycleLayout</span> and <span class="api">BalloonLayout</span>.'},{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-004",content:'The global layout style is set using the\n<api-link id="circular_layout-options-305-api-link-004" data-member="layoutStyle" data-text="layoutStyle" data-type="yfiles.circular.CircularLayout"></api-link>\nproperty.\nIt controls which policy is used to partition the nodes of the graph.\nEach node partition will be arranged either on a separate circle or as a\nseparate <span class="def">disk</span> (see also\n<a href="#/dguide/circular_layout-partition_arrangement_api">node partition layout style</a>\nbelow).\nAvailable options are'},{tagname:"para",content:'<dl id="circular_layout-options-305-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-options-305-term-001"><api-link id="circular_layout-options-305-api-link-005" data-member="BCC_COMPACT" data-text="BCC_COMPACT" data-type="yfiles.circular.LayoutStyle"></api-link></dt><dd id="circular_layout-options-305-listitem-001">\n<p id="circular_layout-options-305-simpara-005">Each partition will represent a so-called biconnected component of the graph.\nA biconnected component consists of nodes that are reachable by two\nedge-disjoint paths.\nNodes that belong to more than one biconnected component will be assigned\nexclusively to one partition.</p>\n</dd>\n<dt id="circular_layout-options-305-term-002"><api-link id="circular_layout-options-305-api-link-006" data-member="BCC_ISOLATED" data-text="BCC_ISOLATED" data-type="yfiles.circular.LayoutStyle"></api-link></dt><dd id="circular_layout-options-305-listitem-002">\n<p id="circular_layout-options-305-simpara-006">Node partitions will be formed as with <span class="api">BCC_COMPACT</span> with the difference that\nall nodes belonging to more than one biconnected component will be assigned an\nisolated partition.</p>\n</dd>\n<dt id="circular_layout-options-305-term-003"><api-link id="circular_layout-options-305-api-link-007" data-member="SINGLE_CYCLE" data-text="SINGLE_CYCLE" data-type="yfiles.circular.LayoutStyle"></api-link></dt><dd id="circular_layout-options-305-listitem-003">\n<p id="circular_layout-options-305-simpara-007">All nodes will be arranged on a single circle.</p>\n</dd>\n<dt id="circular_layout-options-305-term-004"><api-link id="circular_layout-options-305-api-link-008" data-member="CUSTOM_GROUPS" data-text="CUSTOM_GROUPS" data-type="yfiles.circular.LayoutStyle"></api-link></dt><dd id="circular_layout-options-305-listitem-004">\n<p id="circular_layout-options-305-simpara-008">The node partitions that form circles can be specified by means of\n<a href="#/dguide/tab_circular_layout_keys_custom_groups">layout data</a>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-009",content:'<a href="#/dguide/fig_circular_layout-styles">Effect of option Layout Style</a> shows the effect of different layout styles applied to\n<span class="api">CircularLayout</span>.'},{tagname:"para","class":"dguide-para",id:"circular_layout-options-305-simpara-010",content:"The BCC styles partition the nodes by examining the two-connectivity property of\nthe input graph.\nSINGLE_CYCLE places all nodes one a single cycle."},{tagname:"figure","class":"image",title:"Effect of option Layout Style",id:"fig_circular_layout-styles","float":0,children:[{tagname:"img",src:"assets/circular_bcc_compact.d1c677b4.gif",alt:"",title:'<para class="dguide-para">BCC_COMPACT</para>'},{tagname:"img",src:"assets/circular_bcc_isolated.af569315.gif",alt:"",title:'<para class="dguide-para">BCC_ISOLATED</para>'},{tagname:"img",src:"assets/circular_single_cycle.a4dd5f33.gif",alt:"",title:'<para class="dguide-para">SINGLE_CYCLE</para>'}]},{tagname:"para",content:'<dl id="circular_layout-options-305-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-options-305-term-005" class="title" role="title">Use Existing Drawing as Sketch</dt><dt id="circular_layout-options-305-term-006"><api-link id="circular_layout-options-305-api-link-009" data-member="fromSketchMode" data-text="fromSketchMode" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-options-305-listitem-005">\n<p id="circular_layout-options-305-simpara-011">If enabled, the layout algorithm interprets the initial graph layout as a\nsketch for the desired outcome of the layout process.\nThe algorithm tries to identify the nodes that should lie on a node partition’s\ncircle/disk boundary and maintain their cyclic order around the center of the\nnode partition.\n(See also <a href="#/dguide/circular_layout-partition_arrangement">Partition Arrangement Options</a> below.)\nAdditionally, when layout style BCC Compact is used, the layout algorithm also\ntries to maintain the cyclic order of entire node partitions that connect to a\ncommon node.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"circular_layout-partition_arrangement",title:"Partition Arrangement Options",children:[{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="circular_layout-partition_arrangement_api">\n<dt id="circular_layout-partition_arrangement-306-term-001" class="title" role="title">Node Partition Layout Style</dt><dt id="circular_layout-partition_arrangement-306-term-002"><api-link id="circular_layout-partition_arrangement-306-api-link-001" data-member="partitionStyle" data-text="partitionStyle" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-partition_arrangement-306-listitem-001">\n<p id="circular_layout-partition_arrangement-306-simpara-001">Determines the layout style for the node partitions of a graph.\nThe nodes from a partition can be arranged either as a circle\nor using one of the available <strong id="circular_layout-partition_arrangement-306-emphasis-001" class="bold" role="bold">disk</strong> flavors:</p>\n<para><ul id="circular_layout-partition_arrangement-306-itemizedlist-001"><li id="circular_layout-partition_arrangement-306-listitem-002"><p id="circular_layout-partition_arrangement-306-simpara-002">Arranging as a <api-link id="circular_layout-partition_arrangement-306-api-link-002" data-member="CYCLE" data-text="circle" data-type="yfiles.circular.PartitionStyle"></api-link>\nmeans that all nodes from a given partition are placed on a circle.</p></li><li id="circular_layout-partition_arrangement-306-listitem-003"><p id="circular_layout-partition_arrangement-306-simpara-003">Arranging as a <api-link id="circular_layout-partition_arrangement-306-api-link-003" data-member="DISK" data-text="disk" data-type="yfiles.circular.PartitionStyle"></api-link>\nmeans that those nodes from a given partition which connect\nto nodes from other partitions are placed on the disk’s boundary while all\nother nodes are placed on the inside.</p></li><li id="circular_layout-partition_arrangement-306-listitem-004"><p id="circular_layout-partition_arrangement-306-simpara-004">Arranging as an <api-link id="circular_layout-partition_arrangement-306-api-link-004" data-member="ORGANIC" data-text="organic disk" data-type="yfiles.circular.PartitionStyle"></api-link>\nmeans that the organic layout paradigm is used to arrange the nodes from a partition.\nNodes which connect to nodes from other partitions can be placed both on the\ninside or on the boundary of the disk.</p></li></ul></para>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-partition_arrangement-306-simpara-005",content:'Both disk arrangement styles result in graph layouts that are smaller in size,\ni.e., consume less space than circle arrangement style. <a href="#/dguide/fig_circular_layout-partition_arrangement">Node partition layout styles</a> presents the available node partition\nlayout styles and their effects for a given graph.'},{tagname:"figure","class":"image",title:"Node partition layout styles",id:"fig_circular_layout-partition_arrangement","float":0,children:[{tagname:"img",src:"assets/circular_partition_circle.c8cfd673.jpg",alt:"",title:'<para class="dguide-para">Circle</para>'},{tagname:"img",src:"assets/circular_partition_disk.905b5684.jpg",alt:"",title:'<para class="dguide-para">Disk</para>'},{tagname:"img",src:"assets/circular_partition_organic.438480e2.jpg",alt:"",title:'<para class="dguide-para">Organic disk</para>'}]},{tagname:"para","class":"dguide-para",id:"circular_layout-partition_arrangement-306-simpara-006",content:'The options for the internally used\n<api-link id="circular_layout-partition_arrangement-306-api-link-005" data-member="singleCycleLayout" data-text="singleCycleLayout" data-type="yfiles.circular.CircularLayout"></api-link>\ninfluence the size and compactness of the circles/disks formed by this\nlayout algorithm.'},{tagname:"para",content:'<dl id="circular_layout-partition_arrangement-306-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-partition_arrangement-306-term-003" class="title" role="title">Minimal Node Distance</dt><dt id="circular_layout-partition_arrangement-306-term-004"><api-link id="circular_layout-partition_arrangement-306-api-link-006" data-member="minimumNodeDistance" data-text="minimumNodeDistance" data-type="yfiles.circular.SingleCycleLayout"></api-link></dt><dd id="circular_layout-partition_arrangement-306-listitem-005">\n<p id="circular_layout-partition_arrangement-306-simpara-007">Determines the minimal distance between the borders of two adjacent nodes on\nthe circle/the disk’s boundary.\nThe smaller the distance, the more compact the resulting layout.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="circular_layout-partition_arrangement-306-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-partition_arrangement-306-term-005" class="title" role="title">Automatic Radius</dt><dt id="circular_layout-partition_arrangement-306-term-006"><api-link id="circular_layout-partition_arrangement-306-api-link-007" data-member="automaticRadius" data-text="automaticRadius" data-type="yfiles.circular.SingleCycleLayout"></api-link></dt><dd id="circular_layout-partition_arrangement-306-listitem-006">\n<p id="circular_layout-partition_arrangement-306-simpara-008">Whether or not to determine the radius of each circle/disk in the layout\nautomatically.\nAn automatically chosen radius is usually the smallest possible radius that\nobeys <span class="api">minimumNodeDistance</span>.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="circular_layout-partition_arrangement-306-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-partition_arrangement-306-term-007" class="title" role="title">Fixed Radius</dt><dt id="circular_layout-partition_arrangement-306-term-008"><api-link id="circular_layout-partition_arrangement-306-api-link-008" data-member="fixedRadius" data-text="fixedRadius" data-type="yfiles.circular.SingleCycleLayout"></api-link></dt><dd id="circular_layout-partition_arrangement-306-listitem-007">\n<p id="circular_layout-partition_arrangement-306-simpara-009">If <span class="api">automaticRadius</span> is not set, then this option determines the fixed radius\nfor all circles/disks in the resulting layout.\n<span class="api">minimumNodeDistance</span> will be ignored in this case.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"circular_layout-tree_arrangement",title:"Tree Arrangement Options",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-tree_arrangement-307-simpara-001",content:'The options for the internally used\n<api-link id="circular_layout-tree_arrangement-307-api-link-001" data-member="balloonLayout" data-text="balloonLayout" data-type="yfiles.circular.CircularLayout"></api-link>\ninfluence the compactness of the tree-like components that this layout algorithm\nproduces.\nThe tree-like structures are the parts of the layout that are not part of the\ncircular arranged node groups.'},{tagname:"para",content:'<dl id="circular_layout-tree_arrangement-307-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-tree_arrangement-307-term-001" class="title" role="title">Preferred Child Wedge</dt><dt id="circular_layout-tree_arrangement-307-term-002"><api-link id="circular_layout-tree_arrangement-307-api-link-002" data-member="preferredChildWedge" data-text="preferredChildWedge" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-001">\n<p id="circular_layout-tree_arrangement-307-simpara-002">This setting determines the angular range of the sector that will be reserved\nfor the children of a root node.\nThe possible angular range lies between 1 and 359.\nThe remaining angular range (360 minus x) will be automatically used to\naccommodate the edge that connects to the root node.\nThe smaller the chosen value, the greater the impression that the nodes drive\naway from their root nodes and the center of the graph.\nGenerally speaking, the compactness of the layout will decrease with smaller\nvalues. Very small values will lead to layouts that consume a lot of space.</p>\n</dd>\n<dt id="circular_layout-tree_arrangement-307-term-003" class="title" role="title">Minimal Edge Length</dt><dt id="circular_layout-tree_arrangement-307-term-004"><api-link id="circular_layout-tree_arrangement-307-api-link-003" data-member="minimumEdgeLength" data-text="minimumEdgeLength" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-002">\n<p id="circular_layout-tree_arrangement-307-simpara-003">Determines the minimal length of an edge that connects two nodes that lie on\nseparate circles (tree-edges).\nThe smaller the chosen value, the more compact the resulting layout.</p>\n</dd>\n<dt id="circular_layout-tree_arrangement-307-term-005" class="title" role="title">Compactness Factor</dt><dt id="circular_layout-tree_arrangement-307-term-006"><api-link id="circular_layout-tree_arrangement-307-api-link-004" data-member="compactnessFactor" data-text="compactnessFactor" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-003">\n<p id="circular_layout-tree_arrangement-307-simpara-004">This parameter influences the length of the tree-edges as it is computed by the layout algorithm.\nThe smaller the compactness factor, the shorter the tree-edges and the more compact the overall layout.\nThe bigger the compactness factor the more difficult, and hence slower, the layout computation.</p>\n</dd>\n<dt id="circular_layout-tree_arrangement-307-term-007" class="title" role="title">Allow Overlaps</dt><dt id="circular_layout-tree_arrangement-307-term-008"><api-link id="circular_layout-tree_arrangement-307-api-link-005" data-member="allowOverlaps" data-text="allowOverlaps" data-type="yfiles.tree.BalloonLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-004">\n<p id="circular_layout-tree_arrangement-307-simpara-005">If activated, this option further increases compactness of the resulting\nlayout, but potentially introduces slight node overlaps.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-tree_arrangement-307-simpara-006",content:'The following tree arrangement options which also influence the compactness are\nset directly on the <span class="api">CircularLayout</span>.'},{tagname:"para",content:'<dl id="circular_layout-tree_arrangement-307-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-tree_arrangement-307-term-009" class="title" role="title">Maximal Deviation Angle</dt><dt id="circular_layout-tree_arrangement-307-term-010"><api-link id="circular_layout-tree_arrangement-307-api-link-006" data-member="maximumDeviationAngle" data-text="maximumDeviationAngle" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-005">\n<p id="circular_layout-tree_arrangement-307-simpara-007">Whenever tree edges connect to a node that lies on a circle together with other\nnodes, the layout algorithm tries to direct that edge in such a way that its\nprolongation crosses through the center of the circle.\nThis is not always possible though, for example, if more than one tree-edge\nconnect to the same circle node.\nThis parameter determines the allowed angular deviation from the optimal edge\ndirection as described above.\nThe bigger the chosen value, the more compact the resulting layout.\nIf a value smaller than 90 degrees is chosen, then the tree-edges might cross\nthrough the circular arranged components.</p>\n</dd>\n<dt id="circular_layout-tree_arrangement-307-term-011" class="title" role="title">Place Children on Common Radius</dt><dt id="circular_layout-tree_arrangement-307-term-012"><api-link id="circular_layout-tree_arrangement-307-api-link-007" data-member="placeChildrenOnCommonRadius" data-text="placeChildrenOnCommonRadius" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-tree_arrangement-307-listitem-006">\n<p id="circular_layout-tree_arrangement-307-simpara-008">Enables tighter drawings by using adapted radii for child nodes.\nBy default, the nodes in tree-like structures connecting to a circle are always\nplaced on a common radius according to their distance from the root node.\nTighter drawings can be achieved by abandoning the common radius and instead placing\nthese child nodes using radii adapted to the size of an actual child node and the\nsizes of nodes in its vicinity.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-tree_arrangement-307-simpara-009",content:'<a href="#/dguide/fig_circular_layout-tree_arrangement">Child node placement in tree structures</a> shows a circular layout using the default\nsetting and the result of using adapted radii for the nodes in tree-like structures\nconnecting to a circle.\nNote that the circle(s) themselves are left unaltered.'},{tagname:"figure","class":"image",title:"Child node placement in tree structures",id:"fig_circular_layout-tree_arrangement","float":0,children:[{tagname:"img",src:"assets/circular_place_children_common.c76dd202.jpg",alt:"",title:'<para class="dguide-para">Circular layout with default setting, i.e., where children are placed on a common radius</para>'},{tagname:"img",src:"assets/circular_place_children_adapted.64dd1a29.jpg",alt:"",title:'<para class="dguide-para">Tighter drawing through adapted radii.</para>'}]}]},{tagname:"section",id:"circular_layout-label_handling",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-label_handling-308-simpara-001",content:'Edge labels can be placed automatically using the generic labeling support as described\nin <a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>, which is available with all yFiles layout\nalgorithms.\nAdditionally, <span class="api">CircularLayout</span> can be set up to take node labels into account during\nlayout.'},{tagname:"para","class":"dguide-para",id:"circular_layout-label_handling-308-simpara-002",content:"Node labels do not need to be placed, but instead their size needs to be considered\nfor the placement of adjacent graph elements.\nTaking node labels into consideration during layout calculation guarantees that\nthey will not overlap nodes in the diagram."},{tagname:"para",content:'<dl id="circular_layout-label_handling-308-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-label_handling-308-term-001"><api-link id="circular_layout-label_handling-308-api-link-001" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-label_handling-308-listitem-001">\n<p id="circular_layout-label_handling-308-simpara-003">Enables node label-aware layout calculation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-label_handling-308-simpara-004",content:'<a href="#/dguide/fig_circular_layout-node_label_awareness">Node label-aware circular layout</a> shows a circular layout where\nnode labels were not considered at all, and the result with node label-aware layout.\nThe circles grow to accommodate the sizes of the node labels.'},{tagname:"figure","class":"image",title:"Node label-aware circular layout",id:"fig_circular_layout-node_label_awareness","float":0,children:[{tagname:"img",src:"assets/circular_node_labels_none.cccba491.jpg",alt:"",title:'<para class="dguide-para">Circular layout where node labels are not considered.</para>'},{tagname:"img",src:"assets/circular_node_labels_considered.8a13e545.jpg",alt:"",title:'<para class="dguide-para">Considering node labels grows the circles.</para>'}]}]},{tagname:"section",id:"circular_layout-node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-node_halos-309-simpara-001",content:'<span class="api">CircularLayout</span> by default supports node halos as soon as they are <a href="#/dguide/tab_circular_layout_keys_node_halos">declared</a>.\nIt considers any specified additional padding around nodes, however, due to the\nstraight-line routing of the edges, they can cross through these areas in the resulting\ndiagram.\nAlso, node halo overlaps may occur if the internally used <span class="api">BalloonLayout</span> allows\noverlapping nodes.'}]},{tagname:"section",id:"circular_layout-edge_bundling",title:"Edge Bundling",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-001",content:'<span class="api">CircularLayout</span> supports edge bundling,\na feature to bundle the paths of edges in cluster-like structures in a diagram so\nthat they follow similar routes.'},{tagname:"figure","class":"image",title:"Circular layout with edge bundling",id:"fig_circular_edge_bundling","float":0,children:[{tagname:"img",src:"assets/circular-edgebundling-bcc-compact.24da0f92.png",alt:"",title:'<para class="dguide-para">Edge bundling in a circular layout with global layout style <span class="api">BCC_COMPACT</span>…​</para>'},{tagname:"img",src:"assets/circular-edgebundling-custom-groups.52cabe4d.png",alt:"",title:'<para class="dguide-para">... and with <span class="api">CUSTOM_GROUPS</span>.</para>'}]},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-002",content:'In order to perform the edge bundling, a clustering algorithm is applied such that\npossible "community structures", i.e. densely connected sets of nodes, in the graph\nare revealed.\nThe paths of edges incident to nodes that belong to the same cluster are bundled.'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-003",content:"Using edge bundling significantly reduces the visual clutter in drawings of large\ngraphs with many edges.\nIn addition, high-level patterns of edge routes and relations between different\ngroups of nodes can be highlighted and easily recognized.\nEdge bundling is commonly used in bio-informatics, social network analysis, telecommunications,\nand in fraud detection."},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-004",content:'Edge bundling in <span class="api">CircularLayout</span> is supported'},{tagname:"para",content:'<ul id="circular_layout-edge_bundling-310-itemizedlist-001"><li id="circular_layout-edge_bundling-310-listitem-001"><p id="circular_layout-edge_bundling-310-simpara-005">with the <span class="api">partitionStyle</span> set to arrange as a <api-link id="circular_layout-edge_bundling-310-api-link-001" data-member="CYCLE" data-text="circle" data-type="yfiles.circular.PartitionStyle"></api-link></p></li><li id="circular_layout-edge_bundling-310-listitem-002"><p id="circular_layout-edge_bundling-310-simpara-006">and the <span class="api">layoutStyle</span> set to one of:\n<api-link id="circular_layout-edge_bundling-310-api-link-002" data-member="BCC_COMPACT" data-text="BCC_COMPACT" data-type="yfiles.circular.LayoutStyle"></api-link>,\n<api-link id="circular_layout-edge_bundling-310-api-link-003" data-member="SINGLE_CYCLE" data-text="SINGLE_CYCLE" data-type="yfiles.circular.LayoutStyle"></api-link>,\nor <api-link id="circular_layout-edge_bundling-310-api-link-004" data-member="CUSTOM_GROUPS" data-text="CUSTOM_GROUPS" data-type="yfiles.circular.LayoutStyle"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-007",content:'The actual setup and edge bundling configuration is the responsibility of the <api-link id="circular_layout-edge_bundling-310-api-link-005" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nclass.\n<span class="api">CircularLayout</span> provides the following\nproperty to access the instance it holds of this class:'},{tagname:"para",content:'<dl id="circular_layout-edge_bundling-310-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-edge_bundling-310-term-001"><api-link id="circular_layout-edge_bundling-310-api-link-006" data-member="edgeBundling" data-text="edgeBundling:&#xA0;EdgeBundling" data-type="yfiles.circular.CircularLayout"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-003">\n<p id="circular_layout-edge_bundling-310-simpara-008">Property to access the <span class="api">EdgeBundling</span> instance to\nconfigure edge bundling-related drawing options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-009",content:'This <span class="api">EdgeBundling</span> instance holds an instance of class\n<api-link id="circular_layout-edge_bundling-310-api-link-007" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> to store and retrieve\ndefault edge bundling values for all edges.\nThe following property can be used to retrieve this default <span class="api">EdgeBundleDescriptor</span>\ninstance:'},{tagname:"para",content:'<dl id="circular_layout-edge_bundling-310-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-edge_bundling-310-term-002"><api-link id="circular_layout-edge_bundling-310-api-link-008" data-member="defaultBundleDescriptor" data-text="defaultBundleDescriptor:&#xA0;EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-004">\n<p id="circular_layout-edge_bundling-310-simpara-010">Property to access the default edge bundling descriptor held by <span class="api">EdgeBundling</span>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-011",content:'In addition to the instance held by <span class="api">EdgeBundling</span>,\nedge bundling descriptors can also be associated with single edges in order to specify\nindividual settings for them.\nSetting individual descriptors for edges is done through <a href="#/dguide/tab_circular_layout_keys_edge_bundle_descriptors">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-012",content:'Classes <api-link id="circular_layout-edge_bundling-310-api-link-009" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link> and <api-link id="circular_layout-edge_bundling-310-api-link-010" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>\nprovide the means to configure drawing options related to the edge bundling support\nin <span class="api">CircularLayout</span>.\nClass <span class="api">EdgeBundling</span> defines global settings regarding\nthe edge bundling, for example, the strength and the quality of the bundling.\nIt also holds a default <span class="api">EdgeBundleDescriptor</span> instance\nwith fallback settings for the edges of a graph.\nClass <span class="api">EdgeBundleDescriptor</span> can be used to configure\nthe bundling settings of an individual edge.\nIt can be specified whether or not:'},{tagname:"para",content:'<ul id="circular_layout-edge_bundling-310-itemizedlist-002"><li id="circular_layout-edge_bundling-310-listitem-005"><p id="circular_layout-edge_bundling-310-simpara-013">an edge shall be bundled</p></li><li id="circular_layout-edge_bundling-310-listitem-006"><p id="circular_layout-edge_bundling-310-simpara-014">the direction of an edge should be taken into consideration</p></li><li id="circular_layout-edge_bundling-310-listitem-007"><p id="circular_layout-edge_bundling-310-simpara-015">an edge should be approximated by a cubic Bezier curve</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-016",content:'To configure the global edge bundling settings class <api-link id="circular_layout-edge_bundling-310-api-link-011" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nprovides the following properties:'},{tagname:"para",content:'<dl id="circular_layout-edge_bundling-310-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-edge_bundling-310-term-003" class="title" role="title">Bundling Strength</dt><dt id="circular_layout-edge_bundling-310-term-004"><api-link id="circular_layout-edge_bundling-310-api-link-012" data-member="bundlingStrength" data-text="bundlingStrength:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-008">\n<p id="circular_layout-edge_bundling-310-simpara-017">Determines the tightness of the edge bundles.\nIt takes values from interval [0.0, 1.0] where 0.0 corresponds\nto straight-line, non-bundled edges and 1.0 to strongly bundled edges.\nFor good readability featuring clearly visible bundles, a bundling strength greater\nthan 0.8 is recommended.</p>\n</dd>\n<dt id="circular_layout-edge_bundling-310-term-005" class="title" role="title">Bundling Quality</dt><dt id="circular_layout-edge_bundling-310-term-006"><api-link id="circular_layout-edge_bundling-310-api-link-013" data-member="bundlingQuality" data-text="bundlingQuality:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-009">\n<p id="circular_layout-edge_bundling-310-simpara-018">Determines the quality of the edge bundling.\nHigher values require more sophisticated methods to calculate the bundles and, thus,\nthe running time can significantly increase.\nThe setting can take values from interval [0.0, 1.0].\nFor large graphs, values smaller than 0.2 are recommended.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-019",content:'The per-edge settings can be configured via the following properties in class <api-link id="circular_layout-edge_bundling-310-api-link-014" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>:'},{tagname:"para",content:'<dl id="circular_layout-edge_bundling-310-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="circular_layout-edge_bundling-310-term-007" class="title" role="title">Bundle Edge</dt><dt id="circular_layout-edge_bundling-310-term-008"><api-link id="circular_layout-edge_bundling-310-api-link-015" data-member="bundled" data-text="bundled:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-010">\n<p id="circular_layout-edge_bundling-310-simpara-020">Determines whether or not an edge shall be bundled.</p>\n</dd>\n<dt id="circular_layout-edge_bundling-310-term-009" class="title" role="title">Consider Edge Direction</dt><dt id="circular_layout-edge_bundling-310-term-010"><api-link id="circular_layout-edge_bundling-310-api-link-016" data-member="considerDirection" data-text="considerDirection:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-011">\n<p id="circular_layout-edge_bundling-310-simpara-021">Determines if the direction of an edge should be taken into consideration.\nIf enabled, incoming and outgoing edges incident to a node are bundled separately.</p>\n</dd>\n<dt id="circular_layout-edge_bundling-310-term-011" class="title" role="title">Use Bezier Fitting</dt><dt id="circular_layout-edge_bundling-310-term-012"><api-link id="circular_layout-edge_bundling-310-api-link-017" data-member="bezierFitting" data-text="bezierFitting:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="circular_layout-edge_bundling-310-listitem-012">\n<p id="circular_layout-edge_bundling-310-simpara-022">Determines whether or not the path of an edge should be approximated by a cubic\nBezier curve.\nThe number of bends may be significantly reduced by the approximation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"circular_layout-edge_bundling-310-simpara-023",content:'An <span class="api">EdgeBundleDescriptor</span> instance can be specified\nindividually for single edges by means of <a href="#/dguide/tab_circular_layout_keys_edge_bundle_descriptors">layout data</a>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeBundleDescriptor</span>\ninstance that is registered with <span class="api">EdgeBundling</span> will\nbe used.'}]},{tagname:"section",id:"circular_layout-compactness",title:"Optimizing Compactness",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-compactness-311-simpara-001",content:"There are several options that have impact on the compactness of the circular\nlayout.\nOptimizing for compactness, e.g., is achieved by"},{tagname:"para",content:'<ul id="circular_layout-compactness-311-itemizedlist-001"><li id="circular_layout-compactness-311-listitem-001"><p id="circular_layout-compactness-311-simpara-002">choosing <span class="api">DISK</span> or <span class="api">ORGANIC</span> as <span class="api">CircularLayout.partitionStyle</span></p></li><li id="circular_layout-compactness-311-listitem-002"><p id="circular_layout-compactness-311-simpara-003">reducing <span class="api">BalloonLayout.compactnessFactor</span> (say, to 0.1)</p></li><li id="circular_layout-compactness-311-listitem-003"><p id="circular_layout-compactness-311-simpara-004">setting <span class="api">BalloonLayout.allowOverlaps</span> to <code>true</code>\n(note that this may introduce node overlaps)</p></li><li id="circular_layout-compactness-311-listitem-004"><p id="circular_layout-compactness-311-simpara-005">reducing <span class="api">BalloonLayout.minimumEdgeLength</span></p></li><li id="circular_layout-compactness-311-listitem-005"><p id="circular_layout-compactness-311-simpara-006">reducing <span class="api">SingleCycleLayout.minimumNodeDistance</span></p></li><li id="circular_layout-compactness-311-listitem-006"><p id="circular_layout-compactness-311-simpara-007">increasing <span class="api">CircularLayout.maximumDeviationAngle</span></p></li><li id="circular_layout-compactness-311-listitem-007"><p id="circular_layout-compactness-311-simpara-008">disable <span class="api">CircularLayout.placeChildrenOnCommonRadius</span></p></li><li id="circular_layout-compactness-311-listitem-008"><p id="circular_layout-compactness-311-simpara-009">removing any <a href="#/dguide/tab_circular_layout_keys_node_halos">node halos</a></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"circular_layout-compactness-311-simpara-010",content:'<a href="#/dguide/fig_circular_layout-compactness">Increasing layout compactness</a> shows the cumulative effect on layout compactness\nwhen changing the settings of the layout algorithm.'},{tagname:"figure","class":"image",title:"Increasing layout compactness",id:"fig_circular_layout-compactness","float":0,children:[{tagname:"img",src:"assets/circular_compactness_default.0b0a3e3d.gif",alt:"",title:'<para class="dguide-para">(a) Default settings</para>'},{tagname:"img",src:"assets/circular_compactness_node_dist.fa58e4b5.gif",alt:"",title:'<para class="dguide-para">(b) <span class="api">minimumNodeDistance</span> = 10.0</para>'},{tagname:"img",src:"assets/circular_compactness_overlaps.f0f47f9b.gif",alt:"",title:'<para class="dguide-para">(c) <span class="api">allowOverlaps</span> = <code>true</code></para>'},{tagname:"img",src:"assets/circular_compactness_edge_length.51bf5828.gif",alt:"",title:'<para class="dguide-para">(d) <span class="api">minimumEdgeLength</span> = 10</para>'}]}]},{tagname:"section",id:"circular_layout-circle_indices",title:"Returning Circle Indices",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-circle_indices-312-simpara-001",content:'As an option, <span class="api">CircularLayout</span> can write integer values\nfor every node to the <a href="#/dguide/tab_circular_layout_keys_circle_ids">layout data</a> which represent\nthe circle indices after layout calculation.'}]},{tagname:"section",id:"circular_layout-supplemental_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"circular_layout-supplemental_layout_data-313-simpara-001",content:'When using class <span class="api">CircularLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="circular_layout-supplemental_layout_data-313-api-link-001" data-member="" data-text="CircularLayoutData" data-type="yfiles.circular.CircularLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_circular_layout-data_provider_keys">Supplemental layout data</a> lists all properties of\n<span class="api">CircularLayoutData</span> and the corresponding look-up keys that\n<span class="api">CircularLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"circular_layout-supplemental_layout_data-313-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_circular_layout-data_provider_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="circular_layout-supplemental_layout_data-313-thead-001"><tr id="circular_layout-supplemental_layout_data-313-row-001"><th id="circular_layout-supplemental_layout_data-313-entry-001" align="left" valign="top">\nCircularLayoutData Property\n</th><th id="circular_layout-supplemental_layout_data-313-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="circular_layout-supplemental_layout_data-313-entry-003" align="left" valign="top">\nElement Type\n</th><th id="circular_layout-supplemental_layout_data-313-entry-004" align="left" valign="top">\nValue Type\n</th><th id="circular_layout-supplemental_layout_data-313-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="circular_layout-supplemental_layout_data-313-tbody-001"><tr id="circular_layout-supplemental_layout_data-313-row-002"><td id="circular_layout-supplemental_layout_data-313-entry-006" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-003"><anchor id="tab_circular_layout_keys_custom_groups" xreflabel="[tab_circular_layout_keys_custom_groups]"></anchor><api-link id="circular_layout-supplemental_layout_data-313-api-link-002" data-member="customGroups" data-text="customGroups" data-type="yfiles.circular.CircularLayoutData"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-007" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-004"><api-link id="circular_layout-supplemental_layout_data-313-api-link-003" data-member="CUSTOM_GROUPS_DP_KEY" data-text="CUSTOM_GROUPS_DP_KEY" data-type="yfiles.circular.CircularLayout"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-008" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-005">node</para></td><td id="circular_layout-supplemental_layout_data-313-entry-009" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-006">Object</para></td><td id="circular_layout-supplemental_layout_data-313-entry-010" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-007">For each node an arbitrary Object indicating the group it is affiliated with.</para></td></tr><tr id="circular_layout-supplemental_layout_data-313-row-003"><td id="circular_layout-supplemental_layout_data-313-entry-011" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-008"><anchor id="tab_circular_layout_keys_circle_ids" xreflabel="[tab_circular_layout_keys_circle_ids]"></anchor><api-link id="circular_layout-supplemental_layout_data-313-api-link-004" data-member="circleIds" data-text="circleIds" data-type="yfiles.circular.CircularLayoutData"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-012" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-009"><api-link id="circular_layout-supplemental_layout_data-313-api-link-005" data-member="CIRCLE_ID_DP_KEY" data-text="CIRCLE_ID_DP_KEY" data-type="yfiles.circular.CircularLayout"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-013" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-010">node</para></td><td id="circular_layout-supplemental_layout_data-313-entry-014" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-011">Integer</para></td><td id="circular_layout-supplemental_layout_data-313-entry-015" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-012">The layout algorithm writes an integer value for each node. This value represents the index of the actual circle a node is part of.</para></td></tr><tr id="circular_layout-supplemental_layout_data-313-row-004"><td id="circular_layout-supplemental_layout_data-313-entry-016" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-013"><anchor id="tab_circular_layout_keys_node_halos" xreflabel="[tab_circular_layout_keys_node_halos]"></anchor><api-link id="circular_layout-supplemental_layout_data-313-api-link-006" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.circular.CircularLayoutData"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-017" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-014"><api-link id="circular_layout-supplemental_layout_data-313-api-link-007" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-018" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-015">node</para></td><td id="circular_layout-supplemental_layout_data-313-entry-019" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-016">NodeHalo</para></td><td id="circular_layout-supplemental_layout_data-313-entry-020" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-017">A <api-link id="circular_layout-supplemental_layout_data-313-api-link-008" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="circular_layout-supplemental_layout_data-313-row-005"><td id="circular_layout-supplemental_layout_data-313-entry-021" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-018"><anchor id="tab_circular_layout_keys_abort_handler" xreflabel="[tab_circular_layout_keys_abort_handler]"></anchor><api-link id="circular_layout-supplemental_layout_data-313-api-link-009" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.circular.CircularLayoutData"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-022" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-019"><api-link id="circular_layout-supplemental_layout_data-313-api-link-010" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-023" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-020">graph</para></td><td id="circular_layout-supplemental_layout_data-313-entry-024" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-021">AbortHandler</para></td><td id="circular_layout-supplemental_layout_data-313-entry-025" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-022">An <api-link id="circular_layout-supplemental_layout_data-313-api-link-011" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried by the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="circular_layout-supplemental_layout_data-313-row-006"><td id="circular_layout-supplemental_layout_data-313-entry-026" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-023"><anchor id="tab_circular_layout_keys_edge_bundle_descriptors" xreflabel="[tab_circular_layout_keys_edge_bundle_descriptors]"></anchor><api-link id="circular_layout-supplemental_layout_data-313-api-link-012" data-member="edgeBundleDescriptors" data-text="edgeBundleDescriptors" data-type="yfiles.circular.CircularLayoutData"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-027" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-024"><api-link id="circular_layout-supplemental_layout_data-313-api-link-013" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="circular_layout-supplemental_layout_data-313-entry-028" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-025">edge</para></td><td id="circular_layout-supplemental_layout_data-313-entry-029" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-026"><span class="api">EdgeBundleDescriptor</span></para></td><td id="circular_layout-supplemental_layout_data-313-entry-030" align="left" valign="top"><para class="dguide-para" id="circular_layout-supplemental_layout_data-313-simpara-027">For each edge an <api-link id="circular_layout-supplemental_layout_data-313-api-link-014" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"radial_layout",title:"Radial Layout",children:[{tagname:"para","class":"dguide-para",id:"radial_layout-314-simpara-001",content:'Class <api-link id="radial_layout-314-api-link-001" data-member="" data-text="RadialLayout" data-type="yfiles.radial.RadialLayout"></api-link> is a layout algorithm, that arranges\nthe nodes of a graph on concentric circles.\nThe layout calculation starts by conceptually reducing the graph to a tree structure\nwhose root node is taken as the center of all circles.\nEach child node in this tree structure is then placed on the next outer circle within\nthe sector of the circle that was reserved by its parent node.\nAll edges that were initially ignored are re-established and the radii of the circles\nare calculated taking the sector sizes needed by each whole subtree into account.'},{tagname:"para","class":"dguide-para",id:"radial_layout-314-simpara-002",content:"This layout style is well suited for the visualization of directed graphs and tree-like\nstructures."},{tagname:"section",id:"_terminology_2",title:"Terminology",children:[{tagname:"para","class":"dguide-para",id:"_terminology_2-315-simpara-001",content:'The circles are also referred to as <span class="def">layers</span>.\nLayer count increases from center to outer.'},{tagname:"figure","class":"image",title:"Sample layout produced by class RadialLayout",id:"_terminology_2-315-figure-001","float":0,children:[{tagname:"img",src:"assets/radial.25f86cb3.jpg",alt:"Sample radial layout",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_basic_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"_basic_options-316-simpara-001",content:'The policy to choose the center node from the node set of the graph can be determined\nby using the\n<api-link id="_basic_options-316-api-link-001" data-member="centerNodesPolicy" data-text="centerNodesPolicy" data-type="yfiles.radial.RadialLayout"></api-link>\nproperty.\nThe following policies are available:'},{tagname:"para",content:'<dl id="_basic_options-316-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_basic_options-316-term-001"><api-link id="_basic_options-316-api-link-002" data-member="DIRECTED" data-text="DIRECTED" data-type="yfiles.radial.CenterNodesPolicy"></api-link></dt><dd id="_basic_options-316-listitem-001">\n<p id="_basic_options-316-simpara-002">Chooses the center node from the set of nodes that have no predecessors.\nIf this set is empty, an arbitrary node of the graph becomes the center node.</p>\n</dd>\n<dt id="_basic_options-316-term-002"><api-link id="_basic_options-316-api-link-003" data-member="CENTRALITY" data-text="CENTRALITY" data-type="yfiles.radial.CenterNodesPolicy"></api-link></dt><dd id="_basic_options-316-listitem-002">\n<p id="_basic_options-316-simpara-003">The node that has the highest centrality becomes the center node.</p>\n</dd>\n<dt id="_basic_options-316-term-003"><api-link id="_basic_options-316-api-link-004" data-member="WEIGHTED_CENTRALITY" data-text="WEIGHTED_CENTRALITY" data-type="yfiles.radial.CenterNodesPolicy"></api-link></dt><dd id="_basic_options-316-listitem-003">\n<p id="_basic_options-316-simpara-004">The node that has the highest weighted centrality becomes the center node.\nThis is the default setting.</p>\n</dd>\n<dt id="_basic_options-316-term-004"><api-link id="_basic_options-316-api-link-005" data-member="CUSTOM" data-text="CUSTOM" data-type="yfiles.radial.CenterNodesPolicy"></api-link></dt><dd id="_basic_options-316-listitem-004">\n<p id="_basic_options-316-simpara-005">Uses a custom selection of nodes that has been specified by means of <a href="#/dguide/tab_radial_layout_keys_affected_nodes">layout data</a>.\nIf there is more than one node marked as center node, these nodes get placed on\nthe innermost circle and the actual center position remains empty.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_basic_options-316-simpara-006",content:'The <api-link id="_basic_options-316-api-link-006" data-member="layeringStrategy" data-text="layeringStrategy" data-type="yfiles.radial.RadialLayout"></api-link>\nproperty specifies how nodes will be distributed to the layers.\nThe following strategies are available:'},{tagname:"para",content:'<dl id="_basic_options-316-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_basic_options-316-term-005"><api-link id="_basic_options-316-api-link-007" data-member="BFS" data-text="BFS" data-type="yfiles.radial.LayeringStrategy"></api-link></dt><dd id="_basic_options-316-listitem-005">\n<p id="_basic_options-316-simpara-007">Layering based on a breadth-first search (BFS).\nAll edges will span at most one layer in the resulting drawing.\nEdges between nodes that belong to the same layer are possible.\nThis is the default setting.</p>\n</dd>\n<dt id="_basic_options-316-term-006"><api-link id="_basic_options-316-api-link-008" data-member="HIERARCHICAL" data-text="HIERARCHICAL" data-type="yfiles.radial.LayeringStrategy"></api-link></dt><dd id="_basic_options-316-listitem-006">\n<p id="_basic_options-316-simpara-008">The layer distance of an edge is the absolute difference between the layer numbers\nof its source and target node.\nLayer assignment will be done in such a way that the overall sum of the layer distances\nof all edges in the layout is minimal.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_basic_options-316-simpara-009",content:"The distance between the layers depends on the space that is needed by the subtrees.\nHowever, the layer spacing can be controlled and a minimal distance can be defined."},{tagname:"para",content:'<dl id="_basic_options-316-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="_basic_options-316-term-007" class="title" role="title">Layer Spacing</dt><dt id="_basic_options-316-term-008"><api-link id="_basic_options-316-api-link-009" data-member="layerSpacing" data-text="layerSpacing" data-type="yfiles.radial.RadialLayout"></api-link></dt><dd id="_basic_options-316-listitem-007">\n<p id="_basic_options-316-simpara-010">Defines a unit value for the distance between circles, i.e., each circle radius\nis a multiple of this value.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_basic_options-316-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="_basic_options-316-term-009" class="title" role="title">Minimal Layer Distance</dt><dt id="_basic_options-316-term-010"><api-link id="_basic_options-316-api-link-010" data-member="minimumLayerDistance" data-text="minimumLayerDistance" data-type="yfiles.radial.RadialLayout"></api-link></dt><dd id="_basic_options-316-listitem-008">\n<p id="_basic_options-316-simpara-011">Defines the minimal layer distance.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_basic_options-316-simpara-012",content:'Edge routing options include different routing policies that can be specified using\nthe <api-link id="_basic_options-316-api-link-011" data-member="edgeRoutingStrategy" data-text="edgeRoutingStrategy" data-type="yfiles.radial.RadialLayout"></api-link>\nproperty:'},{tagname:"para",content:'<dl id="_basic_options-316-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="_basic_options-316-term-011"><api-link id="_basic_options-316-api-link-012" data-member="POLYLINE" data-text="POLYLINE" data-type="yfiles.radial.EdgeRoutingStrategy"></api-link></dt><dd id="_basic_options-316-listitem-009">\n<p id="_basic_options-316-simpara-013">Polyline edge routing.\nEdges will be routed straight-line, if possible, or have bends on the circles.</p>\n</dd>\n<dt id="_basic_options-316-term-012"><api-link id="_basic_options-316-api-link-013" data-member="ARC" data-text="ARC" data-type="yfiles.radial.EdgeRoutingStrategy"></api-link></dt><dd id="_basic_options-316-listitem-010">\n<p id="_basic_options-316-simpara-014">Arc edge routing.\nSource and target of an edge as well as one bend on each spanned circle are used\nas main control points.\nAdditional control points are inserted in-between to create an arc-like edge.\nThis is the default setting.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_basic_options-316-simpara-015",content:"Note that with both edge routing policies overlaps of edge paths with nodes cannot\nalways be prevented.\nIn particular, this affects edges that span multiple circles (i.e., layers)."}]},{tagname:"section",id:"radial_layout_node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"radial_layout_node_halos-317-simpara-001",content:'<span class="api">RadialLayout</span> by default supports node halos as soon as they are <a href="#/dguide/tab_radial_layout_keys_node_halo">declared</a>.\nIt considers any specified additional padding around nodes, however, edges can\ncross through these areas in the resulting diagram.'}]},{tagname:"section",id:"radial_edge_bundling",title:"Edge Bundling",children:[{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-001",content:'<span class="api">RadialLayout</span> supports edge bundling for\nthe non-tree edges in a diagram to bundle their paths so that they follow similar\nroutes.'},{tagname:"figure","class":"image",title:"Radial layout with edge bundling of non-tree edges",id:"fig_radial_edge_bundling","float":0,children:[{tagname:"img",src:"assets/radial-edgebundling.c789fc54.png",alt:"",title:'<para class="dguide-para">Edge bundling of non-tree edges in a radial layout.</para>'}]},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-002",content:"Using edge bundling significantly reduces the visual clutter in drawings of large\ngraphs with many edges.\nIn addition, high-level patterns of edge routes and relations between different\ngroups of nodes can be highlighted and easily recognized.\nEdge bundling is commonly used in bio-informatics, social network analysis, telecommunications,\nand in fraud detection."},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-003",content:'Edge bundling in <span class="api">RadialLayout</span> is supported\nfor the non-tree edges of a diagram.'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-004",content:'The actual setup and edge bundling configuration is the responsibility of the <api-link id="radial_edge_bundling-318-api-link-001" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nclass.\n<span class="api">RadialLayout</span> provides the following property\nto access the instance it holds of this class:'},{tagname:"para",content:'<dl id="radial_edge_bundling-318-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="radial_edge_bundling-318-term-001"><api-link id="radial_edge_bundling-318-api-link-002" data-member="edgeBundling" data-text="edgeBundling:&#xA0;EdgeBundling" data-type="yfiles.radial.RadialLayout"></api-link></dt><dd id="radial_edge_bundling-318-listitem-001">\n<p id="radial_edge_bundling-318-simpara-005">Property to access the <span class="api">EdgeBundling</span> instance to\nconfigure edge bundling-related drawing options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-006",content:'This <span class="api">EdgeBundling</span> instance holds an instance of class\n<api-link id="radial_edge_bundling-318-api-link-003" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> to store and retrieve\ndefault edge bundling values for non-tree edges.\nThe following property can be used to retrieve this default <span class="api">EdgeBundleDescriptor</span>\ninstance:'},{tagname:"para",content:'<dl id="radial_edge_bundling-318-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="radial_edge_bundling-318-term-002"><api-link id="radial_edge_bundling-318-api-link-004" data-member="defaultBundleDescriptor" data-text="defaultBundleDescriptor:&#xA0;EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="radial_edge_bundling-318-listitem-002">\n<p id="radial_edge_bundling-318-simpara-007">Property to access the default edge bundling descriptor held by <span class="api">EdgeBundling</span>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-008",content:'In addition to the instance held by <span class="api">EdgeBundling</span>,\nedge bundling descriptors can also be associated with single non-tree edges in order\nto specify individual settings for them.\nSetting individual descriptors for non-tree edges is done through <a href="#/dguide/tab_radial_layout_keys_edge_bundle_descriptor">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-009",content:'Classes <api-link id="radial_edge_bundling-318-api-link-005" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link> and <api-link id="radial_edge_bundling-318-api-link-006" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>\nprovide the means to configure drawing options related to the edge bundling support\nin <span class="api">RadialLayout</span>.\nClass <span class="api">EdgeBundling</span> defines global settings regarding\nthe edge bundling, for example, the strength and the quality of the bundling.\nIt also holds a default <span class="api">EdgeBundleDescriptor</span> instance\nwith fallback settings for the edges of a graph.\nClass <span class="api">EdgeBundleDescriptor</span> can be used to configure\nthe bundling settings of an individual edge.\nIt can be specified whether or not:'},{tagname:"para",content:'<ul id="radial_edge_bundling-318-itemizedlist-001"><li id="radial_edge_bundling-318-listitem-003"><p id="radial_edge_bundling-318-simpara-010">an edge shall be bundled</p></li><li id="radial_edge_bundling-318-listitem-004"><p id="radial_edge_bundling-318-simpara-011">the direction of an edge should be taken into consideration</p></li><li id="radial_edge_bundling-318-listitem-005"><p id="radial_edge_bundling-318-simpara-012">an edge should be approximated by a cubic Bezier curve</p></li></ul>'
},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-013",content:'To configure the global edge bundling settings class <api-link id="radial_edge_bundling-318-api-link-007" data-member="" data-text="EdgeBundling" data-type="yfiles.layout.EdgeBundling"></api-link>\nprovides the following properties:'},{tagname:"para",content:'<dl id="radial_edge_bundling-318-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="radial_edge_bundling-318-term-003" class="title" role="title">Bundling Strength</dt><dt id="radial_edge_bundling-318-term-004"><api-link id="radial_edge_bundling-318-api-link-008" data-member="bundlingStrength" data-text="bundlingStrength:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="radial_edge_bundling-318-listitem-006">\n<p id="radial_edge_bundling-318-simpara-014">Determines the tightness of the edge bundles.\nIt takes values from interval [0.0, 1.0] where 0.0 corresponds\nto straight-line, non-bundled edges and 1.0 to strongly bundled edges.\nFor good readability featuring clearly visible bundles, a bundling strength greater\nthan 0.8 is recommended.</p>\n</dd>\n<dt id="radial_edge_bundling-318-term-005" class="title" role="title">Bundling Quality</dt><dt id="radial_edge_bundling-318-term-006"><api-link id="radial_edge_bundling-318-api-link-009" data-member="bundlingQuality" data-text="bundlingQuality:&#xA0;number" data-type="yfiles.layout.EdgeBundling"></api-link></dt><dd id="radial_edge_bundling-318-listitem-007">\n<p id="radial_edge_bundling-318-simpara-015">Determines the quality of the edge bundling.\nHigher values require more sophisticated methods to calculate the bundles and, thus,\nthe running time can significantly increase.\nThe setting can take values from interval [0.0, 1.0].\nFor large graphs, values smaller than 0.2 are recommended.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-016",content:'The per-edge settings can be configured via the following properties in class <api-link id="radial_edge_bundling-318-api-link-010" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link>:'},{tagname:"para",content:'<dl id="radial_edge_bundling-318-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="radial_edge_bundling-318-term-007" class="title" role="title">Bundle Edge</dt><dt id="radial_edge_bundling-318-term-008"><api-link id="radial_edge_bundling-318-api-link-011" data-member="bundled" data-text="bundled:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="radial_edge_bundling-318-listitem-008">\n<p id="radial_edge_bundling-318-simpara-017">Determines whether or not an edge shall be bundled.</p>\n</dd>\n<dt id="radial_edge_bundling-318-term-009" class="title" role="title">Consider Edge Direction</dt><dt id="radial_edge_bundling-318-term-010"><api-link id="radial_edge_bundling-318-api-link-012" data-member="considerDirection" data-text="considerDirection:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="radial_edge_bundling-318-listitem-009">\n<p id="radial_edge_bundling-318-simpara-018">Determines if the direction of an edge should be taken into consideration.\nIf enabled, incoming and outgoing edges incident to a node are bundled separately.</p>\n</dd>\n<dt id="radial_edge_bundling-318-term-011" class="title" role="title">Use Bezier Fitting</dt><dt id="radial_edge_bundling-318-term-012"><api-link id="radial_edge_bundling-318-api-link-013" data-member="bezierFitting" data-text="bezierFitting:&#xA0;boolean" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link></dt><dd id="radial_edge_bundling-318-listitem-010">\n<p id="radial_edge_bundling-318-simpara-019">Determines whether or not the path of an edge should be approximated by a cubic\nBezier curve.\nThe number of bends may be significantly reduced by the approximation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"radial_edge_bundling-318-simpara-020",content:'An <span class="api">EdgeBundleDescriptor</span> instance can be specified\nindividually for single edges by means of <a href="#/dguide/tab_radial_layout_keys_edge_bundle_descriptor">layout data</a>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeBundleDescriptor</span>\ninstance that is registered with <span class="api">EdgeBundling</span> will\nbe used.'}]},{tagname:"section",id:"_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"_layout_data-319-simpara-001",content:'When using class <span class="api">RadialLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="_layout_data-319-api-link-001" data-member="" data-text="RadialLayoutData" data-type="yfiles.radial.RadialLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_radial_layout-dataprovider_keys">Supplemental layout data</a> lists all properties of\n<span class="api">RadialLayoutData</span> and the corresponding look-up keys that\n<span class="api">RadialLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"_layout_data-319-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_radial_layout-dataprovider_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="_layout_data-319-thead-001"><tr id="_layout_data-319-row-001"><th id="_layout_data-319-entry-001" align="left" valign="top">\nRadialLayoutData Property\n</th><th id="_layout_data-319-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="_layout_data-319-entry-003" align="left" valign="top">\nElement Type\n</th><th id="_layout_data-319-entry-004" align="left" valign="top">\nValue Type\n</th><th id="_layout_data-319-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_layout_data-319-tbody-001"><tr id="_layout_data-319-row-002"><td id="_layout_data-319-entry-006" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-003"><anchor id="tab_radial_layout_keys_affected_nodes" xreflabel="[tab_radial_layout_keys_affected_nodes]"></anchor><api-link id="_layout_data-319-api-link-002" data-member="centerNodes" data-text="centerNodes" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-007" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-004"><api-link id="_layout_data-319-api-link-003" data-member="AFFECTED_NODES_DP_KEY" data-text="AFFECTED_NODES_DP_KEY" data-type="yfiles.layout.LayoutKeys"></api-link></para></td><td id="_layout_data-319-entry-008" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-005">node</para></td><td id="_layout_data-319-entry-009" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-006">boolean</para></td><td id="_layout_data-319-entry-010" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-007">For each node a boolean value indicating whether it shall be placed in the center.</para></td></tr><tr id="_layout_data-319-row-003"><td id="_layout_data-319-entry-011" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-008"><anchor id="tab_radial_layout_keys_node_infos" xreflabel="[tab_radial_layout_keys_node_infos]"></anchor><api-link id="_layout_data-319-api-link-004" data-member="nodeInfos" data-text="nodeInfos" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-012" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-009"><api-link id="_layout_data-319-api-link-005" data-member="NODE_INFO_DP_KEY" data-text="NODE_INFO_DP_KEY" data-type="yfiles.radial.RadialLayout"></api-link></para></td><td id="_layout_data-319-entry-013" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-010">node</para></td><td id="_layout_data-319-entry-014" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-011">NodeInfo</para></td><td id="_layout_data-319-entry-015" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-012">For each node a value indicating on which circle and in which sector the node has been placed by the layout.</para></td></tr><tr id="_layout_data-319-row-004"><td id="_layout_data-319-entry-016" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-013"><anchor id="tab_radial_layout_keys_source_groupid" xreflabel="[tab_radial_layout_keys_source_groupid]"></anchor><api-link id="_layout_data-319-api-link-006" data-member="sourceGroups" data-text="sourceGroups" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-017" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-014"><api-link id="_layout_data-319-api-link-007" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="_layout_data-319-entry-018" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-015">edge</para></td><td id="_layout_data-319-entry-019" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-016">object</para></td><td id="_layout_data-319-entry-020" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-017">For each edge an arbitrary object indicating the group its source end is affiliated with.</para></td></tr><tr id="_layout_data-319-row-005"><td id="_layout_data-319-entry-021" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-018"><anchor id="tab_radial_layout_keys_target_groupid" xreflabel="[tab_radial_layout_keys_target_groupid]"></anchor><api-link id="_layout_data-319-api-link-008" data-member="targetGroups" data-text="targetGroups" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-022" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-019"><api-link id="_layout_data-319-api-link-009" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="_layout_data-319-entry-023" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-020">edge</para></td><td id="_layout_data-319-entry-024" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-021">object</para></td><td id="_layout_data-319-entry-025" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-022">For each edge an arbitrary Object indicating the group its target end is affiliated with.</para></td></tr><tr id="_layout_data-319-row-006"><td id="_layout_data-319-entry-026" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-023"><anchor id="tab_radial_layout_keys_node_halo" xreflabel="[tab_radial_layout_keys_node_halo]"></anchor><api-link id="_layout_data-319-api-link-010" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-027" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-024"><api-link id="_layout_data-319-api-link-011" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="_layout_data-319-entry-028" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-025">node</para></td><td id="_layout_data-319-entry-029" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-026">NodeHalo</para></td><td id="_layout_data-319-entry-030" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-027">A <api-link id="_layout_data-319-api-link-012" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="_layout_data-319-row-007"><td id="_layout_data-319-entry-031" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-028"><anchor id="tab_radial_layout_keys_edge_bundle_descriptor" xreflabel="[tab_radial_layout_keys_edge_bundle_descriptor]"></anchor><api-link id="_layout_data-319-api-link-013" data-member="edgeBundleDescriptors" data-text="edgeBundleDescriptors" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-032" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-029"><api-link id="_layout_data-319-api-link-014" data-member="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-text="EDGE_BUNDLE_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.EdgeBundling"></api-link></para></td><td id="_layout_data-319-entry-033" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-030">edge</para></td><td id="_layout_data-319-entry-034" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-031"><span class="api">EdgeBundleDescriptor</span></para></td><td id="_layout_data-319-entry-035" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-032">For each edge an <api-link id="_layout_data-319-api-link-015" data-member="" data-text="EdgeBundleDescriptor" data-type="yfiles.layout.EdgeBundleDescriptor"></api-link> object that configures edge bundling options.</para></td></tr><tr id="_layout_data-319-row-008"><td id="_layout_data-319-entry-036" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-033"><anchor id="tab_radial_layout_keys_abort_handler" xreflabel="[tab_radial_layout_keys_abort_handler]"></anchor><api-link id="_layout_data-319-api-link-016" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.radial.RadialLayoutData"></api-link></para></td><td id="_layout_data-319-entry-037" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-034"><api-link id="_layout_data-319-api-link-017" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="_layout_data-319-entry-038" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-035">graph</para></td><td id="_layout_data-319-entry-039" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-036">AbortHandler</para></td><td id="_layout_data-319-entry-040" align="left" valign="top"><para class="dguide-para" id="_layout_data-319-simpara-037">An <api-link id="_layout_data-319-api-link-018" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried by the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"seriesparallel_layout",title:"Series-parallel Layout",children:[{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-001",content:'The series-parallel layout style specializes in the layout of series-parallel graphs,\na special subset of so-called two-terminal graphs whose structure can be built recursively\nusing two distinct composition operations as outlined in <a href="#/dguide/seriesparallel_layout-terminology">Terminology</a>.'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-002",content:"General graphs are processed by temporarily transforming them into a series-parallel\nstructure for the layout calculation."},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-003",content:'Similar to the hierarchical layout style, this style can highlight the main direction\nor <strong id="seriesparallel_layout-320-emphasis-001" class="bold" role="bold">flow</strong> within a directed graph.\nThe nodes of a graph are placed such that the (majority of) edges of the graph show\nthe same overall orientation, for example, top-to-bottom.'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-004",content:"The layout algorithm places series structures of the given graph below each other\nand parallel structures side by side."},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-005",content:"Note that for true series-parallel graphs, it is always possible to place the nodes\nsuch that there are no edge crossings."},{tagname:"figure","class":"image",title:"Sample layout by class SeriesParallelLayout",id:"fig_seriesparallel_layout-sample","float":0,children:[{tagname:"img",src:"assets/series_parallel.25914951.jpg",alt:"Sample series-parallel layout",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-320-simpara-006",content:'<a href="#/dguide/fig_seriesparallel_layout-sample">Sample layout by class SeriesParallelLayout</a> shows a series-parallel layout with top-to-bottom\norientation of a series-parallel graph.\nNote that the series-parallel layout style can be combined with polyline, orthogonal,\nand octilinear edge routing.\nAlso, layout of grouped graphs is supported by this layout style, too.'},{tagname:"section",id:"seriesparallel_layout-terminology",title:"Terminology",children:[{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-terminology-321-simpara-001",content:'In a series-parallel graph there are two distinct <span class="def">terminal</span>\nnodes: a <span class="def">source</span> node with only outgoing edges and\na <span class="def">sink</span> node with only incoming edges.\nIn between these terminal nodes, there can be any combination of series and parallel\nstructures that are composed recursively using two distinct composition operations:'},{tagname:"para",content:'<ul id="seriesparallel_layout-terminology-321-itemizedlist-001"><li id="seriesparallel_layout-terminology-321-listitem-001"><p id="seriesparallel_layout-terminology-321-simpara-002">series composition operation:\ntwo series-parallel graphs are joined by merging the source node of one with the\nsink node of the other; the resulting graph is a series of the two previous graphs;\n<a href="#/dguide/fig_seriesparallel_layout-composition">see the two left figures</a> for the before\nand after of this composition operation</p></li><li id="seriesparallel_layout-terminology-321-listitem-002"><p id="seriesparallel_layout-terminology-321-simpara-003">parallel composition operation:\ntwo series-parallel graphs are joined by merging their source nodes and merging\ntheir sink nodes;\nin the resulting graph the non-terminal nodes of the two previous graphs are in\nparallel;\n<a href="#/dguide/fig_seriesparallel_layout-composition">see the two right figures</a> for the before\nand after of this composition operation</p></li></ul>'},{tagname:"figure","class":"image",title:"Series-parallel composition operations",id:"fig_seriesparallel_layout-composition","float":0,children:[{tagname:"img",src:"assets/series_parallel_series-operation-before.aa0545a7.jpg",alt:"",title:'<para class="dguide-para">Series-parallel graphs before…​</para>'},{tagname:"img",src:"assets/series_parallel_series-operation-after.5c1c5c2a.jpg",alt:"",title:'<para class="dguide-para">…​ and after being joined by a series composition operation.</para>'},{tagname:"img",src:"assets/series_parallel_parallel-operation-before.7e5f96a9.jpg",alt:"",title:'<para class="dguide-para">Series-parallel graphs before…​</para>'},{tagname:"img",src:"assets/series_parallel_parallel-operation-after.c09a000c.jpg",alt:"",title:'<para class="dguide-para">…​ and after being joined by a parallel composition operation.</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-terminology-321-simpara-004",content:"Note that terminal nodes can also be identified in each parallel (sub)structure\nof a series-parallel graph.\nThe beginning of the parallel (sub)structure is defined by a source node from which\nmultiple edges leave, and the end is defined by a sink node into which multiple\nedges enter."}]},{tagname:"section",id:"_relevant_classes_2",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"_relevant_classes_2-322-simpara-001",content:'<a href="#/dguide/tab_seriesparallel_layout-classes">Relevant classes for this style</a> lists the relevant classes for the\nseries-parallel layout style.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_seriesparallel_layout-classes",rowsep:1,content:'<caption>Relevant classes for this style</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><tbody id="_relevant_classes_2-322-tbody-001"><tr id="_relevant_classes_2-322-row-001"><td id="_relevant_classes_2-322-entry-001" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-002">Class Name</para></td><td id="_relevant_classes_2-322-entry-002" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-003">Description</para></td></tr><tr id="_relevant_classes_2-322-row-002"><td id="_relevant_classes_2-322-entry-003" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-004"><api-link id="_relevant_classes_2-322-api-link-001" data-member="" data-text="SeriesParallelLayout" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></para></td><td id="_relevant_classes_2-322-entry-004" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-005">Main algorithm. See <a href="#/dguide/seriesparallel_layout-options">the description</a> below.</para></td></tr><tr id="_relevant_classes_2-322-row-003"><td id="_relevant_classes_2-322-entry-005" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-006"><api-link id="_relevant_classes_2-322-api-link-002" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.seriesparallel.EdgeLayoutDescriptor"></api-link></para></td><td id="_relevant_classes_2-322-entry-006" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-007">Provides edge-related layout options.</para></td></tr><tr id="_relevant_classes_2-322-row-004"><td id="_relevant_classes_2-322-entry-007" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-008"><api-link id="_relevant_classes_2-322-api-link-003" data-member="" data-text="DefaultPortAssignment" data-type="yfiles.seriesparallel.DefaultPortAssignment"></api-link></para></td><td id="_relevant_classes_2-322-entry-008" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_2-322-simpara-009">Configures port distribution options at terminal nodes before and after parallel subgraphs.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_relevant_classes_2-322-simpara-010",content:'Class <api-link id="_relevant_classes_2-322-api-link-004" data-member="" data-text="SeriesParallelLayout" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link>\nis a layout provider for series-parallel graphs.'},{tagname:"para","class":"dguide-para",id:"_relevant_classes_2-322-simpara-011",content:'It provides a set of options that affect its layout behavior.\nThese options can be set using the properties of class <span class="api">SeriesParallelLayout</span>.\nThe options are documented within the API documentation of class\n<api-link id="_relevant_classes_2-322-api-link-005" data-member="" data-text="SeriesParallelLayout" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link>.'}]},{tagname:"section",id:"seriesparallel_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-001",content:'These options configure class <span class="api">SeriesParallelLayout</span> in detail.'},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-001" class="title" role="title">Layout Orientation</dt><dt id="seriesparallel_layout-options-323-term-002"><api-link id="seriesparallel_layout-options-323-api-link-001" data-member="layoutOrientation" data-text="layoutOrientation" data-type="yfiles.layout.MultiStageLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-001">\n<p id="seriesparallel_layout-options-323-simpara-002">Determines the main layout orientation, i.e., the overall orientation for the edges\nin a layout.\nThis property is inherited from <span class="api">MultiStageLayout</span>, the direct superclass\nof <span class="api">SeriesParallelLayout</span>.\nThe layout algorithm tries to arrange nodes in such a way that all edges point in\nthe main layout direction.\nBy default, the overall orientation for the edges will be from top to bottom.\nThe other three layout directions can be set using the constants from the\n<api-link id="seriesparallel_layout-options-323-api-link-002" data-member="" data-text="LayoutOrientation" data-type="yfiles.layout.LayoutOrientation"></api-link> enumeration.\n<a href="#/dguide/ex_series_parallel_layout-orientation">Setting the layout orientation</a> shows how to set the layout direction.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"seriesparallel_layout-options-323-note-001",content:'<p id="seriesparallel_layout-options-323-simpara-003">The documentation for the other layout options assumes that this default orientation is being used.</p>'},{tagname:"example",id:"ex_series_parallel_layout-orientation",title:"Setting the layout orientation",content:'<pre class="programlisting javascript" id="seriesparallel_layout-options-323-programlisting-001" language="javascript" format="linespecific"><code>const spl = new yfiles.seriesparallel.SeriesParallelLayout()\r\n// Use left-to-right main layout direction.\r\nspl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-004",content:"The order of parallel subgraphs can be controlled by a custom System.Collections.IComparer\nimplementation."},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-003" class="title" role="title">Out Edge Comparer</dt><dt id="seriesparallel_layout-options-323-term-004"><api-link id="seriesparallel_layout-options-323-api-link-003" data-member="defaultOutEdgeComparer" data-text="defaultOutEdgeComparer" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-002">\n<p id="seriesparallel_layout-options-323-simpara-005">Sets the default <api-link id="seriesparallel_layout-options-323-api-link-004" data-member="" data-text="IComparer&lt;T&gt;" data-type="yfiles.collections.IComparer"></api-link> implementation for outgoing edges.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-006",content:"If a terminal node has several outgoing edges, the out edge comparer is used to\nsort them by a certain criterion.\nThe following left figure shows a graph where edges are sorted from left to right\nby the height of their target node."},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-007",content:"It is important to understand that outgoing edges may not be completely independent,\nand in order to avoid edge crossings, only edges that connect into the same parallel\nsubgraph are compared.\nThe right figure shows an example of this when the outgoing edges are sorted using\nthe same criterion.\nAlthough the middle edge has a smaller target node than the right edge, it is not\nsorted to the left because it connects to the same subgraph as the left edge."},{tagname:"figure","class":"image",title:"Ordering parallel subgraphs using an out edge comparer",id:"seriesparallel_layout-options-323-figure-001","float":0,children:[{tagname:"img",src:"assets/series_parallel_outedge-comparator.37f945ab.jpg",alt:"",title:'<para class="dguide-para">Parallel subgraphs ordered using an out edge comparer.</para>'},{tagname:"img",src:"assets/series_parallel_outedge-comparator-restriction.a553cf2a.jpg",alt:"",title:'<para class="dguide-para">Resulting order when some edges are not independent and connect into the same parallel subgraph.</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-008",content:"SeriesParallelLayouter provides configuration for general drawing options like,\ne.g., edge routing styles, edge segment lengths, or minimum distances between graph\nelements."},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-009",content:"Options which affect edge routing:"},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-005"><api-link id="seriesparallel_layout-options-323-api-link-005" data-member="routingStyle" data-text="routingStyle" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-003">\n<p id="seriesparallel_layout-options-323-simpara-010">Configures the routing style for the edges in the graph.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Routing style",id:"seriesparallel_layout-options-323-figure-002","float":0,children:[{tagname:"img",src:"assets/series_parallel_orthogonal-edges.25914951.jpg",alt:"",title:'<para class="dguide-para">Orthogonal edge routing.</para>'},{tagname:"img",src:"assets/series_parallel_octilinear-edges.05ad272e.jpg",alt:"",title:'<para class="dguide-para">Octilinear edge routing.</para>'},{tagname:"img",src:"assets/series_parallel_polyline-edges.9c2e571c.jpg",alt:"",title:'<para class="dguide-para">Polyline edge routing.</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-011",content:"Options that can be used to refine the edge routing:"},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-006" class="title" role="title">Preferred Octilinear Segment Length</dt><dt id="seriesparallel_layout-options-323-term-007"><api-link id="seriesparallel_layout-options-323-api-link-006" data-member="preferredOctilinearSegmentLength" data-text="preferredOctilinearSegmentLength" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-004">\n<p id="seriesparallel_layout-options-323-simpara-012">Specifies the preferred length of the octilinear edge segment (the one with 45 degree\nslope).</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-008" class="title" role="title">Minimum Polyline Segment Length</dt><dt id="seriesparallel_layout-options-323-term-009"><api-link id="seriesparallel_layout-options-323-api-link-007" data-member="minimumPolylineSegmentLength" data-text="minimumPolylineSegmentLength" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-005">\n<p id="seriesparallel_layout-options-323-simpara-013">Determines the minimum length of the sloped edge segment of polyline edges.</p>\n</dd>\n<dt id="seriesparallel_layout-options-323-term-010" class="title" role="title">Minimum Slope</dt><dt id="seriesparallel_layout-options-323-term-011"><api-link id="seriesparallel_layout-options-323-api-link-008" data-member="minimumSlope" data-text="minimumSlope" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-006">\n<p id="seriesparallel_layout-options-323-simpara-014">Determines the minimum slope of the sloped edge segment of polyline edges.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-015",content:'Further drawing style options for edges can be specified by means of the <api-link id="seriesparallel_layout-options-323-api-link-009" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.seriesparallel.EdgeLayoutDescriptor"></api-link>\nclass.\nAn instance of this class is held by <span class="api">SeriesParallelLayout</span> to store and retrieve\ndefault values for drawing style options, like, e.g., minimum lengths.'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-016",content:'<span class="api">SeriesParallelLayout</span> provides access to the default EdgeLayoutDescriptor instance\nthrough:'},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-006" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-012"><api-link id="seriesparallel_layout-options-323-api-link-010" data-member="defaultEdgeLayoutDescriptor" data-text="defaultEdgeLayoutDescriptor" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-007">\n<p id="seriesparallel_layout-options-323-simpara-017">Edge-related layout options.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-018",content:'An EdgeLayoutDescriptor instance can be specified individually for single edges\nby means of <a href="#/dguide/tab_series_parallel_layout_keys_edge_layout_descriptors">layout data</a>.\nIn the absence of an individual descriptor for an edge, the default EdgeLayoutDescriptor\ninstance that is registered with <span class="api">SeriesParallelLayout</span> will be used.'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-019",content:"Options which affect node placement:"},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-007" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-013" class="title" role="title">Minimum Node to Node Distance</dt><dt id="seriesparallel_layout-options-323-term-014"><api-link id="seriesparallel_layout-options-323-api-link-011" data-member="minimumNodeToNodeDistance" data-text="minimumNodeToNodeDistance" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-008">\n<p id="seriesparallel_layout-options-323-simpara-020">Specifies the minimum distance between two nodes.</p>\n</dd>\n<dt id="seriesparallel_layout-options-323-term-015" class="title" role="title">Minimum Node to Edge Distance</dt><dt id="seriesparallel_layout-options-323-term-016"><api-link id="seriesparallel_layout-options-323-api-link-012" data-member="minimumNodeToEdgeDistance" data-text="minimumNodeToEdgeDistance" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-009">\n<p id="seriesparallel_layout-options-323-simpara-021">Specifies the minimum distance between a node and a segment of an edge.\nIf the facing sides of two parallel subgraphs both show nodes and edges, the maximum\nof this value and the Minimum Node to Node Distance is used.</p>\n</dd>\n<dt id="seriesparallel_layout-options-323-term-017" class="title" role="title">Minimum Edge to Edge Distance</dt><dt id="seriesparallel_layout-options-323-term-018"><api-link id="seriesparallel_layout-options-323-api-link-013" data-member="minimumEdgeToEdgeDistance" data-text="minimumEdgeToEdgeDistance" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-010">\n<p id="seriesparallel_layout-options-323-simpara-022">Specifies the minimum distance between the segments of two edges.\nThis only applies to edge segments that are not bundled in a bus or restricted through\na common port.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-008" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-019" class="title" role="title">Vertical Alignment of Parallel Subgraphs</dt><dt id="seriesparallel_layout-options-323-term-020"><api-link id="seriesparallel_layout-options-323-api-link-014" data-member="verticalAlignment" data-text="verticalAlignment" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-011">\n<p id="seriesparallel_layout-options-323-simpara-023">Determines the vertical alignment of parallel subgraphs.\nValues can be set from 0.0 (top) to 1.0 (bottom).\nSee also <a href="#/dguide/fig_series_parallel_layout-vertical_alignment">Vertical alignment of parallel subgraphs</a>.</p>\n</dd>\n</dl>'},{tagname:"figure","class":"image",title:"Vertical alignment of parallel subgraphs",id:"fig_series_parallel_layout-vertical_alignment","float":0,children:[{tagname:"img",src:"assets/series_parallel_sp_valign_top.30f9dd50.jpg",alt:"",title:'<para class="dguide-para">Vertical alignment = 0.0</para>'},{tagname:"img",src:"assets/series_parallel_sp_valign_middle.733dd61b.jpg",alt:"",title:'<para class="dguide-para">Vertical alignment = 0.5</para>'},{tagname:"img",src:"assets/series_parallel_sp_valign_bottom.9f51f651.jpg",alt:"",title:'<para class="dguide-para">Vertical alignment = 1.0</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-024",content:'To distribute the outgoing, respectively incoming edges at the terminal nodes before\nand after parallel subgraphs, <span class="api">SeriesParallelLayout</span> by default uses an instance\nof class <api-link id="seriesparallel_layout-options-323-api-link-015" data-member="" data-text="DefaultPortAssignment" data-type="yfiles.seriesparallel.DefaultPortAssignment"></api-link>,\nwhich provides two port assignment modes as depicted in the following figure:'},{tagname:"figure","class":"image",title:"Port assignment modes",id:"fig_spl_portassignment","float":0,children:[{tagname:"img",src:"assets/series_parallel_port-assignment-center.cd7eae30.jpg",alt:"",title:'<para class="dguide-para">Center: the ports of outgoing, resp. incoming edges are all placed in the center of the terminal node.</para>'},{tagname:"img",src:"assets/series_parallel_port-assignment-distributed.f2ee26ab.jpg",alt:"",title:'<para class="dguide-para">Distributed: the ports of outgoing, resp. incoming edges are evenly distributed at the lower, resp. upper side of the terminal node.</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-025",content:'Note that in both modes certain aspects of <a href="#/dguide/layout-port_constraints">port constraint configuration</a>\nof the outgoing or incoming edges will be ignored in order to prevent situations\nwhere this would lead to confusing (or even conflicting) edge routes in the resulting\nlayout.\nIn particular, this applies to the direction specified by a port constraint of an\noutgoing or incoming edge.\nHowever, the ports of edges with a strong port constraint will get'},{tagname:"para",content:'<ul id="seriesparallel_layout-options-323-itemizedlist-001"><li id="seriesparallel_layout-options-323-listitem-012"><p id="seriesparallel_layout-options-323-simpara-026">the original location relative to the terminal node’s center as specified by their\nstrong port constraint.</p></li><li id="seriesparallel_layout-options-323-listitem-013"><p id="seriesparallel_layout-options-323-simpara-027">the original location relative to the terminal node’s center as specified by the\n  first strong port constraint encountered among all edges that belong to the same\n  edge group (as specified for <a href="#/dguide/tab_series_parallel_layout_keys_source_groupid">source</a> or\n  <a href="#/dguide/tab_series_parallel_layout_keys_target_groupid">target</a>).\nNote that all edges that belong to the same edge group should yield the same strong\nport constraint.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-028",content:"Additionally, class DefaultPortAssignment also makes available two so-called fork\nstyles that also affect the distribution of ports of outgoing, respectively incoming\nedges, as well as the routing of the edges:"},{tagname:"figure","class":"image",title:"Port assignment fork styles",id:"seriesparallel_layout-options-323-figure-005","float":0,children:[{tagname:"img",src:"assets/series_parallel_port-assignment-center.cd7eae30.jpg",alt:"",title:'<para class="dguide-para">all ports are interpreted in flow direction of the graph. If the layout orientation is TopToBottom, all incoming edges enter the terminal node on the north side and all outgoing edges leave the terminal node on the south side.</para>'},{tagname:"img",src:"assets/series_parallel_fork-at-node.d7de2405.jpg",alt:"",title:'<para class="dguide-para">edges may connect to the terminal nodes at the left/right side which reduces the number of bends most of the time.</para>'}]},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-029",content:'<span class="api">SeriesParallelLayout</span> provides access to the default IPortAssignment implementation\nthrough:'},{tagname:"para",content:'<dl id="seriesparallel_layout-options-323-variablelist-009" class="techn_templ" role="techn_templ">\n<dt id="seriesparallel_layout-options-323-term-021"><api-link id="seriesparallel_layout-options-323-api-link-016" data-member="defaultPortAssignment" data-text="defaultPortAssignment" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="seriesparallel_layout-options-323-listitem-014">\n<p id="seriesparallel_layout-options-323-simpara-030">Configures the default IPortAssignment implementation that is used by <span class="api">SeriesParallelLayout</span>.\nThe factory default for this is an instance of class <api-link id="seriesparallel_layout-options-323-api-link-017" data-member="" data-text="DefaultPortAssignment" data-type="yfiles.seriesparallel.DefaultPortAssignment"></api-link>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-options-323-simpara-031",content:'An IPortAssignment implementation can be specified individually for single nodes by\nmeans of <a href="#/dguide/tab_series_parallel_layout_keys_port_assignment">layout data</a>.\nIn the absence of an individual implementation for a node, the default IPortAssignment\nimplementation that is registered with <span class="api">SeriesParallelLayout</span> will be used.'}]},{tagname:"section",id:"_labeling_3",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"_labeling_3-324-simpara-001",content:'Besides the generic labeling support as described in <a href="#/dguide/label_placement-generic_labeling">Generic Labeling</a>,\nwhich is available with all yFiles layout algorithms, the series-parallel layout\nalgorithm additionally supports integrated labeling.\nThey are taken into consideration when determining both node placement and edge\npath generation and are placed according to their PreferredPlacementDescriptor.\nWith this strategy it is guaranteed that no edge label will overlap other objects\nin the diagram.'},{tagname:"para","class":"dguide-para",id:"_labeling_3-324-simpara-002",content:"Integrated labeling can be enabled or disabled using the following property:"},{tagname:"para",content:'<dl id="_labeling_3-324-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_labeling_3-324-term-001"><api-link id="_labeling_3-324-api-link-001" data-member="integratedEdgeLabeling" data-text="integratedEdgeLabeling" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_labeling_3-324-listitem-001">\n<p id="_labeling_3-324-simpara-003">Determines whether integrated labeling is enabled.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_labeling_3-324-simpara-004",content:'See also <a href="#/dguide/label_placement-integrated_labeling">Integrated Labeling</a>.'},{tagname:"para","class":"dguide-para tip",id:"_labeling_3-324-tip-001",content:'<p id="_labeling_3-324-simpara-005">Optimal label placement with integrated labeling can be achieved using <api-link id="_labeling_3-324-api-link-002" data-member="" data-text="FreeEdgeLabelModel" data-type="yfiles.graph.FreeEdgeLabelModel"></api-link>\n     as the label model for the edges.\n     As explained in <a href="#/dguide/label_placement-label_models">Label Models</a>, this edge label model is ideally\n     suited in combination with integrated labeling and yields the best match for a label\n     location that is computed by <span class="api">SeriesParallelLayout</span>.</p>'},{tagname:"para","class":"dguide-para",id:"_labeling_3-324-simpara-006",content:'<span class="api">SeriesParallelLayout</span> provides support for node label-aware layout.\nNode labels do not need to be placed, but instead their size needs to be considered\nfor the placement of adjacent graph elements.\nTaking node labels into consideration during layout calculation guarantees that\nthey will not overlap nodes in the diagram.'},{tagname:"para","class":"dguide-para",id:"_labeling_3-324-simpara-007",content:"Node label awareness is enabled using:"},{tagname:"para",content:'<dl id="_labeling_3-324-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_labeling_3-324-term-002"><api-link id="_labeling_3-324-api-link-003" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_labeling_3-324-listitem-002">\n<p id="_labeling_3-324-simpara-008">Takes into account the size of node labels.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"seriesparallel_layout-grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-grouping-325-simpara-001",content:'<span class="api">SeriesParallelLayout</span> supports grouped graphs.\nHowever, there are some restrictions with respect to the actual grouping structure\nof a grouped graph both inside and outside of groups:'},{tagname:"para",content:'<ul id="seriesparallel_layout-grouping-325-itemizedlist-001"><li id="seriesparallel_layout-grouping-325-listitem-001"><p id="seriesparallel_layout-grouping-325-simpara-002">the inner graph of a group needs to be series-parallel</p></li><li id="seriesparallel_layout-grouping-325-listitem-002"><p id="seriesparallel_layout-grouping-325-simpara-003">the part of the graph outside of a group needs to stay series-parallel when the group is closed</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"seriesparallel_layout-grouping-325-simpara-004",content:"In the special case that the inner graph of a group would be series-parallel when\nadding a source node and/or a sink node to it, then the inner graph is also considered\nseries-parallel."},{tagname:"figure","class":"image",title:"Support for grouped graphs",id:"seriesparallel_layout-grouping-325-figure-001","float":0,children:[{tagname:"img",src:"assets/series_parallel_group-nodes.1aa73299.jpg",alt:"Grouped graphs with series-parallel structure both inside and outside of groups.",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"_incremental_layout",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"_incremental_layout-326-simpara-001",content:'Upon creation, <span class="api">SeriesParallelLayout</span> is in non-incremental layout mode by default,\ni.e., it re-computes the entire layout of a given graph.\nThe other layout mode, namely <strong id="_incremental_layout-326-emphasis-001" class="bold" role="bold">From Sketch</strong> mode, needs to be turned on explicitly\nusing the following property.'},{tagname:"para","class":"dguide-para",id:"_incremental_layout-326-simpara-002",content:'If <strong id="_incremental_layout-326-emphasis-002" class="bold" role="bold">From Sketch</strong> mode is enabled, the original locations of the nodes are taken\ninto account when arranging the subgraphs.\nThe graph stays planar, because the original node locations are only considered\nfor the subgraphs (see property Out Edge Comparer in <a href="#/dguide/seriesparallel_layout-options">Basic Options</a>).'},{tagname:"para",content:'<dl id="_incremental_layout-326-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_incremental_layout-326-term-001"><api-link id="_incremental_layout-326-api-link-001" data-member="fromSketchMode" data-text="fromSketchMode" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_incremental_layout-326-listitem-001">\n<p id="_incremental_layout-326-simpara-003">Enables <strong id="_incremental_layout-326-emphasis-003" class="bold" role="bold">From Sketch</strong> mode.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_handling_non_series_parallel_graphs",title:"Handling Non-Series-parallel Graphs",children:[{tagname:"para","class":"dguide-para",id:"_handling_non_series_parallel_graphs-327-simpara-001",content:'To determine whether or not a graph is series-parallel, <span class="api">SeriesParallelLayout</span> offers\nthe following static method:'},{tagname:"para",content:'<dl id="_handling_non_series_parallel_graphs-327-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_handling_non_series_parallel_graphs-327-term-001"><api-link id="_handling_non_series_parallel_graphs-327-api-link-001" data-member="isSeriesParallelGraph(yfiles.algorithms.Graph)" data-text="isSeriesParallelGraph" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_handling_non_series_parallel_graphs-327-listitem-001">\n<p id="_handling_non_series_parallel_graphs-327-simpara-002">Whether the given graph is series-parallel.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_handling_non_series_parallel_graphs-327-simpara-003",content:'It is possible to use <span class="api">SeriesParallelLayout</span> on general graphs by activating the\nfollowing property.'},{tagname:"para","class":"dguide-para",id:"_handling_non_series_parallel_graphs-327-simpara-004",content:"On a given general graph, the layout algorithm tries to find series-parallel structure\nby temporarily adding and/or removing edges to/from the graph structure.\nAfter a layout for the modified graph has been calculated, all modifications to\nthe graph structure are then reverted."},{tagname:"para",content:'<dl id="_handling_non_series_parallel_graphs-327-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_handling_non_series_parallel_graphs-327-term-002" class="title" role="title">Handling General Graphs</dt><dt id="_handling_non_series_parallel_graphs-327-term-003"><api-link id="_handling_non_series_parallel_graphs-327-api-link-002" data-member="generalGraphHandling" data-text="generalGraphHandling" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_handling_non_series_parallel_graphs-327-listitem-002">\n<p id="_handling_non_series_parallel_graphs-327-simpara-005">Enables support for series-parallel layout calculation of general graphs.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_handling_non_series_parallel_graphs-327-simpara-006",content:'Any previously removed edges are reinserted and routed using the edge routing algorithm\nthat is returned by the following property.\nBy default, class <api-link id="_handling_non_series_parallel_graphs-327-api-link-003" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link>\nis used.'},{tagname:"para",content:'<dl id="_handling_non_series_parallel_graphs-327-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="_handling_non_series_parallel_graphs-327-term-004"><api-link id="_handling_non_series_parallel_graphs-327-api-link-004" data-member="nonSeriesParallelEdgeRouter" data-text="nonSeriesParallelEdgeRouter" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_handling_non_series_parallel_graphs-327-listitem-003">\n<p id="_handling_non_series_parallel_graphs-327-simpara-007">Configures the edge routing algorithm that is used to route edges of a general graph\nthat do not conform to the series-parallel structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_handling_non_series_parallel_graphs-327-simpara-008",content:"Note that if another edge routing algorithm is set, a data provider look-up key\nneeds to be specified in addition.\nWhen invoking this edge routing algorithm, the look-up key is used by the series-parallel\nlayout algorithm to communicate the set of non-conforming (i.e., non-series-parallel)\nedges that it should process."},{tagname:"para",content:'<dl id="_handling_non_series_parallel_graphs-327-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="_handling_non_series_parallel_graphs-327-term-005"><api-link id="_handling_non_series_parallel_graphs-327-api-link-005" data-member="nonSeriesParallelEdgesDpKey" data-text="nonSeriesParallelEdgesDpKey" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></dt><dd id="_handling_non_series_parallel_graphs-327-listitem-004">\n<p id="_handling_non_series_parallel_graphs-327-simpara-009">Specifies the data provider look-up key used to communicate the set of non-conforming\n(i.e., non-series-parallel) edges that a custom edge routing algorithm should process.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_layout_data_2",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"_layout_data_2-328-simpara-001",content:'When using class <span class="api">SeriesParallelLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="_layout_data_2-328-api-link-001" data-member="" data-text="SeriesParallelLayoutData" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_series_parallel_layout-supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">SeriesParallelLayoutData</span> and the corresponding look-up keys that\n<span class="api">SeriesParallelLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"_layout_data_2-328-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_series_parallel_layout-supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="_layout_data_2-328-thead-001"><tr id="_layout_data_2-328-row-001"><th id="_layout_data_2-328-entry-001" align="left" valign="top">\nSeriesParallelLayoutData Property\n</th><th id="_layout_data_2-328-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="_layout_data_2-328-entry-003" align="left" valign="top">\nElement Type\n</th><th id="_layout_data_2-328-entry-004" align="left" valign="top">\nValue Type\n</th><th id="_layout_data_2-328-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_layout_data_2-328-tbody-001"><tr id="_layout_data_2-328-row-002"><td id="_layout_data_2-328-entry-006" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-003"><anchor id="tab_series_parallel_layout_keys_edge_layout_descriptors" xreflabel="[tab_series_parallel_layout_keys_edge_layout_descriptors]"></anchor><api-link id="_layout_data_2-328-api-link-002" data-member="edgeLayoutDescriptors" data-text="edgeLayoutDescriptors" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-007" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-004"><api-link id="_layout_data_2-328-api-link-003" data-member="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></para></td><td id="_layout_data_2-328-entry-008" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-005">edge</para></td><td id="_layout_data_2-328-entry-009" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-006">EdgeLayoutDescriptor</para></td><td id="_layout_data_2-328-entry-010" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-007">For each edge an <api-link id="_layout_data_2-328-api-link-004" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.seriesparallel.EdgeLayoutDescriptor"></api-link>\n  object that configures a number of edge-related options.</para></td></tr><tr id="_layout_data_2-328-row-003"><td id="_layout_data_2-328-entry-011" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-008"><anchor id="tab_series_parallel_layout_keys_out_edge_comparer" xreflabel="[tab_series_parallel_layout_keys_out_edge_comparer]"></anchor><api-link id="_layout_data_2-328-api-link-005" data-member="outEdgeComparers" data-text="outEdgeComparers" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-012" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-009"><api-link id="_layout_data_2-328-api-link-006" data-member="OUT_EDGE_COMPARER_DP_KEY" data-text="OUT_EDGE_COMPARER_DP_KEY" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></para></td><td id="_layout_data_2-328-entry-013" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-010">node</para></td><td id="_layout_data_2-328-entry-014" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-011">IComparer</para></td><td id="_layout_data_2-328-entry-015" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-012">For each (terminal) node an IComparer object that is used to sort the outgoing edges.</para></td></tr><tr id="_layout_data_2-328-row-004"><td id="_layout_data_2-328-entry-016" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-013"><anchor id="tab_series_parallel_layout_keys_port_assignment" xreflabel="[tab_series_parallel_layout_keys_port_assignment]"></anchor><api-link id="_layout_data_2-328-api-link-007" data-member="portAssignments" data-text="portAssignments" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-017" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-014"><api-link id="_layout_data_2-328-api-link-008" data-member="PORT_ASSIGNMENT_DP_KEY" data-text="PORT_ASSIGNMENT_DP_KEY" data-type="yfiles.seriesparallel.SeriesParallelLayout"></api-link></para></td><td id="_layout_data_2-328-entry-018" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-015">node</para></td><td id="_layout_data_2-328-entry-019" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-016">IPortAssignment</para></td><td id="_layout_data_2-328-entry-020" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-017">For each (terminal) node an\n  <api-link id="_layout_data_2-328-api-link-009" data-member="" data-text="IPortAssignment" data-type="yfiles.seriesparallel.IPortAssignment"></api-link> implementation\n  that assigns ports to the edges.</para></td></tr><tr id="_layout_data_2-328-row-005"><td id="_layout_data_2-328-entry-021" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-018">-</para></td><td id="_layout_data_2-328-entry-022" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-019"><api-link id="_layout_data_2-328-api-link-010" data-member="EDGE_LABEL_LAYOUT_DP_KEY" data-text="EDGE_LABEL_LAYOUT_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="_layout_data_2-328-entry-023" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-020">edge</para></td><td id="_layout_data_2-328-entry-024" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-021">LabelLayoutData[]</para></td><td id="_layout_data_2-328-entry-025" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-022">For each edge an array of LabelLayoutData objects that encode size and preferred\n  placement for all labels of the edge.</para></td></tr><tr id="_layout_data_2-328-row-006"><td id="_layout_data_2-328-entry-026" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-023">-</para></td><td id="_layout_data_2-328-entry-027" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-024"><api-link id="_layout_data_2-328-api-link-011" data-member="NODE_LABEL_LAYOUT_DP_KEY" data-text="NODE_LABEL_LAYOUT_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="_layout_data_2-328-entry-028" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-025">node</para></td><td id="_layout_data_2-328-entry-029" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-026">LabelLayoutData[]</para></td><td id="_layout_data_2-328-entry-030" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-027">For each node an array of LabelLayoutData objects that encode size and preferred\n  placement for all labels of the node.</para></td></tr><tr id="_layout_data_2-328-row-007"><td id="_layout_data_2-328-entry-031" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-028"><anchor id="tab_series_parallel_layout_keys_source_groupid" xreflabel="[tab_series_parallel_layout_keys_source_groupid]"></anchor><api-link id="_layout_data_2-328-api-link-012" data-member="sourceGroupIds" data-text="sourceGroupIds" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-032" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-029"><api-link id="_layout_data_2-328-api-link-013" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="_layout_data_2-328-entry-033" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-030">edge</para></td><td id="_layout_data_2-328-entry-034" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-031">object</para></td><td id="_layout_data_2-328-entry-035" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-032">For each edge an arbitrary object indicating the group its source end is\n  affiliated with.</para></td></tr><tr id="_layout_data_2-328-row-008"><td id="_layout_data_2-328-entry-036" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-033"><anchor id="tab_series_parallel_layout_keys_target_groupid" xreflabel="[tab_series_parallel_layout_keys_target_groupid]"></anchor><api-link id="_layout_data_2-328-api-link-014" data-member="targetGroupIds" data-text="targetGroupIds" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-037" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-034"><api-link id="_layout_data_2-328-api-link-015" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="_layout_data_2-328-entry-038" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-035">edge</para></td><td id="_layout_data_2-328-entry-039" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-036">object</para></td><td id="_layout_data_2-328-entry-040" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-037">For each edge an arbitrary object indicating the group its target end is\n  affiliated with.</para></td></tr><tr id="_layout_data_2-328-row-009"><td id="_layout_data_2-328-entry-041" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-038"><anchor id="tab_series_parallel_layout_keys_abort_handler" xreflabel="[tab_series_parallel_layout_keys_abort_handler]"></anchor><api-link id="_layout_data_2-328-api-link-016" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.seriesparallel.SeriesParallelLayoutData"></api-link></para></td><td id="_layout_data_2-328-entry-042" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-039"><api-link id="_layout_data_2-328-api-link-017" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="_layout_data_2-328-entry-043" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-040">graph</para></td><td id="_layout_data_2-328-entry-044" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-041">AbortHandler</para></td><td id="_layout_data_2-328-entry-045" align="left" valign="top"><para class="dguide-para" id="_layout_data_2-328-simpara-042">An <api-link id="_layout_data_2-328-api-link-018" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"tabular_layout",title:"Tabular Layout",children:[{tagname:"para","class":"dguide-para",id:"tabular_layout-329-simpara-001",content:'Class <api-link id="tabular_layout-329-api-link-001" data-member="" data-text="TabularLayout" data-type="yfiles.layout.TabularLayout"></api-link> is a layout algorithm that places nodes in a tabular fashion.'},{tagname:"para","class":"dguide-para",id:"tabular_layout-329-simpara-002",content:'<span class="api">TabularLayout</span> can be considered an algorithm for producing\nsimple tabular/grid-like layouts of nodes:'},{tagname:"para",content:'<ul id="tabular_layout-329-itemizedlist-001"><li id="tabular_layout-329-listitem-001"><p id="tabular_layout-329-simpara-003">Each table <strong id="tabular_layout-329-emphasis-001" class="bold" role="bold">cell contains at most one node</strong>.</p></li><li id="tabular_layout-329-listitem-002"><p id="tabular_layout-329-simpara-004">The <strong id="tabular_layout-329-emphasis-002" class="bold" role="bold">connectivity of nodes is ignored</strong>.</p></li><li id="tabular_layout-329-listitem-003"><p id="tabular_layout-329-simpara-005">The <strong id="tabular_layout-329-emphasis-003" class="bold" role="bold">edges are not routed</strong>.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tabular_layout-329-simpara-006",content:'<a href="#/dguide/tabular_layout_sample_1">Sample layout by class TabularLayout: a simple table with 3 rows and 3 columns</a> shows a sample result. The depicted layout contains 8 nodes which are\norganized in a 3x3 table. <a href="#/dguide/tabular_layout_sample_2">Sample layout by class TabularLayout: a table with 2 rows and 6 columns</a> shows a layout with 7 nodes that are organized\nin a 2x6 table. Here, some cells are not occupied, i.e., there are gaps in the table. The second\nexample also visualizes the actual table cells.'},{tagname:"para","class":"dguide-para",id:"tabular_layout-329-simpara-007",content:'For other algorithms that support more complex tabular layouts featuring edge routing,\nplease see <a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a>.'},{tagname:"figure","class":"image",title:"Sample layout by class TabularLayout: a simple table with 3 rows and 3 columns",id:"tabular_layout_sample_1","float":0,children:[{tagname:"img",src:"assets/tabular_layout_sample_3_3.29f145ba.png",alt:"Sample Tabular with 3x3 Table",title:'<para class="dguide-para"></para>'}]},{tagname:"figure","class":"image",title:"Sample layout by class TabularLayout: a table with 2 rows and 6 columns",id:"tabular_layout_sample_2","float":0,children:[{tagname:"img",src:"assets/tabular_layout_sample_2_6.6d1aa8e3.png",alt:"Tabular Layout with 2x6 Table",title:'<para class="dguide-para"></para>'}]},{tagname:"section",id:"tabular_layout_relation_partition_grid",title:"Relation to Partition Grid",children:[{tagname:"para","class":"dguide-para",id:"tabular_layout_relation_partition_grid-330-simpara-001",content:'Class <api-link id="tabular_layout_relation_partition_grid-330-api-link-001" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> represents a general API for table layouts in yFiles,\nsee also <a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a>. Algorithm <span class="api">TabularLayout</span> described here uses\nthat API, but does not necessarily rely on it. Depending on the scenario, there is no need\nto define a <span class="api">PartitionGrid</span> instance on the input graph.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_relation_partition_grid-330-simpara-002",content:'The two layout policies <a href="#/dguide/tabular_policy_auto_size">Auto-Size</a> and <a href="#/dguide/tabular_policy_from_sketch">From-Sketch</a> do not require\nan existing <span class="api">PartitionGrid</span>.\nSo, if only a node arrangement in a tabular fashion is desired, no grid instance is necessary.\nSee, for example, <a href="#/dguide/tabular_layout_sample_1">Sample layout by class TabularLayout: a simple table with 3 rows and 3 columns</a> where the table itself is not visualized.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_relation_partition_grid-330-simpara-003",content:'Independent of the layout policy, a <span class="api">PartitionGrid</span> is required if:'},{tagname:"para",content:'<ul id="tabular_layout_relation_partition_grid-330-itemizedlist-001"><li id="tabular_layout_relation_partition_grid-330-listitem-001"><p id="tabular_layout_relation_partition_grid-330-simpara-004">The table itself should be visualized (as nodes or also by other means), because the coordinates\nof the rows and columns and their sizes can be retrieved from it, as shown in\n<a href="#/dguide/tabular_layout_sample_2">Sample layout by class TabularLayout: a table with 2 rows and 6 columns</a>.</p></li><li id="tabular_layout_relation_partition_grid-330-listitem-002"><p id="tabular_layout_relation_partition_grid-330-simpara-005">Specific settings like minimum height/width for a specific row/column should be obeyed,\nas these settings are bound to <api-link id="tabular_layout_relation_partition_grid-330-api-link-002" data-member="" data-text="RowDescriptor" data-type="yfiles.layout.RowDescriptor"></api-link> or\n<api-link id="tabular_layout_relation_partition_grid-330-api-link-003" data-member="" data-text="ColumnDescriptor" data-type="yfiles.layout.ColumnDescriptor"></api-link> objects defined on the <span class="api">PartitionGrid</span> instance.</p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"tabular_layout_relation_partition_grid-330-note-001",content:'<p id="tabular_layout_relation_partition_grid-330-simpara-006">When using class <api-link id="tabular_layout_relation_partition_grid-330-api-link-004" data-member="" data-text="TableLayoutConfigurator" data-type="yfiles.layout.TableLayoutConfigurator"></api-link> to create the\n<api-link id="tabular_layout_relation_partition_grid-330-api-link-005" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> from a <api-link id="tabular_layout_relation_partition_grid-330-api-link-006" data-member="" data-text="Table" data-type="yfiles.graph.Table"></api-link>, it is required that\nlayout policy <a href="#/dguide/tabular_policy_fixed_size">Fixed Size</a> is specified.</p>'}]},{tagname:"section",id:"tabular_layout_policies",title:"Layout Policies",children:[{tagname:"para","class":"dguide-para",id:"tabular_layout_policies-331-simpara-001",content:'The property <api-link id="tabular_layout_policies-331-api-link-001" data-member="layoutPolicy" data-text="layoutPolicy" data-type="yfiles.layout.TabularLayout"></api-link> represents a crucial setting\nthat should be chosen depending on the use-case.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_policies-331-simpara-002",content:'The policy affects the size of the table, that is, the number of rows and columns. Also, depending\non the policy, the configuration of a <span class="api">PartitionGrid</span> instance registered with\nthe input graph is either consider or not.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_policies-331-simpara-003",content:"In the following, the available policies are described."},{tagname:"section",id:"tabular_policy_auto_size",title:"Auto-Size",children:[{tagname:"para","class":"dguide-para",id:"tabular_policy_auto_size-332-simpara-001",content:'Policy <api-link id="tabular_policy_auto_size-332-api-link-001" data-member="AUTO_SIZE" data-text="AUTO_SIZE" data-type="yfiles.layout.TabularLayoutPolicy"></api-link> automatically derives the table\nsize from the number of nodes in the input graph. The size will be chosen such that both row count\nand column count are similar, leading to a maximally square table (note that the actual node sizes are not\nconsidered).'},{tagname:"para","class":"dguide-para",id:"tabular_policy_auto_size-332-simpara-002",content:"Example: given a graph with 16 nodes, the resulting table will have four rows and four columns."},{tagname:"para","class":"dguide-para",id:"tabular_policy_auto_size-332-simpara-003",content:'If a <span class="api">PartitionGrid</span> is registered with the input graph, only the settings\nof the first row/column are used as template settings\n(i.e., settings like insets and minimum width/height are transferred to the resulting rows/columns).'}]},{tagname:"section",id:"tabular_policy_fixed_size",title:"Fixed Size",children:[{tagname:"para","class":"dguide-para",id:"tabular_policy_fixed_size-333-simpara-001",content:'Policy <api-link id="tabular_policy_fixed_size-333-api-link-001" data-member="FIXED_SIZE" data-text="FIXED_SIZE" data-type="yfiles.layout.TabularLayoutPolicy"></api-link> obeys the row and column count\nexactly as given by the <span class="api">PartitionGrid</span> instance defined on the input graph.'},{tagname:"para","class":"dguide-para",id:"tabular_policy_fixed_size-333-simpara-002",content:'In consequence, this policy <strong id="tabular_policy_fixed_size-333-emphasis-001" class="bold" role="bold">requires</strong> that a valid grid is registered and that the grid contains enough\nrows and columns to fit all the nodes. Otherwise, an exception will be thrown.'},{tagname:"para","class":"dguide-para",id:"tabular_policy_fixed_size-333-simpara-003",content:'This policy also allows to map a node to a specific cell, e.g., to state that a node should be\nin the row and column with a specific index.\nTo do so, use <api-link id="tabular_policy_fixed_size-333-api-link-002" data-member="cellIds" data-text="PartitionGridData.cellIds" data-type="yfiles.layout.PartitionGridData"></api-link>.\nSee <a href="#/dguide/tab_tabular_supplemental_layout_data">Supplemental layout data</a> for more information on how to define this supplemental data.'},{tagname:"para","class":"dguide-para important",id:"tabular_policy_fixed_size-333-important-001",content:'<p id="tabular_policy_fixed_size-333-simpara-004">Multi-cells, that is, <span class="api">PartitionCellId</span>s that span multiple cells are\nnot allowed.</p>'},{tagname:"para","class":"dguide-para",id:"tabular_policy_fixed_size-333-simpara-005",content:"In the following, a code example using the fixed size policy is shown. It configures the\nalgorithm to generate a single-column layout."},{tagname:"example",id:"ex_tabular_layout_single_column",title:"Single-column tabular layout",content:'<pre class="programlisting javascript" id="tabular_policy_fixed_size-333-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst tabularLayout = new yfiles.layout.TabularLayout()\r\nconst data = new yfiles.layout.TabularLayoutData()\r\n\r\n// Set the policy to fixed size, as we want to define the dimension of the table/grid ourselves\r\ntabularLayout.layoutPolicy = yfiles.layout.TabularLayoutPolicy.FIXED_SIZE\r\n\r\n// Define a n x 1 partition grid (n rows, 1 column) on the partition grid data of the tabular layout data,\r\n// where n is the number of nodes in the graph. This grid defines the dimension of the tabular layout\r\nconst gridData = new yfiles.layout.PartitionGridData()\r\ngridData.grid = new yfiles.layout.PartitionGrid(graph.nodes.size, 1)\r\ndata.partitionGridData = gridData\r\n\r\n// Apply the tabular layout algorithm\r\ngraph.applyLayout(tabularLayout, data)\n</code></pre>'}]},{tagname:"section",id:"tabular_policy_from_sketch",title:"From-Sketch",children:[{tagname:"para","class":"dguide-para",id:"tabular_policy_from_sketch-334-simpara-001",content:'Policy <api-link id="tabular_policy_from_sketch-334-api-link-001" data-member="FROM_SKETCH" data-text="FROM_SKETCH" data-type="yfiles.layout.TabularLayoutPolicy"></api-link> takes the coordinates of the\nnodes in the input graph into account to derive a tabular layout.\nNodes are assigned to the same row if there exists a horizontal line\nthat crosses through both of them. Similarly, nodes are assigned to the same column\nif there exists a vertical line that crosses through both of them.\nThis strategy only works smoothly if the given input already resembles a rough table arrangement. It is\nnot recommended that the input graph contains node overlaps, as the mapping to rows/columns becomes ambiguous.'},{tagname:"para","class":"dguide-para",id:"tabular_policy_from_sketch-334-simpara-002",content:'If a <span class="api">PartitionGrid</span> is registered with the input graph, only the settings\nof the first row/column are used as template settings\n(i.e., settings like insets and minimum width/height are transferred to the resulting rows/columns).'}]}]},{tagname:"section",id:"tabular_layout_settings",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"tabular_layout_settings-335-simpara-001",content:'Despite the layout policy described in the last section, there are more basic settings that allow to\ncustomize the tabular layout produced by <span class="api">TabularLayout</span>.'},{tagname:"section",id:"_node_layout_descriptor",title:"Node Layout Descriptor",children:[{tagname:"para","class":"dguide-para",id:"_node_layout_descriptor-336-simpara-001",content:'Node-related options can be specified by means of class <api-link id="_node_layout_descriptor-336-api-link-001" data-member="" data-text="TabularNodeLayoutDescriptor" data-type="yfiles.layout.TabularNodeLayoutDescriptor"></api-link>.\nIt is, for example, possible to define the desired horizontal or vertical alignment of nodes within\ntheir respective columns and rows. <span class="api">TabularLayout</span> holds a descriptor\ninstance that provides the default settings:'},{tagname:"para",content:'<dl id="_node_layout_descriptor-336-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_node_layout_descriptor-336-term-001"><api-link id="_node_layout_descriptor-336-api-link-002" data-member="defaultNodeLayoutDescriptor" data-text="defaultNodeLayoutDescriptor" data-type="yfiles.layout.TabularLayout"></api-link></dt><dd id="_node_layout_descriptor-336-listitem-001">\n<p id="_node_layout_descriptor-336-simpara-002">The default node-related layout options</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_node_layout_descriptor-336-simpara-003",content:'In addition to the default descriptor, layout descriptors can also be associated with single nodes\nin order to specify individual settings for them. Setting\n<a href="#/dguide/tab_tabular_keys_descriptor">individual descriptors for nodes</a> can conveniently be done by using\n<a href="#/dguide/layout-layout_data">layout data instances for the layout algorithm</a>.\nSee also <a href="#/dguide/tabular_layout_data">Layout Data</a>.'}]},{tagname:"section",id:"_grid_related_settings",title:"Grid-related Settings",children:[{tagname:"para","class":"dguide-para",id:"_grid_related_settings-337-simpara-001",content:'<span class="api">TabularLayout</span> obeys settings defined on\n<api-link id="_grid_related_settings-337-api-link-001" data-member="" data-text="RowDescriptor" data-type="yfiles.layout.RowDescriptor"></api-link> and <api-link id="_grid_related_settings-337-api-link-002" data-member="" data-text="ColumnDescriptor" data-type="yfiles.layout.ColumnDescriptor"></api-link> instances\nbound to the (optional) <span class="api">PartitionGrid</span> defined on the graph.'},{tagname:"para","class":"dguide-para",id:"_grid_related_settings-337-simpara-002",content:"In the following, the respected properties are given."},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-001"><api-link id="_grid_related_settings-337-api-link-003" data-member="topInset" data-text="topInset" data-type="yfiles.layout.RowDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-001">\n<p id="_grid_related_settings-337-simpara-003">The distance kept between the top border of the row and the nodes in the row.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-002"><api-link id="_grid_related_settings-337-api-link-004" data-member="bottomInset" data-text="bottomInset" data-type="yfiles.layout.RowDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-002">\n<p id="_grid_related_settings-337-simpara-004">The distance kept between the bottom border of the row and the nodes in the row.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-003"><api-link id="_grid_related_settings-337-api-link-005" data-member="minimumHeight" data-text="minimumHeight" data-type="yfiles.layout.RowDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-003">\n<p id="_grid_related_settings-337-simpara-005">The minimum height of the row.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-004"><api-link id="_grid_related_settings-337-api-link-006" data-member="leftInset" data-text="leftInset" data-type="yfiles.layout.ColumnDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-004">\n<p id="_grid_related_settings-337-simpara-006">The distance kept between the left border of the column and the nodes in the column.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-005"><api-link id="_grid_related_settings-337-api-link-007" data-member="rightInset" data-text="rightInset" data-type="yfiles.layout.ColumnDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-005">\n<p id="_grid_related_settings-337-simpara-007">The distance kept between the right border of the column and the nodes in the column.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_grid_related_settings-337-variablelist-006" class="techn_templ" role="techn_templ">\n<dt id="_grid_related_settings-337-term-006"><api-link id="_grid_related_settings-337-api-link-008" data-member="minimumWidth" data-text="minimumWidth" data-type="yfiles.layout.ColumnDescriptor"></api-link></dt><dd id="_grid_related_settings-337-listitem-006">\n<p id="_grid_related_settings-337-simpara-008">The minimum width of the column.</p>\n</dd>\n</dl>'},{tagname:"section",id:"_more_general_settings",title:"More General Settings",children:[{tagname:"para","class":"dguide-para",id:"_more_general_settings-338-simpara-001",content:"There are several additional settings which are not discussed explicitly here.\nSee the following list for an overview and consult the respective API documentation for details."},{tagname:"para",content:'<dl id="_more_general_settings-338-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_more_general_settings-338-term-001"><api-link id="_more_general_settings-338-api-link-001" data-member="nodeComparer" data-text="nodeComparer" data-type="yfiles.layout.TabularLayout"></api-link></dt><dd id="_more_general_settings-338-listitem-001">\n<p id="_more_general_settings-338-simpara-002">Used to sort the nodes in mode <a href="#/dguide/tabular_policy_auto_size">Auto-Size</a> and the free nodes in mode <a href="#/dguide/tabular_policy_fixed_size">Fixed Size</a>.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="_more_general_settings-338-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_more_general_settings-338-term-002"><api-link id="_more_general_settings-338-api-link-002" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.layout.TabularLayout"></api-link></dt><dd id="_more_general_settings-338-listitem-002">\n<p id="_more_general_settings-338-simpara-003">Whether or not node labels are considered.</p>\n</dd>\n</dl>'}]}]}]},{tagname:"section",id:"tabular_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"tabular_layout_data-339-simpara-001",content:'When using class <span class="api">TabularLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="tabular_layout_data-339-api-link-001" data-member="" data-text="TabularLayoutData" data-type="yfiles.layout.TabularLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_data-339-simpara-002",content:'<a href="#/dguide/tab_tabular_supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">TabularLayoutData</span> and the corresponding look-up keys that\n<span class="api">TabularLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"tabular_layout_data-339-simpara-003",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tabular_supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="tabular_layout_data-339-thead-001"><tr id="tabular_layout_data-339-row-001"><th id="tabular_layout_data-339-entry-001" align="left" valign="top">\nTabularLayoutData Property\n</th><th id="tabular_layout_data-339-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="tabular_layout_data-339-entry-003" align="left" valign="top">\nElement Type\n</th><th id="tabular_layout_data-339-entry-004" align="left" valign="top">\nValue Type\n</th><th id="tabular_layout_data-339-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tabular_layout_data-339-tbody-001"><tr id="tabular_layout_data-339-row-002"><td id="tabular_layout_data-339-entry-006" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-004"><anchor id="tab_tabular_keys_descriptor" xreflabel="[tab_tabular_keys_descriptor]"></anchor><api-link id="tabular_layout_data-339-api-link-002" data-member="nodeLayoutDescriptors" data-text="nodeLayoutDescriptors" data-type="yfiles.layout.TabularLayoutData"></api-link></para></td><td id="tabular_layout_data-339-entry-007" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-005"><api-link id="tabular_layout_data-339-api-link-003" data-member="NODE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="NODE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.layout.TabularLayout"></api-link></para></td><td id="tabular_layout_data-339-entry-008" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-006">node</para></td><td id="tabular_layout_data-339-entry-009" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-007">NodeLayoutDescriptor</para></td><td id="tabular_layout_data-339-entry-010" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-008">For each node a <api-link id="tabular_layout_data-339-api-link-004" data-member="" data-text="TabularNodeLayoutDescriptor" data-type="yfiles.layout.TabularNodeLayoutDescriptor"></api-link>\nobject that configures node-related settings like the alignment.</para></td></tr><tr id="tabular_layout_data-339-row-003"><td id="tabular_layout_data-339-entry-011" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-009"><anchor id="tab_tabular_keys_node_halos" xreflabel="[tab_tabular_keys_node_halos]"></anchor><api-link id="tabular_layout_data-339-api-link-005" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.layout.TabularLayoutData"></api-link></para></td><td id="tabular_layout_data-339-entry-012" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-010"><api-link id="tabular_layout_data-339-api-link-006" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="tabular_layout_data-339-entry-013" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-011">node</para></td><td id="tabular_layout_data-339-entry-014" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-012">NodeHalo</para></td><td id="tabular_layout_data-339-entry-015" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-013">A <api-link id="tabular_layout_data-339-api-link-007" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo sizes at each side of a node.</para></td></tr><tr id="tabular_layout_data-339-row-004"><td colspan="4" id="tabular_layout_data-339-entry-016" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-014"><anchor id="tab_tabular_keys_partitiongrid_data" xreflabel="[tab_tabular_keys_partitiongrid_data]"></anchor><api-link id="tabular_layout_data-339-api-link-008" data-member="partitionGridData" data-text="partitionGridData" data-type="yfiles.layout.TabularLayoutData"></api-link></para></td><td id="tabular_layout_data-339-entry-017" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-015">Specifies a <api-link id="tabular_layout_data-339-api-link-009" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> for the tabular layout.</para></td></tr><tr id="tabular_layout_data-339-row-005"><td id="tabular_layout_data-339-entry-018" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-016"><api-link id="tabular_layout_data-339-api-link-010" data-member="grid" data-text="PartitionGridData.grid" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="tabular_layout_data-339-entry-019" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-017"><api-link id="tabular_layout_data-339-api-link-011" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="tabular_layout_data-339-entry-020" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-018">graph</para></td><td id="tabular_layout_data-339-entry-021" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-019"><api-link id="tabular_layout_data-339-api-link-012" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="tabular_layout_data-339-entry-022" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-020">Specifies the partition grid structure for the graph. Can also be defined using the <api-link id="tabular_layout_data-339-api-link-013" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="tabular_layout_data-339-api-link-014" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr><tr id="tabular_layout_data-339-row-006"><td id="tabular_layout_data-339-entry-023" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-021"><api-link id="tabular_layout_data-339-api-link-015" data-member="cellIds" data-text="PartitionGridData.cellIds" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="tabular_layout_data-339-entry-024" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-022"><api-link id="tabular_layout_data-339-api-link-016" data-member="PARTITION_CELL_ID_DP_KEY" data-text="PARTITION_CELL_ID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="tabular_layout_data-339-entry-025" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-023">node</para></td><td id="tabular_layout_data-339-entry-026" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-024"><api-link id="tabular_layout_data-339-api-link-017" data-member="" data-text="PartitionCellId" data-type="yfiles.layout.PartitionCellId"></api-link></para></td><td id="tabular_layout_data-339-entry-027" align="left" valign="top"><para class="dguide-para" id="tabular_layout_data-339-simpara-025">Specifies the cell id for a node. Alternatively, cell indices for a node can be specified using the <api-link id="tabular_layout_data-339-api-link-018" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="tabular_layout_data-339-api-link-019" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"partial_layout",title:"Partial Layout",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-340-simpara-001",content:'Related to <a href="#/dguide/layout-incremental_layout">incremental graph layout</a>, the\nyFiles library also provides support for partial graph layout.\nThis concept is a perfect fit for incremental scenarios where subsequently added\nparts should be arranged so that they fit best possible into a given diagram without\napplying any changes to the already existing layout.'},{tagname:"para","class":"dguide-para",id:"partial_layout-340-simpara-002",content:'Partial layout supports arranging user-specified parts of a diagram, the so-called <span class="def">partial elements</span>.\nIn a first step, partial elements are combined to form <span class="def">subgraph components</span>.\nSubsequently, these are arranged and afterwards placed so that the remainder of\nthe diagram, which consists of the so-called <span class="def">fixed elements</span>, is not affected.'},{tagname:"para","class":"dguide-para",id:"partial_layout-340-simpara-003",content:"Placing a subgraph component predominantly means finding a good position that both\nmeets certain proximity criteria and offers enough space to accommodate the subgraph component."},{tagname:"figure","class":"image",title:"Sample results of partial layout",id:"partial_layout-340-figure-001","float":0,children:[{tagname:"img",src:"assets/partial_circ_before.5b264c41.jpg",alt:"",title:'<para class="dguide-para">Original circular layout plus partial nodes (emphasized)</para>'},{tagname:"img",src:"assets/partial_circ_after.ef5b1448.jpg",alt:"",title:'<para class="dguide-para">Partial nodes placed as a single subgraph component</para>'},{tagname:"img",src:"assets/partial_hier_before.e9226e18.jpg",alt:"",title:'<para class="dguide-para">Original hierarchical layout (left-to-right orientation) plus partial nodes (emphasized).</para>'},{tagname:"img",src:"assets/partial_hier_after.f0d8b1ca.jpg",alt:"",title:'<para class="dguide-para">Partial nodes placed as a single subgraph component integrate well into the diagram</para>'}]},{tagname:"para","class":"dguide-para",id:"partial_layout-340-simpara-004",content:"Compared to incremental layout, the main advantage of partial layout is that it\ncan deal with diagrams of arbitrary origin and layout style, and that the existing\nlayout of the fixed parts of a diagram is left completely unaltered."},{tagname:"section",id:"partial_layout-class_partiallayouter",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-class_partiallayouter-341-simpara-001",content:'Class <api-link id="partial_layout-class_partiallayouter-341-api-link-001" data-member="" data-text="PartialLayout" data-type="yfiles.partial.PartialLayout"></api-link> enables layout\nof user-specified, distinct parts of a diagram without altering the existing layout of the remainder of the diagram.\nIt can be used with flat graphs as well as grouped graphs.'},{tagname:"para","class":"dguide-para",id:"partial_layout-class_partiallayouter-341-simpara-002",content:'The subset of graph elements that shall be processed (the partial elements) can\nbe specified using layout data for <a href="#/dguide/tab_partial_layout_keys_affected_nodes">nodes</a>\nand <a href="#/dguide/tab_partial_layout_keys_affected_edges">edges</a>.\nNote that any edge that is incident to a partial node will implicitly be treated as a partial element, too.'}]},{tagname:"section",id:"partial_layout-subgraph_components",title:"Subgraph Components",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-subgraph_components-342-simpara-001",content:'The <api-link id="partial_layout-subgraph_components-342-api-link-001" data-member="componentAssignmentStrategy" data-text="componentAssignmentStrategy" data-type="yfiles.partial.PartialLayout"></api-link>\nproperty controls which strategy is used to form the subgraph components from the set of partial nodes in the graph.\nFor each of the subgraph components a layout is calculated using the <a href="#/dguide/partial_layout-core_layout">core layout algorithm</a>\nand it is then placed according to the specified <a href="#/dguide/partial_layout-subgraph_component_placement_api">Subgraph Component Placement</a>.\nAvailable options are'
},{tagname:"para",content:'<dl id="partial_layout-subgraph_components-342-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="partial_layout-subgraph_components-342-term-001"><api-link id="partial_layout-subgraph_components-342-api-link-002" data-member="CLUSTERING" data-text="CLUSTERING" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-001">\n<p id="partial_layout-subgraph_components-342-simpara-002">A natural clustering algorithm is used to form the subgraph components.\nPartial nodes of the same cluster are assigned to the same subgraph component.</p>\n</dd>\n<dt id="partial_layout-subgraph_components-342-term-002"><api-link id="partial_layout-subgraph_components-342-api-link-003" data-member="CONNECTED" data-text="CONNECTED" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-002">\n<p id="partial_layout-subgraph_components-342-simpara-003">All partial nodes of a connected component are assigned to the same subgraph component.</p>\n</dd>\n<dt id="partial_layout-subgraph_components-342-term-003"><api-link id="partial_layout-subgraph_components-342-api-link-004" data-member="SINGLE" data-text="SINGLE" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-003">\n<p id="partial_layout-subgraph_components-342-simpara-004">Each partial node forms a subgraph component of its own.\nNote that there is no core layout algorithm applied to a single node subgraph component.</p>\n</dd>\n<dt id="partial_layout-subgraph_components-342-term-004"><api-link id="partial_layout-subgraph_components-342-api-link-005" data-member="CUSTOMIZED" data-text="CUSTOMIZED" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-004">\n<p id="partial_layout-subgraph_components-342-simpara-005">The mapping from partial nodes to subgraph components will be given by the user.\nTo specify the mapping, appropriate <a href="#/dguide/partial_layout-supplemental_layout_data">supplemental layout data</a>\nmust be provided for the layout algorithm by\ndefining <a href="#/dguide/tab_partial_layout_keys_component_ids">component ids</a>.\nNote that subgraph components cannot be assigned partial nodes that are in different\ngroup nodes or different partition cells.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"partial_layout-subgraph_components-342-simpara-006",content:'<a href="#/dguide/fig_partial_layout-component_assignment">Effects of component assignment strategies</a> shows the outcome of partial\nlayout calculation using different assignment strategies to form the subgraph component(s)\nfrom a set of partial nodes.'},{tagname:"figure","class":"image",title:"Effects of component assignment strategies",id:"fig_partial_layout-component_assignment","float":0,children:[{tagname:"img",src:"assets/partial_comp_connected.70df0790.jpg",alt:"",title:'<para class="dguide-para">One subgraph component formed using <api-link id="partial_layout-subgraph_components-342-api-link-006" data-member="CONNECTED" data-text="CONNECTED" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></para>'},{tagname:"img",src:"assets/partial_comp_single.00be6b75.jpg",alt:"",title:'<para class="dguide-para">Each partial node becomes a subgraph component of its own when using <api-link id="partial_layout-subgraph_components-342-api-link-007" data-member="SINGLE" data-text="SINGLE" data-type="yfiles.partial.ComponentAssignmentStrategy"></api-link></para>'}]},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="partial_layout-core_layout">\n<dt id="partial_layout-subgraph_components-342-term-005" class="title" role="title">Core Layout</dt><dt id="partial_layout-subgraph_components-342-term-006"><api-link id="partial_layout-subgraph_components-342-api-link-008" data-member="coreLayout" data-text="coreLayout" data-type="yfiles.partial.PartialLayout"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-005">\n<p id="partial_layout-subgraph_components-342-simpara-007">Determines the actual layout algorithm that is used for each single subgraph component.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"partial_layout-subgraph_components-342-simpara-008",content:"The core layout algorithm can also be set at creation time:"},{tagname:"para",content:'<pre class="programlisting javascript" id="partial_layout-subgraph_components-342-programlisting-001" language="javascript" format="linespecific"><code>// Setting the core layout algorithm right away.\r\nconst pl = new yfiles.partial.PartialLayout(new yfiles.circular.CircularLayout())\n</code></pre>'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="partial_layout-subgraph_component_placement_api">\n<dt id="partial_layout-subgraph_components-342-term-007" class="title" role="title">Subgraph Component Placement</dt><dt id="partial_layout-subgraph_components-342-term-008"><api-link id="partial_layout-subgraph_components-342-api-link-009" data-member="subgraphPlacement" data-text="subgraphPlacement" data-type="yfiles.partial.PartialLayout"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-006">\n<p id="partial_layout-subgraph_components-342-simpara-009">Determines how to place each subgraph component after layout calculation.\nSubgraph components are placed in a way that they do not overlap with each other\nor with the fixed remainder of the diagram.\nWhen <a href="#/dguide/partial_layout_consider_node_alignment">Consider Node Alignment</a>\nis enabled, the resulting placement is further refined.</p>\n<para><ul id="partial_layout-subgraph_components-342-itemizedlist-001"><li id="partial_layout-subgraph_components-342-listitem-007"><p id="partial_layout-subgraph_components-342-simpara-010"><api-link id="partial_layout-subgraph_components-342-api-link-010" data-member="BARYCENTER" data-text="BARYCENTER" data-type="yfiles.partial.SubgraphPlacement"></api-link>\nA subgraph component is placed as near as possible to its fixed neighbor nodes,\nrespectively already placed other subgraph components.\nThis yields short edges between the subgraph component and the fixed remainder of\nthe diagram.</p></li><li id="partial_layout-subgraph_components-342-listitem-008"><p id="partial_layout-subgraph_components-342-simpara-011"><api-link id="partial_layout-subgraph_components-342-api-link-011" data-member="FROM_SKETCH" data-text="FROM_SKETCH" data-type="yfiles.partial.SubgraphPlacement"></api-link>\nA subgraph component is placed as near as possible to its initial position.\nIf space permits, this allows in-place re-arranging of subgraph components, for\nexample.</p></li></ul></para>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"partial_layout-subgraph_components-342-simpara-012",content:'<a href="#/dguide/fig_partial_layout-component_placement">Different placement for subgraph components</a> shows how a set of partial nodes\n(emphasized nodes to the left) is placed as a single subgraph component close to\nits original position, respectively close to its neighbors.\nThe original circular layout of the diagram (the fixed elements) is left unaltered.\nNote that subgraph component is laid out using circular layout, too.'},{tagname:"figure","class":"image",title:"Different placement for subgraph components",id:"fig_partial_layout-component_placement","float":0,children:[{tagname:"img",src:"assets/partial_circ_before.5b264c41.jpg",alt:"",title:'<para class="dguide-para">Original circular layout plus additional nodes (emphasized)</para>'},{tagname:"img",src:"assets/partial_circ_after_from_sketch.2781cd80.jpg",alt:"",title:'<para class="dguide-para">Partial nodes placed (as a single subgraph component) close to initial position…​</para>'},{tagname:"img",src:"assets/partial_circ_after.ef5b1448.jpg",alt:"",title:'<para class="dguide-para">…​close to their neighbors</para>'}]},{tagname:"para","class":"dguide-para note",id:"partial_layout-subgraph_components-342-note-001",content:'<p id="partial_layout-subgraph_components-342-simpara-013">Using an identity core layout algorithm, i.e., an implementation that does not alter\n      the positions of nodes or edges, partial layout can be used to find new optimal\n      positions for entire subgraph components.</p>'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="partial_layout_consider_node_alignment">\n<dt id="partial_layout-subgraph_components-342-term-009" class="title" role="title">Consider Node Alignment</dt><dt id="partial_layout-subgraph_components-342-term-010"><api-link id="partial_layout-subgraph_components-342-api-link-012" data-member="considerNodeAlignment" data-text="considerNodeAlignment" data-type="yfiles.partial.PartialLayout"></api-link></dt><dd id="partial_layout-subgraph_components-342-listitem-009">\n<p id="partial_layout-subgraph_components-342-simpara-014">Specifies whether or not nodes should be aligned.\nIf set to true, the algorithm tries to center-align nodes from subgraph components\nwith nodes from the fixed remainder of the graph.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"partial_layout-subgraph_components-342-simpara-015",content:'Partial layout with and without node alignment enabled is illustrated in <a href="#/dguide/fig_partial_layout-node_alignment">Node alignment</a>.'},{tagname:"figure","class":"image",title:"Node alignment",id:"fig_partial_layout-node_alignment","float":0,children:[{tagname:"img",src:"assets/partial_noalign.c09646aa.jpg",alt:"",title:'<para class="dguide-para">Partial nodes placed close to initial position without node alignment enabled…​</para>'},{tagname:"img",src:"assets/partial_align.150140f5.jpg",alt:"",title:'<para class="dguide-para">…​and with node alignment enabled</para>'}]}]},{tagname:"section",id:"partial_layout-drawing_style_options",title:"Basic Options",children:[{tagname:"para",content:'<dl id="partial_layout-drawing_style_options-343-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="partial_layout-drawing_style_options-343-term-001" class="title" role="title">Minimal Node Distance</dt><dt id="partial_layout-drawing_style_options-343-term-002"><api-link id="partial_layout-drawing_style_options-343-api-link-001" data-member="minimumNodeDistance" data-text="minimumNodeDistance" data-type="yfiles.partial.PartialLayout"></api-link></dt><dd id="partial_layout-drawing_style_options-343-listitem-001">\n<p id="partial_layout-drawing_style_options-343-simpara-001">Determines the minimal distance between subgraph components as well as between a\nsubgraph component and any of its fixed neighbors.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="partial_layout-drawing_style_options-343-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="partial_layout-drawing_style_options-343-term-003" class="title" role="title">Maximal Duration</dt><dt id="partial_layout-drawing_style_options-343-term-004"><api-link id="partial_layout-drawing_style_options-343-api-link-002" data-member="maximumDuration" data-text="maximumDuration" data-type="yfiles.partial.PartialLayout"></api-link></dt><dd id="partial_layout-drawing_style_options-343-listitem-002">\n<p id="partial_layout-drawing_style_options-343-simpara-002">Sets the preferred maximum duration of the layout process in milliseconds.\nBy default, the algorithm runs without time restriction.\nDecreasing this value gives better control over the runtime at the cost of layout quality.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"partial_layout-edge_routing",title:"Edge Routing Options",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-edge_routing-344-simpara-001",content:'The edge routing style that is used for routing partial edges as well as edges between\ndifferent subgraph components (so-called inter-edges) can be specified using the\n<api-link id="partial_layout-edge_routing-344-api-link-001" data-member="edgeRoutingStrategy" data-text="edgeRoutingStrategy" data-type="yfiles.partial.PartialLayout"></api-link>\nproperty.\nAvailable options are'},{tagname:"para",content:'<dl id="partial_layout-edge_routing-344-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="partial_layout-edge_routing-344-term-001"><api-link id="partial_layout-edge_routing-344-api-link-002" data-member="ORGANIC" data-text="ORGANIC" data-type="yfiles.partial.EdgeRoutingStrategy"></api-link></dt><dd id="partial_layout-edge_routing-344-listitem-001">\n<p id="partial_layout-edge_routing-344-simpara-002">Each edge path will be routed as a straight line or a curved line.\nUses <a href="#/dguide/organic_routing">class OrganicEdgeRouter</a>.</p>\n</dd>\n<dt id="partial_layout-edge_routing-344-term-002"><api-link id="partial_layout-edge_routing-344-api-link-003" data-member="ORTHOGONAL" data-text="ORTHOGONAL" data-type="yfiles.partial.EdgeRoutingStrategy"></api-link></dt><dd id="partial_layout-edge_routing-344-listitem-002">\n<p id="partial_layout-edge_routing-344-simpara-003">Each edge path will be routed in an orthogonal style, i.e. only vertical and horizontal\nline segments will be used.\nUses <a href="#/dguide/polyline_router">class EdgeRouter</a>.</p>\n</dd>\n<dt id="partial_layout-edge_routing-344-term-003"><api-link id="partial_layout-edge_routing-344-api-link-004" data-member="OCTILINEAR" data-text="OCTILINEAR" data-type="yfiles.partial.EdgeRoutingStrategy"></api-link></dt><dd id="partial_layout-edge_routing-344-listitem-003">\n<p id="partial_layout-edge_routing-344-simpara-004">Each edge path will be routed using octilinear routing style, i.e. line segments\nwhere the slope is a multiple of 45 degree will be used.\nUses <a href="#/dguide/polyline_router">class EdgeRouter</a>.</p>\n</dd>\n<dt id="partial_layout-edge_routing-344-term-004"><api-link id="partial_layout-edge_routing-344-api-link-005" data-member="STRAIGHTLINE" data-text="STRAIGHTLINE" data-type="yfiles.partial.EdgeRoutingStrategy"></api-link></dt><dd id="partial_layout-edge_routing-344-listitem-004">\n<p id="partial_layout-edge_routing-344-simpara-005">Each edge path will be routed as a straight line connecting the start node and end node.</p>\n</dd>\n<dt id="partial_layout-edge_routing-344-term-005"><api-link id="partial_layout-edge_routing-344-api-link-006" data-member="AUTOMATIC" data-text="AUTOMATIC" data-type="yfiles.partial.EdgeRoutingStrategy"></api-link></dt><dd id="partial_layout-edge_routing-344-listitem-005">\n<p id="partial_layout-edge_routing-344-simpara-006">Tries to determine whether the edge routing style in the fixed remainder of the\ngraph is orthogonal or not.\nIf so, edge paths will be routed orthogonally, otherwise straight-line.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"partial_layout-grouping",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-grouping-345-simpara-001",content:'<span class="api">PartialLayout</span> supports layout of partial elements in grouped graphs.\nConceptually, though, if a group node belongs to the set of fixed elements, then\nany children that are partial nodes require the geometry of the group node to be\nspacious enough to accommodate the resulting layout of the subgraph components.'},{tagname:"para","class":"dguide-para",id:"partial_layout-grouping-345-simpara-002",content:'<a href="#/dguide/fig_partial_layout-grouping">Support for partial layout within a group node</a> shows the result of a partial layout\nwithin a group node that itself belongs to the set of fixed elements.\nIn particular, this means that the group node’s geometry will not be altered, i.e.,\nneither its size nor its position is allowed to change.\nThe quality of a partial layout in such a situation depends to a great extent on\nthe available space within the group node.'},{tagname:"figure","class":"image",title:"Support for partial layout within a group node",id:"fig_partial_layout-grouping","float":0,children:[{tagname:"img",src:"assets/partial_inside_group_before.289a8936.jpg",alt:"",title:'<para class="dguide-para">Partial nodes inside a group node (that is fixed, i.e., its geometry is not allowed to change)</para>'},{tagname:"img",src:"assets/partial_inside_group_after.c72392dc.jpg",alt:"",title:'<para class="dguide-para">Situation after partial layout</para>'}]}]},{tagname:"section",id:"_node_alignment",title:"Node Alignment",children:[{tagname:"para","class":"dguide-para",id:"_node_alignment-346-simpara-001",content:'An existing layout where some nodes lack proper alignment can be improved by marking\nthe nodes as partial, setting property <a href="#/dguide/partial_layout-subgraph_components">Subgraph Component Assignment Strategy</a>\nto <code><span class="api">SINGLE</span></code>,\nand enabling <a href="#/dguide/partial_layout_consider_node_alignment">Consider Node Alignment</a>.'}]},{tagname:"section",id:"partial_layout-supplemental_layout_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"partial_layout-supplemental_layout_data-347-simpara-001",content:'When using class <span class="api">PartialLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="partial_layout-supplemental_layout_data-347-api-link-001" data-member="" data-text="PartialLayoutData" data-type="yfiles.partial.PartialLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_partial_layout-supplemental_layout_data">Supplemental layout data</a> lists all properties of\n<span class="api">PartialLayoutData</span> and the corresponding look-up keys that\n<span class="api">PartialLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"partial_layout-supplemental_layout_data-347-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_partial_layout-supplemental_layout_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="partial_layout-supplemental_layout_data-347-thead-001"><tr id="partial_layout-supplemental_layout_data-347-row-001"><th id="partial_layout-supplemental_layout_data-347-entry-001" align="left" valign="top">\nPartialLayoutData Property\n</th><th id="partial_layout-supplemental_layout_data-347-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="partial_layout-supplemental_layout_data-347-entry-003" align="left" valign="top">\nElement Type\n</th><th id="partial_layout-supplemental_layout_data-347-entry-004" align="left" valign="top">\nValue Type\n</th><th id="partial_layout-supplemental_layout_data-347-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="partial_layout-supplemental_layout_data-347-tbody-001"><tr id="partial_layout-supplemental_layout_data-347-row-002"><td id="partial_layout-supplemental_layout_data-347-entry-006" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-003"><anchor id="tab_partial_layout_keys_affected_nodes" xreflabel="[tab_partial_layout_keys_affected_nodes]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-002" data-member="affectedNodes" data-text="affectedNodes" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-007" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-004"><api-link id="partial_layout-supplemental_layout_data-347-api-link-003" data-member="AFFECTED_NODES_DP_KEY" data-text="AFFECTED_NODES_DP_KEY" data-type="yfiles.partial.PartialLayout"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-008" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-005">node</para></td><td id="partial_layout-supplemental_layout_data-347-entry-009" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-006">boolean</para></td><td id="partial_layout-supplemental_layout_data-347-entry-010" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-007">For each node a boolean value indicating whether it is a so-called partial node or not.\nNote that the set of partial nodes also induces partial edges: an edge that is\nincident to a partial node is implicitly treated as a partial edge.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-003"><td id="partial_layout-supplemental_layout_data-347-entry-011" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-008"><anchor id="tab_partial_layout_keys_affected_edges" xreflabel="[tab_partial_layout_keys_affected_edges]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-004" data-member="affectedEdges" data-text="affectedEdges" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-012" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-009"><api-link id="partial_layout-supplemental_layout_data-347-api-link-005" data-member="AFFECTED_EDGES_DP_KEY" data-text="AFFECTED_EDGES_DP_KEY" data-type="yfiles.partial.PartialLayout"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-013" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-010">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-014" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-011">boolean</para></td><td id="partial_layout-supplemental_layout_data-347-entry-015" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-012">For each edge a boolean value indicating whether it is a so-called partial edge or not.\nNote that an edge that is incident to a partial node is implicitly treated as a partial edge, too.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-004"><td id="partial_layout-supplemental_layout_data-347-entry-016" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-013"><anchor id="tab_partial_layout_keys_component_ids" xreflabel="[tab_partial_layout_keys_component_ids]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-006" data-member="componentIds" data-text="componentIds" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-017" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-014"><api-link id="partial_layout-supplemental_layout_data-347-api-link-007" data-member="COMPONENT_ID_DP_KEY" data-text="COMPONENT_ID_DP_KEY" data-type="yfiles.partial.PartialLayout"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-018" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-015">node</para></td><td id="partial_layout-supplemental_layout_data-347-entry-019" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-016">Object</para></td><td id="partial_layout-supplemental_layout_data-347-entry-020" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-017">For each node an arbitrary Object indicating the subgraph component it is affiliated with.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-005"><td id="partial_layout-supplemental_layout_data-347-entry-021" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-018"><anchor id="tab_partial_layout_keys_directed_edges" xreflabel="[tab_partial_layout_keys_directed_edges]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-008" data-member="directedEdges" data-text="directedEdges" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-022" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-019"><api-link id="partial_layout-supplemental_layout_data-347-api-link-009" data-member="DIRECTED_EDGES_DP_KEY" data-text="DIRECTED_EDGES_DP_KEY" data-type="yfiles.partial.PartialLayout"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-023" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-020">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-024" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-021"><api-link id="partial_layout-supplemental_layout_data-347-api-link-010" data-member="" data-text="ItemCollection&lt;TItem&gt;" data-type="yfiles.layout.ItemCollection"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-025" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-022">A collection of edges that are considered as directed by the layout.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-006"><td id="partial_layout-supplemental_layout_data-347-entry-026" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-023"><anchor id="tab_partial_layout_keys_node_halo" xreflabel="[tab_partial_layout_keys_node_halo]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-011" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-027" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-024"><api-link id="partial_layout-supplemental_layout_data-347-api-link-012" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-028" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-025">node</para></td><td id="partial_layout-supplemental_layout_data-347-entry-029" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-026">NodeHalo</para></td><td id="partial_layout-supplemental_layout_data-347-entry-030" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-027">A <api-link id="partial_layout-supplemental_layout_data-347-api-link-013" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo\nsizes at each side of a node.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-007"><td id="partial_layout-supplemental_layout_data-347-entry-031" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-028"><anchor id="tab_partial_layout_keys_source_port_constraint" xreflabel="[tab_partial_layout_keys_source_port_constraint]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-014" data-member="sourcePortConstraints" data-text="sourcePortConstraints" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-032" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-029"><api-link id="partial_layout-supplemental_layout_data-347-api-link-015" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-033" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-030">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-034" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-031">PortConstraint</para></td><td id="partial_layout-supplemental_layout_data-347-entry-035" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-032">For each edge a PortConstraint object encoding its source end’s port\nconstraint.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-008"><td id="partial_layout-supplemental_layout_data-347-entry-036" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-033"><anchor id="tab_partial_layout_keys_target_port_constraint" xreflabel="[tab_partial_layout_keys_target_port_constraint]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-016" data-member="targetPortConstraints" data-text="targetPortConstraints" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-037" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-034"><api-link id="partial_layout-supplemental_layout_data-347-api-link-017" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-038" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-035">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-039" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-036">PortConstraint</para></td><td id="partial_layout-supplemental_layout_data-347-entry-040" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-037">For each edge a PortConstraint object encoding its target end’s port\nconstraint.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-009"><td id="partial_layout-supplemental_layout_data-347-entry-041" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-038"><anchor id="tab_partial_layout_keys_source_port_candidates" xreflabel="[tab_partial_layout_keys_source_port_candidates]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-018" data-member="sourcePortCandidates" data-text="sourcePortCandidates" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-042" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-039"><api-link id="partial_layout-supplemental_layout_data-347-api-link-019" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-043" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-040">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-044" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-041">Collection</para></td><td id="partial_layout-supplemental_layout_data-347-entry-045" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-042">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the source\nport likes to connect to.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-010"><td id="partial_layout-supplemental_layout_data-347-entry-046" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-043"><anchor id="tab_partial_layout_keys_target_port_candidates" xreflabel="[tab_partial_layout_keys_target_port_candidates]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-020" data-member="targetPortCandidates" data-text="targetPortCandidates" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-047" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-044"><api-link id="partial_layout-supplemental_layout_data-347-api-link-021" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-048" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-045">edge</para></td><td id="partial_layout-supplemental_layout_data-347-entry-049" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-046">Collection</para></td><td id="partial_layout-supplemental_layout_data-347-entry-050" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-047">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the target\nport likes to connect to.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-011"><td id="partial_layout-supplemental_layout_data-347-entry-051" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-048"><anchor id="tab_polyline_router_keys_abort_handler" xreflabel="[tab_polyline_router_keys_abort_handler]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-022" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.partial.PartialLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-052" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-049"><api-link id="partial_layout-supplemental_layout_data-347-api-link-023" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-053" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-050">graph</para></td><td id="partial_layout-supplemental_layout_data-347-entry-054" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-051">AbortHandler</para></td><td id="partial_layout-supplemental_layout_data-347-entry-055" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-052">An <api-link id="partial_layout-supplemental_layout_data-347-api-link-024" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-012"><td colspan="4" id="partial_layout-supplemental_layout_data-347-entry-056" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-053"><anchor id="tab_hierarchical_partitiongrid_data" xreflabel="[tab_hierarchical_partitiongrid_data]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-025" data-member="partitionGridData" data-text="partitionGridData" data-type="yfiles.hierarchic.HierarchicLayoutData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-057" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-054">Specifies a <api-link id="partial_layout-supplemental_layout_data-347-api-link-026" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> for the hierarchic layout.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-013"><td id="partial_layout-supplemental_layout_data-347-entry-058" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-055"><anchor id="tab_hierarchical_partitiongrid_grid" xreflabel="[tab_hierarchical_partitiongrid_grid]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-027" data-member="grid" data-text="PartitionGridData.grid" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-059" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-056"><api-link id="partial_layout-supplemental_layout_data-347-api-link-028" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-060" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-057">graph</para></td><td id="partial_layout-supplemental_layout_data-347-entry-061" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-058"><api-link id="partial_layout-supplemental_layout_data-347-api-link-029" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-062" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-059">Specifies the partition grid structure for the graph. Can also be defined using the <api-link id="partial_layout-supplemental_layout_data-347-api-link-030" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="partial_layout-supplemental_layout_data-347-api-link-031" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr><tr id="partial_layout-supplemental_layout_data-347-row-014"><td id="partial_layout-supplemental_layout_data-347-entry-063" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-060"><anchor id="tab_hierarchical_partitiongrid_cell_ids" xreflabel="[tab_hierarchical_partitiongrid_cell_ids]"></anchor><api-link id="partial_layout-supplemental_layout_data-347-api-link-032" data-member="cellIds" data-text="PartitionGridData.cellIds" data-type="yfiles.layout.PartitionGridData"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-064" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-061"><api-link id="partial_layout-supplemental_layout_data-347-api-link-033" data-member="PARTITION_CELL_ID_DP_KEY" data-text="PARTITION_CELL_ID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-065" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-062">node</para></td><td id="partial_layout-supplemental_layout_data-347-entry-066" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-063"><api-link id="partial_layout-supplemental_layout_data-347-api-link-034" data-member="" data-text="PartitionCellId" data-type="yfiles.layout.PartitionCellId"></api-link></para></td><td id="partial_layout-supplemental_layout_data-347-entry-067" align="left" valign="top"><para class="dguide-para" id="partial_layout-supplemental_layout_data-347-simpara-064">Specifies the partition cell id for a node. Alternatively, cell indices for a node can be specified using the <api-link id="partial_layout-supplemental_layout_data-347-api-link-035" data-member="rowIndices" data-text="rowIndices" data-type="yfiles.layout.PartitionGridData"></api-link> and <api-link id="partial_layout-supplemental_layout_data-347-api-link-036" data-member="columnIndices" data-text="columnIndices" data-type="yfiles.layout.PartitionGridData"></api-link> properties.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"family_tree_layout",title:"Family Tree Layout",children:[{tagname:"para","class":"dguide-para",id:"family_tree_layout-348-simpara-001",content:'Class <api-link id="family_tree_layout-348-api-link-001" data-member="" data-text="FamilyTreeLayout" data-type="yfiles.genealogy.FamilyTreeLayout"></api-link> is a\nspecial-purpose layout algorithm that provides genealogical tree layout for graphs that encode family trees.\n<a href="#/dguide/fig_family_tree_layout-example">Family tree</a> shows an example family tree.'},{tagname:"figure","class":"image",title:"Family tree",id:"fig_family_tree_layout-example","float":0,children:[{tagname:"img",src:"assets/familytree_example.47895d15.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"family_tree_layout-348-simpara-002",content:'<span class="api">FamilyTreeLayout</span> requires information about each of the nodes,\nnamely whether a given node represents a person or a partnership of two persons, i.e., a family.\nTo provide this information, use appropriately configured\n<a href="#/dguide/tab_family_tree_keys_affected_edges">supplemental layout data</a>.'},{tagname:"section",id:"family_tree_layout-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"family_tree_layout-options-349-simpara-001",content:'Class <span class="api">FamilyTreeLayout</span> uses different strategies for arranging the members of\nfamilies, i.e., parents and children, on the one hand and then arranging these\nentire families on the other hand.\nThe so-called top layout algorithm is responsible for the latter strategy, which by default is an\n<a href="#/dguide/hierarchical_layout">incremental hierarchical layout algorithm</a>.\nUsing another layout algorithm for the top layout algorithm can be done by means of the\nfollowing property:'},{tagname:"para",content:'<dl id="family_tree_layout-options-349-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="family_tree_layout-options-349-term-001"><api-link id="family_tree_layout-options-349-api-link-001" data-member="topLayout" data-text="topLayout:&#xA0;ILayoutAlgorithm" data-type="yfiles.genealogy.FamilyTreeLayout"></api-link></dt><dd id="family_tree_layout-options-349-listitem-001">\n<p id="family_tree_layout-options-349-simpara-002">Determines the top layout algorithm.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"family_tree_layout-supplemental_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"family_tree_layout-supplemental_data-350-simpara-001",content:'When using class <span class="api">FamilyTreeLayout</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="family_tree_layout-supplemental_data-350-api-link-001" data-member="" data-text="FamilyTreeLayoutData" data-type="yfiles.genealogy.FamilyTreeLayoutData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_family_tree_layout-supplemental_data">Supplemental layout data</a> lists all properties of\n<span class="api">FamilyTreeLayoutData</span> and the corresponding look-up keys that\n<span class="api">FamilyTreeLayout</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"family_tree_layout-supplemental_data-350-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_family_tree_layout-supplemental_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="family_tree_layout-supplemental_data-350-thead-001"><tr id="family_tree_layout-supplemental_data-350-row-001"><th id="family_tree_layout-supplemental_data-350-entry-001" align="left" valign="top">\nFamilyTreeLayoutData Property\n</th><th id="family_tree_layout-supplemental_data-350-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="family_tree_layout-supplemental_data-350-entry-003" align="left" valign="top">\nElement Type\n</th><th id="family_tree_layout-supplemental_data-350-entry-004" align="left" valign="top">\nValue Type\n</th><th id="family_tree_layout-supplemental_data-350-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="family_tree_layout-supplemental_data-350-tbody-001"><tr id="family_tree_layout-supplemental_data-350-row-002"><td id="family_tree_layout-supplemental_data-350-entry-006" align="left" valign="top"><para class="dguide-para" id="family_tree_layout-supplemental_data-350-simpara-003"><anchor id="tab_family_tree_keys_affected_edges" xreflabel="[tab_family_tree_keys_affected_edges]"></anchor><api-link id="family_tree_layout-supplemental_data-350-api-link-002" data-member="familyTypes" data-text="familyTypes" data-type="yfiles.genealogy.FamilyTreeLayoutData"></api-link></para></td><td id="family_tree_layout-supplemental_data-350-entry-007" align="left" valign="top"><para class="dguide-para" id="family_tree_layout-supplemental_data-350-simpara-004"><api-link id="family_tree_layout-supplemental_data-350-api-link-003" data-member="FAMILY_TYPE_DP_KEY" data-text="FAMILY_TYPE_DP_KEY" data-type="yfiles.genealogy.FamilyTreeLayout"></api-link></para></td><td id="family_tree_layout-supplemental_data-350-entry-008" align="left" valign="top"><para class="dguide-para" id="family_tree_layout-supplemental_data-350-simpara-005">node</para></td><td id="family_tree_layout-supplemental_data-350-entry-009" align="left" valign="top"><para class="dguide-para" id="family_tree_layout-supplemental_data-350-simpara-006">String</para></td><td id="family_tree_layout-supplemental_data-350-entry-010" align="left" valign="top"><para class="dguide-para" id="family_tree_layout-supplemental_data-350-simpara-007">For each node one of\n<api-link id="family_tree_layout-supplemental_data-350-api-link-004" data-member="FAMILY" data-text="FAMILY" data-type="yfiles.genealogy.FamilyType"></api-link>,\n<api-link id="family_tree_layout-supplemental_data-350-api-link-005" data-member="MALE" data-text="MALE" data-type="yfiles.genealogy.FamilyType"></api-link>, or\n<api-link id="family_tree_layout-supplemental_data-350-api-link-006" data-member="FEMALE" data-text="FEMALE" data-type="yfiles.genealogy.FamilyType"></api-link>.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"polyline_router",title:"Polyline Edge Routing",children:[{tagname:"para","class":"dguide-para",id:"polyline_router-351-simpara-001",content:"Polyline edge routing calculates polyline edge paths for a diagram’s edges.\nThe positions of the nodes in the diagram are not altered by this algorithm."},{tagname:"para","class":"dguide-para",id:"polyline_router-351-simpara-002",content:"Edges can be routed orthogonally, i.e., each edge path consists of horizontal and\nvertical segments, or octilinear.\nOctilinear means that the slope of each segment of an edge path is a multiple of\n45 degree."},{tagname:"figure","class":"image",title:"Polyline edge routing styles",id:"polyline_router-351-figure-001","float":0,children:[{tagname:"img",src:"assets/polyline_router_orthogonal.79bb8ce6.gif",alt:"",title:'<para class="dguide-para">Graph with orthogonal edge routing…​</para>'},{tagname:"img",src:"assets/polyline_router_octilinear.7752e0f9.gif",alt:"",title:'<para class="dguide-para">... and with octilinear edge routing.</para>'}]},{tagname:"section",id:"_relevant_classes_3",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"_relevant_classes_3-352-simpara-001",content:'<a href="#/dguide/tab_polyline_router_classes">Relevant classes for this algorithm</a> lists the relevant classes for the\npolyline edge routing algorithm.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_polyline_router_classes",rowsep:1,content:'<caption>Relevant classes for this algorithm</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="_relevant_classes_3-352-thead-001"><tr id="_relevant_classes_3-352-row-001"><th id="_relevant_classes_3-352-entry-001" align="left" valign="top">\nClass Name\n</th><th id="_relevant_classes_3-352-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_relevant_classes_3-352-tbody-001"><tr id="_relevant_classes_3-352-row-002"><td id="_relevant_classes_3-352-entry-003" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-002"><api-link id="_relevant_classes_3-352-api-link-001" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="_relevant_classes_3-352-entry-004" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-003">Main algorithm.\nSee <a href="#/dguide/polyline_router_class">the description</a> below.</para></td></tr><tr id="_relevant_classes_3-352-row-003"><td id="_relevant_classes_3-352-entry-005" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-004"><api-link id="_relevant_classes_3-352-api-link-002" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></para></td><td id="_relevant_classes_3-352-entry-006" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-005">Provides edge-related layout options.\nFor example, configuration of minimum distances and penalty settings.\nSee <a href="#/dguide/polyline_router_related">Advanced Options</a>.</para></td></tr><tr id="_relevant_classes_3-352-row-004"><td id="_relevant_classes_3-352-entry-007" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-006"><api-link id="_relevant_classes_3-352-api-link-003" data-member="" data-text="PenaltySettings" data-type="yfiles.router.PenaltySettings"></api-link></para></td><td id="_relevant_classes_3-352-entry-008" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-007">Configures penalty settings that will be queried during the edge routing process.\nSee <a href="#/dguide/polyline_router_related">Advanced Options</a>.</para></td></tr><tr id="_relevant_classes_3-352-row-005"><td id="_relevant_classes_3-352-entry-009" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-008"><api-link id="_relevant_classes_3-352-api-link-004" data-member="" data-text="Grid" data-type="yfiles.router.Grid"></api-link></para></td><td id="_relevant_classes_3-352-entry-010" align="left" valign="top"><para class="dguide-para" id="_relevant_classes_3-352-simpara-009">Provides grid settings.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"polyline_router_class",content:'Class <api-link id="_relevant_classes_3-352-api-link-005" data-member="" data-text="EdgeRouter" data-type="yfiles.router.EdgeRouter"></api-link> is a layout\nalgorithm for routing edges in a diagram.\nThe positions of the nodes in a diagram are not altered by this algorithm.\nThe algorithm supports routing of all edges at once as well as incremental scenarios\nwhere subsequently added edges should be drawn to fit the existing diagram.\nIt can be used to route edges in both flat and grouped graphs.'}]},{tagname:"section",id:"polyline_router_options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_options-353-simpara-001",content:'<span class="api">EdgeRouter</span> provides a set of options that affect the routing behavior.\nThis section highlights some of the configuration options available.'},{tagname:"para","class":"dguide-para",id:"polyline_router_options-353-simpara-002",content:'The <api-link id="polyline_router_options-353-api-link-001" data-member="scope" data-text="scope" data-type="yfiles.router.EdgeRouter"></api-link>\nproperty determines the (sub-)set of edges that the router should process.\nWhen only a subset should be routed, the subset can be specified by means of <a href="#/dguide/tab_polyline_router_keys_affected_edges">layout data</a>. Or you can specify a\nsubset of nodes whose connected edges should be routes with <a href="#/dguide/tab_polyline_router_keys_affected_nodes">layout data</a>.'},{tagname:"para",content:'<dl id="polyline_router_options-353-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_options-353-term-001"><api-link id="polyline_router_options-353-api-link-002" data-member="ROUTE_ALL_EDGES" data-text="ROUTE_ALL_EDGES" data-type="yfiles.router.Scope"></api-link></dt><dd id="polyline_router_options-353-listitem-001">\n<p id="polyline_router_options-353-simpara-003">Routes all edges in the graph.</p>\n</dd>\n<dt id="polyline_router_options-353-term-002"><api-link id="polyline_router_options-353-api-link-003" data-member="ROUTE_AFFECTED_EDGES" data-text="ROUTE_AFFECTED_EDGES" data-type="yfiles.router.Scope"></api-link></dt><dd id="polyline_router_options-353-listitem-002">\n<p id="polyline_router_options-353-simpara-004">Routes only the selected subset of edges in the graph.</p>\n</dd>\n<dt id="polyline_router_options-353-term-003"><api-link id="polyline_router_options-353-api-link-004" data-member="ROUTE_EDGES_AT_AFFECTED_NODES" data-text="ROUTE_EDGES_AT_AFFECTED_NODES" data-type="yfiles.router.Scope"></api-link></dt><dd id="polyline_router_options-353-listitem-003">\n<p id="polyline_router_options-353-simpara-005">Routes only edges which are incident to selected nodes.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="polyline_router_options-353-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_options-353-term-004" class="title" role="title">Polyline Edge Routing</dt><dt id="polyline_router_options-353-term-005"><api-link id="polyline_router_options-353-api-link-005" data-member="polylineRouting" data-text="polylineRouting" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_options-353-listitem-004">\n<p id="polyline_router_options-353-simpara-006">Determines whether the edge routing algorithm creates orthogonal or octilinear edge\npaths.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="polyline_router_options-353-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_options-353-term-006" class="title" role="title">Preferred Polyline Edge Segment Length</dt><dt id="polyline_router_options-353-term-007"><api-link id="polyline_router_options-353-api-link-006" data-member="preferredPolylineSegmentLength" data-text="preferredPolylineSegmentLength" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_options-353-listitem-005">\n<p id="polyline_router_options-353-simpara-007">Sets the preferred length of (non-orthogonal) polyline segments.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="polyline_router_options-353-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_options-353-term-008" class="title" role="title">Minimal Node to Edge Distance</dt><dt id="polyline_router_options-353-term-009"><api-link id="polyline_router_options-353-api-link-007" data-member="minimumNodeToEdgeDistance" data-text="minimumNodeToEdgeDistance" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_options-353-listitem-006">\n<p id="polyline_router_options-353-simpara-008">Determines the distance between edge segments and node sides.</p>\n</dd>\n<dt id="polyline_router_options-353-term-010" class="title" role="title">Grid</dt><dt id="polyline_router_options-353-term-011"><api-link id="polyline_router_options-353-api-link-008" data-member="grid" data-text="grid" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_options-353-listitem-007">\n<p id="polyline_router_options-353-simpara-009">Specifies the grid on which orthogonal segments of either orthogonal or octilinear\nedge paths are placed.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"polyline_router_options-353-simpara-010",content:'Further routing options can be specified by means of the layout descriptor class\nfor edges.\nOne instance of this class is held by <span class="api">EdgeRouter</span> to store and retrieve default values\nfor routing options, like, e.g., preferred minimum distances between graph elements.'},{tagname:"para","class":"dguide-para",id:"polyline_router_options-353-simpara-011",content:'<span class="api">EdgeRouter</span> provides access to the default <api-link id="polyline_router_options-353-api-link-009" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link>\ninstance:'},{tagname:"para",content:'<dl id="polyline_router_options-353-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_options-353-term-012"><api-link id="polyline_router_options-353-api-link-010" data-member="defaultEdgeLayoutDescriptor" data-text="defaultEdgeLayoutDescriptor" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_options-353-listitem-008">\n<p id="polyline_router_options-353-simpara-012">Edge-related layout options</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"polyline_router_options-353-simpara-013",content:'In addition to the instance held directly by <span class="api">EdgeRouter</span>, layout descriptors can\nalso be associated with single edges in order to specify individual settings for\nthem.\nSetting individual descriptors for edges is done through <a href="#/dguide/tab_polyline_router_keys_edge_layout_descriptor">layout data</a>.'}]},{tagname:"section",id:"polyline_router_label_aware",title:"Labeling",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_label_aware-354-simpara-001",content:'The polyline edge routing algorithm can be set up to take both node labels and edge\nlabels into account during routing.\nIt considers the size of node labels and labels of <span class="def">fixed edges</span>, i.e., edges that\nare not to be routed.\nIf space permits, the algorithm will generate edge paths that do not cross through\nthese labels in the resulting diagram.'},{tagname:"para",content:'<dl id="polyline_router_label_aware-354-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_label_aware-354-term-001" class="title" role="title">Consider Node Labels</dt><dt id="polyline_router_label_aware-354-term-002"><api-link id="polyline_router_label_aware-354-api-link-001" data-member="considerNodeLabels" data-text="considerNodeLabels" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_label_aware-354-listitem-001">\n<p id="polyline_router_label_aware-354-simpara-002">Specifies whether or not this edge router considers node labels as obstacles for\nedge paths it calculates.</p>\n</dd>\n<dt id="polyline_router_label_aware-354-term-003" class="title" role="title">Consider Edge Labels</dt><dt id="polyline_router_label_aware-354-term-004"><api-link id="polyline_router_label_aware-354-api-link-002" data-member="considerEdgeLabels" data-text="considerEdgeLabels" data-type="yfiles.router.EdgeRouter"></api-link></dt><dd id="polyline_router_label_aware-354-listitem-002">\n<p id="polyline_router_label_aware-354-simpara-003">Specifies whether or not labels of edges that are not to be routed by the edge router\nare considered as obstacles for the edge paths it calculates.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"polyline_router_grouped_graphs",title:"Grouped Graphs",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_grouped_graphs-355-simpara-001",content:'<span class="api">EdgeRouter</span> supports routing in grouped graphs without further setup.\nIt recognizes group nodes and folder nodes and finds edge paths to nodes grouped\nwithin group nodes.'}]},{tagname:"section",id:"polyline_router_incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_incremental-356-simpara-001",content:'<span class="api">EdgeRouter</span> supports incremental routing through the <strong id="polyline_router_incremental-356-emphasis-001" class="bold" role="bold">Scope</strong> feature.\nSee the <a href="#/dguide/polyline_router_options">above description</a>.'}]},{tagname:"section",id:"polyline_router_port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_port_constraints-357-simpara-001",content:'<span class="api">EdgeRouter</span> supports both weak port constraints as well as strong port constraints\nthat are specified for the edges of a graph (more precisely, the edge ends).\nThe setup of port constraints is presented in <a href="#/dguide/layout-port_constraints">Port Constraints</a>.'},{tagname:"para","class":"dguide-para",id:"polyline_router_port_constraints-357-simpara-002",content:"Using weak port constraints for the ends of an edge, it is possible to specify at\nwhich side of the source node or target node, respectively, an edge path must connect."},{tagname:"para","class":"dguide-para",id:"polyline_router_port_constraints-357-simpara-003",content:"Using strong port constraints, it is possible to specify the side of the node at\nwhich an edge must connect, and additionally also the exact position of the port."},{tagname:"para","class":"dguide-para",id:"polyline_router_port_constraints-357-simpara-004",content:"Both weak port constraints and strong port constraints can be mixed easily in the\ndrawing."},{tagname:"para","class":"dguide-para",id:"polyline_router_port_constraints-357-simpara-005",content:'You can specify the port constraints for the <a href="#/dguide/tab_polyline_router_keys_source_port_constraint">source</a> node\nas well as for the <a href="#/dguide/tab_polyline_router_keys_target_port_constraint">target</a> node for each edge by means of layout data.'}]},{tagname:"section",id:"polyline_router_port_candidates",title:"Port Candidates",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_port_candidates-358-simpara-001",content:"In addition to the support provided for port constraints, polyline edge routing\nalso supports the concept of port candidates.\nBoth aspects, i.e., matching port candidates as well as modeling enhanced port constraints\nare supported."},{tagname:"para","class":"dguide-para",id:"polyline_router_port_candidates-358-simpara-002",content:'For the matching of port candidates, you can specify the set of allowed anchor locations for\nedge ends at the nodes of a graph by means of <a href="#/dguide/tab_polyline_router_keys_node_port_candidates">layout data</a>.\nThe same applies to the subset of desired anchor locations where the\n<a href="#/dguide/tab_polyline_router_keys_source_port_candidates">source ports</a> and\n<a href="#/dguide/tab_polyline_router_keys_target_port_candidates">target ports</a>\nof edges like to connect.'},{tagname:"para","class":"dguide-para",id:"polyline_router_port_candidates-358-simpara-003",content:'See <a href="#/dguide/layout-port_candidates">Port Candidates for Nodes</a> for a detailed description of the port\ncandidates concept.'}]},{tagname:"section",id:"polyline_router_edge_grouping",title:"Edge Grouping",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_edge_grouping-359-simpara-001",content:'Polyline edge routing supports the notion of grouping together multiple edge ends\nto be anchored at the same location.\nThis can be specified for both\n<a href="#/dguide/tab_polyline_router_keys_source_groupid">source ends</a> and\n<a href="#/dguide/tab_polyline_router_keys_target_groupid">target ends</a>.\nThe general setup for edge groups is described in <a href="#/dguide/layout-edge_grouping">Layout with Edge Grouping</a>.'},{tagname:"figure","class":"image",title:"Edge routing with edge/port grouping",id:"fig_polyline_router_edge_groups","float":0,children:[{tagname:"img",src:"assets/polyline_router_edge_groups.30d67340.gif",alt:"polyline router edge groups",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"polyline_router_partition_grids",title:"Tables",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_partition_grids-360-simpara-001",content:'<span class="api">EdgeRouter</span> supports routing in partition grids without further setup.\nIt recognizes swimlane nodes/partition grids and finds edge paths to nodes within\npartition cells.'},{tagname:"para","class":"dguide-para",id:"polyline_router_partition_grids-360-simpara-002",content:'To know about the layout of a partition grid’s rows and columns, it uses the services\nof class <api-link id="polyline_router_partition_grids-360-api-link-001" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link>.\nYou can specify the PartitionGrid by means of <a href="#/dguide/tab_polyline_router_keys_partition_grid">layout data</a>.'}]},{tagname:"section",id:"polyline_router_node_halos",title:"Node Halos",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_node_halos-361-simpara-001",content:'<span class="api">EdgeRouter</span> by default supports node halos as soon as they are <a href="#/dguide/tab_polyline_router_keys_node_halo">declared</a>.\nIt considers any specified additional padding around nodes and if space permits,\nthe algorithm will generate edge paths that do not cross through these areas in\nthe resulting diagram.\nOther constraints (e.g. port constraints) that have higher costs associated, can\ncause edges to cross node halos, however.'}]},{tagname:"section",id:"polyline_router_related",title:"Advanced Options",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-001",content:'Class <api-link id="polyline_router_related-362-api-link-001" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link>\ncan be used to configure edge-related layout and drawing options.\nFor example, the following options can be set:'},{tagname:"para",content:'<ul id="polyline_router_related-362-itemizedlist-001"><li id="polyline_router_related-362-listitem-001"><p id="polyline_router_related-362-simpara-002">preferred minimum distance between edge segments</p></li><li id="polyline_router_related-362-listitem-002"><p id="polyline_router_related-362-simpara-003">preferred minimum length of first and last edge segment, respectively</p></li><li id="polyline_router_related-362-listitem-003"><p id="polyline_router_related-362-simpara-004">penalty values</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-005",content:'The edge layout can be configured using class\n<api-link id="polyline_router_related-362-api-link-002" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link>:'},{tagname:"para",content:'<dl id="polyline_router_related-362-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_related-362-term-001" class="title" role="title">Minimum Distance Edge to Edge</dt><dt id="polyline_router_related-362-term-002"><api-link id="polyline_router_related-362-api-link-003" data-member="minimumEdgeToEdgeDistance" data-text="minimumEdgeToEdgeDistance" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dd id="polyline_router_related-362-listitem-004">\n<p id="polyline_router_related-362-simpara-006">Determines the <strong id="polyline_router_related-362-emphasis-001" class="bold" role="bold">preferred</strong> minimum distance between any two edge\nsegments.</p>\n</dd>\n<dt id="polyline_router_related-362-term-003" class="title" role="title">Minimum Length of First and Last Segment</dt><dt id="polyline_router_related-362-term-004"><api-link id="polyline_router_related-362-api-link-004" data-member="minimumFirstSegmentLength" data-text="minimumFirstSegmentLength" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dt id="polyline_router_related-362-term-005"><api-link id="polyline_router_related-362-api-link-005" data-member="minimumLastSegmentLength" data-text="minimumLastSegmentLength" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dd id="polyline_router_related-362-listitem-005">\n<p id="polyline_router_related-362-simpara-007">Determine the <strong id="polyline_router_related-362-emphasis-002" class="bold" role="bold">preferred</strong> minimum length of the first (at the\nsource) and last (at the target) edge segment.</p>\n</dd>\n<dt id="polyline_router_related-362-term-006" class="title" role="title">Minimum Distance to Node Corners</dt><dt id="polyline_router_related-362-term-007"><api-link id="polyline_router_related-362-api-link-006" data-member="minimumNodeCornerDistance" data-text="minimumNodeCornerDistance" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dd id="polyline_router_related-362-listitem-006">\n<p id="polyline_router_related-362-simpara-008">Determines the <strong id="polyline_router_related-362-emphasis-003" class="bold" role="bold">preferred</strong> minimum distance between an incident\nedge and the corners of its node at the side where the edge connects.</p>\n</dd>\n<dt id="polyline_router_related-362-term-008" class="title" role="title">Penalty Settings</dt><dt id="polyline_router_related-362-term-009"><api-link id="polyline_router_related-362-api-link-007" data-member="penaltySettings" data-text="penaltySettings" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dd id="polyline_router_related-362-listitem-007">\n<p id="polyline_router_related-362-simpara-009">Configures different penalty settings that are queried during edge routing.\nPenalties define the costs for various situations, like, e.g., two edge paths crossing,\nor an edge path crossing a node, etc.\nHigher penalty for a specific situation means that the edge routing algorithm tries\nto avoid it and instead looks for other edge paths.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-010",content:'An <span class="api">EdgeLayoutDescriptor</span> instance can be specified individually for single edges\nby means of <a href="#/dguide/tab_polyline_router_keys_edge_layout_descriptor">layout data</a>.\nIn the absence of an individual descriptor for an edge, the default <span class="api">EdgeLayoutDescriptor</span>\ninstance that is registered with <span class="api">EdgeRouter</span> will be used.'},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-011",content:'<span class="api">EdgeRouter</span> supports edge routing such that the generated paths obey so-called monotonic\npath restrictions.\nThis means that (ideally) each vertical and/or each horizontal segment of an edge\npath is directed the same way, namely from source node to target node.\nThus, when following the edge path, there is never a “turning back” towards the\nsource node, but instead a steady movement towards the target node.'},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-012",content:"Monotonic edge paths are useful, for example, when routing edges in UML class diagrams/inheritance\ndiagrams or in a tree-like organization chart."},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-013",content:"The following property from class EdgeLayoutDescriptor configures monotonic path generation:"},{tagname:"para",content:'<dl id="polyline_router_related-362-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="polyline_router_related-362-term-010" class="title" role="title">Monotonic Path Restrictions</dt><dt id="polyline_router_related-362-term-011"><api-link id="polyline_router_related-362-api-link-008" data-member="monotonicPathRestriction" data-text="monotonicPathRestriction" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link></dt><dd id="polyline_router_related-362-listitem-008">\n<p id="polyline_router_related-362-simpara-014">Specifies the kind of monotonic path restrictions for edges.\nThe following restrictions are available:</p>\n<para><ul id="polyline_router_related-362-itemizedlist-002"><li id="polyline_router_related-362-listitem-009"><p id="polyline_router_related-362-simpara-015">In <api-link id="polyline_router_related-362-api-link-009" data-member="VERTICAL" data-text="vertical direction" data-type="yfiles.router.MonotonicPathRestriction"></api-link>.\nIf possible, each vertical edge segment is directed from source node to target node.</p></li><li id="polyline_router_related-362-listitem-010"><p id="polyline_router_related-362-simpara-016">In <api-link id="polyline_router_related-362-api-link-010" data-member="HORIZONTAL" data-text="horizontal direction" data-type="yfiles.router.MonotonicPathRestriction"></api-link>.\nIf possible, each horizontal edge segment is directed from source node to target\nnode.</p></li><li id="polyline_router_related-362-listitem-011"><p id="polyline_router_related-362-simpara-017">Combining the former means restricting <api-link id="polyline_router_related-362-api-link-011" data-member="BOTH" data-text="both directions" data-type="yfiles.router.MonotonicPathRestriction"></api-link>.</p></li><li id="polyline_router_related-362-listitem-012"><p id="polyline_router_related-362-simpara-018">Clearing monotonic path restrictions can be done by specifying <api-link id="polyline_router_related-362-api-link-012" data-member="NONE" data-text="NONE" data-type="yfiles.router.MonotonicPathRestriction"></api-link>.</p></li></ul></para>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-019",content:'<a href="#/dguide/fig_poly_router_monotonic_paths">Edge routing with monotonic path restrictions</a> illustrates the results of specifying\nmonotonic edge path restrictions.\nAll figures have specified restrictions in vertical direction, i.e., each vertical\nedge segment shall be directed from source node to target node.'},{tagname:"figure","class":"image",title:"Edge routing with monotonic path restrictions",id:"fig_poly_router_monotonic_paths","float":0,children:[{tagname:"img",src:"assets/polyline_router_monotonic_vert.815e1563.jpg",alt:"",title:'<para class="dguide-para">Ideal edge route with monotonic path restrictions in vertical direction.</para>'},{tagname:"img",src:"assets/polyline_router_monotonic_vert_stairs.ed7521b4.jpg",alt:"",title:'<para class="dguide-para">Stairs-like edge path due to obstacles. Vertical path restrictions are obeyed.</para>'},{tagname:"img",src:"assets/polyline_router_monotonic_vert_obstacle.fd436454.jpg",alt:"",title:'<para class="dguide-para">Vertical path restrictions cannot be obeyed due to large obstacle.</para>'}]},{tagname:"para","class":"dguide-para",id:"polyline_router_related-362-simpara-020",content:'The following table lists the data provider look-up keys that are recognized by\n<span class="api">EdgeRouter</span> in conjunction with individual layout settings for edges.'}]},{tagname:"section",id:"polyline_router_dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"polyline_router_dataprovider-363-simpara-001",content:'When using class <span class="api">EdgeRouter</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="polyline_router_dataprovider-363-api-link-001" data-member="" data-text="PolylineEdgeRouterData" data-type="yfiles.router.PolylineEdgeRouterData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_polyline_router_keys">Supplemental layout data</a> lists all properties of\n<span class="api">PolylineEdgeRouterData</span> and the corresponding look-up keys that\n<span class="api">EdgeRouter</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"polyline_router_dataprovider-363-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_polyline_router_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="polyline_router_dataprovider-363-thead-001"><tr id="polyline_router_dataprovider-363-row-001"><th id="polyline_router_dataprovider-363-entry-001" align="left" valign="top">\nPolylineEdgeRouterData Property\n</th><th id="polyline_router_dataprovider-363-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="polyline_router_dataprovider-363-entry-003" align="left" valign="top">\nElement Type\n</th><th id="polyline_router_dataprovider-363-entry-004" align="left" valign="top">\nValue Type\n</th><th id="polyline_router_dataprovider-363-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="polyline_router_dataprovider-363-tbody-001"><tr id="polyline_router_dataprovider-363-row-002"><td id="polyline_router_dataprovider-363-entry-006" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-003"><anchor id="tab_polyline_router_keys_affected_edges" xreflabel="[tab_polyline_router_keys_affected_edges]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-002" data-member="affectedEdges" data-text="affectedEdges" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-007" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-004"><api-link id="polyline_router_dataprovider-363-api-link-003" data-member="affectedEdgesDpKey" data-text="affectedEdgesDpKey" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-008" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-005">edge</para></td><td id="polyline_router_dataprovider-363-entry-009" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-006">boolean</para></td><td id="polyline_router_dataprovider-363-entry-010" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-007">For each edge a boolean value indicating whether the edge shall be considered\n  for rerouting or not.</para></td></tr><tr id="polyline_router_dataprovider-363-row-003"><td id="polyline_router_dataprovider-363-entry-011" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-008"><anchor id="tab_polyline_router_keys_affected_nodes" xreflabel="[tab_polyline_router_keys_affected_nodes]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-004" data-member="affectedNodes" data-text="affectedNodes" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-012" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-009"><api-link id="polyline_router_dataprovider-363-api-link-005" data-member="affectedNodesDpKey" data-text="affectedNodesDpKey" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-013" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-010">node</para></td><td id="polyline_router_dataprovider-363-entry-014" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-011">boolean</para></td><td id="polyline_router_dataprovider-363-entry-015" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-012">For each node a boolean value indicating whether the edges connected to this node shall be considered\n  for rerouting or not.</para></td></tr><tr id="polyline_router_dataprovider-363-row-004"><td id="polyline_router_dataprovider-363-entry-016" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-013"><anchor id="tab_polyline_router_keys_edge_layout_descriptor" xreflabel="[tab_polyline_router_keys_edge_layout_descriptor]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-006" data-member="edgeLayoutDescriptors" data-text="edgeLayoutDescriptors" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-017" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-014"><api-link id="polyline_router_dataprovider-363-api-link-007" data-member="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-text="EDGE_LAYOUT_DESCRIPTOR_DP_KEY" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-018" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-015">edge</para></td><td id="polyline_router_dataprovider-363-entry-019" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-016">EdgeLayoutDescriptor</para></td><td id="polyline_router_dataprovider-363-entry-020" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-017">For each edge an <api-link id="polyline_router_dataprovider-363-api-link-008" data-member="" data-text="EdgeLayoutDescriptor" data-type="yfiles.router.EdgeLayoutDescriptor"></api-link>\nobject that configures a number of edge-related options.</para></td></tr><tr id="polyline_router_dataprovider-363-row-005"><td id="polyline_router_dataprovider-363-entry-021" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-018"><anchor id="tab_polyline_router_keys_source_port_constraint" xreflabel="[tab_polyline_router_keys_source_port_constraint]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-009" data-member="sourcePortConstraints" data-text="sourcePortConstraints" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-022" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-019"><api-link id="polyline_router_dataprovider-363-api-link-010" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-023" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-020">edge</para></td><td id="polyline_router_dataprovider-363-entry-024" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-021">PortConstraint</para></td><td id="polyline_router_dataprovider-363-entry-025" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-022">For each edge a PortConstraint object encoding its source end’s port\nconstraint.</para></td></tr><tr id="polyline_router_dataprovider-363-row-006"><td id="polyline_router_dataprovider-363-entry-026" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-023"><anchor id="tab_polyline_router_keys_target_port_constraint" xreflabel="[tab_polyline_router_keys_target_port_constraint]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-011" data-member="targetPortConstraints" data-text="targetPortConstraints" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-027" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-024"><api-link id="polyline_router_dataprovider-363-api-link-012" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-028" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-025">edge</para></td><td id="polyline_router_dataprovider-363-entry-029" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-026">PortConstraint</para></td><td id="polyline_router_dataprovider-363-entry-030" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-027">For each edge a PortConstraint object encoding its target end’s port\nconstraint.</para></td></tr><tr id="polyline_router_dataprovider-363-row-007"><td id="polyline_router_dataprovider-363-entry-031" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-028"><anchor id="tab_polyline_router_keys_source_groupid" xreflabel="[tab_polyline_router_keys_source_groupid]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-013" data-member="sourceGroupIds" data-text="sourceGroupIds" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-032" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-029"><api-link id="polyline_router_dataprovider-363-api-link-014" data-member="SOURCE_GROUP_ID_DP_KEY" data-text="SOURCE_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-033" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-030">edge</para></td><td id="polyline_router_dataprovider-363-entry-034" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-031">object</para></td><td id="polyline_router_dataprovider-363-entry-035" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-032">For each edge an arbitrary object indicating the group its source end is\naffiliated with.</para></td></tr><tr id="polyline_router_dataprovider-363-row-008"><td id="polyline_router_dataprovider-363-entry-036" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-033"><anchor id="tab_polyline_router_keys_target_groupid" xreflabel="[tab_polyline_router_keys_target_groupid]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-015" data-member="targetGroupIds" data-text="targetGroupIds" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-037" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-034"><api-link id="polyline_router_dataprovider-363-api-link-016" data-member="TARGET_GROUP_ID_DP_KEY" data-text="TARGET_GROUP_ID_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-038" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-035">edge</para></td><td id="polyline_router_dataprovider-363-entry-039" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-036">object</para></td><td id="polyline_router_dataprovider-363-entry-040" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-037">For each edge an arbitrary Object indicating the group its target end is\naffiliated with.</para></td></tr><tr id="polyline_router_dataprovider-363-row-009"><td id="polyline_router_dataprovider-363-entry-041" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-038"><anchor id="tab_polyline_router_keys_node_port_candidates" xreflabel="[tab_polyline_router_keys_node_port_candidates]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-017" data-member="nodePortCandidateSets" data-text="nodePortCandidateSets" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-042" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-039"><api-link id="polyline_router_dataprovider-363-api-link-018" data-member="NODE_PORT_CANDIDATE_SET_DP_KEY" data-text="NODE_PORT_CANDIDATE_SET_DP_KEY" data-type="yfiles.layout.PortCandidateSet"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-043" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-040">node</para></td><td id="polyline_router_dataprovider-363-entry-044" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-041">PortCandidateSet</para></td><td id="polyline_router_dataprovider-363-entry-045" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-042">For each node a PortCandidateSet object encoding the set of allowed anchor locations\nfor bus connections.</para></td></tr><tr id="polyline_router_dataprovider-363-row-010"><td id="polyline_router_dataprovider-363-entry-046" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-043"><anchor id="tab_polyline_router_keys_source_port_candidates" xreflabel="[tab_polyline_router_keys_source_port_candidates]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-019" data-member="sourcePortCandidates" data-text="sourcePortCandidates" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-047" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-044"><api-link id="polyline_router_dataprovider-363-api-link-020" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-048" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-045">edge</para></td><td id="polyline_router_dataprovider-363-entry-049" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-046">Collection</para></td><td id="polyline_router_dataprovider-363-entry-050" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-047">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the source\nport likes to connect to.</para></td></tr><tr id="polyline_router_dataprovider-363-row-011"><td id="polyline_router_dataprovider-363-entry-051" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-048"><anchor id="tab_polyline_router_keys_target_port_candidates" xreflabel="[tab_polyline_router_keys_target_port_candidates]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-021" data-member="targetPortCandidates" data-text="targetPortCandidates" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-052" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-049"><api-link id="polyline_router_dataprovider-363-api-link-022" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-053" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-050">edge</para></td><td id="polyline_router_dataprovider-363-entry-054" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-051">Collection</para></td><td id="polyline_router_dataprovider-363-entry-055" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-052">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the target\nport likes to connect to.</para></td></tr><tr id="polyline_router_dataprovider-363-row-012"><td id="polyline_router_dataprovider-363-entry-056" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-053"><anchor id="tab_polyline_router_keys_partition_grid" xreflabel="[tab_polyline_router_keys_partition_grid]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-023" data-member="partitionGridData" data-text="partitionGridData" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-057" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-054"><api-link id="polyline_router_dataprovider-363-api-link-024" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-058" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-055">graph</para></td><td id="polyline_router_dataprovider-363-entry-059" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-056">PartitionGrid</para></td><td id="polyline_router_dataprovider-363-entry-060" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-057">A <api-link id="polyline_router_dataprovider-363-api-link-025" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link>\nobject that specifies the actual partition grid, including number of rows and\ncolumns, their respective heights and widths, and their insets.</para></td></tr><tr id="polyline_router_dataprovider-363-row-013"><td id="polyline_router_dataprovider-363-entry-061" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-058"><anchor id="tab_polyline_router_keys_node_halo" xreflabel="[tab_polyline_router_keys_node_halo]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-026" data-member="nodeHalos" data-text="nodeHalos" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-062" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-059"><api-link id="polyline_router_dataprovider-363-api-link-027" data-member="NODE_HALO_DP_KEY" data-text="NODE_HALO_DP_KEY" data-type="yfiles.layout.NodeHalo"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-063" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-060">node</para></td><td id="polyline_router_dataprovider-363-entry-064" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-061">NodeHalo</para></td><td id="polyline_router_dataprovider-363-entry-065" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-062">A <api-link id="polyline_router_dataprovider-363-api-link-028" data-member="" data-text="NodeHalo" data-type="yfiles.layout.NodeHalo"></api-link> object that specifies the halo\nsizes at each side of a node.</para></td></tr><tr id="polyline_router_dataprovider-363-row-014"><td id="polyline_router_dataprovider-363-entry-066" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-063"><anchor id="tab_polyline_router_keys_abort_handler" xreflabel="[tab_polyline_router_keys_abort_handler]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-029" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-067" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-064"><api-link id="polyline_router_dataprovider-363-api-link-030" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-068" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-065">graph</para></td><td id="polyline_router_dataprovider-363-entry-069" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-066">AbortHandler</para></td><td id="polyline_router_dataprovider-363-entry-070" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-067">An <api-link id="polyline_router_dataprovider-363-api-link-031" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="polyline_router_dataprovider-363-row-015"><td id="polyline_router_dataprovider-363-entry-071" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-068"><anchor id="tab_polyline_router_keys_ignored_labels" xreflabel="[tab_polyline_router_keys_ignored_labels]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-032" data-member="ignoredLabels" data-text="ignoredLabels" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-072" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-069"><api-link id="polyline_router_dataprovider-363-api-link-033" data-member="IGNORED_LABELS_DP_KEY" data-text="IGNORED_LABELS_DP_KEY" data-type="yfiles.layout.LabelLayoutKeys"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-073" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-070">label</para></td><td id="polyline_router_dataprovider-363-entry-074" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-071">boolean</para></td><td id="polyline_router_dataprovider-363-entry-075" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-072">A collection of labels of nodes or fixed edges that are ignored by the router.</para></td></tr><tr id="polyline_router_dataprovider-363-row-016"><td id="polyline_router_dataprovider-363-entry-076" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-073"><anchor id="tab_polyline_router_keys_label_crossing_penalty_factor" xreflabel="[tab_polyline_router_keys_label_crossing_penalty_factor]"></anchor><api-link id="polyline_router_dataprovider-363-api-link-034" data-member="labelCrossingPenaltyFactors" data-text="labelCrossingPenaltyFactors" data-type="yfiles.router.PolylineEdgeRouterData"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-077" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-074"><api-link id="polyline_router_dataprovider-363-api-link-035" data-member="LABEL_CROSSING_PENALTY_FACTOR_DP_KEY" data-text="LABEL_CROSSING_PENALTY_FACTOR_DP_KEY" data-type="yfiles.router.EdgeRouter"></api-link></para></td><td id="polyline_router_dataprovider-363-entry-078" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-075">label</para></td><td id="polyline_router_dataprovider-363-entry-079" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-076">double</para></td><td id="polyline_router_dataprovider-363-entry-080" align="left" valign="top"><para class="dguide-para" id="polyline_router_dataprovider-363-simpara-077">For each label a penalty factor that is multiplied with the basic penalty for an edge crossing the label.</para></td></tr></tbody>'
}]}]},{tagname:"section",id:"channel_edge_router",title:"Channel Edge Routing",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-364-simpara-001",content:'<api-link id="channel_edge_router-364-api-link-001" data-member="" data-text="ChannelEdgeRouter" data-type="yfiles.router.ChannelEdgeRouter"></api-link> is an\northogonal edge routing algorithm that uses a two step approach for finding edge routes.\nFirst, a path finding phase assigns preliminary paths for all edges.\nIn a second step, the distribution phase, these edge paths are then distributed\nso that edge segments take up the space between the nodes.\nThe available space that an edge segment can use is also referred to as its <span class="def">channel</span>.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-364-simpara-002",content:'<span class="api">ChannelEdgeRouter</span> is particularly well suited for routing bus-like structures,\ni.e., sets of parallel edges between common nodes.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-364-simpara-003",content:'Compared to <a href="#/dguide/polyline_router">Polyline Edge Routing</a>,\nedge segments can be very close to each other, and edges may also overlap with nodes\nwhen using the default pattern routing scheme for the path finding phase (see below).\nHowever, there are many situations where this algorithm will be faster.'},{tagname:"figure","class":"image",title:"Sample edge routing produced by ChannelEdgeRouter",id:"channel_edge_router-364-figure-001","float":0,children:[{tagname:"img",src:"assets/channel_grid.d9c12fa9.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"channel_edge_router-364-simpara-004",content:'By default, <span class="api">ChannelEdgeRouter</span> delegates the path finding and distribution steps\nto specialized layout providers, namely classes\n<api-link id="channel_edge_router-364-api-link-002" data-member="" data-text="OrthogonalPatternEdgeRouter" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link> and\n<api-link id="channel_edge_router-364-api-link-003" data-member="" data-text="OrthogonalSegmentDistributionStage" data-type="yfiles.router.OrthogonalSegmentDistributionStage"></api-link>,\nrespectively.\nThe strategies for both path finding and distribution can be easily customized.'},{tagname:"section",id:"channel_edge_router-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-options-365-simpara-001",content:'Class <span class="api">ChannelEdgeRouter</span> itself has no special routing options beyond the\nproperties which allow to customize the strategies used for the two routing phases:'},{tagname:"para",content:'<dl id="channel_edge_router-options-365-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="channel_edge_router-options-365-term-001"><api-link id="channel_edge_router-options-365-api-link-001" data-member="pathFinderStrategy" data-text="pathFinderStrategy" data-type="yfiles.router.ChannelEdgeRouter"></api-link></dt><dt id="channel_edge_router-options-365-term-002"><api-link id="channel_edge_router-options-365-api-link-002" data-member="edgeDistributionStrategy" data-text="edgeDistributionStrategy" data-type="yfiles.router.ChannelEdgeRouter"></api-link></dt><dd id="channel_edge_router-options-365-listitem-001">\n<p id="channel_edge_router-options-365-simpara-002">Enable setting the ChannelEdgeRouter strategies for the routing phases.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"channel_edge_router-incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-incremental-366-simpara-001",content:'<span class="api">ChannelEdgeRouter</span> supports incremental routing through the <span class="def">Affected Edges</span> feature, that is\nthe set of edges from the graph that should be processed.\nWhen only a subset should be routed, the subset can be specified by means of <a href="#/dguide/tab_channel_edge_router_keys_affected_edges">layout data</a>.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-incremental-366-simpara-002",content:'<span class="api">OrthogonalPatternEdgeRouter</span> and\n<span class="api">OrthogonalSegmentDistributionStage</span>, which are\nused as the default path finding and distribution strategy, respectively, both provide layout data to specify the edges to route.'}]},{tagname:"section",id:"channel_edge_router-port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-port_constraints-367-simpara-001",content:'Both the default path finding as well as the default distribution strategy of\nclass <span class="api">ChannelEdgeRouter</span> obey both types of port constraints, weak and strong.\nThe port constraints can be specified for the\n<a href="#/dguide/tab_orthogonal_pattern_edge_keys_source_port_constraints">source</a> as well as for the\n<a href="#/dguide/tab_orthogonal_pattern_edge_keys_target_port_constraints">target</a> by\nmeans of layout data.'}]},{tagname:"section",id:"channel_edge_router-port_candidates",title:"Port Candidates",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-port_candidates-368-simpara-001",content:'In addition to the support provided for port constraints, <span class="api">ChannelEdgeRouter</span>’s\ndefault path finding and distribution strategies also supports port candidates\nthat model enhanced port constraints, comprising, for example, multiple sides\nof a node at once.\nYou can specify the set of possible port candidates for the edges of a graph\nfor the <a href="#/dguide/tab_orthogonal_pattern_edge_keys_source_port_candidates">source</a>\n+as well as for the <a href="#/dguide/tab_orthogonal_pattern_edge_keys_target_port_candidates">target</a> by means of layout data.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-port_candidates-368-simpara-002",content:'See <a href="#/dguide/layout-port_candidates_for_edges">Port Candidates for Edges</a> for a detailed\ndescription of this port candidates use case.'}]},{tagname:"section",id:"channel_edge_router-related_classes",title:"Related Classes",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-related_classes-369-simpara-001",content:'By default,\n<api-link id="channel_edge_router-related_classes-369-api-link-001" data-member="" data-text="OrthogonalPatternEdgeRouter" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link> is\nset as the path finding strategy for <span class="api">ChannelEdgeRouter</span>.\nIt supports two different policies for finding edge paths, “free” routing,\nwhich is the default, and grid routing.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-related_classes-369-simpara-002",content:'Common to both routing policies is the general technique for finding an edge\npath: depending on the relative location of source and target node, an edge\npath is chosen from a set of possible routing <span class="def">patterns</span>.\nThe paths from this set are associated with costs, and\n<span class="api">OrthogonalPatternEdgeRouter</span> chooses the routing pattern that causes the least costs.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-related_classes-369-simpara-003",content:"The properties listed below can be used to specify the costs for specific situations,\nfor example, edge segments that overlap."},{tagname:"para","class":"dguide-para",id:"channel_edge_router-related_classes-369-simpara-004",content:'Note that, despite the different cost factors, the actual routing chosen by\n<span class="api">OrthogonalPatternEdgeRouter</span> may overlap with nodes, for example, when an edge’s\nchannels offer not enough space for a proper non-overlapping route.'},{tagname:"para",content:'<dl id="channel_edge_router-related_classes-369-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="channel_edge_router-related_classes-369-term-001"><api-link id="channel_edge_router-related_classes-369-api-link-002" data-member="nodeCrossingCost" data-text="nodeCrossingCost" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link></dt><dt id="channel_edge_router-related_classes-369-term-002"><api-link id="channel_edge_router-related_classes-369-api-link-003" data-member="edgeCrossingCost" data-text="edgeCrossingCost" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link></dt><dt id="channel_edge_router-related_classes-369-term-003"><api-link id="channel_edge_router-related_classes-369-api-link-004" data-member="edgeOverlapCost" data-text="edgeOverlapCost" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link></dt><dd id="channel_edge_router-related_classes-369-listitem-001">\n<p id="channel_edge_router-related_classes-369-simpara-005">Allow to specify the costs for specific situations during the routing process.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"channel_edge_router-layout_stages",title:"Applicable Layout Stages",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-layout_stages-370-simpara-001",content:'<a href="#/dguide/tab_channel_edge_router-layout_stages">Layout Stages</a> lists layout stages that can be used\nto enhance the routing process of class <span class="api">ChannelEdgeRouter</span>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_channel_edge_router-layout_stages",rowsep:1,content:'<caption>Layout Stages</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><tbody id="channel_edge_router-layout_stages-370-tbody-001"><tr id="channel_edge_router-layout_stages-370-row-001"><td id="channel_edge_router-layout_stages-370-entry-001" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-layout_stages-370-simpara-002">Class Name</para></td><td id="channel_edge_router-layout_stages-370-entry-002" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-layout_stages-370-simpara-003">Description</para></td></tr><tr id="channel_edge_router-layout_stages-370-row-002"><td id="channel_edge_router-layout_stages-370-entry-003" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-layout_stages-370-simpara-004"><api-link id="channel_edge_router-layout_stages-370-api-link-001" data-member="" data-text="PolylineLayoutStage" data-type="yfiles.router.PolylineLayoutStage"></api-link></para></td><td id="channel_edge_router-layout_stages-370-entry-004" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-layout_stages-370-simpara-005">With class <span class="api">ChannelEdgeRouter</span> as the core layout algorithm, this stage adds octilinear\nedge routing to the diagram that results from the channel edge router calculation.</para></td></tr></tbody>'}]},{tagname:"section",id:"channel_edge_router-supplemental_data",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"channel_edge_router-supplemental_data-371-simpara-001",content:'When using class <span class="api">ChannelEdgeRouter</span>, supplemental\nlayout data for a graph’s elements can be specified either by using classes\n<api-link id="channel_edge_router-supplemental_data-371-api-link-001" data-member="" data-text="ChannelEdgeRouterData" data-type="yfiles.router.ChannelEdgeRouterData"></api-link> and <api-link id="channel_edge_router-supplemental_data-371-api-link-002" data-member="" data-text="OrthogonalPatternEdgeRouterData" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link>\nor by registering data providers with the graph using given look-up keys.\nNote that you need to use <api-link id="channel_edge_router-supplemental_data-371-api-link-003" data-member="" data-text="CompositeLayoutData" data-type="yfiles.layout.CompositeLayoutData"></api-link> to combine <span class="api">ChannelEdgeRouterData</span> and\n<span class="api">OrthogonalPatternEdgeRouterData</span>\nto use both layout data classes at the same time when layouting a graph.\n<a href="#/dguide/tab_channel_edge_router-supplemental_data">Supplemental layout data</a> lists all properties of\n<span class="api">ChannelEdgeRouterData</span> and the corresponding look-up keys that\n<span class="api">ChannelEdgeRouter</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"channel_edge_router-supplemental_data-371-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_channel_edge_router-supplemental_data",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="channel_edge_router-supplemental_data-371-thead-001"><tr id="channel_edge_router-supplemental_data-371-row-001"><th id="channel_edge_router-supplemental_data-371-entry-001" align="left" valign="top">\nChannelEdgeRouterData Property, OrthogonalPatternEdgeRouterData\n</th><th id="channel_edge_router-supplemental_data-371-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="channel_edge_router-supplemental_data-371-entry-003" align="left" valign="top">\nElement Type\n</th><th id="channel_edge_router-supplemental_data-371-entry-004" align="left" valign="top">\nValue Type\n</th><th id="channel_edge_router-supplemental_data-371-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="channel_edge_router-supplemental_data-371-tbody-001"><tr id="channel_edge_router-supplemental_data-371-row-002"><td id="channel_edge_router-supplemental_data-371-entry-006" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-003"><anchor id="tab_channel_edge_router_keys_affected_edges" xreflabel="[tab_channel_edge_router_keys_affected_edges]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-004" data-member="affectedEdges" data-text="ChannelEdgeRouterData.affectedEdges" data-type="yfiles.router.ChannelEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-007" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-004"><api-link id="channel_edge_router-supplemental_data-371-api-link-005" data-member="AFFECTED_EDGES_DP_KEY" data-text="AFFECTED_EDGES_DP_KEY" data-type="yfiles.router.ChannelEdgeRouter"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-008" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-005">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-009" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-006">boolean</para></td><td id="channel_edge_router-supplemental_data-371-entry-010" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-007">For each edge a boolean value indicating whether it should be routed or not.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-003"><td id="channel_edge_router-supplemental_data-371-entry-011" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-008"><anchor id="tab_orthogonal_pattern_edge_keys_abort_handler" xreflabel="[tab_orthogonal_pattern_edge_keys_abort_handler]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-006" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-012" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-009"><api-link id="channel_edge_router-supplemental_data-371-api-link-007" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-013" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-010">graph</para></td><td id="channel_edge_router-supplemental_data-371-entry-014" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-011">AbortHandler</para></td><td id="channel_edge_router-supplemental_data-371-entry-015" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-012">An <api-link id="channel_edge_router-supplemental_data-371-api-link-008" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-004"><td colspan="4" id="channel_edge_router-supplemental_data-371-entry-016" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-013"><anchor id="tab_orthogonal_pattern_edge_router_data" xreflabel="[tab_orthogonal_pattern_edge_router_data]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-009" data-member="" data-text="OrthogonalPatternEdgeRouterData" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-017" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-014">Specifies supplemental layout data for y/layout/router/OrthogonalPatternEdgeRouter.html.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-005"><td id="channel_edge_router-supplemental_data-371-entry-018" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-015"><anchor id="tab_orthogonal_pattern_edge_router_keys_affected_edges" xreflabel="[tab_orthogonal_pattern_edge_router_keys_affected_edges]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-010" data-member="affectedEdges" data-text="OrthogonalPatternEdgeRouterData.affectedEdges" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-019" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-016"><api-link id="channel_edge_router-supplemental_data-371-api-link-011" data-member="DEFAULT_AFFECTED_EDGES_DP_KEY" data-text="DEFAULT_AFFECTED_EDGES_DP_KEY" data-type="yfiles.router.OrthogonalPatternEdgeRouter"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-020" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-017">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-021" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-018">boolean</para></td><td id="channel_edge_router-supplemental_data-371-entry-022" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-019">For each edge a boolean value indicating whether it should be routed or not.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-006"><td id="channel_edge_router-supplemental_data-371-entry-023" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-020"><anchor id="tab_orthogonal_pattern_edge_keys_source_port_constraints" xreflabel="[tab_orthogonal_pattern_edge_keys_source_port_constraints]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-012" data-member="sourcePortConstraints" data-text="OrthogonalPatternEdgeRouterData.sourcePortConstraints" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-024" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-021"><api-link id="channel_edge_router-supplemental_data-371-api-link-013" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-025" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-022">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-026" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-023"><span class="api">PortConstraint</span></para></td><td id="channel_edge_router-supplemental_data-371-entry-027" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-024">For each edge a <span class="api">PortConstraint</span> object encoding its source end’s port constraint.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-007"><td id="channel_edge_router-supplemental_data-371-entry-028" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-025"><anchor id="tab_orthogonal_pattern_edge_keys_target_port_constraints" xreflabel="[tab_orthogonal_pattern_edge_keys_target_port_constraints]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-014" data-member="targetPortConstraints" data-text="OrthogonalPatternEdgeRouterData.targetPortConstraints" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-029" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-026"><api-link id="channel_edge_router-supplemental_data-371-api-link-015" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-030" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-027">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-031" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-028"><span class="api">PortConstraint</span></para></td><td id="channel_edge_router-supplemental_data-371-entry-032" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-029">For each edge a <span class="api">PortConstraint</span> object encoding its target end’s port constraint.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-008"><td id="channel_edge_router-supplemental_data-371-entry-033" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-030"><anchor id="tab_orthogonal_pattern_edge_keys_source_port_candidates" xreflabel="[tab_orthogonal_pattern_edge_keys_source_port_candidates]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-016" data-member="sourcePortCandidates" data-text="OrthogonalPatternEdgeRouterData.sourcePortCandidates" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-034" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-031"><api-link id="channel_edge_router-supplemental_data-371-api-link-017" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-035" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-032">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-036" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-033">Collection</para></td><td id="channel_edge_router-supplemental_data-371-entry-037" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-034">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the source\nport likes to connect to.</para></td></tr><tr id="channel_edge_router-supplemental_data-371-row-009"><td id="channel_edge_router-supplemental_data-371-entry-038" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-035"><anchor id="tab_orthogonal_pattern_edge_keys_target_port_candidates" xreflabel="[tab_orthogonal_pattern_edge_keys_target_port_candidates]"></anchor><api-link id="channel_edge_router-supplemental_data-371-api-link-018" data-member="targetPortCandidates" data-text="OrthogonalPatternEdgeRouterData.targetPortCandidates" data-type="yfiles.router.OrthogonalPatternEdgeRouterData"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-039" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-036"><api-link id="channel_edge_router-supplemental_data-371-api-link-019" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="channel_edge_router-supplemental_data-371-entry-040" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-037">edge</para></td><td id="channel_edge_router-supplemental_data-371-entry-041" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-038">Collection</para></td><td id="channel_edge_router-supplemental_data-371-entry-042" align="left" valign="top"><para class="dguide-para" id="channel_edge_router-supplemental_data-371-simpara-039">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the target\nport likes to connect to.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"bus_router",title:"Bus-style Edge Routing",children:[{tagname:"para","class":"dguide-para",id:"bus_router-372-simpara-001",content:"Orthogonal bus-style edge routing combines the (likely confusing) mass of edges\nin parts of a diagram where each node is connected to each other node in a concise,\ntree-like structure that consists of vertical and horizontal line segments.\nThe positions of the nodes in a diagram are not altered by this algorithm."},{tagname:"para","class":"dguide-para",id:"bus_router-372-simpara-002",content:"The algorithm aims to find routes where all edge paths share as much way as possible.\nIt yields long line segments where ideally all but the first and last segments of\nall edge paths are drawn on top of each other, with short connections branching\noff to the nodes.\nThe short connections bundle the respective first or last segments of a node’s incident\nedges."},{tagname:"figure","class":"image",title:"Bus-style edge routing sample",id:"bus_router-372-figure-001","float":0,children:[{tagname:"img",src:"assets/bus_3buses.aa77064a.jpg",alt:"",title:'<para class="dguide-para">Diagram with three completely connected parts.</para>'},{tagname:"img",src:"assets/bus_3buses_layout.fe045fe4.jpg",alt:"",title:'<para class="dguide-para">A clear representation of the same diagram using orthogonal bus-style edge routing.</para>'}]},{tagname:"para","class":"dguide-para",id:"bus_router-372-simpara-003",content:"Carefully observe that the resulting representation, with many edge segments drawn\non top of each other, leaves little room for a sensible interpretation of edge direction."},{tagname:"section",id:"bus_router-terminology",title:"Terminology",children:[{tagname:"para","class":"dguide-para",id:"bus_router-terminology-373-simpara-001",content:'This routing style works on the set of edges of a <span class="def">complete (sub)graph</span>,\n(a part of) a diagram where each node is connected to a each other node.\nMathematically, this set of edges is equivalent to a <span class="def">hyperedge</span>,\nan edge that not only connects two nodes, but a set of nodes with each other.'},{tagname:"para","class":"dguide-para",id:"bus_router-terminology-373-simpara-002",content:'The orthogonal edge paths that are calculated for the set of edges form a representation\nthat, in its entirety, is called <span class="def">bus-style representation</span>\nor often also simply <span class="def">bus</span>. This bus consists of <span class="def">bus connections</span>, which simply\nmean the (ideally) short line segments directly starting at the nodes, and the <span class="def">backbone segments</span>.'},{tagname:"para","class":"dguide-para",id:"bus_router-terminology-373-simpara-003",content:'Backbone segments are "at the heart" of the representation and refer to the vertical\nand horizontal line segments where the line segments from the nodes (the bus connections)\nend.'},{tagname:"figure","class":"image",title:"Replacing the set of edges in a complete graph by a bus-style representation",id:"bus_router-terminology-373-figure-001","float":0,children:[{tagname:"img",src:"assets/bus_6star-complete.e33833a0.jpg",alt:"",title:'<para class="dguide-para">A complete graph, where each node is connected to each other node.</para>'},{tagname:"img",src:"assets/bus_6star-hub.7f0bfe3a.jpg",alt:"",title:'<para class="dguide-para">The set of edges (conceptually) reduced to a star-like hyperedge.</para>'},{tagname:"img",src:"assets/bus_6star-bus.dc9e5c98.jpg",alt:"",title:'<para class="dguide-para">Bus-style representation of the edges. The edge set is the same as in the initial figure, however, edge paths are drawn on top of each other.</para>'}]},{tagname:"para","class":"dguide-para",id:"bus_router-terminology-373-simpara-004",content:"The orthogonal bus-style edge routing algorithm uses a two-phase process, basically:"},{tagname:"para",content:'<ol id="bus_router-terminology-373-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="bus_router-terminology-373-listitem-001"><p id="bus_router-terminology-373-simpara-005">Find a set of good initial backbone segments.\nThis phase is referred to as the <span class="def">backbone selection</span> phase.</p></li><li id="bus_router-terminology-373-listitem-002"><p id="bus_router-terminology-373-simpara-006">Connect initial backbone segments with each other and also each node to each of\nthe initial backbone segments by using orthogonal edge paths.\nReduce the set of resulting structures to the most optimal structure where backbone\nsegments are long and bus connections from the nodes are short.\nThis phase is referred to as the <span class="def">routing and recombination</span> phase.</p></li></ol>'}]},{tagname:"section",id:"bus_router-class",title:"Relevant Classes",children:[{tagname:"para","class":"dguide-para",id:"bus_router-class-374-simpara-001",content:"The relevant classes for the orthogonal bus-style edge routing algorithm are"},{tagname:"para",content:'<dl id="bus_router-class-374-variablelist-001"><dt id="bus_router-class-374-term-001"><api-link id="bus_router-class-374-api-link-001" data-member="" data-text="BusRouter" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-class-374-listitem-001"><p id="bus_router-class-374-simpara-002">Main algorithm. See <a href="#/dguide/bus_router-class">the description</a> below.</p></dd><dt id="bus_router-class-374-term-002"><api-link id="bus_router-class-374-api-link-002" data-member="" data-text="BusDescriptor" data-type="yfiles.router.BusDescriptor"></api-link></dt><dd id="bus_router-class-374-listitem-002"><p id="bus_router-class-374-simpara-003">Provides bus-related configurations for an edge.\nDetermines the bus ID, most notably. See <a href="#/dguide/bus_router-descriptor">Bus-related Options</a>.</p></dd><dt id="bus_router-class-374-term-003"><api-link id="bus_router-class-374-api-link-003" data-member="" data-text="BusRepresentations" data-type="yfiles.router.BusRepresentations"></api-link></dt><dd id="bus_router-class-374-listitem-003"><p id="bus_router-class-374-simpara-004">Facilitates generation of the set of edges of a complete subgraph from a conceptually\nequivalent reduced structure, the hub structure.\nAlso supports <a href="#/dguide/bus_router_hub">conversion of bus-style representations to hub structures</a>.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-class-374-simpara-005",content:'Class <api-link id="bus_router-class-374-api-link-004" data-member="" data-text="BusRouter" data-type="yfiles.router.BusRouter"></api-link> is a layout algorithm\nfor routing the set of edges of complete subgraphs.\nThe positions of the nodes in a diagram are not altered by this algorithm.'},{tagname:"para","class":"dguide-para",id:"bus_router-class-374-simpara-006",content:"The edge paths that are generated by this algorithm form a so-called bus-style representation\nthat consists of vertical and horizontal line segments only, where many edge paths\nare drawn on top of each other.\nThis bus-style representation resembles a tree-like structure that connects the nodes."}]},{tagname:"section",id:"bus_router-setup",title:"Setup",children:[{tagname:"para","class":"dguide-para",id:"bus_router-setup-375-simpara-001",content:'To calculate actual bus-style representations, BusRouter needs a mapping to determine\nwhich edges belong to a common bus.\nThe mapping that assigns a bus ID to each edge can be specified using the <a href="#/dguide/bus_router-descriptor">BusDescriptor class</a>  by means of <a href="#/dguide/tab_bus_router_keys_edge_descriptor">layout data</a>.\nNote that for an edge without bus ID, a bus consisting only of the single edge is created.'},{tagname:"example",id:"ex_bus_router_setup_buses",title:"Creating the mapping for buses",content:'<pre class="programlisting javascript" id="bus_router-setup-375-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create bus ID objects.\r\nconst myBusID = \'This is the first bus.\'\r\nconst myOtherBusID = \'A second bus.\'\r\n\r\n// Create a mapper.\r\nconst em = new yfiles.collections.Mapper()\r\n\r\n// Establish a mapping from edges to bus IDs.\r\ngraph.edges.forEach(e => {\r\n  if (doesEdgeBelongToFirstBus(e)) {\r\n    em.set(e, new yfiles.router.BusDescriptor(myBusID))\r\n  } else if (doesEdgeBelongToSecondBus(e)) {\r\n    em.set(e, new yfiles.router.BusDescriptor(myOtherBusID))\r\n  }\r\n  // If there is no BusDescriptor for an edge in the data provider, the edge\r\n  // will be routed as a "bus of its own" consisting only of the single edge.\r\n})\r\n\r\n// Add the mapper to the mapper registry of the graph.\r\ngraph.mapperRegistry.addMapper(\r\n  yfiles.graph.IEdge.$class,\r\n  yfiles.lang.Object.$class,\r\n  yfiles.router.BusRouter.EDGE_DESCRIPTOR_DP_KEY,\r\n  em\r\n)\r\n\r\n// Invoke the layout.\r\ngraph.applyLayout(new yfiles.router.BusRouter())\n</code></pre>'}]},{tagname:"section",id:"bus_router-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-001",content:"BusRouter provides a set of options that affect the routing behavior.\nThis section highlights some of the configuration options available."},{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-002",content:'The <api-link id="bus_router-options-376-api-link-001" data-member="scope" data-text="scope" data-type="yfiles.router.BusRouter"></api-link> property\ndetermines the set of edges that the router should process.\nWhen only a subset should be routed, the subset can be specified by means of <a href="#/dguide/tab_bus_router_keys_affected_edges">layout data</a>.'},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-001"><api-link id="bus_router-options-376-api-link-002" data-member="ROUTE_ALL_EDGES" data-text="ROUTE_ALL_EDGES" data-type="yfiles.router.Scope"></api-link></dt><dd id="bus_router-options-376-listitem-001">\n<p id="bus_router-options-376-simpara-003">Routes all edges in the graph.</p>\n</dd>\n<dt id="bus_router-options-376-term-002"><api-link id="bus_router-options-376-api-link-003" data-member="ROUTE_AFFECTED_EDGES" data-text="ROUTE_AFFECTED_EDGES" data-type="yfiles.router.Scope"></api-link></dt><dd id="bus_router-options-376-listitem-002">\n<p id="bus_router-options-376-simpara-004">Routes only the specified subset of edges in the graph.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-005",content:"The following properties affect the backbone selection phase of the algorithm, where\ngood initial backbone segments are calculated."},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-003" class="title" role="title">Minimum Backbone Segment Length</dt><dt id="bus_router-options-376-term-004"><api-link id="bus_router-options-376-api-link-004" data-member="minimumBackboneSegmentLength" data-text="minimumBackboneSegmentLength" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-003">\n<p id="bus_router-options-376-simpara-006">Sets the minimum length of a backbone segment.\nThis value is used to select initial backbone segments.\nNote that the final lengths of backbone segment may not comply with this setting.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-005" class="title" role="title">Preferred Backbone Segment Count</dt><dt id="bus_router-options-376-term-006"><api-link id="bus_router-options-376-api-link-005" data-member="preferredBackboneSegmentCount" data-text="preferredBackboneSegmentCount" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-004">\n<p id="bus_router-options-376-simpara-007">Sets the preferred number of backbone segments with the same orientation.\nThis value is used to select initial backbone segments.\nNote that the final number of vertical (horizontal) backbone segment may not comply\nwith this setting.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-008",content:"During the routing and recombination phase, these settings are used:"},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-007" class="title" role="title">Minimum Bus Connections Count</dt><dt id="bus_router-options-376-term-008"><api-link id="bus_router-options-376-api-link-006" data-member="minimumBusConnectionsCount" data-text="minimumBusConnectionsCount" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-005">\n<p id="bus_router-options-376-simpara-009">Determines the minimum number of bus connections a backbone segment must have.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-009" class="title" role="title">Crossing Cost</dt><dt id="bus_router-options-376-term-010"><api-link id="bus_router-options-376-api-link-007" data-member="crossingCost" data-text="crossingCost" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-006">\n<p id="bus_router-options-376-simpara-010">Determines a "penalty" for edge crossings.\nGood values for a crossing penalty lie in the range from 1.0 to 3.0.\nBy default this value is set to 1.0.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-011",content:"Distances and grid routing options have effect across all phases."},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-006" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-011" class="title" role="title">Minimum Edge Distance</dt><dt id="bus_router-options-376-term-012"><api-link id="bus_router-options-376-api-link-008" data-member="minimumDistanceToEdge" data-text="minimumDistanceToEdge" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-007">\n<p id="bus_router-options-376-simpara-012">Determines the distance between any two edge segments.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-007" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-013" class="title" role="title">Minimum Distance to Node</dt><dt id="bus_router-options-376-term-014"><api-link id="bus_router-options-376-api-link-009" data-member="minimumDistanceToNode" data-text="minimumDistanceToNode" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-008">\n<p id="bus_router-options-376-simpara-013">Determines the distance between edge segments and node sides.</p>\n</dd>\n</dl>'},{tagname:"para",content:'<dl id="bus_router-options-376-variablelist-008" class="techn_templ" role="techn_templ">\n<dt id="bus_router-options-376-term-015" class="title" role="title">Route on Grid</dt><dt id="bus_router-options-376-term-016"><api-link id="bus_router-options-376-api-link-010" data-member="gridRouting" data-text="gridRouting" data-type="yfiles.router.BusRouter"></api-link></dt><dd id="bus_router-options-376-listitem-009">\n<p id="bus_router-options-376-simpara-014">If set, then all edge paths will be routed on grid lines of a predefined grid.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-options-376-simpara-015",content:"The bus ID, respectively the group ID, defines a strong relationship amongst edges.\nEdge ends at a common node from edges of the same bus connect to the node using\na common location (thus forming a bus connection).\nSimilarly, a common location is also used to connect all edge ends to the node whose\nedges have the same bus ID and where the edge ends have the same group ID associated.\nThe respective common location for such a set of edge ends can be influenced using:"},{tagname:"para",content:'<ul id="bus_router-options-376-itemizedlist-001"><li id="bus_router-options-376-listitem-010"><p id="bus_router-options-376-simpara-016"><a href="#/dguide/bus_router-port_constraints">port constraints</a></p></li><li id="bus_router-options-376-listitem-011"><p id="bus_router-options-376-simpara-017"><a href="#/dguide/bus_router-port_candidates">port candidates</a></p></li></ul>'}]},{tagname:"section",id:"bus_router-descriptor",title:"Bus-related Options",children:[{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-001",content:'Class <api-link id="bus_router-descriptor-377-api-link-001" data-member="" data-text="BusDescriptor" data-type="yfiles.router.BusDescriptor"></api-link> configures bus-related options for edges.\nThe following options can be set:'},{tagname:"para",content:'<ul id="bus_router-descriptor-377-itemizedlist-001"><li id="bus_router-descriptor-377-listitem-001"><p id="bus_router-descriptor-377-simpara-002">the bus an edge belongs to</p></li><li id="bus_router-descriptor-377-listitem-002"><p id="bus_router-descriptor-377-simpara-003">whether an edge is fixed, i.e., whether it is part of the bus-style representation\nthat shall remain unaltered when buses are rearranged</p></li><li id="bus_router-descriptor-377-listitem-003"><p id="bus_router-descriptor-377-simpara-004">an optional group ID for an edge’s source end and target end, respectively</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-005",content:"Class BusDescriptor provides a number of options for bus configuration:"},{tagname:"para",content:'<dl id="bus_router-descriptor-377-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="bus_router-descriptor-377-term-001" class="title" role="title">Bus ID</dt><dt id="bus_router-descriptor-377-term-002"><api-link id="bus_router-descriptor-377-api-link-002" data-member="busId" data-text="busId" data-type="yfiles.router.BusDescriptor"></api-link></dt><dd id="bus_router-descriptor-377-listitem-004">\n<p id="bus_router-descriptor-377-simpara-006">Determines the bus ID of an edge.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-007",content:"Support for incremental scenarios is provided by the following property.\nThe paths of non-fixed edges are calculated anew when rearranging an existing bus-style\nrepresentation."},{tagname:"para",content:'<dl id="bus_router-descriptor-377-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="bus_router-descriptor-377-term-003" class="title" role="title">Fixed Edge</dt><dt id="bus_router-descriptor-377-term-004"><api-link id="bus_router-descriptor-377-api-link-003" data-member="fixed" data-text="fixed" data-type="yfiles.router.BusDescriptor"></api-link></dt><dd id="bus_router-descriptor-377-listitem-005">\n<p id="bus_router-descriptor-377-simpara-008">Determines whether an edge is fixed or not.\nThe paths of non-fixed edges will be routed anew when rearranging an existing bus-style\nrepresentation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-009",content:"The following properties allow to set optional group IDs for edge ends.\nThese serve to partition the set of edge ends connected to a node and allow to create\nseparate bus connections at a node."},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-010",content:'Note that although the direction of the edges is irrelevant for bus-style edge routing\nin general, it becomes relevant in conjunction with setting group IDs.\nTo allow different group IDs for the ends of an edge, the terms "source" end and\n"target" end of the underlying technical representation of an edge come into play.'},{tagname:"para",content:'<dl id="bus_router-descriptor-377-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="bus_router-descriptor-377-term-005" class="title" role="title">Group IDs</dt><dt id="bus_router-descriptor-377-term-006"><api-link id="bus_router-descriptor-377-api-link-004" data-member="sourceGroupId" data-text="sourceGroupId" data-type="yfiles.router.BusDescriptor"></api-link></dt><dd id="bus_router-descriptor-377-listitem-006">\n<p id="bus_router-descriptor-377-simpara-011">Determines the group ID of an edge’s source end.\nGroup IDs allow to create separate bus connections at a node.</p>\n</dd>\n<dt id="bus_router-descriptor-377-term-007"><api-link id="bus_router-descriptor-377-api-link-005" data-member="targetGroupId" data-text="targetGroupId" data-type="yfiles.router.BusDescriptor"></api-link></dt><dd id="bus_router-descriptor-377-listitem-007">\n<p id="bus_router-descriptor-377-simpara-012">Determines the group ID of an edge’s target end.\nGroup IDs allow to create separate bus connections at a node.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-013",content:'Separate bus connections at nodes are illustrated in <a href="#/dguide/fig_bus_router_edge_grouping">Edge grouping by IDs</a>.'},{tagname:"figure","class":"image",title:"Edge grouping by IDs",id:"fig_bus_router_edge_grouping","float":0,children:[{tagname:"img",src:"assets/bus_edge_group1_orth.3092580b.jpg",alt:"",title:'<para class="dguide-para">Separate bus connections at nodes A (2 bus connections) and B (3 bus connections) achieved through different group IDs.</para>'}]},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-014",content:"The group IDs for the edge ends connecting to node B in the above figure could have\nbeen set up using the following code:"},{tagname:"para",content:'<pre class="programlisting javascript" id="bus_router-descriptor-377-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst nodeB = getMyNode()\r\n\r\nconst numberOfGroups = 3\r\n\r\n// Setup of group IDs for edge ends at node \'B\' (nodeB).\r\ngraph.inEdgesAt(nodeB).forEach((e, i) => {\r\n  const bd = myGetBusDescriptorForEdge(e)\r\n  // Set the group ID for the edge end connecting to nodeB.\r\n  bd.targetGroupId = i++ % numberOfGroups\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"bus_router-descriptor-377-simpara-015",content:'<a href="#/dguide/ex_bus_router_setup_buses">Creating the mapping for buses</a> shows how a BusDescriptor for a bus is\ncreated and associated with edges of a graph.'}]},{tagname:"section",id:"bus_router_hub",title:"Hub Structure",children:[{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-001",content:'Class <api-link id="bus_router_hub-378-api-link-001" data-member="" data-text="BusRepresentations" data-type="yfiles.router.BusRepresentations"></api-link> is a utility\nclass that provides convenience conversion support related to bus representations.'},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-002",content:'BusRepresentations can be used to easily create the set of edges of a complete subgraph\nfrom a <span class="def">hub structure</span>, a conceptually equivalent\nstructure that uses a reduced number of edges which connect the (regular) nodes\nto a number of artificially introduced, so-called <span class="def">hub</span>\nnodes.\nThe hub nodes serve as a means to facilitate convenient definition of this structure.'},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-003",content:"A hub structure is a tree-like representation of a hyperedge, with the nodes of\nthe complete subgraph being the leaves, and both root node and (an arbitrary number\nof) inner nodes denoted by the term hub nodes."},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-004",content:"Hub nodes can be specified by means of a data provider holding boolean values, which\nis used with the following static conversion methods:"},{tagname:"para",content:'<dl id="bus_router_hub-378-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="bus_router_hub-378-term-001"><api-link id="bus_router_hub-378-api-link-002" data-member="replaceHubsBySubgraph(yfiles.layout.LayoutGraph,yfiles.algorithms.IDataProvider,yfiles.algorithms.IDataAcceptor)" data-text="replaceHubsBySubgraph(graph:&#xA0;LayoutGraph, hubMarker:&#xA0;IDataProvider, descriptorAcceptor:&#xA0;IDataAcceptor):&#xA0;EdgeList" data-type="yfiles.router.BusRepresentations"></api-link></dt><dt id="bus_router_hub-378-term-002"><api-link id="bus_router_hub-378-api-link-003" data-member="replaceHubsBySubgraph(yfiles.layout.LayoutGraph,Array,yfiles.algorithms.IDataProvider,yfiles.algorithms.IDataProvider,yfiles.algorithms.IDataAcceptor)" data-text="replaceHubsBySubgraph(graph:&#xA0;LayoutGraph, hubEdgesLists:&#xA0;Array, hubMarker:&#xA0;IDataProvider, fixedMarker:&#xA0;IDataProvider, descriptorAcceptor:&#xA0;IDataAcceptor):&#xA0;EdgeList" data-type="yfiles.router.BusRepresentations"></api-link></dt><dd id="bus_router_hub-378-listitem-001">\n<p id="bus_router_hub-378-simpara-005">Converts a hub structure to the set of edges of a complete subgraphs by creating\nnew edges between regular nodes and removing the hub nodes.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-006",content:'Hub structures are tree-like and can be specified as needed, i.e., there is no "canonical"\nway that a hub structure needs to look like to achieve a specific complete subgraph.\nFor example, a minimal hub structure would consist of a single hub node where all\nregular nodes connect to.\nThe first two structures in <a href="#/dguide/fig_bus_router_hub_structures">Hub structures</a> are conceptually\nequivalent hub structures that represent the same hyperedge. The last figure shows\nthe routing result for both.'},{tagname:"figure","class":"image",title:"Hub structures",id:"fig_bus_router_hub_structures","float":0,children:[{tagname:"img",src:"assets/bus_hub1.7ed4c435.jpg",alt:"",title:'<para class="dguide-para">A hub structure with two hub nodes (emphasized, in the middle) representing a hyperedge that connects nodes with each other (complete graph).</para>'},{tagname:"img",src:"assets/bus_hub2.0185e91e.jpg",alt:"",title:'<para class="dguide-para">An equivalent hub structure with three hub nodes.</para>'},{tagname:"img",src:"assets/bus_hub3_orth.ed29e11a.jpg",alt:"",title:'<para class="dguide-para">The resulting bus-style representation after layout.</para>'}]},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-007",content:"Converting the bus-style representation back to a hub structure is supported by\nthe following method:"},{tagname:"para",content:'<dl id="bus_router_hub-378-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="bus_router_hub-378-term-003"><api-link id="bus_router_hub-378-api-link-004" data-member="replaceSubgraphByHubs(yfiles.layout.LayoutGraph,yfiles.algorithms.IEdgeCursor,yfiles.algorithms.IDataProvider,yfiles.algorithms.IDataAcceptor)" data-text="replaceSubgraphByHubs(graph:&#xA0;LayoutGraph, edgeCursor:&#xA0;IEdgeCursor, descriptorProvider:&#xA0;IDataProvider, busIDAcceptor:&#xA0;IDataAcceptor):&#xA0;void" data-type="yfiles.router.BusRepresentations"></api-link></dt><dd id="bus_router_hub-378-listitem-002">\n<p id="bus_router_hub-378-simpara-008">Converts the bus-style representation of the edges of a complete subgraph to a hub\nstructure.\nReplaces bends in the bus-style representation and connection points of bus connections\nat backbone segments with hub nodes and uses only edges between hub nodes and hub\nnodes and regular nodes.\nThe edge paths must form an orthogonal, cycle-free bus.\nNote that the hub structure is generated from the actual edge paths of the bus-style\nrepresentation.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"bus_router_hub-378-simpara-009",content:'<a href="#/dguide/fig_bus_router_hub_structure_after_layout">Hub structure after layout and conversion</a> shows the resulting hub\nstructure after converting the bus-style representation as routed in <a href="#/dguide/fig_bus_router_hub_structures">Hub structures</a>.\nObserve that there are five hub nodes that reflect the actual routes of the edge\npaths.\nOverall, this graph has 6 regular nodes, 5 hub nodes, and 10 edges (4 edges between\nhub nodes).'},{tagname:"figure","class":"image",title:"Hub structure after layout and conversion",id:"fig_bus_router_hub_structure_after_layout","float":0,children:[{tagname:"img",src:"assets/bus_hub3.13245c62.jpg",alt:"",title:'<para class="dguide-para">Hub structure with five hub nodes that result from the actual edge paths of the bus-style representation.</para>'}]}]},{tagname:"section",id:"bus_router-incremental",title:"Incremental Layout",children:[{tagname:"para","class":"dguide-para",id:"bus_router-incremental-379-simpara-001",content:"Incremental routing means generation of a bus-style representation using an already\nexisting bus-style representation as sketch.\nIt can be used when"},{tagname:"para",content:'<ul id="bus_router-incremental-379-itemizedlist-001"><li id="bus_router-incremental-379-listitem-001"><p id="bus_router-incremental-379-simpara-002">new edges are added to a bus, or when</p></li><li id="bus_router-incremental-379-listitem-002"><p id="bus_router-incremental-379-simpara-003">a node of the bus is moved, and its incident edges need to be routed anew.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"bus_router-incremental-379-simpara-004",content:'Incremental routing of bus-style representations is supported by denoting so-called\nfixed edges using the <api-link id="bus_router-incremental-379-api-link-001" data-member="fixed" data-text="fixed" data-type="yfiles.router.BusDescriptor"></api-link> property of BusDescriptor\nWhen rearranging existing edges or adding new nodes and edges to an existing bus,\nthe paths of non-fixed edges are calculated anew.\nThe structure induced by the fixed edges must be orthogonal and cycle-free.'},{tagname:"para","class":"dguide-para",id:"bus_router-incremental-379-simpara-005",content:'In the initial phase, appropriate backbone segments are determined from the structure\nof the fixed edges with respect to the settings\n<api-link id="bus_router-incremental-379-api-link-002" data-member="minimumBackboneSegmentLength" data-text="minimumBackboneSegmentLength" data-type="yfiles.router.BusRouter"></api-link> and\n<api-link id="bus_router-incremental-379-api-link-003" data-member="preferredBackboneSegmentCount" data-text="preferredBackboneSegmentCount" data-type="yfiles.router.BusRouter"></api-link>.\nIn the second phase, bus connections from nodes of non-fixed edges to the determined\nbackbone segments are calculated as described above.'}]},{tagname:"section",id:"bus_router-polyline",title:"Polyline Routing",children:[{tagname:"para","class":"dguide-para",id:"bus_router-polyline-380-simpara-001",content:'<api-link id="bus_router-polyline-380-api-link-001" data-member="" data-text="PolylineLayoutStage" data-type="yfiles.router.PolylineLayoutStage"></api-link> can add octilinear edge routing\nto a diagram that results from the orthogonal bus-style edge routing calculation.\nFor this, use class BusRouter as the core layout algorithm of the layout stage.'}]},{tagname:"section",id:"bus_router-port_constraints",title:"Port Constraints",children:[{tagname:"para","class":"dguide-para",id:"bus_router-port_constraints-381-simpara-001",content:'Orthogonal bus-style edge routing obeys both types of port constraints, weak and\nstrong.\nThe port constraints can be specified for the <a href="#/dguide/tab_bus_router_keys_source_port_constraints">source</a>\nas well as for the <a href="#/dguide/tab_bus_router_keys_target_port_constraints">target</a> by means of layout data.'},{tagname:"para","class":"dguide-para note",id:"bus_router-port_constraints-381-note-001",content:'<p id="bus_router-port_constraints-381-simpara-002">If edge ends at a common node from edges of the same bus are associated with inconsistent\nor even contradicting port constraints, then any of these port constraints can determine\nthe actual location of the common port.\nThe same holds for the common port of edge ends from edges that in addition have\nthe same group ID.</p>'}]},{tagname:"section",id:"bus_router-port_candidates",title:"Port Candidates",children:[{tagname:"para","class":"dguide-para",id:"bus_router-port_candidates-382-simpara-001",content:"In addition to the support provided for port constraints, orthogonal bus-style edge\nrouting also supports the concept of port candidates.\nBoth aspects, i.e., matching port candidates as well as modeling enhanced port constraints\nare supported."},{tagname:"para","class":"dguide-para",id:"bus_router-port_candidates-382-simpara-002",content:'For the matching of port candidates, the set of allowed anchor locations for bus\nconnections at the nodes can be specified by means of <a href="#/dguide/tab_bus_router_keys_node_port_candidates">layout data</a>.\nThe same also applies to the subset of desired anchor locations where the <a href="#/dguide/tab_bus_router_keys_source_port_candidates">source ports</a> and <a href="#/dguide/tab_bus_router_keys_target_port_candidates">target ports</a>\nof edges like to connect.'},{tagname:"para","class":"dguide-para note",id:"bus_router-port_candidates-382-note-001",content:'<p id="bus_router-port_candidates-382-simpara-003">The cardinality defined with a PortCandidateSet object is interpreted in terms of\ndifferent bus IDs (group IDs) instead of number of edges.</p>'},{tagname:"para","class":"dguide-para",id:"bus_router-port_candidates-382-simpara-004",content:'See <a href="#/dguide/layout-port_candidates">Port Candidates for Nodes</a> for a detailed description of the port\ncandidates concept.'},{tagname:"para","class":"dguide-para note",id:"bus_router-port_candidates-382-note-002",content:'<p id="bus_router-port_candidates-382-simpara-005">If edge ends at a common node from edges of the same bus are associated with inconsistent\nor even contradicting port candidates, then any of these port candidates can determine\nthe actual location of the common port.\nThe same holds for the common port of edge ends from edges that in addition have\nthe same group ID.</p>'},{tagname:"para","class":"dguide-para",id:"bus_router-port_candidates-382-simpara-006",content:"The following table lists the data provider look-up keys that are recognized by\nBusRouter in conjunction with port candidates."}]},{tagname:"section",id:"bus_router-configuration_hints",title:"Esthetic Buses",children:[{tagname:"para","class":"dguide-para",id:"bus_router-configuration_hints-383-simpara-001",content:'Values of at least 3 (the default) for property <api-link id="bus_router-configuration_hints-383-api-link-001" data-member="minimumBusConnectionsCount" data-text="minimumBusConnectionsCount" data-type="yfiles.router.BusRouter"></api-link>\nresult in longer backbone segments and clearly visible bus-like representations.\nThe value should be increased for large graphs.'},{tagname:"para","class":"dguide-para",id:"bus_router-configuration_hints-383-simpara-002",content:'The value for property <api-link id="bus_router-configuration_hints-383-api-link-002" data-member="minimumBackboneSegmentLength" data-text="minimumBackboneSegmentLength" data-type="yfiles.router.BusRouter"></api-link>\nshould be at least as large as the typical width (height) of a node in the diagram.'}]},{tagname:"section",id:"bus_router-dataprovider",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"bus_router-dataprovider-384-simpara-001",content:'When using class <span class="api">BusRouter</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="bus_router-dataprovider-384-api-link-001" data-member="" data-text="BusRouterData" data-type="yfiles.router.BusRouterData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_bus_router_keys">Supplemental layout data</a> lists all properties of\n<span class="api">BusRouterData</span> and the corresponding look-up keys that\n<span class="api">BusRouter</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"bus_router-dataprovider-384-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_bus_router_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="bus_router-dataprovider-384-thead-001"><tr id="bus_router-dataprovider-384-row-001"><th id="bus_router-dataprovider-384-entry-001" align="left" valign="top">\nBusRouterData Property\n</th><th id="bus_router-dataprovider-384-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="bus_router-dataprovider-384-entry-003" align="left" valign="top">\nElement Type\n</th><th id="bus_router-dataprovider-384-entry-004" align="left" valign="top">\nValue Type\n</th><th id="bus_router-dataprovider-384-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="bus_router-dataprovider-384-tbody-001"><tr id="bus_router-dataprovider-384-row-002"><td id="bus_router-dataprovider-384-entry-006" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-003"><anchor id="tab_bus_router_keys_edge_descriptor" xreflabel="[tab_bus_router_keys_edge_descriptor]"></anchor><api-link id="bus_router-dataprovider-384-api-link-002" data-member="edgeDescriptors" data-text="edgeDescriptors" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-007" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-004"><api-link id="bus_router-dataprovider-384-api-link-003" data-member="EDGE_DESCRIPTOR_DP_KEY" data-text="EDGE_DESCRIPTOR_DP_KEY" data-type="yfiles.router.BusRouter"></api-link></para></td><td id="bus_router-dataprovider-384-entry-008" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-005">edge</para></td><td id="bus_router-dataprovider-384-entry-009" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-006">BusDescriptor</para></td><td id="bus_router-dataprovider-384-entry-010" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-007">For each edge a <api-link id="bus_router-dataprovider-384-api-link-004" data-member="" data-text="BusDescriptor" data-type="yfiles.router.BusDescriptor"></api-link> object\nthat configures a number of bus-related configuration options, most notably, an\nedge’s bus ID.</para></td></tr><tr id="bus_router-dataprovider-384-row-003"><td id="bus_router-dataprovider-384-entry-011" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-008"><anchor id="tab_bus_router_keys_affected_edges" xreflabel="[tab_bus_router_keys_affected_edges]"></anchor><api-link id="bus_router-dataprovider-384-api-link-005" data-member="affectedEdges" data-text="affectedEdges" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-012" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-009"><api-link id="bus_router-dataprovider-384-api-link-006" data-member="DEFAULT_AFFECTED_EDGES_DP_KEY" data-text="DEFAULT_AFFECTED_EDGES_DP_KEY" data-type="yfiles.router.BusRouter"></api-link></para></td><td id="bus_router-dataprovider-384-entry-013" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-010">edge</para></td><td id="bus_router-dataprovider-384-entry-014" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-011">boolean</para></td><td id="bus_router-dataprovider-384-entry-015" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-012">For each edge a boolean value indicating whether it should be routed or not.</para></td></tr><tr id="bus_router-dataprovider-384-row-004"><td id="bus_router-dataprovider-384-entry-016" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-013"><anchor id="tab_bus_router_keys_source_port_constraints" xreflabel="[tab_bus_router_keys_source_port_constraints]"></anchor><api-link id="bus_router-dataprovider-384-api-link-007" data-member="sourcePortConstraints" data-text="sourcePortConstraints" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-017" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-014"><api-link id="bus_router-dataprovider-384-api-link-008" data-member="SOURCE_PORT_CONSTRAINT_DP_KEY" data-text="SOURCE_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="bus_router-dataprovider-384-entry-018" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-015">edge</para></td><td id="bus_router-dataprovider-384-entry-019" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-016">PortConstraint</para></td><td id="bus_router-dataprovider-384-entry-020" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-017">For each edge a PortConstraint object encoding its source end’s port\nconstraint.</para></td></tr><tr id="bus_router-dataprovider-384-row-005"><td id="bus_router-dataprovider-384-entry-021" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-018"><anchor id="tab_bus_router_keys_target_port_constraints" xreflabel="[tab_bus_router_keys_target_port_constraints]"></anchor><api-link id="bus_router-dataprovider-384-api-link-009" data-member="targetPortConstraints" data-text="targetPortConstraints" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-022" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-019"><api-link id="bus_router-dataprovider-384-api-link-010" data-member="TARGET_PORT_CONSTRAINT_DP_KEY" data-text="TARGET_PORT_CONSTRAINT_DP_KEY" data-type="yfiles.layout.PortConstraintKeys"></api-link></para></td><td id="bus_router-dataprovider-384-entry-023" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-020">edge</para></td><td id="bus_router-dataprovider-384-entry-024" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-021">PortConstraint</para></td><td id="bus_router-dataprovider-384-entry-025" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-022">For each edge a PortConstraint object encoding its target end’s port\nconstraint.</para></td></tr><tr id="bus_router-dataprovider-384-row-006"><td id="bus_router-dataprovider-384-entry-026" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-023"><anchor id="tab_bus_router_keys_node_port_candidates" xreflabel="[tab_bus_router_keys_node_port_candidates]"></anchor><api-link id="bus_router-dataprovider-384-api-link-011" data-member="nodePortCandidateSets" data-text="nodePortCandidateSets" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-027" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-024"><api-link id="bus_router-dataprovider-384-api-link-012" data-member="NODE_PORT_CANDIDATE_SET_DP_KEY" data-text="NODE_PORT_CANDIDATE_SET_DP_KEY" data-type="yfiles.layout.PortCandidateSet"></api-link></para></td><td id="bus_router-dataprovider-384-entry-028" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-025">node</para></td><td id="bus_router-dataprovider-384-entry-029" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-026">PortCandidateSet</para></td><td id="bus_router-dataprovider-384-entry-030" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-027">For each node a PortCandidateSet object encoding the set of allowed anchor locations\nfor bus connections.\nNote that the cardinality defined with a PortCandidateSet object is interpreted\nin terms of different bus IDs (group IDs) instead of number of edges.</para></td></tr><tr id="bus_router-dataprovider-384-row-007"><td id="bus_router-dataprovider-384-entry-031" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-028"><anchor id="tab_bus_router_keys_source_port_candidates" xreflabel="[tab_bus_router_keys_source_port_candidates]"></anchor><api-link id="bus_router-dataprovider-384-api-link-013" data-member="sourcePortCandidates" data-text="sourcePortCandidates" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-032" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-029"><api-link id="bus_router-dataprovider-384-api-link-014" data-member="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="SOURCE_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="bus_router-dataprovider-384-entry-033" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-030">edge</para></td><td id="bus_router-dataprovider-384-entry-034" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-031">Collection</para></td><td id="bus_router-dataprovider-384-entry-035" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-032">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the source\nport likes to connect to.</para></td></tr><tr id="bus_router-dataprovider-384-row-008"><td id="bus_router-dataprovider-384-entry-036" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-033"><anchor id="tab_bus_router_keys_target_port_candidates" xreflabel="[tab_bus_router_keys_target_port_candidates]"></anchor><api-link id="bus_router-dataprovider-384-api-link-015" data-member="targetPortCandidates" data-text="targetPortCandidates" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-037" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-034"><api-link id="bus_router-dataprovider-384-api-link-016" data-member="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-text="TARGET_PORT_CANDIDATE_COLLECTION_DP_KEY" data-type="yfiles.layout.PortCandidate"></api-link></para></td><td id="bus_router-dataprovider-384-entry-038" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-035">edge</para></td><td id="bus_router-dataprovider-384-entry-039" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-036">Collection</para></td><td id="bus_router-dataprovider-384-entry-040" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-037">For each edge a <span class="api">ICollection&lt;T></span> of <span class="api">PortCandidate</span>\nobjects that encode the subset of desired anchor locations where the target\nport likes to connect to.</para></td></tr><tr id="bus_router-dataprovider-384-row-009"><td id="bus_router-dataprovider-384-entry-041" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-038"><anchor id="tab_bus_router_keys_abort_handler" xreflabel="[tab_bus_router_keys_abort_handler]"></anchor><api-link id="bus_router-dataprovider-384-api-link-017" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.router.BusRouterData"></api-link></para></td><td id="bus_router-dataprovider-384-entry-042" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-039"><api-link id="bus_router-dataprovider-384-api-link-018" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="bus_router-dataprovider-384-entry-043" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-040">graph</para></td><td id="bus_router-dataprovider-384-entry-044" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-041">AbortHandler</para></td><td id="bus_router-dataprovider-384-entry-045" align="left" valign="top"><para class="dguide-para" id="bus_router-dataprovider-384-simpara-042">An <api-link id="bus_router-dataprovider-384-api-link-019" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"organic_routing",title:"Organic Edge Routing",children:[{tagname:"para","class":"dguide-para",id:"organic_routing-385-simpara-001",content:'<api-link id="organic_routing-385-api-link-001" data-member="" data-text="OrganicEdgeRouter" data-type="yfiles.router.OrganicEdgeRouter"></api-link> routes edges\norganically to ensure that they do not overlap nodes and that they keep a\nspecifiable minimal distance to the nodes.\nIt is especially well suited for non-orthogonal, organic or cyclic layout\nstyles.'},{tagname:"para","class":"dguide-para",id:"organic_routing-385-simpara-002",content:"The algorithm is based on a force directed layout paradigm.\nNodes act as repulsive forces on edges in order to guarantee a certain minimal\ndistance between nodes and edges.\nEdges tend to contract themselves.\nUsing simulated annealing, this finally leads to edge layouts that are\ncalculated for each edge separately."},{tagname:"para","class":"dguide-para important",id:"organic_router_preconditions",content:'<p id="organic_routing-385-simpara-003">This algorithm will only work correctly if there is enough room between each\npair of nodes in the graph.\nIn particular, there should be a distance of at least twice the minimal\ndistance (see below) between any two nodes.</p><p id="organic_routing-385-simpara-004">In order to ensure that these preconditions are met, the\n<a href="#/dguide/organic_routing-enhancing_routing_process">technique described below</a> can be\nused.</p>'},{tagname:"figure","class":"image",title:"Sample edge routings produced with OrganicEdgeRouter",id:"organic_routing-385-figure-001","float":0,children:[{tagname:"img",src:"assets/organic_star-routing1.564c961c.jpg",alt:"",title:'<para class="dguide-para">Postprocessing edge routing of an organically laid out tree.</para>'},{tagname:"img",src:"assets/organic_routing1.4e48c88c.jpg",alt:"",title:'<para class="dguide-para">Automatic edge routing of a hand-laid-out graph structure.</para>'}]},{tagname:"section",id:"organic_routing-options",title:"Basic Options",children:[{tagname:"para","class":"dguide-para",id:"organic_routing-options-386-simpara-001",content:'By default, <span class="api">OrganicEdgeRouter</span> reroutes all edges of a given graph.\nWhen only a subset of the edges should be routed, you can specify this subset by means of <a href="#/dguide/tab_organic_router_keys_affected_edges">layout data</a>.'},{tagname:"para",content:'<dl id="organic_routing-options-386-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="organic_routing-options-386-term-001" class="title" role="title">Minimal Distance</dt><dt id="organic_routing-options-386-term-002"><api-link id="organic_routing-options-386-api-link-001" data-member="minimumDistance" data-text="minimumDistance" data-type="yfiles.router.OrganicEdgeRouter"></api-link></dt><dd id="organic_routing-options-386-listitem-001">\n<p id="organic_routing-options-386-simpara-002">This specifies the minimal allowed distance between nodes and edges.</p>\n</dd>\n<dt id="organic_routing-options-386-term-003" class="title" role="title">Use Existing Bends</dt><dt id="organic_routing-options-386-term-004"><api-link id="organic_routing-options-386-api-link-002" data-member="keepExistingBends" data-text="keepExistingBends" data-type="yfiles.router.OrganicEdgeRouter"></api-link></dt><dd id="organic_routing-options-386-listitem-002">\n<p id="organic_routing-options-386-simpara-003">This option specifies whether existing bends should be used as an initial\nsolution for the new routing.</p>\n</dd>\n<dt id="organic_routing-options-386-term-005" class="title" role="title">Route Only Necessary</dt><dt id="organic_routing-options-386-term-006"><api-link id="organic_routing-options-386-api-link-003" data-member="routeAllEdges" data-text="routeAllEdges" data-type="yfiles.router.OrganicEdgeRouter"></api-link></dt><dd id="organic_routing-options-386-listitem-003">\n<p id="organic_routing-options-386-simpara-004">If this option is enabled, all edges are routed.\nBy default, this option is disabled and only edges that violate the minimal distance\ncriterion are rerouted.</p>\n</dd>\n<dt id="organic_routing-options-386-term-007" class="title" role="title">Allow Edge Overlaps</dt><dt id="organic_routing-options-386-term-008"><api-link id="organic_routing-options-386-api-link-004" data-member="edgeNodeOverlapAllowed" data-text="edgeNodeOverlapAllowed" data-type="yfiles.router.OrganicEdgeRouter"></api-link></dt><dd id="organic_routing-options-386-listitem-004">\n<p id="organic_routing-options-386-simpara-005">This option specifies whether edges are allowed to overlap with nodes.\nEnabling this option often improves the routing when nodes are not allowed to\nmove (i.e., when using the node enlargement layout stage is not an option), and\nsome distances between nodes do not comply with the\n<a href="#/dguide/organic_router_preconditions">algorithm’s preconditions</a>.\nNote that the minimal distance cannot always be maintained when using this\noption.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"organic_routing-enhancing_routing_process",title:"Enhancing the Routing Process",children:[{tagname:"para","class":"dguide-para",id:"organic_routing-enhancing_routing_process-387-simpara-001",content:'In order to ensure that the preconditions of <span class="api">OrganicEdgeRouter</span> are met for\narbitrary graphs, the routing process can be enhanced using specialized layout\nstages.\nIn particular, the\n<api-link id="organic_routing-enhancing_routing_process-387-api-link-001" data-member="createNodeEnlargementStage()" data-text="createNodeEnlargementStage" data-type="yfiles.router.OrganicEdgeRouter"></api-link>\nmethod returns a layout stage that perfectly lends itself for usage in\nconjunction with logic that creates more space between the nodes of a graph.\nThe code in <a href="#/dguide/ex_organic_routing-ensuring_preconditions">Ensuring OrganicEdgeRouter\'s preconditions</a> presents this\ntechnique.'},{tagname:"example",id:"ex_organic_routing-ensuring_preconditions",title:"Ensuring OrganicEdgeRouter's preconditions",content:'<pre class="programlisting javascript" id="organic_routing-enhancing_routing_process-387-programlisting-001" language="javascript" format="linespecific"><code>const oer = new yfiles.router.OrganicEdgeRouter()\r\nconst nodeEnlarger = oer.createNodeEnlargementStage()\r\n\r\nconst cls = new yfiles.layout.CompositeLayoutStage()\r\ncls.appendStage(nodeEnlarger)\r\ncls.appendStage(new yfiles.layout.BendConverter())\r\ncls.appendStage(new yfiles.organic.RemoveOverlapsStage(0.0))\r\n\r\noer.coreLayout = cls\r\ngraph.applyLayout(oer)\n</code></pre>'}]},{tagname:"section",id:"_layout_data_3",title:"Layout Data",children:[{tagname:"para","class":"dguide-para",id:"_layout_data_3-388-simpara-001",content:'When using class <span class="api">OrganicEdgeRouter</span>, supplemental\nlayout data for a graph’s elements can be specified either by using class\n<api-link id="_layout_data_3-388-api-link-001" data-member="" data-text="OrganicEdgeRouterData" data-type="yfiles.router.OrganicEdgeRouterData"></api-link> or by registering data providers with\nthe graph using given look-up keys.\n<a href="#/dguide/tab_organic_router_keys">Supplemental layout data</a> lists all properties of\n<span class="api">OrganicEdgeRouterData</span> and the corresponding look-up keys that\n<span class="api">OrganicEdgeRouter</span> tests during the layout process in order to query\nsupplemental data.'},{tagname:"para","class":"dguide-para",id:"_layout_data_3-388-simpara-002",content:'Providing supplemental layout data is described in detail in <a href="#/dguide/layout-layout_data">Layout Data</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_organic_router_keys",rowsep:1,content:'<caption>Supplemental layout data</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:8%;"><col style="width:8%;"><col style="width:44%;"></colgroup><thead id="_layout_data_3-388-thead-001"><tr id="_layout_data_3-388-row-001"><th id="_layout_data_3-388-entry-001" align="left" valign="top">\nOrganicEdgeRouterData Property\n</th><th id="_layout_data_3-388-entry-002" align="left" valign="top">\nData Provider Key\n</th><th id="_layout_data_3-388-entry-003" align="left" valign="top">\nElement Type\n</th><th id="_layout_data_3-388-entry-004" align="left" valign="top">\nValue Type\n</th><th id="_layout_data_3-388-entry-005" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_layout_data_3-388-tbody-001"><tr id="_layout_data_3-388-row-002"><td id="_layout_data_3-388-entry-006" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-003"><anchor id="tab_organic_router_keys_affected_edges" xreflabel="[tab_organic_router_keys_affected_edges]"></anchor><api-link id="_layout_data_3-388-api-link-002" data-member="affectedEdges" data-text="affectedEdges" data-type="yfiles.router.OrganicEdgeRouterData"></api-link></para></td><td id="_layout_data_3-388-entry-007" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-004"><api-link id="_layout_data_3-388-api-link-003" data-member="AFFECTED_EDGES_DP_KEY" data-text="AFFECTED_EDGES_DP_KEY" data-type="yfiles.router.OrganicEdgeRouter"></api-link></para></td><td id="_layout_data_3-388-entry-008" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-005">edge</para></td><td id="_layout_data_3-388-entry-009" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-006">boolean</para></td><td id="_layout_data_3-388-entry-010" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-007">For each edge a boolean value indicating whether the edge shall be considered\n  for rerouting or not.</para></td></tr><tr id="_layout_data_3-388-row-003"><td id="_layout_data_3-388-entry-011" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-008"><anchor id="tab_organic_router_keys_abort_handler" xreflabel="[tab_organic_router_keys_abort_handler]"></anchor><api-link id="_layout_data_3-388-api-link-004" data-member="abortHandler" data-text="abortHandler" data-type="yfiles.router.OrganicEdgeRouterData"></api-link></para></td><td id="_layout_data_3-388-entry-012" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-009"><api-link id="_layout_data_3-388-api-link-005" data-member="ABORT_HANDLER_DP_KEY" data-text="ABORT_HANDLER_DP_KEY" data-type="yfiles.algorithms.AbortHandler"></api-link></para></td><td id="_layout_data_3-388-entry-013" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-010">graph</para></td><td id="_layout_data_3-388-entry-014" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-011">AbortHandler</para></td><td id="_layout_data_3-388-entry-015" align="left" valign="top"><para class="dguide-para" id="_layout_data_3-388-simpara-012">An <api-link id="_layout_data_3-388-api-link-006" data-member="" data-text="AbortHandler" data-type="yfiles.algorithms.AbortHandler"></api-link> instance that will be queried\nby the layout algorithm to determine whether layout calculation shall be terminated.</para></td></tr></tbody>'}]}]}]},{tagname:"section",id:"analysis",title:"Graph Analysis",children:[{tagname:"para","class":"dguide-para",id:"analysis-011-simpara-001",content:"One of the key features of yFiles is its collection of sophisticated\nalgorithms for analyzing graph structures."},{tagname:"para","class":"dguide-para",id:"analysis-011-simpara-002",content:'These algorithms are located in the namespace <api-link id="analysis-011-api-link-001" data-member="" data-text="yfiles.algorithms" data-type=""></api-link>.\nMost of them are offered by means of static methods.'},{tagname:"para","class":"dguide-para",id:"analysis-011-simpara-003",content:"The following list of analysis algorithms gives an overview of the available classes:"},{tagname:"para",content:'<dl id="analysis-list_of_algorithms"><dt id="analysis-011-term-001">Bipartitions</dt><dd id="analysis-011-listitem-001"><p id="analysis-011-simpara-004">Responsible for graph bipartition problems.</p></dd><dt id="analysis-011-term-002"><a href="#/dguide/analysis-centrality">Centrality</a></dt><dd id="analysis-011-listitem-002"><p id="analysis-011-simpara-005">Provides several <span class="def">centrality</span> measures to denote importance of graph elements within their graph.</p></dd><dt id="analysis-011-term-003">Cycles</dt><dd id="analysis-011-listitem-003"><p id="analysis-011-simpara-006">Responsible for finding cycles within a graph that have certain properties.</p></dd><dt id="analysis-011-term-004"><a href="#/dguide/analysis-graph_checker">GraphChecker</a></dt><dd id="analysis-011-listitem-004"><p id="analysis-011-simpara-007">Provides methods that check structural properties of a given graph.</p></dd><dt id="analysis-011-term-005"><a href="#/dguide/analysis-connectivity">GraphConnectivity</a></dt><dd id="analysis-011-listitem-005"><p id="analysis-011-simpara-008">Provides algorithms for determining certain connectivity components within a graph.</p></dd><dt id="analysis-011-term-006">Groups</dt><dd id="analysis-011-listitem-006"><p id="analysis-011-simpara-009">Provides support for automatic graph clustering.</p></dd><dt id="analysis-011-term-007">NetworkFlows</dt><dd id="analysis-011-listitem-007"><p id="analysis-011-simpara-010">Provides sophisticated algorithms for solving classical network flow problems like MinCostFlow or MaxFlow.</p></dd><dt id="analysis-011-term-008">Paths</dt><dd id="analysis-011-listitem-008"><p id="analysis-011-simpara-011">Responsible for finding paths within a graph that have certain properties.</p></dd><dt id="analysis-011-term-009">RankAssignments</dt><dd id="analysis-011-listitem-009"><p id="analysis-011-simpara-012">Provides algorithms for solving the rank assignment problem.</p></dd><dt id="analysis-011-term-010"><a href="#/dguide/analysis-shortest_paths">ShortestPaths</a></dt><dd id="analysis-011-listitem-010"><p id="analysis-011-simpara-013">Provides diverse algorithms and helper methods for solving the Shortest Path\nproblem on weighted graphs, i.e., graphs with a cost function on the edges.</p></dd><dt id="analysis-011-term-011"><a href="#/dguide/analysis-spanning_trees">SpanningTrees</a></dt><dd id="analysis-011-listitem-011"><p id="analysis-011-simpara-014">Provides (minimum) spanning tree algorithms for graphs.</p></dd><dt id="analysis-011-term-012"><a href="#/dguide/analysis-transitivity">Transitivity</a></dt><dd id="analysis-011-listitem-012"><p id="analysis-011-simpara-015">Provides algorithms to compute reachability information for directed, acyclic\ngraphs: transitive closure, transitive reduction.</p></dd><dt id="analysis-011-term-013"><a href="#/dguide/analysis-trees">Trees</a></dt><dd id="analysis-011-listitem-013"><p id="analysis-011-simpara-016">Provides diverse algorithms and services for tree-structured graphs or\nsubgraphs.</p></dd><dt id="analysis-011-term-014"><a href="#/dguide/analysis-bfs">Bfs</a></dt><dd id="analysis-011-listitem-014"><p id="analysis-011-simpara-017">Provides services that center around breadth-first search (BFS).</p></dd><dt id="analysis-011-term-015"><a href="#/dguide/analysis-dfs">Dfs</a></dt><dd id="analysis-011-listitem-015"><p id="analysis-011-simpara-018">Framework class for depth-first search (DFS) based algorithms.</p></dd></dl>'},{tagname:"section",id:"analysis-using",title:"Using Graph Analysis",children:[{tagname:"para","class":"dguide-para",id:"analysis-using-389-simpara-001",content:'The analysis algorithms work on the <api-link id="analysis-using-389-api-link-001" data-member="" data-text="basic algorithms graph structure" data-type="yfiles.algorithms.Graph"></api-link>.\nBy means of an adapter mechanism similar to the\n<a href="#/dguide/layout-applying_a_layout">one for automatic layouts</a>, the analysis algorithms can be used with an\n<span class="api">IGraph</span>-based graph structure as well.'},{tagname:"para","class":"dguide-para",id:"analysis-using-389-simpara-002",content:'The adapter class <api-link id="analysis-using-389-api-link-002" data-member="" data-text="YGraphAdapter" data-type="yfiles.layout.YGraphAdapter"></api-link> provides services for the necessary\nconversions prior to and during a graph analysis. Most notably, it creates a copy of an <span class="api">IGraph</span>\nthat can be used with such algorithms:'},{tagname:"para",content:'<pre class="programlisting javascript" id="analysis-using-389-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// The yGraph property returns the yfiles.algorithms.Graph instance that\r\n// corresponds to the given IGraph above.\r\nconst isConnected = yfiles.algorithms.GraphChecker.isConnected(graphAdapter.yGraph)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"analysis-using-389-simpara-003",content:'The following detailed example shows the invocation of an analysis algorithm with\nadditional intermittent conversions and updates to the original <span class="api">IGraph</span>.'},{tagname:"para",content:'<pre class="programlisting javascript" id="analysis-using-389-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Test if the graph is a tree.\r\nif (yfiles.algorithms.Trees.isTree(graphAdapter.yGraph)) {\r\n  // Explicitly set the first node from the node set as the root node of the\r\n  // tree.\r\n  // Direct the tree; i.e., revert those edges that point towards the root\r\n  // node.\r\n  const firstNode = graph.nodes.first()\r\n  const el = yfiles.algorithms.Trees.directTree(\r\n    graphAdapter.yGraph,\r\n    graphAdapter.getCopiedNode(firstNode)\r\n  )\r\n  // Transfer back the result.\r\n  const el_igraph = graphAdapter.createEdgeEnumerable(el)\r\n  el_igraph.forEach(e => {\r\n    // Reverse the corresponding edges in the original IGraph.\r\n    graph.reverse(e)\r\n  })\r\n\r\n  // Get the leaf nodes of the tree.\r\n  const nl = yfiles.algorithms.Trees.getLeafNodes(graphAdapter.yGraph, true)\r\n  const nl_igraph = graphAdapter.createNodeEnumerable(nl)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"analysis-using-389-tip-001",content:'<p id="analysis-using-389-simpara-004">The graph adapter <span class="api">YGraphAdapter</span> is used in the demo application\n<a href="..\\..\\demos\\analysis\\graphanalysis\\index.html" target="blank" class="demo-link" title="Showcases a selection of graph algorithms such as shortest paths, flows, centrality measures, etc. that help analysing the structure of a graph.">Graph Analysis</a>.</p>'}]},{tagname:"section",id:"analysis-graph_checker",title:"Common Graph Characteristics",children:[{tagname:"para","class":"dguide-para",id:"analysis-graph_checker-390-simpara-001",content:'To conveniently check for the most common graph characteristics,\nclass <api-link id="analysis-graph_checker-390-api-link-001" data-member="" data-text="GraphChecker" data-type="yfiles.algorithms.GraphChecker"></api-link> offers a set of static\nmethods to check whether a graph is'},{tagname:"para",content:'<ul id="analysis-graph_checker-390-itemizedlist-001"><li id="analysis-graph_checker-390-listitem-001"><p id="analysis-graph_checker-390-simpara-002">cyclic or acyclic</p></li><li id="analysis-graph_checker-390-listitem-002"><p id="analysis-graph_checker-390-simpara-003">connected, bi-connected, or strongly connected</p></li><li id="analysis-graph_checker-390-listitem-003"><p id="analysis-graph_checker-390-simpara-004">planar</p></li><li id="analysis-graph_checker-390-listitem-004"><p id="analysis-graph_checker-390-simpara-005">a tree or a forest</p></li><li id="analysis-graph_checker-390-listitem-005"><p id="analysis-graph_checker-390-simpara-006">bipartite</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"analysis-graph_checker-390-simpara-007",content:'For the more advanced questions there are the specialized classes listed in the <a href="#/dguide/analysis-list_of_algorithms">list of available analysis algorithms</a>.\nIn fact, class <span class="api">GraphChecker</span> just delegates to these classes.'}]},{tagname:"section",id:"analysis-connectivity",title:"Connectivity",children:[{tagname:"para","class":"dguide-para",id:"analysis-connectivity-391-simpara-001",content:'To answer the question which parts of a graph are reachable from a given node\nby following the edges irrespective of their direction, class\n<api-link id="analysis-connectivity-391-api-link-001" data-member="" data-text="GraphConnectivity" data-type="yfiles.algorithms.GraphConnectivity"></api-link> is of good help.'},{tagname:"para","class":"dguide-para",id:"analysis-connectivity-391-simpara-002",content:"It offers services to check if a graph is connected or even biconnected, it has\nmethods to find all connected/biconnected components of a graph, and methods to\ninsert additional edges into the graph thus making it connected/biconnected."},{tagname:"para","class":"dguide-para",id:"analysis-connectivity-391-simpara-003",content:'<a href="#/dguide/fig_analysis_connect">A graph with two components</a>, for instance, shows a graph with two connected\ncomponents.\nIn fact, the left one is even biconnected, i.e., removing any one of {a, b, c,\nd} leaves the remaining nodes still connected.'},{tagname:"figure","class":"image",title:"A graph with two components",id:"fig_analysis_connect","float":0,children:[{tagname:"img",src:"assets/analysis_connect_2a.1687a431.jpg",alt:"analysis connect 2a",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-connectivity-391-simpara-004",content:'<a href="#/dguide/ex_analysis_connect">Making a graph connected</a> shows code to make a graph a connected compilation\nof biconnected components.\nUsing the graph from <a href="#/dguide/fig_analysis_connect">A graph with two components</a> as input would lead to\n<a href="#/dguide/fig_analysis_connect2">A connected graph</a> where the dotted edges represent the\nadditionally inserted.'},{tagname:"example",id:"ex_analysis_connect",title:"Making a graph connected",content:'<pre class="programlisting javascript" id="analysis-connectivity-391-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Check if the graph is connected.\r\nif (!yfiles.algorithms.GraphConnectivity.isConnected(graphAdapter.yGraph)) {\r\n  // Create a node map that will be used with class GraphPartitionManager.\r\n  const components = graphAdapter.yGraph.createNodeMap()\r\n  // Get all connected components of the graph.\r\n  const nl = yfiles.algorithms.GraphConnectivity.connectedComponents(graphAdapter.yGraph)\r\n  // Create an array that serves as a mapping from an int to an object.\r\n  const i2o = []\r\n  for (let i = 0; i &lt; nl.length; i++) {\r\n    i2o[i] = \'\' + i\r\n    // Fill the node map with the respective marker object of each component.\r\n    nl[i].forEach(n => components.set(n, i2o[i]))\r\n  }\r\n  // Create a PartitionManager to manage the components of the graph.\r\n  const gpm = new yfiles.algorithms.GraphPartitionManager(graphAdapter.yGraph, components)\r\n  // Make the PartitionManager hide all connected components of the graph.\r\n  gpm.hideAll()\r\n  for (let i = 0; i &lt; nl.length; i++) {\r\n    // Make the PartitionManager unhide all nodes and edges from a specific\r\n    // component.\r\n    gpm.unhidePartition(i2o[i])\r\n    // Check if this connected component from the graph is biconnected.\r\n    if (!yfiles.algorithms.GraphConnectivity.isBiconnected(graphAdapter.yGraph)) {\r\n      // Make the connected component biconnected, i.e., add some edges.\r\n      const el = yfiles.algorithms.GraphConnectivity.makeBiconnected(graphAdapter.yGraph)\r\n      // Transfer back the result.\r\n      el.forEach(e => {\r\n        // Create the corresponding edges in the original IGraph.\r\n        graph.createEdge(\r\n          graphAdapter.getOriginalNode(e.source),\r\n          graphAdapter.getOriginalNode(e.target)\r\n        )\r\n      })\r\n    }\r\n    // Make the PartitionManager hide the biconnected component.\r\n    gpm.hidePartition(i2o[i])\r\n  }\r\n  // Make the PartitionManager unhide all nodes and edges from the graph.\r\n  gpm.unhideAll()\r\n  // Make the entire graph connected.\r\n  const el2 = yfiles.algorithms.GraphConnectivity.makeConnected(graphAdapter.yGraph)\r\n  // Transfer back the result.\r\n  el2.forEach(e => {\r\n    // Create the corresponding edges in the original IGraph.\r\n    graph.createEdge(\r\n      graphAdapter.getOriginalNode(e.source),\r\n      graphAdapter.getOriginalNode(e.target)\r\n    )\r\n  })\r\n}\n</code></pre>'
},{tagname:"figure","class":"image",title:"A connected graph",id:"fig_analysis_connect2","float":0,children:[{tagname:"img",src:"assets/analysis_connect_3a.ae28438e.jpg",alt:"analysis connect 3a",title:'<para class="dguide-para"></para>'}]}]},{tagname:"section",id:"analysis-shortest_paths",title:"Shortest Paths",children:[{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-001",content:'Solving the problem of shortest paths is a commonly encountered question with\ngraphs.\nConsider <a href="#/dguide/fig_analysis_path">Finding the shortest path</a>, for instance.\nThe numbers at the edges denote <span class="def">costs</span> that are associated with the traversal\nof an edge.\nTo get from <strong id="analysis-shortest_paths-392-emphasis-001" class="bold" role="bold">Start</strong> to <strong id="analysis-shortest_paths-392-emphasis-002" class="bold" role="bold">Destination</strong> with minimum costs results in the path of\nemphasized edges.\nThese edges define the shortest path between the two nodes with an accumulated\ncost of 8 [units].'},{tagname:"figure","class":"image",title:"Finding the shortest path",id:"fig_analysis_path","float":0,children:[{tagname:"img",src:"assets/analysis_shortest_path_3sel.a27b7cdc.jpg",alt:"analysis shortest path 3sel",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-002",content:'<a href="#/dguide/ex_analysis_path">Running single-source single-sink Shortest Path</a> shows the code to prepare and run a single-source\nsingle-sink Shortest Path algorithm on the graph depicted in\n<a href="#/dguide/fig_analysis_path">Finding the shortest path</a>.'},{tagname:"example",id:"ex_analysis_path",title:"Running single-source single-sink Shortest Path",content:'<pre class="programlisting javascript" id="analysis-shortest_paths-392-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Create an array the size of the edge set with costs for each edge.\r\nconst cost = [1, 3, 2, 3, 7, 1, 1, 4, 1, 1, 2, 2, 2, 3, 2, 2, 1]\r\n\r\n// This array will hold the result\r\nconst pred = new Array(graph.edges.size)\r\n\r\n// Suppose the first node from the graph is the node named "Start."\r\nconst start = graph.nodes.first()\r\nconst startNode = graphAdapter.getCopiedNode(start)\r\n// Suppose the last node from the graph is the node named "Destination."\r\nconst destination = graph.nodes.last()\r\nconst destinationNode = graphAdapter.getCopiedNode(destination)\r\n\r\n// Run the single-source single-sink algorithm on the graph.\r\nconst result = yfiles.algorithms.ShortestPaths.singleSourceSingleSink(\r\n  graphAdapter.yGraph,\r\n  startNode,\r\n  destinationNode,\r\n  true,\r\n  cost,\r\n  pred\r\n)\r\n// Transfer back the result.\r\nconst pred_igraph = pred.map(e => e && graphAdapter.getOriginalEdge(e))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-003",content:'<a href="#/dguide/fig_analysis_more_paths">Finding the shortest paths from a starting node</a> shows the shortest paths from <strong id="analysis-shortest_paths-392-emphasis-003" class="bold" role="bold">Start</strong> to\nall other nodes from the graph.\nBeginning at the destination node of each of these paths, <strong id="analysis-shortest_paths-392-emphasis-004" class="bold" role="bold">Start</strong> can be\nreached unambiguously by following the emphasized edges.'},{tagname:"figure","class":"image",title:"Finding the shortest paths from a starting node",id:"fig_analysis_more_paths","float":0,children:[{tagname:"img",src:"assets/analysis_more_paths_1sel.6261a151.jpg",alt:"analysis more paths 1sel",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-004",content:'The class <api-link id="analysis-shortest_paths-392-api-link-001" data-member="" data-text="ShortestPaths" data-type="yfiles.algorithms.ShortestPaths"></api-link> offers a\nmultitude of methods using several well-known algorithms to solve shortest path\nproblems in many variants.\nPaths can be computed between two nodes (single-source single-sink),\noriginating from one node (single-source), or between all pairs of nodes (all\npairs).\nIncluded are:'},{tagname:"para",content:'<ul id="analysis-shortest_paths-392-itemizedlist-001"><li id="analysis-shortest_paths-392-listitem-001"><p id="analysis-shortest_paths-392-simpara-005">Methods for acyclic graphs with arbitrary costs on the edges, i.e., negative\nvalues are allowed.</p></li><li id="analysis-shortest_paths-392-listitem-002"><p id="analysis-shortest_paths-392-simpara-006">The Dijkstra Algorithm for arbitrary graphs, i.e., even cyclic graphs, with\nnon-negative costs on the edges.</p></li><li id="analysis-shortest_paths-392-listitem-003"><p id="analysis-shortest_paths-392-simpara-007">The Bellman-Ford Algorithm for arbitrary graphs and arbitrary cost values on the\nedges.\n(Graphs that contain cycles with negative costs, though, yield no reasonable\nresult, but instead give a boolean return value false.)</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-008",content:"In addition to customized costs on the edges, it is possible to compute\nshortest paths with uniform costs, too.\nThere are several convenience methods defined to this end."},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-009",content:'Note that many of the methods from\n<span class="api">ShortestPaths</span> use maps and/or data\nproviders to store the result or to receive parameters.\nFurthermore, all appropriate methods offer the option of interpreting the graph\nstructure either directed or undirected.'},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-010",content:'Class <span class="api">ShortestPaths</span> also has a set\nof convenience methods for result conversion, i.e., constructing a node or an\nedge path from either a given data provider or an array.\n<a href="#/dguide/ex_analysis_more_paths">Running single-source Shortest Path</a> demonstrates how to construct one specific path\nfrom the returned array after a single-source Shortest Path algorithm is run on\nthe already prepared graph from <a href="#/dguide/fig_analysis_path">Finding the shortest path</a>.'},{tagname:"example",id:"ex_analysis_more_paths",title:"Running single-source Shortest Path",content:'<pre class="programlisting javascript" id="analysis-shortest_paths-392-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Create an array the size of the edge set with costs for each edge.\r\nconst cost = [1, 3, 2, 3, 7, 1, 1, 4, 1, 1, 2, 2, 2, 3, 2, 2, 1]\r\n\r\n// This array will hold the result\r\nconst pred = new Array(graph.nodes.size)\r\n\r\n// Suppose the first node from the graph is the node named "Start."\r\nconst start = graph.nodes.first()\r\nconst startNode = graphAdapter.getCopiedNode(start)\r\n// Suppose the last node from the graph is the node named "Destination."\r\nconst destination = graph.nodes.last()\r\nconst destinationNode = graphAdapter.getCopiedNode(destination)\r\n\r\n// Run the single-source Dijkstra algorithm on the graph.\r\nyfiles.algorithms.ShortestPaths.dijkstra(\r\n  graphAdapter.yGraph,\r\n  startNode,\r\n  true,\r\n  cost,\r\n  new Array(graphAdapter.yGraph.nodeCount),\r\n  pred\r\n)\r\n\r\n// Suppose \'node_i\' of type INode holds a reference to the node named "i."\r\n// Construct the proper path from "Start" to "i" as a list of nodes.\r\nconst nl = yfiles.algorithms.ShortestPaths.constructNodePath(startNode, destinationNode, pred)\r\nconst nl_igraph = graphAdapter.createNodeEnumerable(nl)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"analysis-shortest_paths-392-simpara-011",content:'Tutorial demo application <a href="complete/shortestpath/ShortestPathDemo.java" target="_blank">complete/shortestpath/ShortestPathDemo.java</a>\nalso presents running the Shortest Path algorithm.'}]},{tagname:"section",id:"analysis-centrality",title:"Centrality Measures",children:[{tagname:"para","class":"dguide-para",id:"analysis-centrality-393-simpara-001",content:'For the elements of a graph the notion of importance of a single node or edge\nwithin the graph structure can be expressed using so-called <span class="def">centrality</span>\nmeasures.\nA centrality measure is a function that yields a double value for each node or\neach edge.\nThis value directly denotes the graph element’s importance, i.e., the higher\nthe value, the more important the element.'},{tagname:"para","class":"dguide-para",id:"analysis-centrality-393-simpara-002",content:'Class <api-link id="analysis-centrality-393-api-link-001" data-member="" data-text="Centrality" data-type="yfiles.algorithms.Centrality"></api-link> provides\na variety of such centrality measures for both node set and edge set.\nMost of these measures also take edge costs into account.'},{tagname:"para","class":"dguide-para",id:"analysis-centrality-393-simpara-003",content:'<a href="#/dguide/fig_analysis_centrality">Node betweenness centrality</a> depicts a graph with node centrality values at\nthe upper-right corner of the nodes.\nThe numbers at the edges denote <span class="def">costs</span> that are associated with an edge.'},{tagname:"figure","class":"image",title:"Node betweenness centrality",id:"fig_analysis_centrality","float":0,children:[{tagname:"img",src:"assets/analysis_centrality.a17ff49a.jpg",alt:"analysis centrality",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-centrality-393-simpara-004",content:'The methods from class <span class="api">Centrality</span>\noptionally either ignore or respect edge direction when computing centrality indices.\nAlso, the class offers convenience methods to normalize all values computed for\neither node set or edge set to lie in the interval [0..1].'},{tagname:"para","class":"dguide-para",id:"analysis-centrality-393-simpara-005",content:'<a href="#/dguide/ex_analysis_centrality">Computing centrality indices</a> shows the code to prepare and run the node\nbetweenness centrality algorithm on the graph depicted in\n<a href="#/dguide/fig_analysis_centrality">Node betweenness centrality</a> ignoring edge directions.\nSubsequent to the computation, the resulting double values are also normalized.'},{tagname:"example",id:"ex_analysis_centrality",title:"Computing centrality indices",content:'<pre class="programlisting javascript" id="analysis-centrality-393-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Create an array with the costs for each edge.\r\nconst cost = [1, 3, 2, 3, 7, 1, 1, 4, 1, 1, 2, 2, 2, 3, 2, 2, 1]\r\n// Create the data provider to be used as parameter from this array.\r\nconst dp = yfiles.algorithms.Maps.createIndexEdgeMapForNumber(cost)\r\n\r\n// Create the node map to hold the centrality indices for all nodes.\r\nconst myCentrality = graphAdapter.yGraph.createNodeMap()\r\n// Compute node betweenness centrality.\r\nyfiles.algorithms.Centrality.nodeBetweenness(graphAdapter.yGraph, myCentrality, false, dp)\r\n// Normalize the double values so that they lie in the interval [0..1].\r\nyfiles.algorithms.Centrality.normalizeNodeMap(graphAdapter.yGraph, myCentrality)\r\n\r\nconst myCentrality_igraph = graphAdapter.createMapper(myCentrality)\n</code></pre>'}]},{tagname:"section",id:"analysis-spanning_trees",title:"Spanning Trees",children:[{tagname:"para","class":"dguide-para",id:"analysis-spanning_trees-394-simpara-001",content:'A <span class="def">spanning tree</span> of a connected graph is the smallest set of edges such that all\nnodes of the graph are connected.\nFinding these and also finding the <span class="def">minimum spanning tree</span>\nof a graph is the duty of class\n<api-link id="analysis-spanning_trees-394-api-link-001" data-member="" data-text="SpanningTrees" data-type="yfiles.algorithms.SpanningTrees"></api-link>.'},{tagname:"para","class":"dguide-para",id:"analysis-spanning_trees-394-simpara-002",content:'Consider <a href="#/dguide/fig_analysis_span">Finding the minimum spanning tree</a>, for instance.\nThe numbers at the edges denote <span class="def">costs</span> that are associated with an edge.\nThe smallest set of edges such that all nodes from the graph are connected and\nthe accumulated costs of the set is at a minimum results in the emphasized\nedges.\nThese edges define the minimum spanning tree of the graph with an overall cost\nof 17 [units].'},{tagname:"figure","class":"image",title:"Finding the minimum spanning tree",id:"fig_analysis_span","float":0,children:[{tagname:"img",src:"assets/analysis_span_1sel.2930cf08.jpg",alt:"analysis span 1sel",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-spanning_trees-394-simpara-003",content:'Class <span class="api">SpanningTrees</span> provides\ndifferent algorithms to find a minimum spanning tree of a given graph.\nFurthermore, it also offers convenience methods to get the overall costs of a\nspanning tree, and to compute a spanning tree with uniform costs at the edges.'},{tagname:"para","class":"dguide-para",id:"analysis-spanning_trees-394-simpara-004",content:'<a href="#/dguide/ex_analysis_span">Running the Spanning Tree algorithm</a> shows the code to prepare and run a Spanning Tree\nalgorithm on the graph depicted in <a href="#/dguide/fig_analysis_span">Finding the minimum spanning tree</a>.'},{tagname:"example",id:"ex_analysis_span",title:"Running the Spanning Tree algorithm",content:'<pre class="programlisting javascript" id="analysis-spanning_trees-394-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Create an array with the costs for each edge.\r\nconst cost = [1, 3, 2, 3, 7, 1, 1, 4, 1, 1, 2, 2, 2, 3, 2, 2, 1]\r\n// Create the data provider to be used as parameter from this array.\r\nconst dp = yfiles.algorithms.Maps.createIndexEdgeMapForNumber(cost)\r\n\r\n// Compute the minimum spanning tree of the graph.\r\nconst el = yfiles.algorithms.SpanningTrees.kruskal(graphAdapter.yGraph, dp)\r\nconst el_igraph = graphAdapter.createEdgeEnumerable(el)\r\n\r\n// Get the overall costs of the minimum spanning tree.\r\nconst treeCosts = yfiles.algorithms.SpanningTrees.cost(el, dp)\n</code></pre>'}]},{tagname:"section",id:"analysis-transitivity",title:"Transitivity",children:[{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-001",content:'Class <api-link id="analysis-transitivity-395-api-link-001" data-member="" data-text="Transitivity" data-type="yfiles.algorithms.Transitivity"></api-link> offers\nsophisticated computational services related to reachability questions in\ndirected acyclic graphs.'},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-002",content:"The two operations provided are transitive closure and transitive reduction."},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-003",content:"Transitive closure means the augmentation of a graph’s edge set such that an\nexisting path between any two nodes, which are not direct neighbors to each\nother, leads to an additional edge connecting these nodes."},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-004",content:"In effect, this means that any two nodes that are reachable by a path of\narbitrary length before the augmentation, are instantly reachable thereafter,\ni.e., they are direct neighbors."},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-005",content:'In <a href="#/dguide/fig_analysis_transitive_closure">Transitive closure of a graph</a> a simple graph together with its\ntransitive closure is depicted.\nThe additionally inserted edges are dotted.\nFor example, the dotted edge between <strong id="analysis-transitivity-395-emphasis-001" class="bold" role="bold">Start</strong> and <strong id="analysis-transitivity-395-emphasis-002" class="bold" role="bold">e</strong> has been inserted to\nreflect even multiple possible paths from <strong id="analysis-transitivity-395-emphasis-003" class="bold" role="bold">Start</strong> to <strong id="analysis-transitivity-395-emphasis-004" class="bold" role="bold">e</strong>:\n[a, b, e], [a, d, e], or [c, d, e] are all existing paths.'},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-006",content:'Note that class <span class="api">Transitivity</span> computes only the transitive, but not the\nreflexive, transitive closure.\nHowever, the latter one can easily be achieved by adding self-loops to each\nnode.'},{tagname:"figure","class":"image",title:"Transitive closure of a graph",id:"fig_analysis_transitive_closure","float":0,children:[{tagname:"img",src:"assets/analysis_trans_clos_2.ca95ac35.jpg",alt:"",title:'<para class="dguide-para">Example graph…​</para>'},{tagname:"img",src:"assets/analysis_trans_clos_2clos.7d28f2a3.jpg",alt:"",title:'<para class="dguide-para">…​ and its transitive closure.</para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-007",content:"Transitive reduction is the reverse operation to transitive closure.\nIt means the removal of all directly connecting edges from a graph as long as\nthere remains another path of at least two edges length between the two\nconsidered nodes."},{tagname:"para","class":"dguide-para",id:"analysis-transitivity-395-simpara-008",content:'<a href="#/dguide/fig_analysis_transitive_reduction">Transitive reduction of a graph</a> shows a simple graph and its\ntransitive reduction.'},{tagname:"figure","class":"image",title:"Transitive reduction of a graph",id:"fig_analysis_transitive_reduction","float":0,children:[{tagname:"img",src:"assets/analysis_trans_red_2.c2705940.jpg",alt:"",title:'<para class="dguide-para">Example graph…​</para>'},{tagname:"img",src:"assets/analysis_trans_red_1red.18350e65.jpg",alt:"",title:'<para class="dguide-para">…​ and its transitive reduction.</para>'}]}]},{tagname:"section",id:"analysis-trees",title:"Trees",children:[{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-001",content:'Class <api-link id="analysis-trees-396-api-link-001" data-member="" data-text="Trees" data-type="yfiles.algorithms.Trees"></api-link> provides a variety of\nservices centering around tree structures.\nIt offers methods to modify existing trees and methods to check if a graph\nfulfills certain tree characteristics.\nMoreover, it has methods to “extract” tree structures contained in arbitrary\ngraphs.'},{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-002",content:'Note that there is a division in the methods of class <span class="api">Trees</span>.\nOn the one hand there are methods to deal with general graphs, and on the other\nhand there are methods that expect the given parameter of type <api-link id="analysis-trees-396-api-link-002" data-member="" data-text="Graph" data-type="yfiles.algorithms.Graph"></api-link> to be a\nproper tree.'},{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-003",content:'To properly use the methods from class <api-link id="analysis-trees-396-api-link-003" data-member="" data-text="Trees" data-type="yfiles.algorithms.Trees"></api-link>, it is necessary to understand the\nnotion of a rooted tree and what directed tree means.\nDirected means that all edges uniformly point towards the leaf nodes.\nA rooted tree, as it is usually defined, meets the following conditions:'},{tagname:"para",content:'<ul id="analysis-trees-396-itemizedlist-001"><li id="analysis-trees-396-listitem-001"><p id="analysis-trees-396-simpara-004">It is a directed tree, i.e., every node has at most one incoming edge and all\nedges point towards the leaves of the tree.</p></li><li id="analysis-trees-396-listitem-002"><p id="analysis-trees-396-simpara-005">There is exactly one node that has no incoming edge, but only outgoing edges.\nThis is the root node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-006",content:"A reversed rooted tree means that all edges point towards the root node,\ninstead of the leaf nodes.\nIn particular, this means that the root node has only incoming, but no outgoing\nedges."},{tagname:"para",content:'<pre class="programlisting javascript" id="analysis-trees-396-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Test if the graph is a tree.\r\nif (yfiles.algorithms.Trees.isTree(graphAdapter.yGraph)) {\r\n  // Explicitly set the first node from the node set as the root node of the\r\n  // tree.\r\n  // Direct the tree; i.e., revert those edges that point towards the root\r\n  // node.\r\n  const firstNode = graph.nodes.elementAt(0)\r\n  const el = yfiles.algorithms.Trees.directTree(\r\n    graphAdapter.yGraph,\r\n    graphAdapter.getCopiedNode(firstNode)\r\n  )\r\n\r\n  // Transfer back the result.\r\n  const el_igraph = graphAdapter.createEdgeEnumerable(el)\r\n  el_igraph.forEach(e => {\r\n    // Reverse the corresponding edges in the original IGraph.\r\n    graph.reverse(e)\r\n  })\r\n\r\n  // Get the leaf nodes of the tree.\r\n  const nl = yfiles.algorithms.Trees.getLeafNodes(graphAdapter.yGraph, true)\r\n  const nl_igraph = graphAdapter.createNodeEnumerable(nl)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-007",content:'Querying the tree depicted in <a href="#/dguide/fig_analysis_tree">A simple tree</a> for its root node, e.g.,\nwould lead to node <code>ROOT</code>, and the list of all leaf nodes would be <code>{a, f, i, j, k}</code>.'},{tagname:"figure","class":"image",title:"A simple tree",id:"fig_analysis_tree","float":0,children:[{tagname:"img",src:"assets/analysis_tree_4leaves.ba9697a1.jpg",alt:"analysis tree 4leaves",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-trees-396-simpara-008",content:'Finding the common ancestor of nodes from a tree is another query supported by\nclass <api-link id="analysis-trees-396-api-link-004" data-member="" data-text="Trees" data-type="yfiles.algorithms.Trees"></api-link>.\nFor instance, the common ancestor of nodes <code>{f, j, k}</code> from\n<a href="#/dguide/fig_analysis_tree">A simple tree</a> would be node <code>c</code>.'},{tagname:"example",id:"ex_analysis_common_ancestor",title:"Finding the common ancestor of a set of nodes",content:'<pre class="programlisting javascript" id="analysis-trees-396-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create the graph model adapter to get a proper analysis graph structure.\r\nconst graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n// Get the root node of the tree.\r\nconst root = yfiles.algorithms.Trees.getRoot(graphAdapter.yGraph)\r\nconst root_igraph = graphAdapter.getOriginalNode(root)\r\n\r\n// Get the leaf nodes of the tree.\r\nconst nl = yfiles.algorithms.Trees.getLeafNodes(graphAdapter.yGraph, true)\r\nconst nl_igraph = graphAdapter.createNodeEnumerable(nl)\r\n\r\n// Remove the first and last leaf node from the list.\r\nnl.pop()\r\nnl.popLast()\r\n\r\n// Find the nearest common ancestor for all remaining leaves.\r\nconst ancestor = yfiles.algorithms.Trees.getNearestCommonAncestor(\r\n  graphAdapter.yGraph,\r\n  root,\r\n  true,\r\n  nl\r\n)\r\n// Transfer back the result.\r\nconst ancestor_igraph = graphAdapter.getOriginalNode(ancestor)\n</code></pre>'}]},{tagname:"section",id:"analysis-bfs",title:"Breadth-First Search",children:[{tagname:"para","class":"dguide-para",id:"analysis-bfs-397-simpara-001",content:"Beginning at a starting node (which is thought of as having distance 0 to\nitself) breadth-first search visits all of its direct neighbors (these having\ndistance 1) before it in turn uses these already visited nodes as new starting\nnodes to continue with their direct neighbors."},{tagname:"para","class":"dguide-para",id:"analysis-bfs-397-simpara-002",content:"That way, it visits all reachable nodes at distance <code>k</code> to the\noriginal starting node before those at distance <code>k+1</code>."},{tagname:"para","class":"dguide-para",id:"analysis-bfs-397-simpara-003",content:'Look at the example graph in <a href="#/dguide/fig_analysis_bfs">Breadth-first search distances</a>.\nThe numbers at the upper-right corners of the nodes denote the distance the\nrespective node has to the starting node.'},{tagname:"figure","class":"image",title:"Breadth-first search distances",id:"fig_analysis_bfs","float":0,children:[{tagname:"img",src:"assets/analysis_bfs_2.6a2b8354.jpg",alt:"analysis bfs 2",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-bfs-397-simpara-004",content:'Class <api-link id="analysis-bfs-397-api-link-001" data-member="" data-text="Bfs" data-type="yfiles.algorithms.Bfs"></api-link> returns all nodes with equal\ndistance in a so-called <span class="def">layer</span>.\nThe methods it provides all allow for multiple start nodes which are called\n<span class="def">core nodes</span>.\nBy definition, all core nodes are returned in the first layer.'},{tagname:"para","class":"dguide-para",id:"analysis-bfs-397-simpara-005",content:'As an option, the BFS run can be either directed or undirected.\nBy default, class <span class="api">Bfs</span>\nignores edge directions, i.e., it interprets the edges undirected.'}]},{tagname:"section",id:"analysis-dfs",title:"Depth-First Search",children:[{tagname:"para","class":"dguide-para",id:"analysis-dfs-398-simpara-001",content:"Beginning at a starting node, depth-first search (DFS) recursively visits the\nfirst yet undiscovered direct neighbor of every reached node before continuing\nin the same manner with the remaining neighbors at this node."},{tagname:"para","class":"dguide-para",id:"analysis-dfs-398-simpara-002",content:'Look at the example graph in <a href="#/dguide/fig_analysis_dfs">Depth-first search graph traversal</a>.\nThe numbers at the upper-right corners of the nodes denote the visiting\nsequence with directed DFS.\nAdditionally, the emphasized edges show the path of the DFS run.\nObserve that the <strong id="analysis-dfs-398-emphasis-001" class="bold" role="bold">Start</strong> node is visited first and accordingly is assigned the\nfirst index (not shown).'},{tagname:"figure","class":"image",title:"Depth-first search graph traversal",id:"fig_analysis_dfs","float":0,children:[{tagname:"img",src:"assets/analysis_dfs_1c.ef69fc85.jpg",alt:"analysis dfs 1c",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"analysis-dfs-398-simpara-003",content:'Class <api-link id="analysis-dfs-398-api-link-001" data-member="" data-text="Dfs" data-type="yfiles.algorithms.Dfs"></api-link> is used as a framework to build\ncustomized depth-first search services.\nIt offers a collection of callback methods for all important events during a\nDFS run.\nThese callbacks are empty by default, and have to be overwritten appropriately by\nan inheriting class.\n<a href="#/dguide/ex_analysis_dfs">Using class Dfs</a> demonstrates how to use the callback methods provided\nby class <span class="api">Dfs</span>.'},{tagname:"para","class":"dguide-para",id:"analysis-dfs-398-simpara-004",content:"Events during a DFS run are pre- and post-visit events with nodes and pre-\nand post-traversal events with edges.\nAnother callback is provided to handle unconnected graphs when all nodes that\nare reachable from the starting node have been visited and there are still\nundiscovered nodes in the graph.\nNote that the invocation of this callback can optionally be disabled."},{tagname:"para","class":"dguide-para",id:"analysis-dfs-398-simpara-005",content:'Class <span class="api">Dfs</span> either ignores or respects\nedge directions, i.e., it interprets the graph structure either undirected or\ndirected.'},{tagname:"example",id:"ex_analysis_dfs",title:"Using class Dfs",content:'<pre class="programlisting javascript" id="analysis-dfs-398-programlisting-001" language="javascript" format="linespecific"><code>// Extend class Dfs.\r\n\r\nclass MyDFS extends yfiles.algorithms.Dfs {\r\n  constructor(graphAdapter) {\r\n    super()\r\n    this.graphAdapter = graphAdapter\r\n  }\r\n\r\n  // Print the so-called "DFS number."\r\n  // This number denotes when a node is visited.\r\n  preVisit(node, dfsNumber) {\r\n    console.log(\r\n      \'Node: \' + this.graphAdapter.getOriginalNode(node) + \' has DFS number: \' + dfsNumber\r\n    )\r\n  }\r\n\r\n  // Print the so-called "completion number."\r\n  // This number denotes when a node has been completed.\r\n  postVisit(node, dfsNumber, compNumber) {\r\n    console.log(\r\n      \'Node: \' + this.graphAdapter.getOriginalNode(node) + \' has completion numbers: \' + compNumber\r\n    )\r\n  }\r\n\r\n  // The graph is unconnected, i.e., it has multiple components.\r\n  lookFurther(v) {\r\n    console.log(\'New starting node: \' + this.graphAdapter.getOriginalNode(v))\r\n  }\r\n\r\n  // Instantiate the customized class.\r\n  static runDFS(graph) {\r\n    // Create the graph model adapter to get a proper analysis graph structure.\r\n    const graphAdapter = new yfiles.layout.YGraphAdapter(graph)\r\n\r\n    const myDFS = new MyDFS(graphAdapter)\r\n    // Set directed interpretation of the graph structure.\r\n    myDFS.directedMode = true\r\n\r\n    // Run the depth-first search algorithm on the given graph.\r\n    myDFS.start(graphAdapter.yGraph)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"analysis-dfs-398-tip-001",content:'<p id="analysis-dfs-398-simpara-006">To simply compute the DFS completion numbers for the node set of a graph there\nare convenience methods provided in class\n<api-link id="analysis-dfs-398-api-link-002" data-member="" data-text="NodeOrders" data-type="yfiles.algorithms.NodeOrders"></api-link>.</p>'}]}]},{tagname:"section",id:"graph_builder",title:"Creating a Graph from Business Data",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-012-simpara-001",content:"The yFiles for HTML binding support provides a convenient way of creating and updating a graph structure.\nIt is tailored to specific use cases where a tree structure or a general graph structure can be easily derived\nfrom a data model that meets certain conditions."},{tagname:"para","class":"dguide-para",id:"graph_builder-012-simpara-002",content:'Along with the creation of the graph structure, the yFiles for HTML binding support also enables specifying both\nthe visual representation of nodes and edges in the graph and the hierarchical organization in a grouped graph.\nThere is no <a href="#/dguide/layout">layout algorithm</a> applied once a graph is built, however, this can be easily done in a\nsubsequent step.'},{tagname:"para","class":"dguide-para note",id:"graph_builder-012-note-001",content:'<p id="graph_builder-012-simpara-003">Even if a data model does not fit the specific use cases that the binding support classes are tailored to,\nthe support might still be of use to accomplish an initial import of at least a part of the data model\n(for example, the nodes).</p><p id="graph_builder-012-simpara-004">Please keep in mind that, in this case, it might be easier to abstain from using the binding support and create\nthe graph the “regular way,” that is, by building and populating a graph structure using the functionality\nprovided by <a href="#/dguide/graph_model-graph">the default  IGraph  implementation</a>.</p>'},{tagname:"para","class":"dguide-para",id:"graph_builder-012-simpara-005",content:"The yFiles for HTML binding support covers some of the most common ways of creating graph structures\nfrom business data. Since each use case has its own specifics, there are several different classes,\neach tailored for a specific set of structure of the input data and the desired graph features."},{tagname:"para","class":"dguide-para",id:"graph_builder-012-simpara-006",content:'When choosing a data binding class, a simple criterion is whether the data has\na tree structure or not. A tree is a graph without cycles, for example\nhierarchic data in which each object has at most one parent (and several\nchildren) like an organizational chart. In this case, the\n<a href="#/dguide/graph_builder-TreeBuilder">TreeBuilder  class</a> can be used unless graph\ngrouping is required which it doesn’t support. Of course, all classes for\ngeneral graphs can be used for trees as well, and\n<a href="#/dguide/graph_builder-AdjacentNodesGraphBuilder">AdjacentNodesGraphBuilder</a>\nis even a more general version of <span class="api">TreeBuilder</span>.'},{tagname:"para","class":"dguide-para",id:"graph_builder-012-simpara-007",content:'If the business data does not describe a tree structure but a general graph,\n<a href="#/dguide/graph_builder-GraphBuilder">GraphBuilder</a> or\n<a href="#/dguide/graph_builder-AdjacentNodesGraphBuilder">AdjacentNodesGraphBuilder</a> can\nbe chosen based on the way the connections between nodes are specified in your\ndata model. If connections are specified explicitly, data can be bound to edge\nlabels and creating multiple edges between the same pair of nodes is possible.\nA more detailed description of the data models required by each class is given\nin the following table:'},{tagname:"table","class":"",id:"graph_builder-012-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Data binding classes</caption><colgroup><col style="width:22%;"><col style="width:11%;"><col style="width:44%;"><col style="width:22%;"></colgroup><thead id="graph_builder-012-thead-001"><tr id="graph_builder-012-row-001"><th id="graph_builder-012-entry-001" align="left" valign="top">\nType Name\n</th><th id="graph_builder-012-entry-002" align="left" valign="top">\nGraph Structure\n</th><th id="graph_builder-012-entry-003" align="left" valign="top">\nDescription\n</th><th id="graph_builder-012-entry-004" align="left" valign="top">\nExample Data\n</th></tr></thead><tbody id="graph_builder-012-tbody-001"><tr id="graph_builder-012-row-002"><td id="graph_builder-012-entry-005" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-008"><api-link id="graph_builder-012-api-link-001" data-member="" data-text="TreeBuilder" data-type="yfiles.binding.TreeBuilder"></api-link></para></td><td id="graph_builder-012-entry-006" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-009">Tree</para></td><td id="graph_builder-012-entry-007" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-010">Creates a tree from a data model without explicit objects for connections, i.e. edges.\n  Each business object specifies its child objects and thereby edges are defined implicitly.\n  Supports binding data to an edge’s label. See <a href="#/dguide/graph_builder-TreeBuilder">more details below</a>.</para></td><td id="graph_builder-012-entry-008" align="left" valign="top"><pre class="programlisting javascript" id="graph_builder-012-programlisting-001" language="javascript" format="linespecific"><code>const treeSource = [\r\n  {\r\n    name: \'A\',\r\n    children: [\r\n      { name: \'A0\' },\r\n      {\r\n        name: \'A1\',\r\n        children: [{ name: \'A10\' }, { name: \'A11\' }]\r\n      }\r\n    ]\r\n  }\r\n]\n</code></pre></td></tr><tr id="graph_builder-012-row-003"><td id="graph_builder-012-entry-009" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-011"><api-link id="graph_builder-012-api-link-002" data-member="" data-text="GraphBuilder" data-type="yfiles.binding.GraphBuilder"></api-link></para></td><td id="graph_builder-012-entry-010" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-012">General</para></td><td id="graph_builder-012-entry-011" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-013">Creates a general graph from a data model which provides business objects for both nodes and edges.\n  The collection of nodes and the collection of edges are specified separately.\n  Supports binding data to an edge’s label and also multiple edges between the   same pair of node objects.\n  See <a href="#/dguide/graph_builder-GraphBuilder">more details below</a>.</para></td><td id="graph_builder-012-entry-012" align="left" valign="top"><pre class="programlisting javascript" id="graph_builder-012-programlisting-002" language="javascript" format="linespecific"><code>const nodeSource = [\'A\', \'B\', \'C\', \'D\']\r\nconst edgeSource = [\r\n  {\r\n    from: \'A\',\r\n    to: \'B\',\r\n    name: \'e1\'\r\n  },\r\n  {\r\n    from: \'A\',\r\n    to: \'C\',\r\n    name: \'e2\'\r\n  },\r\n  {\r\n    from: \'D\',\r\n    to: \'C\',\r\n    name: \'e3\'\r\n  }\r\n]\n</code></pre></td></tr><tr id="graph_builder-012-row-004"><td id="graph_builder-012-entry-013" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-014"><api-link id="graph_builder-012-api-link-003" data-member="" data-text="AdjacentNodesGraphBuilder" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link></para></td><td id="graph_builder-012-entry-014" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-015">General</para></td><td id="graph_builder-012-entry-015" align="left" valign="top"><para class="dguide-para" id="graph_builder-012-simpara-016">Creates a general graph from a data model without explicit objects for connections, i.e. edges.\n  Each business object specifies the objects in its neighborhood and thereby edges are defined implicitly.\n  See <a href="#/dguide/graph_builder-AdjacentNodesGraphBuilder">more details below</a>.</para></td><td id="graph_builder-012-entry-016" align="left" valign="top"><pre class="programlisting javascript" id="graph_builder-012-programlisting-003" language="javascript" format="linespecific"><code>const nodesSource = [\r\n  {\r\n    id: \'A\',\r\n    pred: [\'D\'],\r\n    succ: [\'B\', \'C\']\r\n  },\r\n  { id: \'B\' },\r\n  { id: \'C\' },\r\n  {\r\n    id: \'D\',\r\n    succ: [\'C\']\r\n  }\r\n]\n</code></pre></td></tr></tbody>'},{tagname:"section",id:"graph_builder-common_features",title:"Common Features",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-common_features-399-simpara-001",content:"The features described in this section are supported by all classes of the\nyFiles for HTML binding support."},{tagname:"para","class":"dguide-para",id:"graph_builder-common_features-399-simpara-002",content:'All graph builder need a reference to the <span class="api">IGraph</span> instance they maintain, passed as constructor parameter.\nThey also need to know the object or array to get the description for the nodes to create for.\nThis object has to be set to the <api-link id="graph_builder-common_features-399-api-link-001" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.GraphBuilder"></api-link> property.\nSee the description for the graph builder implementations whether these need extra information, e.g.\na description of the relations between the objects.\nFinally, they need information how to relate detail information from the business objects to the graph,\ne.g. the name of the property which is used to create a node label from.'},{tagname:"example",id:"graph_builder-common_features-399-example-001",title:"Configuring a graph builder using TreeBuilder as example",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-common_features-399-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>const treeBuilder = new yfiles.binding.TreeBuilder(graphComponent.graph)\r\n\r\n// Stores the root nodes of the graph's trees\r\ntreeBuilder.nodesSource = window['data-nodessource']\r\n\r\n// Identifies the property of a node object that contains its child nodes\r\ntreeBuilder.childBinding = 'children'\r\n\r\n// Identifies the id property of a node\r\ntreeBuilder.idBinding = 'name'\r\n\r\n// Uses the name for node labels as well\r\ntreeBuilder.nodeLabelBinding = 'name'\n</code></pre>"},{tagname:"section",id:"_creating_and_updating_graphs",title:"Creating And Updating Graphs",children:[{tagname:"para","class":"dguide-para",id:"_creating_and_updating_graphs-400-simpara-001",content:"The initial graph creation as well as updating the graph for changed data doesn’t happen automatically,\nit has to be triggered explicitly:"},{tagname:"para",content:'<ul id="_creating_and_updating_graphs-400-itemizedlist-001"><li id="_creating_and_updating_graphs-400-listitem-001"><p id="_creating_and_updating_graphs-400-simpara-002"><api-link id="_creating_and_updating_graphs-400-api-link-001" data-member="buildGraph()" data-text="buildGraph" data-type="yfiles.binding.GraphBuilder"></api-link> populates the maintained graph instance with the items\ngenerated from the bound data. The graph is cleared first.</p></li><li id="_creating_and_updating_graphs-400-listitem-002"><p id="_creating_and_updating_graphs-400-simpara-003"><api-link id="_creating_and_updating_graphs-400-api-link-002" data-member="updateGraph()" data-text="updateGraph" data-type="yfiles.binding.GraphBuilder"></api-link> updates the graph. It reflects changes in the bound data\nby adding new elements and removing obsolete elements. Note that an update is also required\nif one of the binding properties (e.g. <api-link id="_creating_and_updating_graphs-400-api-link-003" data-member="nodeLabelBinding" data-text="nodeLabelBinding" data-type="yfiles.binding.GraphBuilder"></api-link>)\nhas been changed.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_creating_and_updating_graphs-400-simpara-004",content:'Note that neither method triggers an automatic layout. If required, the layout has to be applied in\na <a href="#/dguide/layout-applying_a_layout">subsequent step</a>.'},{tagname:"example",id:"_creating_and_updating_graphs-400-example-001",title:"Building and Updating a graph using TreeBuilder as example",content:'<pre class="programlisting javascript" id="_creating_and_updating_graphs-400-programlisting-001" language="javascript" format="linespecific"><code>// Build a graph initially\r\ntreeBuilder.buildGraph()\r\n// Apply a layout in a subsequent step\r\ngraph.applyLayout(new yfiles.tree.TreeLayout())\r\n\r\n/////////////////////////////////////////////\r\n\r\n// Update a graph after the business data has changed\r\ntreeBuilder.updateGraph()\r\n// Apply a layout in a subsequent step\r\ngraph.applyLayout(new yfiles.tree.TreeLayout())\n</code></pre>'}]},{tagname:"section",id:"_common_configuration_options",title:"Common Configuration Options",children:[{tagname:"para","class":"dguide-para",id:"_common_configuration_options-401-simpara-001",content:'The source to get the data from has to be set to property <span class="api">nodesSource</span>.\nNote that some of the graph builder implementations might require additional data. Also,\nthe required data format is implementation specific. Please see below in the descriptions\nof the implementations for details.'},{tagname:"para","class":"dguide-para",id:"_common_configuration_options-401-simpara-002",content:'You can specify the visual representation of the nodes and edges in the graph structure\nusing by changing the <api-link id="_common_configuration_options-401-api-link-001" data-member="nodeDefaults" data-text="nodeDefaults" data-type="yfiles.graph.IGraph"></api-link>, <api-link id="_common_configuration_options-401-api-link-002" data-member="edgeDefaults" data-text="edgeDefaults" data-type="yfiles.graph.IGraph"></api-link>\nproperty of the <api-link id="_common_configuration_options-401-api-link-003" data-member="graph" data-text="graph" data-type="yfiles.binding.GraphBuilder"></api-link>.'},{tagname:"para","class":"dguide-para",id:"_common_configuration_options-401-simpara-003",content:'The properties <api-link id="_common_configuration_options-401-api-link-004" data-member="locationXBinding" data-text="locationXBinding" data-type="yfiles.binding.GraphBuilder"></api-link> and\n<api-link id="_common_configuration_options-401-api-link-005" data-member="locationYBinding" data-text="locationYBinding" data-type="yfiles.binding.GraphBuilder"></api-link>\ncan be used to specify bindings that determine the x- and y-coordinates of a business object’s node.'},{tagname:"para","class":"dguide-para",id:"_common_configuration_options-401-simpara-004",content:'Properties which are used to specifically maintain <a href="#/dguide/graph_model-grouping">grouping</a> information\nare described <a href="#/dguide/graph_builder-grouping">below</a>.'}]}]},{tagname:"section",id:"graph_builder-TreeBuilder",title:"TreeBuilder",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-001",content:'The <api-link id="graph_builder-TreeBuilder-402-api-link-001" data-member="" data-text="TreeBuilder" data-type="yfiles.binding.TreeBuilder"></api-link> class\nenables a data binding that creates tree structures from a data model.\nThe data model needs to provide at least the business objects for an initial set\nof nodes and a way of identifying the business objects for further (child) nodes.\nThis means that the edges of the tree structures are only defined implicitly.'},{tagname:"example",id:"graph_builder-TreeBuilder-402-example-001",title:"Example data as source for TreeBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-TreeBuilder-402-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>const treeSource = [\r\n  {\r\n    name: 'router',\r\n    children: [\r\n      { name: 'Klotz' },\r\n      {\r\n        name: 'Schnucki',\r\n        children: [{ name: 'scanner' }, { name: 'color printer' }]\r\n      },\r\n      { name: 'Power' },\r\n      {\r\n        name: 'Oschi',\r\n        children: [{ name: 'b/w printer' }]\r\n      }\r\n    ]\r\n  }\r\n]\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-002",content:'<span class="api">TreeBuilder</span> supports the creation of a set of tree structures that are part of\nthe same graph, that means, the created graph structure can be actually a <span class="def">forest</span>.'},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-003",content:'The creation of trees with a hierarchical organization into group nodes is not\nsupported by this class. Instead, the\n<a href="#/dguide/graph_builder-AdjacentNodesGraphBuilder">AdjacentNodesGraphBuilder</a> class\ncan be used for this task. In fact, it is a more general version of <span class="api">TreeBuilder</span>\nand can be used as a drop-in replacement for <span class="api">TreeBuilder</span> by setting the same collection as\n<api-link id="graph_builder-TreeBuilder-402-api-link-002" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link>\nand using the binding\n<api-link id="graph_builder-TreeBuilder-402-api-link-003" data-member="successorsBinding" data-text="successorsBinding" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link>\ninstead of\n<api-link id="graph_builder-TreeBuilder-402-api-link-004" data-member="childBinding" data-text="childBinding" data-type="yfiles.binding.TreeBuilder"></api-link>\n(with the same business objects).'},{tagname:"heading",id:"_binding_properties",renderas:"sect3",content:"Binding Properties"},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-004",content:'The data binding to create the tree structure(s) is specified using the following properties of <span class="api">TreeBuilder</span>:'},{tagname:"para",content:'<ul id="graph_builder-TreeBuilder-402-itemizedlist-001"><li id="graph_builder-TreeBuilder-402-listitem-001"><p id="graph_builder-TreeBuilder-402-simpara-005"><api-link id="graph_builder-TreeBuilder-402-api-link-005" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.TreeBuilder"></api-link>\ndefines the collection of business objects from the data model for which nodes will be created.\nAt least, this collection must contain the objects for which root nodes should be created.\nSpecifying business objects that correspond to inner nodes and even specifying\nall business objects is supported as well.</p></li><li id="graph_builder-TreeBuilder-402-listitem-002"><p id="graph_builder-TreeBuilder-402-simpara-006"><api-link id="graph_builder-TreeBuilder-402-api-link-006" data-member="childBinding" data-text="childBinding" data-type="yfiles.binding.TreeBuilder"></api-link>\ndefines the binding to get the collection of child business objects of a\nbusiness object for which a node was created already.\nA corresponding node will be created for each new object in the collection and,\nsubsequently, edges will be created that connect the node corresponding to the\ninitial business object to each of the nodes corresponding to the child business objects.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-007",content:'A binding that allows specifying the business objects for edge labels is provided through the\n<api-link id="graph_builder-TreeBuilder-402-api-link-007" data-member="edgeLabelBinding" data-text="edgeLabelBinding" data-type="yfiles.binding.TreeBuilder"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-008",content:'Other features of the <span class="api">TreeBuilder</span> class\nthat are common to all classes of the yFiles for HTML data binding support are\ndescribed in <a href="#/dguide/graph_builder-common_features">Common Features</a>.'},{tagname:"example",id:"graph_builder-TreeBuilder-402-example-002",title:"Example: Configuring a TreeBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-TreeBuilder-402-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>const treeBuilder = new yfiles.binding.TreeBuilder(graphComponent.graph)\r\n\r\n// Stores the root nodes of the graph's trees\r\ntreeBuilder.nodesSource = window['data-nodessource']\r\n\r\n// Identifies the property of a node object that contains its child nodes\r\ntreeBuilder.childBinding = 'children'\r\n\r\n// Identifies the id property of a node\r\ntreeBuilder.idBinding = 'name'\r\n\r\n// Uses the name for node labels as well\r\ntreeBuilder.nodeLabelBinding = 'name'\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-009",content:'The <span class="api">TreeBuilder</span> also supports grouped graphs as described <a href="#/dguide/graph_builder-grouping">below</a>.'},{tagname:"heading",id:"_building_the_graph_structure",renderas:"sect3",content:"Building the Graph Structure"},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-010",content:'<span class="api">TreeBuilder</span> will build the tree structure(s) recursively using the collection returned by the <span class="api">nodesSource</span> property\nand the binding denoted by the <span class="api">childBinding</span> property as follows:'},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-011",content:'The initial set of business objects that starts the recursion is taken from the\ncollection returned by the <span class="api">nodesSource</span> property.\nSubsequently, the recursion uses the results from the <span class="api">childBinding</span>.\nAccordingly, due to the recursive nature of the process, it is crucial that\n<span class="api">childBinding</span> yields appropriate business objects that the <span class="api">childBinding</span> can be applied to.'},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-012",content:'During the recursive process, the data context for the <span class="api">childBinding</span> is always a\nbusiness object from the data model that corresponds to a node in the graph.\nThe business object that is the data context for the <span class="api">edgeLabelBinding</span>\ncorresponds to a child node in the graph, that is, to the target node of the respective edge.'},{tagname:"figure","class":"image",title:"Graph built from the above examples",id:"graph_builder-TreeBuilder-402-figure-001","float":0,children:[{tagname:"img",src:"assets/graphsource_tree.8b407220.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"heading",id:"_tutorial_demo_code",renderas:"sect3",content:"Tutorial Demo Code"},{tagname:"para","class":"dguide-para",id:"graph_builder-TreeBuilder-402-simpara-013",content:'The demo <a href="..\\..\\demos\\databinding\\simplegraphbuilder\\index.html" target="blank" class="demo-link" title="Uses &lt;code&gt;GraphBuilder&lt;/code&gt; or &lt;code&gt;TreeBuilder&lt;/code&gt; to automatically build a graph from business data.">Simple Graph Builder</a>\nshows how to use a <span class="api">TreeBuilder</span> to build a graph from user data provided as array and as JSON.'}]},{tagname:"section",id:"graph_builder-GraphBuilder",title:"GraphBuilder",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-001",content:'The <api-link id="graph_builder-GraphBuilder-403-api-link-001" data-member="" data-text="GraphBuilder" data-type="yfiles.binding.GraphBuilder"></api-link> class\nenables a data binding to create a general graph structure from a data model.\nThe data model needs to provide the business objects for both the nodes and the\nedges and bindings that specify for each edge both of its end nodes.'},{tagname:"example",id:"graph_builder-GraphBuilder-403-example-001",title:"Example data as source for GraphBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-GraphBuilder-403-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>const nodeSource = ['A', 'B', 'C', 'D']\r\nconst edgeSource = [\r\n  {\r\n    from: 'A',\r\n    to: 'B',\r\n    name: 'e1'\r\n  },\r\n  {\r\n    from: 'A',\r\n    to: 'C',\r\n    name: 'e2'\r\n  },\r\n  {\r\n    from: 'D',\r\n    to: 'C',\r\n    name: 'e3'\r\n  }\r\n]\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-002",content:'Additionally, <span class="api">GraphBuilder</span> supports a data binding that creates a hierarchical organization in a grouped graph.\nFor this, the data model needs to provide the business objects for the group\nnodes and to associate each group with the (regular and group) nodes it contains.'},{tagname:"heading",id:"_binding_properties_2",renderas:"sect3",content:"Binding Properties"},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-003",content:'The data binding to create the graph structure is specified using the following properties of <span class="api">GraphBuilder</span>:'},{tagname:"para",content:'<ul id="graph_builder-GraphBuilder-403-itemizedlist-001"><li id="graph_builder-GraphBuilder-403-listitem-001"><p id="graph_builder-GraphBuilder-403-simpara-004"><api-link id="graph_builder-GraphBuilder-403-api-link-002" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.GraphBuilder"></api-link>\ndenotes the business objects from the data model for which nodes will be created.</p></li><li id="graph_builder-GraphBuilder-403-listitem-002"><p id="graph_builder-GraphBuilder-403-simpara-005"><api-link id="graph_builder-GraphBuilder-403-api-link-003" data-member="edgesSource" data-text="edgesSource" data-type="yfiles.binding.GraphBuilder"></api-link>\ndenotes the business objects from the data model for which edges will be created\nsubject to the results from the following two bindings.</p></li><li id="graph_builder-GraphBuilder-403-listitem-003"><p id="graph_builder-GraphBuilder-403-simpara-006"><api-link id="graph_builder-GraphBuilder-403-api-link-004" data-member="sourceNodeBinding" data-text="sourceNodeBinding" data-type="yfiles.binding.GraphBuilder"></api-link> and\n<api-link id="graph_builder-GraphBuilder-403-api-link-005" data-member="targetNodeBinding" data-text="targetNodeBinding" data-type="yfiles.binding.GraphBuilder"></api-link>\ndenote the bindings to get from the business object for an edge to the business\nobjects for its source node and target node, respectively.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-007",content:'A binding that allows specifying the business objects for edge labels is provided through the\n<api-link id="graph_builder-GraphBuilder-403-api-link-006" data-member="edgeLabelBinding" data-text="edgeLabelBinding" data-type="yfiles.binding.GraphBuilder"></api-link> property.'},{tagname:"example",id:"graph_builder-GraphBuilder-403-example-002",title:"Example configuration for GraphBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-GraphBuilder-403-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>// create a GraphBuilder for the given graph\r\nconst graphBuilder = new yfiles.binding.GraphBuilder(graph)\r\n// node data:\r\ngraphBuilder.nodesSource = nodeSource\r\n// take the ID from the object's property name itself\r\ngraphBuilder.nodeIdBinding = null\r\n// node label from field 'name'\r\ngraphBuilder.edgeLabelBinding = 'name'\r\n\r\n// edge data:\r\ngraphBuilder.edgesSource = edgeSource\r\n// edges are created between nodes defined in field 'from'...\r\ngraphBuilder.sourceNodeBinding = 'from'\r\n// ... and those defined in field 'to'\r\ngraphBuilder.targetNodeBinding = 'to'\r\n// edge label from field 'label'\r\ngraphBuilder.edgeLabelBinding = 'label'\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-008",content:'Additional binding properties, most notably to create a hierarchical organization,\nand other features of the <span class="api">GraphBuilder</span> class that are common to all classes of the\nyFiles for HTML data binding support are described in <a href="#/dguide/graph_builder-common_features">Common Features</a>.'},{tagname:"heading",id:"_building_the_graph_structure_2",renderas:"sect3",content:"Building the Graph Structure"},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-009",content:'<span class="api">GraphBuilder</span> builds the graph structure using the collections returned by\nthe <span class="api">nodesSource</span> and <span class="api">edgesSource</span> properties and the bindings denoted by the\n<span class="api">sourceNodeBinding</span> and <span class="api">targetNodeBinding</span> properties.\nThe <span class="api">nodesSource</span> property is queried first, then is the <span class="api">edgesSource</span> property.\nAlong with the latter, the <span class="api">sourceNodeBinding</span> and <span class="api">targetNodeBinding</span> bindings are evaluated.'},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-010",content:'If the <api-link id="graph_builder-GraphBuilder-403-api-link-007" data-member="lazyNodeDefinition" data-text="lazyNodeDefinition" data-type="yfiles.binding.GraphBuilder"></api-link> property\nis set to <code>false</code>, it is crucial that each of the bindings evaluates to a business object that is\ncontained in the <span class="api">nodesSource</span> collection, otherwise no edge will be created for\na given business object of the collection returned by the <span class="api">edgesSource</span> property.\nIf <span class="api">lazyNodeDefinition</span>\nis set to <code>true</code>, a new node is associated with each business object that is not\ncontained in the <span class="api">nodesSource</span> collection, and an edge is created for every\nbusiness object of the <span class="api">edgesSource</span> collection.'},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-011",content:'The data context for the <span class="api">sourceNodeBinding</span> and <span class="api">targetNodeBinding</span> is always a\nbusiness object from the data model that corresponds to an edge in the graph.\nSimilarly, the business object that is the data context for the <span class="api">edgeLabelBinding</span>\nalso corresponds to an edge in the graph.'},{tagname:"figure","class":"image",title:"Graph built from the above examples",id:"graph_builder-GraphBuilder-403-figure-001","float":0,children:[{tagname:"img",src:"assets/graphsource_graph.33478d06.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"heading",id:"_tutorial_demo_code_2",renderas:"sect3",content:"Tutorial Demo Code"},{tagname:"para","class":"dguide-para",id:"graph_builder-GraphBuilder-403-simpara-012",content:'The demos <a href="..\\..\\demos\\databinding\\simplegraphbuilder\\index.html" target="blank" class="demo-link" title="Uses &lt;code&gt;GraphBuilder&lt;/code&gt; or &lt;code&gt;TreeBuilder&lt;/code&gt; to automatically build a graph from business data.">Simple Graph Builder</a> and <a href="..\\..\\demos\\databinding\\graphbuilder\\index.html" target="blank" class="demo-link" title="Uses class &lt;code&gt;GraphBuilder&lt;/code&gt; to interactively build and modify a graph from business data.">Graph Builder</a>\nshow how to use a <span class="api">GraphBuilder</span> to build a graph from user data.'}]},{tagname:"section",id:"graph_builder-AdjacentNodesGraphBuilder",title:"AdjacentNodesGraphBuilder",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-001",content:'The <api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-001" data-member="" data-text="AdjacentNodesGraphBuilder" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link> class\nenables a data binding to create a general graph structure from a data model.\nThe data model needs to provide the business objects for the nodes and bindings\nthat specify for each business object a collection of its predecessors and/or\na collection of its successors.'},{tagname:"example",id:"graph_builder-AdjacentNodesGraphBuilder-404-example-001",title:"Example data as source for AdjacentNodesGraphBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-AdjacentNodesGraphBuilder-404-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>const nodesSource = [\r\n  {\r\n    id: 'A',\r\n    pred: ['D'],\r\n    succ: ['B', 'C']\r\n  },\r\n  { id: 'B' },\r\n  { id: 'C' },\r\n  {\r\n    id: 'D',\r\n    succ: ['C']\r\n  }\r\n]\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-002",content:'Additionally, <span class="api">AdjacentNodesGraphBuilder</span> supports a data binding that creates a hierarchical organization in a grouped graph.\nFor this, the data model needs to provide the business objects for the group\nnodes and to associate each group with the (regular and group) nodes it contains.'},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-003",content:'This class is a more general version of class <a href="#/dguide/graph_builder-TreeBuilder">TreeBuilder</a> and can be used as a drop-in\nreplacement for it by setting the same collection as\n<api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-002" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link> and using the binding\n<api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-003" data-member="successorsBinding" data-text="successorsBinding" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link> instead of\n<api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-004" data-member="childBinding" data-text="childBinding" data-type="yfiles.binding.TreeBuilder"></api-link> (with the same business objects).'},{tagname:"heading",id:"_binding_properties_3",renderas:"sect3",content:"Binding Properties"},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-004",content:'The data binding to create the graph structure is specified using the following\nproperties of <span class="api">AdjacentNodesGraphBuilder</span>:'},{tagname:"para",content:'<ul id="graph_builder-AdjacentNodesGraphBuilder-404-itemizedlist-001"><li id="graph_builder-AdjacentNodesGraphBuilder-404-listitem-001"><p id="graph_builder-AdjacentNodesGraphBuilder-404-simpara-005"><api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-005" data-member="nodesSource" data-text="nodesSource" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link>\ndefines the business objects from the data model for which initial nodes will be created.\nThis collection must contain at least one business object from which all other\nbusiness objects are reachable by iteratively following the connections specified\nby the <span class="api">predecessorsBinding</span> and <span class="api">successorsBinding</span>.\nSpecifying more and even specifying all business objects is supported as well.</p></li><li id="graph_builder-AdjacentNodesGraphBuilder-404-listitem-002"><p id="graph_builder-AdjacentNodesGraphBuilder-404-simpara-006"><api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-006" data-member="predecessorsBinding" data-text="predecessorsBinding" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link> and\n<api-link id="graph_builder-AdjacentNodesGraphBuilder-404-api-link-007" data-member="successorsBinding" data-text="successorsBinding" data-type="yfiles.binding.AdjacentNodesGraphBuilder"></api-link>\ndefine the bindings to get the collections of predecessor and successor business\nobjects of a given business object.\nA corresponding node will be created for each new object in the collection and,\nsubsequently, edges will be created that connect the node corresponding to the\ngiven business object to each of the nodes corresponding to the predecessor and\nsuccessor business objects.</p></li></ul>'},{tagname:"example",id:"graph_builder-AdjacentNodesGraphBuilder-404-example-002",title:"Example configuration for AdjacentNodesGraphBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-AdjacentNodesGraphBuilder-404-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>const graphBuilder = new yfiles.binding.AdjacentNodesGraphBuilder(graph)\r\n// Stores the nodes of the graph\r\ngraphBuilder.nodesSource = nodesSource\r\n// Predecessors are defined in property 'pred'\r\ngraphBuilder.predecessorsBinding = 'pred'\r\n// Successors are defined in property 'pred'\r\ngraphBuilder.successorsBinding = 'succ'\r\n// IDs are defined in property 'pred'\r\ngraphBuilder.nodeIdBinding = 'id'\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-007",content:'Additional binding properties, most notably to create a hierarchical\norganization, and other features of the <span class="api">AdjacentNodesGraphBuilder</span> class\nthat are common to all classes of the yFiles for HTML data binding support are\ndescribed in <a href="#/dguide/graph_builder-common_features">Common Features</a>.'},{tagname:"heading",id:"_building_the_graph_structure_3",renderas:"sect3",content:"Building the Graph Structure"},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-008",content:'<span class="api">AdjacentNodesGraphBuilder</span> builds the graph structure iteratively using the\ncollection returned by the <span class="api">nodesSource</span> property and the bindings denoted by the\n<span class="api">predecessorsBinding</span> and <span class="api">successorsBinding</span> properties in the following way.\nFirst, the initial set of nodes is created for business objects of the\ncollection returned by the <span class="api">nodesSource</span> property. Then, iteratively, the\npredecessor and successor bindings are evaluated for already created nodes to\ndetermine their neighborhood, additional nodes are created for new business\nobjects if required, and finally, the corresponding edges are created.'},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-009",content:'During the iterative process, the data context for the <span class="api">predecessorsBinding</span> and\nthe <span class="api">successorsBinding</span> is always a business object from the data model that\ncorresponds to a node in the graph.'},{tagname:"figure","class":"image",title:"Graph built from the above examples",id:"graph_builder-AdjacentNodesGraphBuilder-404-figure-001","float":0,children:[{tagname:"img",src:"assets/graphsource_adjacent.2cbb7bf0.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"heading",id:"_tutorial_demo_code_3",renderas:"sect3",content:"Tutorial Demo Code"},{tagname:"para","class":"dguide-para",id:"graph_builder-AdjacentNodesGraphBuilder-404-simpara-010",content:'The demo <a href="..\\..\\demos\\databinding\\adjacentnodesbuilder\\index.html" target="blank" class="demo-link" title="Uses class &lt;code&gt;AdjacentNodesGraphBuilder&lt;/code&gt; to interactively build and modify a graph from business data.">Adjacent Nodes Graph Builder</a> demo\nshows how to use a <span class="api">AdjacentNodesGraphBuilder</span> to build a graph from user data.'}]},{tagname:"section",id:"graph_builder-grouping",title:"Hierarchical Organization of General Graphs",children:[{tagname:"para","class":"dguide-para",id:"graph_builder-grouping-405-simpara-001",content:'The classes that create a general graph structure, namely\n<a href="#/dguide/graph_builder-GraphBuilder">GraphBuilder</a> and\n<a href="#/dguide/graph_builder-AdjacentNodesGraphBuilder">AdjacentNodesGraphBuilder</a>\nsupport the creation of a hierarchical organization using the following properties:'},{tagname:"para",content:'<ul id="graph_builder-grouping-405-itemizedlist-001"><li id="graph_builder-grouping-405-listitem-001"><p id="graph_builder-grouping-405-simpara-002"><api-link id="graph_builder-grouping-405-api-link-001" data-member="groupsSource" data-text="groupsSource" data-type="yfiles.binding.GraphBuilder"></api-link>\ndenotes the business objects from the data model for which group nodes will be created.</p></li><li id="graph_builder-grouping-405-listitem-002"><p id="graph_builder-grouping-405-simpara-003"><api-link id="graph_builder-grouping-405-api-link-002" data-member="groupBinding" data-text="groupBinding" data-type="yfiles.binding.GraphBuilder"></api-link> and <api-link id="graph_builder-grouping-405-api-link-003" data-member="parentGroupBinding" data-text="parentGroupBinding" data-type="yfiles.binding.GraphBuilder"></api-link>\ndenote bindings to get from the business object for a (group) node to the business\nobject for its containing group node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"graph_builder-grouping-405-simpara-004",content:'The hierarchical organization of a grouped graph will be created using the\ncollection returned by the <span class="api">groupsSource</span> property and the bindings denoted by\nthe <span class="api">groupBinding</span> and <span class="api">parentGroupBinding</span> properties.'},{tagname:"example",id:"graph_builder-grouping-405-example-001",title:"Example configuration of a GraphBuilder for grouped graphs",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-grouping-405-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>const graphBuilder = new yfiles.binding.GraphBuilder(graphComponent.graph)\r\n// Stores the nodes of the graph\r\ngraphBuilder.nodesSource = nodesSource\r\n// Stores the edges of the graph\r\ngraphBuilder.edgesSource = edgesSource\r\n// Stores the group nodes of the graph\r\ngraphBuilder.groupsSource = groupsSource\r\n// Identifies the property of an edge object that contains the source node's id\r\ngraphBuilder.sourceNodeBinding = 'fromNode'\r\n// Identifies the property of an edge object that contains the target node's id\r\ngraphBuilder.targetNodeBinding = 'toNode'\r\n// Identifies the id property of a node object\r\ngraphBuilder.nodeIdBinding = 'id'\r\n// Identifies the property of a node object that contains its group's id\r\ngraphBuilder.groupBinding = 'group'\r\n// Identifies the property of a group node object that contains its parent group id\r\ngraphBuilder.parentGroupBinding = 'parentGroup'\r\n// Identifies the id property of a group node object\r\ngraphBuilder.groupIdBinding = 'id'\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-grouping-405-simpara-005",content:'If the business object that a binding evaluates to is contained in the\ncollection returned by the <span class="api">groupsSource</span> property, the corresponding group node\nis set as the parent group of the (group) node which corresponds to the\nbusiness object that is used as the binding’s data context.'},{tagname:"example",id:"graph_builder-grouping-405-example-002",title:"Example data with grouping information as source for GraphBuilder",content:"<pre class=\"programlisting javascript\" id=\"graph_builder-grouping-405-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>const nodesSource = [\r\n  {\r\n    id: 0,\r\n    group: 'group0',\r\n    position: 'Chief Executive Officer',\r\n    name: 'Eric Joplin',\r\n    email: 'ejoplin@yoyodyne.com',\r\n    businessUnit: 'Executive Unit'\r\n  },\r\n  {\r\n    id: 1,\r\n    group: 'group1',\r\n    position: 'Vice President of Engineering',\r\n    name: 'Mildred Shark',\r\n    email: 'mshark@yoyodyne.com',\r\n    businessUnit: 'Engineering'\r\n  },\r\n  {\r\n    id: 2,\r\n    group: 'group1',\r\n    position: 'Engineering Manager',\r\n    name: 'Martha Barnes',\r\n    email: 'mbarnes@yoyodyne.com',\r\n    businessUnit: 'Engineering'\r\n  },\r\n  {\r\n    id: 3,\r\n    group: 'group10',\r\n    position: 'Senior Tool Designer',\r\n    name: 'Maria Dossantos',\r\n    email: 'mdossantos@yoyodyne.com',\r\n    businessUnit: 'Engineering'\r\n  },\r\n  {\r\n    id: 4,\r\n    group: 'group10',\r\n    position: 'Tool Designer',\r\n    name: 'Hector Donald',\r\n    email: 'hdonald@yoyodyne.com',\r\n    businessUnit: 'Engineering'\r\n  },\r\n  {\r\n    id: 5,\r\n    group: 'group10',\r\n    position: 'Tool Designer',\r\n    name: 'Michelle Douglas',\r\n    email: 'mdouglas@yoyodyne.com',\r\n    businessUnit: 'Engineering'\r\n  }\r\n]\r\nconst edgesSource = [\r\n  {\r\n    fromNode: 0,\r\n    toNode: 1\r\n  },\r\n  {\r\n    fromNode: 1,\r\n    toNode: 2\r\n  },\r\n  {\r\n    fromNode: 2,\r\n    toNode: 3\r\n  },\r\n  {\r\n    fromNode: 3,\r\n    toNode: 4\r\n  },\r\n  {\r\n    fromNode: 3,\r\n    toNode: 5\r\n  }\r\n]\r\nconst groupsSource = [\r\n  { id: 'group0' },\r\n  { id: 'group1' },\r\n  {\r\n    id: 'group10',\r\n    parentGroup: 'group1'\r\n  }\r\n]\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"graph_builder-grouping-405-simpara-006",content:'The data context for the <span class="api">groupBinding</span> is a business object from the data model that\ncorresponds to a node in the graph.\nThe business object that is the data context for the <span class="api">parentGroupBinding</span> corresponds\nto a group node, i.e., it is taken from the collection returned by the\n<span class="api">groupsSource</span> property.'},{tagname:"figure","class":"image",title:"Grouped graph built from the above examples",id:"graph_builder-grouping-405-figure-001","float":0,children:[{tagname:"img",src:"assets/graphsource_grouped.23934aeb.jpg",alt:"",title:'<para class="dguide-para"></para>'}]}]}]},{tagname:"section",id:"customizing_graph",title:"Customizing the Graph",children:[{tagname:"para","class":"dguide-para note",id:"customizing_graph-013-note-001",content:'<p id="customizing_graph-013-simpara-001">To fully understand this chapter it is important that you are familiar with the graph implementation of yFiles for HTML\nas introduced in <a href="#/dguide/graph">the graph model chapter</a>.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-013-simpara-002",content:"In this chapter we describe several customizations of the graph and its elements.\nIt contains stand-alone sections that do not depend on each other. We recommend that you just\nread the parts that are currently interesting to you, and come back later if you need more information."},{tagname:"para","class":"dguide-para important",id:"customizing_graph-013-important-001",content:'<p id="customizing_graph-013-simpara-003">You should not implement the <span class="api">IGraph</span> interface or any of the <span class="api">IModelItem</span>s.\nInstead, we recommend to use the customization options described in this chapter.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-013-simpara-004",content:"This chapter contains the following sections."},{tagname:"para",content:'<dl id="customizing_graph-013-variablelist-001"><dt id="customizing_graph-013-term-001"><a href="#/dguide/customizing_graph-graph_decorator">Decorating Graph Elements</a></dt><dd id="customizing_graph-013-listitem-001"><p id="customizing_graph-013-simpara-005">Describes how you can decorate graph elements with custom user interaction behavior and\nwith specific visualizations for the selection, focus, and custom highlight.</p></dd><dt id="customizing_graph-013-term-002"><a href="#/dguide/customizing_graph-binding_data">Associating Data with Graph Elements</a></dt><dd id="customizing_graph-013-listitem-002"><p id="customizing_graph-013-simpara-006">Shows how you can store custom data for the graph elements.</p></dd><dt id="customizing_graph-013-term-003"><a href="#/dguide/customizing_graph-graph_events">Reacting to Graph Changes</a></dt><dd id="customizing_graph-013-listitem-003"><p id="customizing_graph-013-simpara-007">Explains how you can run custom code by listening for graph changes.\nLists all events that are dispatched by the graph.</p></dd></dl>'},{tagname:"section",id:"customizing_graph-graph_decorator",title:"Decorating Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator-406-simpara-001",content:'Many aspects of the <a href="#/dguide/customizing_interaction">user interaction</a> and of the\n<a href="#/dguide/customizing_indicators">visualization of selection, focus, and\ncustom highlight</a> can be customized by implementing a small dedicated interface.\nTo use such a customization, you can <span class="def">decorate</span> the whole graph or any of its elements\nwith your implementation.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator-406-simpara-002",content:'<span class="api">IGraph</span> provides an instance of <api-link id="customizing_graph-graph_decorator-406-api-link-001" data-member="" data-text="GraphDecorator" data-type="yfiles.graph.GraphDecorator"></api-link> for this purpose. You can get it\nfrom the graph with the <api-link id="customizing_graph-graph_decorator-406-api-link-002" data-member="decorator" data-text="IGraph.decorator" data-type="yfiles.graph.IGraph"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator-406-simpara-003",content:'<span class="api">GraphDecorator</span> is organized in two levels.\n<span class="api">GraphDecorator</span> itself provides a decorator for each graph element type, namely\n<api-link id="customizing_graph-graph_decorator-406-api-link-003" data-member="" data-text="NodeDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>, <api-link id="customizing_graph-graph_decorator-406-api-link-004" data-member="" data-text="EdgeDecorator" data-type="yfiles.graph.EdgeDecorator"></api-link>, <api-link id="customizing_graph-graph_decorator-406-api-link-005" data-member="" data-text="LabelDecorator" data-type="yfiles.graph.LabelDecorator"></api-link>,\n<api-link id="customizing_graph-graph_decorator-406-api-link-006" data-member="" data-text="PortDecorator" data-type="yfiles.graph.PortDecorator"></api-link>, and <api-link id="customizing_graph-graph_decorator-406-api-link-007" data-member="" data-text="BendDecorator" data-type="yfiles.graph.BendDecorator"></api-link>.\nThen, each of these type-specific decorators provides properties to define a certain aspect of\nuser interaction or visualization for its element type.\nThe following example will make this more clear.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator-406-simpara-004",content:'For example, the following decorator is responsible for the\n<span class="api">INodeSizeConstraintProvider</span> interface:'},{tagname:"example",id:"customizing_graph-graph_decorator-406-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator-406-programlisting-001" language="javascript" format="linespecific"><code>const decorator = graph.decorator.nodeDecorator.sizeConstraintProviderDecorator\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"customizing_graph-graph_decorator-406-note-001",content:'<p id="customizing_graph-graph_decorator-406-simpara-005">Aside from the information provided in this section, you typically don’t need to care about the details\nof the <a href="#/dguide/customizing_concepts_lookup">lookup concept</a> and its related types to decorate graph elements.</p>'},{tagname:"para","class":"dguide-para tip",id:"customizing_graph-graph_decorator-406-tip-001",content:'<p id="customizing_graph-graph_decorator-406-simpara-006">Explore the available decorators for each element type by\nsimple code completion or looking into the API documentation.</p>'},{tagname:"section",id:"customizing_graph-graph_decorator_set",title:"Setting a Decoration",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_set-407-simpara-001",content:"Once you got a specific decorator, you can decorate an item in the following ways:"},{tagname:"para",content:'<ul id="customizing_graph-graph_decorator_set-407-itemizedlist-001"><li id="customizing_graph-graph_decorator_set-407-listitem-001"><p id="customizing_graph-graph_decorator_set-407-simpara-002">Set a single implementation</p></li><li id="customizing_graph-graph_decorator_set-407-listitem-002"><p id="customizing_graph-graph_decorator_set-407-simpara-003">Wrap the default implementation, i.e. the implementation that would be used without your decoration</p></li><li id="customizing_graph-graph_decorator_set-407-listitem-003"><p id="customizing_graph-graph_decorator_set-407-simpara-004">Set a factory that creates item-specific implementations</p></li><li id="customizing_graph-graph_decorator_set-407-listitem-004"><p id="customizing_graph-graph_decorator_set-407-simpara-005">Hide the default implementation</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_set-407-simpara-006",content:"For each of these options, you can either decorate all elements of that type or specify a predicate\nthat selects the items that are actually decorated."},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_set-407-simpara-007",content:'All corresponding methods are specified by <api-link id="customizing_graph-graph_decorator_set-407-api-link-001" data-member="" data-text="LookupDecorator&lt;TDecoratedType,TInterface&gt;" data-type="yfiles.graph.LookupDecorator"></api-link>\nand listed in the following.'},{tagname:"para",content:'<dl id="customizing_graph-graph_decorator_set-407-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_graph-graph_decorator_set-407-term-001"><api-link id="customizing_graph-graph_decorator_set-407-api-link-002" data-member="setImplementation(TInterface)" data-text="setImplementation(implementation:&#xA0;TInterface):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dt id="customizing_graph-graph_decorator_set-407-term-002"><api-link id="customizing_graph-graph_decorator_set-407-api-link-003" data-member="setImplementation(system.Predicate,TInterface)" data-text="setImplementation(predicate:&#xA0;Predicate&lt;TDecoratedType&gt;, implementation:&#xA0;TInterface):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dd id="customizing_graph-graph_decorator_set-407-listitem-005">\n<p id="customizing_graph-graph_decorator_set-407-simpara-008">Decorates all items (the selected items) with a single implementation.</p>\n</dd>\n<dt id="customizing_graph-graph_decorator_set-407-term-003"><api-link id="customizing_graph-graph_decorator_set-407-api-link-004" data-member="setFactory(system.Func2)" data-text="setFactory(factory:&#xA0;Func2&lt;TDecoratedType,&#xA0;TInterface&gt;):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dt id="customizing_graph-graph_decorator_set-407-term-004"><api-link id="customizing_graph-graph_decorator_set-407-api-link-005" data-member="setFactory(system.Predicate,system.Func2)" data-text="setFactory(predicate:&#xA0;Predicate&lt;TDecoratedType&gt;, factory:&#xA0;Func2&lt;TDecoratedType,&#xA0;TInterface&gt;):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dd id="customizing_graph-graph_decorator_set-407-listitem-006">\n<p id="customizing_graph-graph_decorator_set-407-simpara-009">Decorates all items (the selected items) with a factory method of the desired implementations.\nIn this case, the only parameter of the factory method is the graph element.</p>\n</dd>\n<dt id="customizing_graph-graph_decorator_set-407-term-005"><api-link id="customizing_graph-graph_decorator_set-407-api-link-006" data-member="setImplementationWrapper(system.Func3)" data-text="setImplementationWrapper(factory:&#xA0;Func3&lt;TDecoratedType,&#xA0;TInterface,&#xA0;TInterface&gt;):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dd id="customizing_graph-graph_decorator_set-407-listitem-007">\n<p id="customizing_graph-graph_decorator_set-407-simpara-010">Decorates all items (the selected items) with a factory method of the desired implementations.\nIn this case, the parameters of the factory method are the graph element and the default implementation,\ni.e. the implementation that would be used without this decoration.</p>\n</dd>\n<dt id="customizing_graph-graph_decorator_set-407-term-006"><api-link id="customizing_graph-graph_decorator_set-407-api-link-007" data-member="hideImplementation(system.Predicate)" data-text="hideImplementation(predicate:&#xA0;Predicate&lt;TDecoratedType&gt;):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.LookupDecorator"></api-link></dt><dd id="customizing_graph-graph_decorator_set-407-listitem-008">\n<p id="customizing_graph-graph_decorator_set-407-simpara-011">Hides the default implementation, i.e. the implementation that would be used without this decoration.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_graph-graph_decorator_remove",title:"Removing a Decoration",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_remove-408-simpara-001",content:'All of the above methods that set a decoration return an instance of <api-link id="customizing_graph-graph_decorator_remove-408-api-link-001" data-member="" data-text="IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link>.\nStore this instance if you intend to remove the decoration later, and simply ignore it otherwise.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_remove-408-simpara-002",content:'To remove a decoration, get the graph’s <api-link id="customizing_graph-graph_decorator_remove-408-api-link-002" data-member="" data-text="ILookupDecorator" data-type="yfiles.graph.ILookupDecorator"></api-link> and use its\n<api-link id="customizing_graph-graph_decorator_remove-408-api-link-003" data-member="removeLookup(yfiles.lang.Class,yfiles.graph.IContextLookupChainLink)" data-text="removeLookup" data-type="yfiles.graph.ILookupDecorator"></api-link> method\nto remove the chain link instance.\nThe following example shows how to remove a node size constraint provider.'},{tagname:"example",id:"customizing_graph-graph_decorator_remove-408-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_remove-408-programlisting-001" language="javascript" format="linespecific"><code>// register the decoration\r\n// store the link in a field\r\nchainLink = graph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setImplementation(\r\n  new yfiles.input.NodeSizeConstraintProvider(\r\n    new yfiles.geometry.Size(20, 20),\r\n    new yfiles.geometry.Size(200, 200)\r\n  )\r\n)\r\n\r\n// ... somewhere later ...\r\n\r\n// unregister the decoration\r\ngraph.decorator.nodeDecorator.sizeConstraintProviderDecorator.decorator.removeLookup(\r\n  yfiles.graph.INode.$class,\r\n  chainLink\r\n)\n</code></pre>'}]},{tagname:"section",id:"customizing_graph-graph_decorator_examples",title:"Examples",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-001",content:"This first example shows how to disable size constraints for nodes."},{tagname:"example",id:"customizing_graph-graph_decorator_examples-409-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-001" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.sizeConstraintProviderDecorator.hideImplementation()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-002",content:"The next example shows how to set the same size constraint provider for all nodes."},{tagname:"example",id:"customizing_graph-graph_decorator_examples-409-informalexample-002",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-002" language="javascript" format="linespecific"><code>const constraintProvider = new yfiles.input.NodeSizeConstraintProvider(\r\n  new yfiles.geometry.Size(20, 20),\r\n  new yfiles.geometry.Size(200, 200)\r\n)\r\ngraph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setImplementation(\r\n  constraintProvider\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-003",content:"If the implementation needs to know the item it handles, set a factory method which is invoked for\neach item.\nThe following example shows how to constrain a node’s size to half its current size at minimum\nand double its current size at maximum."},{tagname:"example",id:"customizing_graph-graph_decorator_examples-409-informalexample-003",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-003" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setFactory(\r\n  node =>\r\n    new yfiles.input.NodeSizeConstraintProvider(\r\n      new yfiles.geometry.Size(node.layout.width / 2, node.layout.height / 2),\r\n      new yfiles.geometry.Size(node.layout.width * 2, node.layout.height * 2)\r\n    )\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-004",content:"Another common use case is to modify the default implementation. This can be done by decorating\nthe default implementation in a wrapper implementation. The following example shows how to constrain\na node’s size to half the values the default implementation does."},{tagname:"example",id:"customizing_graph-graph_decorator_examples-409-informalexample-004",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-004" language="javascript" format="linespecific"><code>// Wraps an existing INodeSizeConstraintProvider to return half its constraint values\r\nfunction wrapConstraintProvider(provider) {\r\n  return new yfiles.input.INodeSizeConstraintProvider({\r\n    getMinimumSize(node) {\r\n      return provider.getMinimumSize(node).multiply(0.5)\r\n    },\r\n\r\n    getMaximumSize(node) {\r\n      return provider.getMaximumSize(node).multiply(0.5)\r\n    },\r\n\r\n    getMinimumEnclosedArea(node) {\r\n      return provider.getMinimumEnclosedArea(node)\r\n    }\r\n  })\r\n}\n</code></pre><pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-005" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setImplementationWrapper(\r\n  (node, wrapped) => {\r\n    if (wrapped == null) {\r\n      return null\r\n    }\r\n    return new NodeSizeConstraintProviderWrapper(wrapped)\r\n  }\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-005",content:"Note that it is always possible that the default implementation is <code>null</code>, hence the <code>null</code> check."},{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_decorator_examples-409-simpara-006",content:"As already mentioned, all methods have an overload which uses a given predicate to\ndecorate only items that meet the predicate’s conditions. The following example shows\nhow to constrain only nodes which are “normal” nodes, i.e., not group nodes:"},{tagname:"example",id:"customizing_graph-graph_decorator_examples-409-informalexample-005",content:'<pre class="programlisting javascript" id="customizing_graph-graph_decorator_examples-409-programlisting-006" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setImplementation(\r\n  node => \'constrained\' === node.tag,\r\n  new yfiles.input.NodeSizeConstraintProvider(\r\n    new yfiles.geometry.Size(20, 20),\r\n    new yfiles.geometry.Size(200, 200)\r\n  )\r\n)\n</code></pre>'}]}]},{tagname:"section",id:"customizing_graph-binding_data",title:"Associating Data with Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-001",content:'It is often necessary to connect the graph items with the data model, or <strong id="customizing_graph-binding_data-410-emphasis-001" class="bold" role="bold">business data</strong>, they actually represent.\nyFiles for HTML provides two options to store the data linked with the graph items:'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-002",content:'Most conveniently, business data can be associated with a graph element using the <api-link id="customizing_graph-binding_data-410-api-link-001" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link>\nproperty which is common for all model item types. These so-called <strong id="customizing_graph-binding_data-410-emphasis-002" class="bold" role="bold">user tags</strong> are described in\n<a href="#/dguide/graph_model-connecting_business_models">the general chapter about the graph model</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-003",content:'An alternative way to bind data to model items or even the graph itself is provided by the <api-link id="customizing_graph-binding_data-410-api-link-002" data-member="" data-text="IMapper&lt;K,V&gt;" data-type="yfiles.collections.IMapper"></api-link> interface.\n<span class="api">IMapper&lt;K,V></span>s are map-like implementations which bind a value of type V to a given key of type K,\nthe key typically is a graph item,\ne.g. a node.\n<span class="api">IMapper&lt;K,V></span>s are used to provide additional information for layout algorithms, see section <a href="#/dguide/layout-layout_data">Layout Data</a>.\nThey can also be used to store additional data which is not part of the actual business data.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-004",content:'The serialization and deserialization of <span class="api">IMapper&lt;K,V></span>s as well as user tags to the GraphML file format is\nsupported by the GraphML reading and writing support, see section <a href="#/dguide/customizing_io_serialization-basics">Adding Custom Data for Serialization</a>.'},{tagname:"para",content:'<dl id="customizing_graph-binding_data-410-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_graph-binding_data-410-term-001"><api-link id="customizing_graph-binding_data-410-api-link-003" data-member="get" data-text="get(K&#xA0;key):&#xA0;V " data-type="yfiles.collections.IMapper"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-001">\n<p id="customizing_graph-binding_data-410-simpara-005">Gets the value which is associated with the key.\n  The value which is returned for non-set entries is not specified. Most implementations\n  in yFiles for HTML return <code>null</code>. <span class="api">Mapper&lt;K,V></span> optionally\n  allows defining a\n  <span class="api">defaultValue</span> for non-set entries.</p>\n</dd>\n<dt id="customizing_graph-binding_data-410-term-002"><api-link id="customizing_graph-binding_data-410-api-link-004" data-member="set" data-text="set(key:&#xA0;K, value:&#xA0;V):&#xA0;void " data-type="yfiles.collections.IMapper"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-002">\n<p id="customizing_graph-binding_data-410-simpara-006">Sets the value for the given key. Overwrites existing values.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-007",content:'Note that some <span class="api">IMapper&lt;K,V></span> implementations are read-only, i.e. calling\n<api-link id="customizing_graph-binding_data-410-api-link-005" data-member="set" data-text="set" data-type="yfiles.collections.IMapper"></api-link> won’t have an effect.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-008",content:'The default implementation is <api-link id="customizing_graph-binding_data-410-api-link-006" data-member="" data-text="Mapper&lt;K,V&gt;" data-type="yfiles.collections.Mapper"></api-link> which is backed by a map.\nIt is a read/write implementation of <span class="api">IMapper&lt;K,V></span> and additionally allows to define a\n<api-link id="customizing_graph-binding_data-410-api-link-007" data-member="defaultValue" data-text="defaultValue" data-type="yfiles.collections.Mapper"></api-link> for non-set entries.'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-009",content:'The factory method <api-link id="customizing_graph-binding_data-410-api-link-008" data-member="fromConstant(V)" data-text="IMapper&lt;K,&#xA0;V&gt;.fromConstant&lt;K,V&gt;" data-type="yfiles.collections.IMapper"></api-link> creates an <span class="api">IMapper&lt;K,V></span> implementation\nwhich returns the given instance for all keys.\nThe factory method <api-link id="customizing_graph-binding_data-410-api-link-009" data-member="fromDelegate(yfiles.graph.MapperDelegate)" data-text="IMapper&lt;K,&#xA0;V&gt;.fromDelegate&lt;K,V&gt;" data-type="yfiles.collections.IMapper"></api-link>\nreturns an <span class="api">IMapper&lt;K,V></span> implementation which delegates to the given <code>Function</code> to return values for keys.\nNote that both implementations are read-only.'
},{tagname:"example",id:"customizing_graph-binding_data-410-example-001",title:"Creating mapper implementations",content:'<pre class="programlisting javascript" id="customizing_graph-binding_data-410-programlisting-001" language="javascript" format="linespecific"><code>// creating the default implementation\r\nconst defaultMapper = new yfiles.collections.Mapper()\r\n\r\n// creating a mapper providing the same instance for each key\r\nconst constantMapper = yfiles.collections.IMapper.fromConstant(\'Always the same.\')\r\n\r\n// creating a mapper using a delegate\r\n// to return the first label\'s text\r\nconst delegateMapper = yfiles.collections.IMapper.fromDelegate(\r\n  node => (node.labels.count > 0 ? node.labels.get(0).text : null)\r\n)\n</code></pre>'},{tagname:"heading",id:"_the_api_name_text_imapperregistry",renderas:"sect3",content:'The <span class="api">IMapperRegistry</span>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-010",content:'Each <span class="api">IGraph</span> has an <api-link id="customizing_graph-binding_data-410-api-link-010" data-member="" data-text="IMapperRegistry" data-type="yfiles.graph.IMapperRegistry"></api-link> which provides a means to associate <span class="api">IMapper&lt;K,V></span>s with that graph.\nThe registry can be obtained from <span class="api">IGraph</span>’s <api-link id="customizing_graph-binding_data-410-api-link-011" data-member="mapperRegistry" data-text="mapperRegistry" data-type="yfiles.graph.IGraph"></api-link> property.\nAn <span class="api">IMapper&lt;K,V></span> has to be added to the registry using a unique object, the tag.\nThis object can be used to retrieve the mapper from the registry later.'},{tagname:"para","class":"dguide-para note",id:"customizing_graph-binding_data-410-note-001",content:'<p id="customizing_graph-binding_data-410-simpara-011">Depending on the implementation, “unique” means there is no <strong id="customizing_graph-binding_data-410-emphasis-003" class="bold" role="bold">equal</strong> tag in the same registry\nor no tags with the same hash code. Although not mandatory, we recommend using different strings as tags.</p>'},{tagname:"example",id:"customizing_graph-binding_data-410-example-002",title:"Adding and retrieving mappers",content:'<pre class="programlisting javascript" id="customizing_graph-binding_data-410-programlisting-002" language="javascript" format="linespecific"><code>// Using a constant for the tag makes it available all over the application\r\nconst mapperTag = \'my.application.MapperTag\'\r\n\r\n// register the mapper with the tag\r\nfunction registerMapper(graph) {\r\n  graph.mapperRegistry.addMapper(\r\n    yfiles.graph.INode.$class,\r\n    yfiles.lang.String.$class,\r\n    mapperTag,\r\n    new yfiles.collections.Mapper()\r\n  )\r\n}\r\n\r\n// retrieve the mapper with the tag and get the mapped value for the given item\r\nfunction getMappedValue(graph, node) {\r\n  const mapper = graph.mapperRegistry.getMapper(mapperTag)\r\n  return mapper.get(node)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-012",content:'Besides adding existing <span class="api">IMapper&lt;K,V></span> instances the <span class="api">IMapperRegistry</span> provides factory methods to create\n<span class="api">IMapper&lt;K,V></span> instances and add them immediately:'},{tagname:"para",content:'<dl id="customizing_graph-binding_data-410-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="customizing_graph-binding_data-410-term-003" class="title" role="title">Adding existing mappers</dt><dt id="customizing_graph-binding_data-410-term-004"><api-link id="customizing_graph-binding_data-410-api-link-012" data-member="addMapper(yfiles.lang.Class,yfiles.lang.Class,Object,yfiles.collections.IMapper)" data-text="addMapper&lt;K,V&gt;(keyType:&#xA0;Class, valueType:&#xA0;Class, tag:&#xA0;Object, mapper:&#xA0;IMapper&lt;K,&#xA0;V&gt;):&#xA0;void" data-type="yfiles.graph.IMapperRegistry"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-003">\n<p id="customizing_graph-binding_data-410-simpara-013">Registers the given mapper with the given tag.</p>\n</dd>\n<dt id="customizing_graph-binding_data-410-term-005" class="title" role="title">Creating and adding mappers</dt><dt id="customizing_graph-binding_data-410-term-006"><api-link id="customizing_graph-binding_data-410-api-link-013" data-member="createMapper(yfiles.lang.Class,yfiles.lang.Class,Object)" data-text="createMapper&lt;K,V&gt;(keyType:&#xA0;Class, valueType:&#xA0;Class, tag:&#xA0;Object):&#xA0;Mapper&lt;K,&#xA0;V&gt;" data-type="yfiles.graph.IMapperRegistry"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-004">\n<p id="customizing_graph-binding_data-410-simpara-014">Creates a <api-link id="customizing_graph-binding_data-410-api-link-014" data-member="" data-text="Mapper&lt;K,V&gt;" data-type="yfiles.collections.Mapper"></api-link>, registers it with the given tag,\nand returns the newly created instance.</p>\n</dd>\n<dt id="customizing_graph-binding_data-410-term-007"><api-link id="customizing_graph-binding_data-410-api-link-015" data-member="createConstantMapper(yfiles.lang.Class,yfiles.lang.Class,Object,V)" data-text="createConstantMapper&lt;K,V&gt;(keyType:&#xA0;Class, valueType:&#xA0;Class, tag:&#xA0;Object, constant:&#xA0;V):&#xA0;IMapper&lt;K,&#xA0;V&gt;" data-type="yfiles.graph.IMapperRegistry"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-005">\n<p id="customizing_graph-binding_data-410-simpara-015">Creates an <span class="api">IMapper&lt;K,V></span> which always returns the given value, registers it with the given tag,\nand returns the newly created instance.</p>\n</dd>\n<dt id="customizing_graph-binding_data-410-term-008"><api-link id="customizing_graph-binding_data-410-api-link-016" data-member="createDelegateMapper(yfiles.lang.Class,yfiles.lang.Class,Object,yfiles.graph.MapperDelegate)" data-text="createDelegateMapper&lt;K,V&gt;(keyType:&#xA0;Class, valueType:&#xA0;Class, tag:&#xA0;Object, getter:&#xA0;MapperDelegate&lt;K,&#xA0;V&gt;):&#xA0;IMapper&lt;K,&#xA0;V&gt;" data-type="yfiles.graph.IMapperRegistry"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-006">\n<p id="customizing_graph-binding_data-410-simpara-016">Creates an <span class="api">IMapper&lt;K,V></span> which delegates to the given <code>Function</code> to return a value, registers it with the given tag,\nand returns the newly created instance.</p>\n</dd>\n<dt id="customizing_graph-binding_data-410-term-009" class="title" role="title">Retrieving a registered mapper</dt><dt id="customizing_graph-binding_data-410-term-010"><api-link id="customizing_graph-binding_data-410-api-link-017" data-member="getMapper(Object)" data-text="getMapper&lt;K,V&gt;(tag:&#xA0;Object):&#xA0;IMapper&lt;K,&#xA0;V&gt;" data-type="yfiles.graph.IMapperRegistry"></api-link></dt><dd id="customizing_graph-binding_data-410-listitem-007">\n<p id="customizing_graph-binding_data-410-simpara-017">Returns the mapper which is registered under the given tag.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_graph-binding_data-410-simpara-018",content:"The following example summarizes all we have learned in this chapter:"},{tagname:"example",id:"customizing_graph-binding_data-410-example-003",title:"Working with IMapper&lt;K,V>s and the IMapperRegistry",content:'<pre class="programlisting javascript" id="customizing_graph-binding_data-410-programlisting-003" language="javascript" format="linespecific"><code>// Using a constant for the tag makes it available all over the application\r\nconst myTag = \'my.application.MyTag\'\r\n\r\n// create and register a new mapper\r\n// create some nodes and map values to them\r\nfunction initializeGraph(graph) {\r\n  // create a new mapper instance\r\n  const mapper = new yfiles.collections.Mapper()\r\n  // register it\r\n  graph.mapperRegistry.addMapper(\r\n    yfiles.graph.INode.$class,\r\n    yfiles.lang.String.$class,\r\n    myTag,\r\n    mapper\r\n  )\r\n  for (let i = 0; i &lt; 10; i++) {\r\n    const node = graph.createNode()\r\n    // associate a value with a node\r\n    mapper.set(node, \'Index: \' + i)\r\n  }\r\n}\r\n\r\n// read the mapped value of a given node\r\nfunction getNodeValue(graph, node) {\r\n  // retrieve the mapper using the constant value as tag\r\n  const mapper = graph.mapperRegistry.getMapper(myTag)\r\n  // get the mapped value\r\n  return mapper.get(node)\r\n}\r\n\r\n// removes a node\r\n// unmaps the associated value before removing the node\r\nfunction removeNode(graph, node) {\r\n  // retrieve the mapper using the constant value as tag\r\n  const mapper = graph.mapperRegistry.getMapper(MyTag)\r\n  // remove the mapping for the removed node - the delete method is only available\r\n  // for the concrete yfiles.collections.Mapper type. It is not part of the interface.\r\n  mapper.delete(node)\r\n  // remove the node itself\r\n  graph.remove(node)\r\n}\n</code></pre>'}]},{tagname:"section",id:"customizing_graph-graph_events",title:"Reacting to Graph Changes",children:[{tagname:"para","class":"dguide-para",id:"customizing_graph-graph_events-411-simpara-001",content:"IGraph provides a comprehensive set of events for both structural changes\nof the graph like node creation or deletion as well as for visual changes like change of style, position, or size."},{tagname:"para","class":"dguide-para important",id:"customizing_graph-graph_events-411-important-001",content:'<p id="customizing_graph-graph_events-411-simpara-002">IGraph dispatches events upon <strong id="customizing_graph-graph_events-411-emphasis-001" class="bold" role="bold">each change</strong>, not only user driven but also by the program.\nThis includes events dispatched during loading where a large number of elements are being created,\nevents upon undo and redo actions, as well as events during an automatic layout.\nBriefly said, listening for events dispatched by <span class="api">IGraph</span> may result in a huge number of events\na developer is potentially not interested in.\nFor almost\nall use cases, a developer wants to listen for user driven changes only. These kinds of changes are reported by the\ninput mode used for editing graphs interactively.</p>'},{tagname:"section",id:"_reacting_to_element_creation",title:"Reacting to Element Creation",children:[{tagname:"para","class":"dguide-para",id:"_reacting_to_element_creation-412-simpara-001",content:'These events are dispatched <strong id="_reacting_to_element_creation-412-emphasis-001" class="bold" role="bold">after</strong> the element has been created, i.e. at the time the event is dispatched\nthe element is a valid element of the graph.'},{tagname:"para",content:'<dl id="_reacting_to_element_creation-412-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_element_creation-412-term-001"><api-link id="_reacting_to_element_creation-412-api-link-001" data-member="NodeCreated" data-text="NodeCreated" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_creation-412-listitem-001">\n<p id="_reacting_to_element_creation-412-simpara-002">Dispatched after a node has been created. The newly created node can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_creation-412-api-link-002" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_element_creation-412-term-002"><api-link id="_reacting_to_element_creation-412-api-link-003" data-member="EdgeCreated" data-text="EdgeCreated" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_creation-412-listitem-002">\n<p id="_reacting_to_element_creation-412-simpara-003">Dispatched after an edge has been created. The newly created edge can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_creation-412-api-link-004" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_element_creation-412-term-003"><api-link id="_reacting_to_element_creation-412-api-link-005" data-member="BendAdded" data-text="BendAdded" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_creation-412-listitem-003">\n<p id="_reacting_to_element_creation-412-simpara-004">Dispatched after a bend has been created. The newly created bend can be retrieved from the argument’s\n   <api-link id="_reacting_to_element_creation-412-api-link-006" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_element_creation-412-term-004"><api-link id="_reacting_to_element_creation-412-api-link-007" data-member="LabelAdded" data-text="LabelAdded" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_creation-412-listitem-004">\n<p id="_reacting_to_element_creation-412-simpara-005">Dispatched after a label has been created. The newly created label can be retrieved from the argument’s\n   <api-link id="_reacting_to_element_creation-412-api-link-008" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_element_creation-412-term-005"><api-link id="_reacting_to_element_creation-412-api-link-009" data-member="PortAdded" data-text="PortAdded" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_creation-412-listitem-005">\n<p id="_reacting_to_element_creation-412-simpara-006">Dispatched after a port has been created. The newly created port can be retrieved from the argument’s\n   <api-link id="_reacting_to_element_creation-412-api-link-010" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_element_removal",title:"Reacting to Element Removal",children:[{tagname:"para","class":"dguide-para",id:"_reacting_to_element_removal-413-simpara-001",content:'These events are dispatched <strong id="_reacting_to_element_removal-413-emphasis-001" class="bold" role="bold">after</strong> the element has been removed, i.e. at the time the event is dispatched\nthe element is no longer part of the graph. It also has no reference anymore to its former owner, source, or\ntarget port if applicable. The event arguments, however, provide this information.'},{tagname:"para",content:'<dl id="_reacting_to_element_removal-413-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_element_removal-413-term-001"><api-link id="_reacting_to_element_removal-413-api-link-001" data-member="NodeRemoved" data-text="NodeRemoved" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_removal-413-listitem-001">\n<p id="_reacting_to_element_removal-413-simpara-002">Dispatched after a node has been removed. The removed node can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_removal-413-api-link-002" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former grouping states can be retrieved from the\n  <api-link id="_reacting_to_element_removal-413-api-link-003" data-member="parent" data-text="parent" data-type="yfiles.graph.NodeEventArgs"></api-link> and <api-link id="_reacting_to_element_removal-413-api-link-004" data-member="isGroupNode" data-text="isGroupNode" data-type="yfiles.graph.NodeEventArgs"></api-link> properties.</p>\n</dd>\n<dt id="_reacting_to_element_removal-413-term-002"><api-link id="_reacting_to_element_removal-413-api-link-005" data-member="EdgeRemoved" data-text="EdgeRemoved" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_removal-413-listitem-002">\n<p id="_reacting_to_element_removal-413-simpara-003">Dispatched after an edge has been removed. The removed edge can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_removal-413-api-link-006" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former source and target ports and port owners can be\n  retrieved from the <api-link id="_reacting_to_element_removal-413-api-link-007" data-member="sourcePort" data-text="sourcePort" data-type="yfiles.graph.EdgeEventArgs"></api-link>, <api-link id="_reacting_to_element_removal-413-api-link-008" data-member="targetPort" data-text="targetPort" data-type="yfiles.graph.EdgeEventArgs"></api-link>,\n  <api-link id="_reacting_to_element_removal-413-api-link-009" data-member="sourcePortOwner" data-text="sourcePortOwner" data-type="yfiles.graph.EdgeEventArgs"></api-link>,\n  and <api-link id="_reacting_to_element_removal-413-api-link-010" data-member="targetPortOwner" data-text="targetPortOwner" data-type="yfiles.graph.EdgeEventArgs"></api-link> properties, respectively.</p>\n</dd>\n<dt id="_reacting_to_element_removal-413-term-003"><api-link id="_reacting_to_element_removal-413-api-link-011" data-member="BendRemoved" data-text="BendRemoved" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_removal-413-listitem-003">\n<p id="_reacting_to_element_removal-413-simpara-004">Dispatched after a bend has been removed. The removed bend can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_removal-413-api-link-012" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former owner and index in the owner’s bends collection\n  can be retrieved from the <api-link id="_reacting_to_element_removal-413-api-link-013" data-member="owner" data-text="owner" data-type="yfiles.graph.BendEventArgs"></api-link> and\n  <api-link id="_reacting_to_element_removal-413-api-link-014" data-member="index" data-text="index" data-type="yfiles.graph.BendEventArgs"></api-link> properties, respectively.</p>\n</dd>\n<dt id="_reacting_to_element_removal-413-term-004"><api-link id="_reacting_to_element_removal-413-api-link-015" data-member="LabelRemoved" data-text="LabelRemoved" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_removal-413-listitem-004">\n<p id="_reacting_to_element_removal-413-simpara-005">Dispatched after a label has been removed. The removed label can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_removal-413-api-link-016" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former owner can be retrieved from the\n  <api-link id="_reacting_to_element_removal-413-api-link-017" data-member="owner" data-text="owner" data-type="yfiles.graph.LabelEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_element_removal-413-term-005"><api-link id="_reacting_to_element_removal-413-api-link-018" data-member="PortRemoved" data-text="PortRemoved" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_element_removal-413-listitem-005">\n<p id="_reacting_to_element_removal-413-simpara-006">Dispatched after a port has been removed. The removed port can be retrieved from the argument’s\n  <api-link id="_reacting_to_element_removal-413-api-link-019" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former owner can be retrieved from the\n  <api-link id="_reacting_to_element_removal-413-api-link-020" data-member="owner" data-text="owner" data-type="yfiles.graph.PortEventArgs"></api-link> property.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_grouping_related_changes",title:"Reacting to Grouping Related Changes",children:[{tagname:"para",content:'<dl id="_reacting_to_grouping_related_changes-414-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_grouping_related_changes-414-term-001"><api-link id="_reacting_to_grouping_related_changes-414-api-link-001" data-member="IsGroupNodeChanged" data-text="IsGroupNodeChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_grouping_related_changes-414-listitem-001">\n<p id="_reacting_to_grouping_related_changes-414-simpara-001">Dispatched after a node’s group node state has been changed. The changed node can be retrieved from the argument’s\n  <api-link id="_reacting_to_grouping_related_changes-414-api-link-002" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former grouping state can be retrieved from the\n  <api-link id="_reacting_to_grouping_related_changes-414-api-link-003" data-member="isGroupNode" data-text="isGroupNode" data-type="yfiles.graph.NodeEventArgs"></api-link> property.</p>\n</dd>\n<dt id="_reacting_to_grouping_related_changes-414-term-002"><api-link id="_reacting_to_grouping_related_changes-414-api-link-004" data-member="ParentChanged" data-text="ParentChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_grouping_related_changes-414-listitem-002">\n<p id="_reacting_to_grouping_related_changes-414-simpara-002">Dispatched after a node’s parent has been changed. The reparented node can be retrieved from the argument’s\n  <api-link id="_reacting_to_grouping_related_changes-414-api-link-005" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property. Its former parent can be retrieved from the\n  <api-link id="_reacting_to_grouping_related_changes-414-api-link-006" data-member="parent" data-text="parent" data-type="yfiles.graph.NodeEventArgs"></api-link> property.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_other_structural_changes",title:"Reacting to Other Structural Changes",children:[{tagname:"para",content:'<dl id="_reacting_to_other_structural_changes-415-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_other_structural_changes-415-term-001"><api-link id="_reacting_to_other_structural_changes-415-api-link-001" data-member="EdgePortsChanged" data-text="EdgePortsChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_structural_changes-415-listitem-001">\n<p id="_reacting_to_other_structural_changes-415-simpara-001">Dispatched after the source and / or target port of an edge has been changed. The changed edge can be retrieved\n  from the argument’s <api-link id="_reacting_to_other_structural_changes-415-api-link-002" data-member="item" data-text="item" data-type="yfiles.collections.ItemEventArgs"></api-link> property.\n  Its former source and target ports and port owners can be\n  retrieved from the <api-link id="_reacting_to_other_structural_changes-415-api-link-003" data-member="sourcePort" data-text="sourcePort" data-type="yfiles.graph.EdgeEventArgs"></api-link>, <api-link id="_reacting_to_other_structural_changes-415-api-link-004" data-member="targetPort" data-text="targetPort" data-type="yfiles.graph.EdgeEventArgs"></api-link>,\n  <api-link id="_reacting_to_other_structural_changes-415-api-link-005" data-member="sourcePortOwner" data-text="sourcePortOwner" data-type="yfiles.graph.EdgeEventArgs"></api-link>,\n  and <api-link id="_reacting_to_other_structural_changes-415-api-link-006" data-member="targetPortOwner" data-text="targetPortOwner" data-type="yfiles.graph.EdgeEventArgs"></api-link> properties, respectively.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_tag_changes",title:"Reacting to Tag Changes",children:[{tagname:"para",content:'<dl id="_reacting_to_tag_changes-416-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_tag_changes-416-term-001"><api-link id="_reacting_to_tag_changes-416-api-link-001" data-member="NodeTagChanged" data-text="NodeTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-001">\n<p id="_reacting_to_tag_changes-416-simpara-001">Dispatched after a node’s tag has been changed.</p>\n</dd>\n<dt id="_reacting_to_tag_changes-416-term-002"><api-link id="_reacting_to_tag_changes-416-api-link-002" data-member="EdgeTagChanged" data-text="EdgeTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-002">\n<p id="_reacting_to_tag_changes-416-simpara-002">Dispatched after an edge’s tag has been changed.</p>\n</dd>\n<dt id="_reacting_to_tag_changes-416-term-003"><api-link id="_reacting_to_tag_changes-416-api-link-003" data-member="BendTagChanged" data-text="BendTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-003">\n<p id="_reacting_to_tag_changes-416-simpara-003">Dispatched after a bend’s tag has been changed.</p>\n</dd>\n<dt id="_reacting_to_tag_changes-416-term-004"><api-link id="_reacting_to_tag_changes-416-api-link-004" data-member="LabelTagChanged" data-text="LabelTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-004">\n<p id="_reacting_to_tag_changes-416-simpara-004">Dispatched after a label’s tag has been changed.</p>\n</dd>\n<dt id="_reacting_to_tag_changes-416-term-005"><api-link id="_reacting_to_tag_changes-416-api-link-005" data-member="PortTagChanged" data-text="PortTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-005">\n<p id="_reacting_to_tag_changes-416-simpara-005">Dispatched after a port’s tag has been changed.</p>\n</dd>\n<dt id="_reacting_to_tag_changes-416-term-006"><api-link id="_reacting_to_tag_changes-416-api-link-006" data-member="GraphTagChanged" data-text="GraphTagChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_tag_changes-416-listitem-006">\n<p id="_reacting_to_tag_changes-416-simpara-006">Dispatched after the graph’s tag has been changed.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_layout_and_geometry_changes",title:"Reacting to Layout and Geometry Changes",children:[{tagname:"para",content:'<dl id="_reacting_to_layout_and_geometry_changes-417-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_layout_and_geometry_changes-417-term-001"><api-link id="_reacting_to_layout_and_geometry_changes-417-api-link-001" data-member="NodeLayoutChanged" data-text="NodeLayoutChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_layout_and_geometry_changes-417-listitem-001">\n<p id="_reacting_to_layout_and_geometry_changes-417-simpara-001">Dispatched after a node’s layout has been changed.</p>\n</dd>\n<dt id="_reacting_to_layout_and_geometry_changes-417-term-002"><api-link id="_reacting_to_layout_and_geometry_changes-417-api-link-002" data-member="BendLocationChanged" data-text="BendLocationChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_layout_and_geometry_changes-417-listitem-002">\n<p id="_reacting_to_layout_and_geometry_changes-417-simpara-002">Dispatched after a bend’s location has been changed.</p>\n</dd>\n<dt id="_reacting_to_layout_and_geometry_changes-417-term-003"><api-link id="_reacting_to_layout_and_geometry_changes-417-api-link-003" data-member="LabelLayoutParameterChanged" data-text="LabelLayoutParameterChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_layout_and_geometry_changes-417-listitem-003">\n<p id="_reacting_to_layout_and_geometry_changes-417-simpara-003">Dispatched after a label’s layout model parameter has been changed.</p>\n</dd>\n<dt id="_reacting_to_layout_and_geometry_changes-417-term-004"><api-link id="_reacting_to_layout_and_geometry_changes-417-api-link-004" data-member="PortLocationParameterChanged" data-text="PortLocationParameterChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_layout_and_geometry_changes-417-listitem-004">\n<p id="_reacting_to_layout_and_geometry_changes-417-simpara-004">Dispatched after a port’s location model parameter has been changed.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"_reacting_to_other_property_changes",title:"Reacting to Other Property Changes",children:[{tagname:"para",content:'<dl id="_reacting_to_other_property_changes-418-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_reacting_to_other_property_changes-418-term-001"><api-link id="_reacting_to_other_property_changes-418-api-link-001" data-member="NodeStyleChanged" data-text="NodeStyleChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-001">\n<p id="_reacting_to_other_property_changes-418-simpara-001">Dispatched after a node’s style has been changed.</p>\n</dd>\n<dt id="_reacting_to_other_property_changes-418-term-002"><api-link id="_reacting_to_other_property_changes-418-api-link-002" data-member="EdgeStyleChanged" data-text="EdgeStyleChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-002">\n<p id="_reacting_to_other_property_changes-418-simpara-002">Dispatched after an edge’s style has been changed.</p>\n</dd>\n<dt id="_reacting_to_other_property_changes-418-term-003"><api-link id="_reacting_to_other_property_changes-418-api-link-003" data-member="LabelStyleChanged" data-text="LabelStyleChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-003">\n<p id="_reacting_to_other_property_changes-418-simpara-003">Dispatched after a label’s style has been changed.</p>\n</dd>\n<dt id="_reacting_to_other_property_changes-418-term-004"><api-link id="_reacting_to_other_property_changes-418-api-link-004" data-member="LabelTextChanged" data-text="LabelTextChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-004">\n<p id="_reacting_to_other_property_changes-418-simpara-004">Dispatched after a label’s text has been changed.</p>\n</dd>\n<dt id="_reacting_to_other_property_changes-418-term-005"><api-link id="_reacting_to_other_property_changes-418-api-link-005" data-member="LabelPreferredSizeChanged" data-text="LabelPreferredSizeChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-005">\n<p id="_reacting_to_other_property_changes-418-simpara-005">Dispatched after the preferred size of a label has been changed.</p>\n</dd>\n<dt id="_reacting_to_other_property_changes-418-term-006"><api-link id="_reacting_to_other_property_changes-418-api-link-006" data-member="PortStyleChanged" data-text="PortStyleChanged" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="_reacting_to_other_property_changes-418-listitem-006">\n<p id="_reacting_to_other_property_changes-418-simpara-006">Dispatched after a port’s style has been changed.</p>\n</dd>\n</dl>'}]}]}]},{tagname:"section",id:"customizing_view",title:"Customizing the View",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-014-simpara-001",content:'In this chapter, we describe advanced customizations of the features introduced in the chapter\n<a href="#/dguide/view">Displaying the Graph</a>.'},{tagname:"section",id:"customizing_view_visualizing_arbitrary_objects",title:"Visualizing Arbitrary Objects",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_visualizing_arbitrary_objects-419-simpara-001",content:'The <span class="api">GraphComponent</span> can display visualizations for arbitrary objects, not just graph elements.'},{tagname:"para","class":"dguide-para",id:"customizing_view_visualizing_arbitrary_objects-419-simpara-002",content:"In this section, we describe the steps required to insert a visualization for an arbitrary object into\nthe view with a detailed explanation on what is happening for each step."},{tagname:"para",content:'<ol id="customizing_view_visualizing_arbitrary_objects-419-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-001"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-003"><strong id="customizing_view_visualizing_arbitrary_objects-419-emphasis-001" class="bold" role="bold">Implement an <span class="api">IVisualCreator</span> that creates and updates the visualization of the object.</strong></p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-004"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-001" data-member="" data-text="IVisualCreator" data-type="yfiles.view.IVisualCreator"></api-link> provides the framework with the <span class="api">createVisual</span> and <span class="api">updateVisual</span> methods.\nThese methods manage the actual visual representation — an object of type <api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-002" data-member="" data-text="Visual" data-type="yfiles.view.Visual"></api-link>.\nThose are yFiles for HTML’s most low-level entities for the rendering process and responsible\nfor actually drawing on HTML5’s graphics context. <span class="api">Visual</span>s and the process of\nmanaging them are described in more detail in the <a href="#/dguide/customizing_styles">Customizing Styles</a> chapter,\nsection <a href="#/dguide/custom-styles_basic_ivisual_predefined">Predefined Visuals</a>.\nThe <span class="api">createVisual</span> method is called when the object’s visualization should become visible\nfor the first time. In the subsequent redrawing process of HTML5, the <span class="api">updateVisual</span>\nmethod is called with the <span class="api">Visual</span> object of the previous rendering step. In this\nmethod the <span class="api">Visual</span>’s values can be updated to the object.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-002"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-005"><strong id="customizing_view_visualizing_arbitrary_objects-419-emphasis-002" class="bold" role="bold">Choose an <span class="api">ICanvasObjectDescriptor</span> that fits your needs.</strong></p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-006">The predefined descriptors provided by the <span class="api">ICanvasObjectDescriptor</span> interface fit (almost) all use\ncases. It is almost never required to implement a custom <api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-003" data-member="" data-text="ICanvasObjectDescriptor" data-type="yfiles.view.ICanvasObjectDescriptor"></api-link>.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-003"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-007"><strong id="customizing_view_visualizing_arbitrary_objects-419-emphasis-003" class="bold" role="bold">Choose the <span class="api">ICanvasObjectGroup</span> that should hold the visualization of the object.</strong></p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-008"><span class="api">ICanvasObjectGroup</span>s are containers for objects to render in the view and all objects in one group\nare either rendered before or after another group. They are effectively the layers\nin the visualization. The objects in one container are ordered and the order\ndescribes the rendering order of the objects in the same layer.</p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-009">You can either use one of the predefined <span class="api">ICanvasObjectGroup</span>s or create a new group\nwith the factory method <api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-004" data-member="addGroup()" data-text="addGroup" data-type="yfiles.view.ICanvasObjectGroup"></api-link> on the\n<api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-005" data-member="rootGroup" data-text="rootGroup" data-type="yfiles.view.CanvasComponent"></api-link> of the <span class="api">GraphComponent</span>.</p><p id="view-main_canvas_object_groups" xreflabel="The main canvas object groups">From front to back, the predefined groups are:</p><para><ol id="customizing_view_visualizing_arbitrary_objects-419-orderedlist-002" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-004"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-011"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-006" data-member="inputModeGroup" data-text="inputModeGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains visualizations created by the input modes (such as handles).</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-005"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-012"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-007" data-member="highlightGroup" data-text="highlightGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains the highlight indication.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-006"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-013"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-008" data-member="focusGroup" data-text="focusGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains the focus indication.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-007"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-014"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-009" data-member="selectionGroup" data-text="selectionGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains the selection indication.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-008"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-015"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-010" data-member="contentGroup" data-text="contentGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains the visualizations of all graph elements.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-009"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-016"><api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-011" data-member="backgroundGroup" data-text="backgroundGroup" data-type="yfiles.view.CanvasComponent"></api-link>.\nIt contains visualizations that should be drawn behind everything else and is empty by default.</p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-017">To draw in front of everything else, use the root group (<api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-012" data-member="rootGroup" data-text="rootGroup" data-type="yfiles.view.CanvasComponent"></api-link>).</p></li></ol></para></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-010"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-018"><strong id="customizing_view_visualizing_arbitrary_objects-419-emphasis-004" class="bold" role="bold">Add the object along with your <span class="api">ICanvasObjectDescriptor</span> as a child to that group.</strong></p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-019">On your chosen <span class="api">ICanvasObjectGroup</span>, add the object to visualize along with your\n<span class="api">ICanvasObjectDescriptor</span> using the\n<api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-013" data-member="addChild(Object,yfiles.view.ICanvasObjectDescriptor)" data-text="addChild" data-type="yfiles.view.ICanvasObjectGroup"></api-link> method.</p></li><li id="customizing_view_visualizing_arbitrary_objects-419-listitem-011"><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-020"><strong id="customizing_view_visualizing_arbitrary_objects-419-emphasis-005" class="bold" role="bold">Store the resulting <span class="api">ICanvasObject</span>.</strong></p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-021">As a result of the above call, you get an instance of type <api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-014" data-member="" data-text="ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link>. This\ntype represents the entity that is drawn in the view and is the connection of your\nobject with the visualization of it.</p><p id="customizing_view_visualizing_arbitrary_objects-419-simpara-022">You can use the instance to manipulate the rendering of the object further. You can\nreorder the object in its layer, make it temporarily invisible\n(<api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-015" data-member="visible" data-text="visible" data-type="yfiles.view.ICanvasObject"></api-link>),\n<api-link id="customizing_view_visualizing_arbitrary_objects-419-api-link-016" data-member="remove()" data-text="remove" data-type="yfiles.view.ICanvasObject"></api-link> it from the view entirely, or change\nthe previously set <span class="api">ICanvasObjectDescriptor</span> afterwards, amongst others.</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"customizing_view_visualizing_arbitrary_objects-419-simpara-023",content:"The following example summarizes these steps.\nIt shows how to add a custom visualization to the background."},{tagname:"example",id:"ex_customizing_view_visualizing_arbitrary_objects",title:"Adding a custom visualization to the background",content:'<pre class="programlisting javascript" id="customizing_view_visualizing_arbitrary_objects-419-programlisting-001" language="javascript" format="linespecific"><code>// myVisualCreator is the custom IVisualCreator\r\nconst canvasObject = graphComponent.backgroundGroup.addChild(\r\n  myVisualCreator,\r\n  yfiles.view.ICanvasObjectDescriptor.ALWAYS_DIRTY_INSTANCE\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_view_visualizing_arbitrary_objects-419-simpara-024",content:'The <a href="..\\..\\demos\\layout\\incrementalhierarchic\\index.html" target="blank" class="demo-link" title="The incremental mode of the hierarchic layout style can fit new nodes and edges into the existing drawing.">Incremental Hierarchic Layout</a> demo is a more extensive example that\nvisualizes the layers of a <a href="#/dguide/hierarchical_layout">Hierarchical Layout</a>.'}]},{tagname:"section",id:"customizing_view-z_order",title:"Changing the Z-order",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order-420-simpara-001",content:'For most use cases you work with the <api-link id="customizing_view-z_order-420-api-link-001" data-member="" data-text="GraphModelManager" data-type="yfiles.view.GraphModelManager"></api-link> and\nthe <span class="api">ICanvasObjectGroup</span> properties on the <span class="api">GraphComponent</span> to adjust\nthe z-order of elements in the view to your needs.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order-420-simpara-002",content:'In the following sections,\nwe’ll discuss <a href="#/dguide/customizing_view-z_order_general">the benefits of the default z-order</a>,\nintroduce the <a href="#/dguide/customizing_view-z_order_canvasobject">general API to re-order objects</a>,\nand describe how to <a href="#/dguide/customizing_view-z_order_graphelements">change the z-order of graph elements</a>\nand of the <a href="#/dguide/customizing_view-z_order_indicators">visualizations of selection, focus, and custom highlight</a>.\nFinally, we describe how you can <a href="#/dguide/customizing_view-z_order_custom">implement your own GraphModelManager</a>\nfor full control of the rendering order.'},{tagname:"section",id:"customizing_view-z_order_general",title:"General Thoughts",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_general-421-simpara-001",content:'In our experience, one of the most common reasons to change the default z-order is the rendering of\nnode labels that are placed inside of the bounds of their owner nodes. If two nodes overlap, both\nlabels are fully visible on top of both nodes since by default all labels are drawn in front of all nodes.\nThis makes it hard to decide which label belongs to which node and in general just looks strange to\nmany people. For this usecase it is sufficient to <a href="#/dguide/tab_effect-LabelLayerPolicy">change the LabelLayerPolicy</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_general-421-simpara-002",content:'Similar confusion can arise for example for overlapping nodes and their ports, which can be solved by <a href="#/dguide/tab_effect-PortLayerPolicy">changing the PortLayerPolicy</a>,\nand for edges that cross through unrelated nodes and groups.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_general-421-simpara-003",content:"For all these cases, we recommend considering ways to avoid the overlaps instead of spending time\nfor customizing the z-order. The benefit will be a more readable diagram."},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_general-421-simpara-004",content:'The default z-order realized by <api-link id="customizing_view-z_order_general-421-api-link-001" data-member="" data-text="GraphModelManager" data-type="yfiles.view.GraphModelManager"></api-link> works very well for almost\nall cases except for the ones mentioned above. In particular,'},{tagname:"para",content:'<ul id="customizing_view-z_order_general-421-itemizedlist-001"><li id="customizing_view-z_order_general-421-listitem-001"><p id="customizing_view-z_order_general-421-simpara-005">Rendering labels in the front ensures that their full text is readable even if there are some unavoidable\noverlaps. This is typically the desired behavior for all edge labels and for node labels that are not placed\ninside their owner.</p></li><li id="customizing_view-z_order_general-421-listitem-002"><p id="customizing_view-z_order_general-421-simpara-006">If groups are present, edges are interleaved with the rendering of the groups to make sure that\ntheir first and last segments are not covered by the groups of their source and target nodes.\nSince in addition the rendering of nested groups and nodes must be consistent, some edges might be\nforced to cross in the front (or back) of an unrelated group in an undesired way.</p></li></ul>'}]},{tagname:"section",id:"customizing_view-z_order_hierarchic",title:"The Default Z-order of Edges and Groups",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_hierarchic-422-simpara-001",content:"Clearly, the children of a group should be rendered in front of the group instead\nof behind it. For edges, it’s more complicated. By default,\nedges are drawn behind nodes. However, when a node outside of a group has an edge to a node that is part of a group\nor if the group node itself has an edge to a child of his, then the edge is hidden in a way that\nmakes it unclear where the edge connects to or if there is an edge at all."},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_hierarchic-422-simpara-002",content:"Because of this, yFiles for HTML by default interleaves the rendering order of nodes and edge in such\na way that hierarchical structures are considered. Edges that connect to nodes inside a group\nare drawn on a higher level than edges that connect nodes on the same level as the group node."},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_hierarchic-422-simpara-003",content:'You can choose <a href="#/dguide/tab_effect-hierarchicNestingPolicy">another preconfigured nesting policy</a> by changing the property <api-link id="customizing_view-z_order_hierarchic-422-api-link-001" data-member="hierarchicNestingPolicy" data-text="hierarchicNestingPolicy" data-type="yfiles.view.GraphModelManager"></api-link>.'}]},{tagname:"section",id:"customizing_view-z_order_canvasobject",title:"Re-ordering Canvas Objects",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_canvasobject-423-simpara-001",content:'<span class="api">ICanvasObject</span> as well as <span class="api">ICanvasObjectGroup</span> provide methods that re-order them in their parent’s\nlist of children. This changes the order in which the elements of this layer are rendered.\n<a href="#/dguide/tab_reordering-methods">Re-ordering Canvas Objects</a> presents the methods and what they do.'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="tab_reordering-methods">\n<dt id="customizing_view-z_order_canvasobject-423-term-001" class="title" role="title">Methods that change the order of an  in its parent’s list of children.</dt><dt id="customizing_view-z_order_canvasobject-423-term-002"><api-link id="customizing_view-z_order_canvasobject-423-api-link-001" data-member="toFront()" data-text="toFront():&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-001">\n<p id="customizing_view-z_order_canvasobject-423-simpara-002">Moves the element to the end of the rendering list, causing it to be drawn last and therefore to be rendered in the front.</p>\n</dd>\n<dt id="customizing_view-z_order_canvasobject-423-term-003"><api-link id="customizing_view-z_order_canvasobject-423-api-link-002" data-member="toBack()" data-text="toBack():&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-002">\n<p id="customizing_view-z_order_canvasobject-423-simpara-003">Moves the element to the start of the rendering list, causing it to be drawn first and therefore to be rendered in the back.</p>\n</dd>\n<dt id="customizing_view-z_order_canvasobject-423-term-004"><api-link id="customizing_view-z_order_canvasobject-423-api-link-003" data-member="raise()" data-text="raise():&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-003">\n<p id="customizing_view-z_order_canvasobject-423-simpara-004">Changes the place of this element with its successor in the list, causing it to be rendered in front of its former successor.</p>\n</dd>\n<dt id="customizing_view-z_order_canvasobject-423-term-005"><api-link id="customizing_view-z_order_canvasobject-423-api-link-004" data-member="lower()" data-text="lower():&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-004">\n<p id="customizing_view-z_order_canvasobject-423-simpara-005">Changes the place of this element with its predecessor in the list, causing it to be rendered behind its former predecessor.</p>\n</dd>\n<dt id="customizing_view-z_order_canvasobject-423-term-006"><api-link id="customizing_view-z_order_canvasobject-423-api-link-005" data-member="above(yfiles.view.ICanvasObject)" data-text="above(reference:&#xA0;ICanvasObject):&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-005">\n<p id="customizing_view-z_order_canvasobject-423-simpara-006">Re-inserts this element after the given element in the rendering list, causing it to be rendered right after and therefore in front of it.</p>\n</dd>\n<dt id="customizing_view-z_order_canvasobject-423-term-007"><api-link id="customizing_view-z_order_canvasobject-423-api-link-006" data-member="below(yfiles.view.ICanvasObject)" data-text="below(reference:&#xA0;ICanvasObject):&#xA0;ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link></dt><dd id="customizing_view-z_order_canvasobject-423-listitem-006">\n<p id="customizing_view-z_order_canvasobject-423-simpara-007">Re-inserts this element before the given element in the rendering list, causing it to be rendered right before and therefore behind it.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_canvasobject-423-simpara-008",content:'The <api-link id="customizing_view-z_order_canvasobject-423-api-link-007" data-member="" data-text="ICanvasObject" data-type="yfiles.view.ICanvasObject"></api-link> for a model item to apply these methods to can be retrieved using\n<span class="api">GraphModelManager</span>\'s method <api-link id="customizing_view-z_order_canvasobject-423-api-link-008" data-member="getMainCanvasObject(yfiles.graph.IModelItem)" data-text="getMainCanvasObject" data-type="yfiles.view.GraphModelManager"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_canvasobject-423-simpara-009",content:"Let us illustrate changing the order with a simple example. We create three overlapping nodes:\nfirst <code>n1</code>, then <code>n2</code>, and finally <code>n3</code>. The rendering order is <code>n1</code>, <code>n2</code>, <code>n3</code>, and therefore,\n<code>n1</code> is the undermost and <code>n2</code> the topmost node."},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_canvasobject-423-simpara-010",content:"Now we raise <code>n2</code>, so the rendering order is now <code>n1</code>, <code>n3</code>, <code>n2</code>, and <code>n2</code> is topmost."},{tagname:"example",id:"customizing_view-z_order_canvasobject-423-example-001",title:"Raising n2",content:'<pre class="programlisting javascript" id="customizing_view-z_order_canvasobject-423-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.graphModelManager.getCanvasObject(n2).raise()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_canvasobject-423-simpara-011",content:"If we want <code>n1</code> to be the topmost node, we simply move it to the end of the rendering order."},{tagname:"example",id:"customizing_view-z_order_canvasobject-423-example-002",title:"Bringing n1 to the front",content:'<pre class="programlisting javascript" id="customizing_view-z_order_canvasobject-423-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.graphModelManager.getCanvasObject(n1).toFront()\n</code></pre>'},{tagname:"figure","class":"image",title:"Changing the rendering order of nodes",id:"customizing_view-z_order_canvasobject-423-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_view_render_order_1.e9b00b86.png",alt:"",title:'<para class="dguide-para">Rendering order after node creation.</para>'},{tagname:"img",src:"assets/customizing_view_render_order_2.0e66ae2f.png",alt:"",title:'<para class="dguide-para">Raised <code>n2</code> up …​</para>'},{tagname:"img",src:"assets/customizing_view_render_order_3.0465b0ec.png",alt:"",title:'<para class="dguide-para">…​ and brought <code>n1</code> to front.</para>'}]}]},{tagname:"section",id:"customizing_view-z_order_graphelements",title:"The Z-order of Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-001",content:'The content group contains a sub-group for each kind of graph element. However, due to the chosen\n<a href="#/dguide/tab_effect-hierarchicNestingPolicy">HierarchicNestingPolicy</a>, <a href="#/dguide/tab_effect-PortLayerPolicy">PortLayerPolicy</a> and <a href="#/dguide/tab_effect-LabelLayerPolicy">LabelLayerPolicy</a>, some of the groups might be unused.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-002",content:"From front to back, these groups are:"},{tagname:"para",content:'<ol id="customizing_view-z_order_graphelements-424-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="customizing_view-z_order_graphelements-424-listitem-001"><p id="customizing_view-z_order_graphelements-424-simpara-003"><api-link id="customizing_view-z_order_graphelements-424-api-link-001" data-member="portLabelGroup" data-text="portLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt contains the visualization for the labels of ports.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-002"><p id="customizing_view-z_order_graphelements-424-simpara-004"><api-link id="customizing_view-z_order_graphelements-424-api-link-002" data-member="nodeLabelGroup" data-text="nodeLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt contains the visualization for the labels of nodes.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-003"><p id="customizing_view-z_order_graphelements-424-simpara-005"><api-link id="customizing_view-z_order_graphelements-424-api-link-003" data-member="edgeLabelGroup" data-text="edgeLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt contains the visualization for the labels of edges.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-004"><p id="customizing_view-z_order_graphelements-424-simpara-006"><api-link id="customizing_view-z_order_graphelements-424-api-link-004" data-member="portGroup" data-text="portGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt contains the visualization for the ports.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-005"><p id="customizing_view-z_order_graphelements-424-simpara-007"><api-link id="customizing_view-z_order_graphelements-424-api-link-005" data-member="nodeGroup" data-text="nodeGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nBy default it contains the visualizations for the <a href="#/dguide/customizing_view-z_order_hierarchic">nodes and edges</a>.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-006"><p id="customizing_view-z_order_graphelements-424-simpara-008"><api-link id="customizing_view-z_order_graphelements-424-api-link-006" data-member="edgeGroup" data-text="edgeGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt is unused by default and contains the visualizations for the edges\nif <api-link id="customizing_view-z_order_graphelements-424-api-link-007" data-member="hierarchicNestingPolicy" data-text="hierarchicNestingPolicy" data-type="yfiles.view.GraphModelManager"></api-link> is not set to <api-link id="customizing_view-z_order_graphelements-424-api-link-008" data-member="NODES_AND_EDGES" data-text="NODES_AND_EDGES" data-type="yfiles.view.HierarchicNestingPolicy"></api-link>.</p></li><li id="customizing_view-z_order_graphelements-424-listitem-007"><p id="customizing_view-z_order_graphelements-424-simpara-009"><api-link id="customizing_view-z_order_graphelements-424-api-link-009" data-member="groupNodeGroup" data-text="groupNodeGroup" data-type="yfiles.view.GraphModelManager"></api-link>.\nIt is unused by default and contains the visualizations for group nodes\nif <api-link id="customizing_view-z_order_graphelements-424-api-link-010" data-member="hierarchicNestingPolicy" data-text="hierarchicNestingPolicy" data-type="yfiles.view.GraphModelManager"></api-link> is set to <api-link id="customizing_view-z_order_graphelements-424-api-link-011" data-member="GROUP_NODES" data-text="GROUP_NODES" data-type="yfiles.view.HierarchicNestingPolicy"></api-link>.</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-010",content:'The following <a href="#/dguide/tab_effect-hierarchicNestingPolicy">table</a> describes which groups are used for nodes and edges depending on the <api-link id="customizing_view-z_order_graphelements-424-api-link-012" data-member="hierarchicNestingPolicy" data-text="hierarchicNestingPolicy" data-type="yfiles.view.GraphModelManager"></api-link>:'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_effect-hierarchicNestingPolicy",rowsep:1,content:'<caption>Effect of HierarchicNestingPolicy on the ICanvasObjectGroup of nodes and edges</caption><colgroup><col style="width:25%;"><col style="width:25%;"><col style="width:25%;"><col style="width:25%;"></colgroup><thead id="customizing_view-z_order_graphelements-424-thead-001"><tr id="customizing_view-z_order_graphelements-424-row-001"><th id="customizing_view-z_order_graphelements-424-entry-001" align="left" valign="top">\nPolicy\n</th><th id="customizing_view-z_order_graphelements-424-entry-002" align="left" valign="top">\nGroup Nodes\n</th><th id="customizing_view-z_order_graphelements-424-entry-003" align="left" valign="top">\nLeaf Nodes\n</th><th id="customizing_view-z_order_graphelements-424-entry-004" align="left" valign="top">\nEdges\n</th></tr></thead><tbody id="customizing_view-z_order_graphelements-424-tbody-001"><tr id="customizing_view-z_order_graphelements-424-row-002"><td id="customizing_view-z_order_graphelements-424-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-011"><api-link id="customizing_view-z_order_graphelements-424-api-link-013" data-member="NONE" data-text="NONE" data-type="yfiles.view.HierarchicNestingPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-012"><api-link id="customizing_view-z_order_graphelements-424-api-link-014" data-member="nodeGroup" data-text="nodeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-013"><api-link id="customizing_view-z_order_graphelements-424-api-link-015" data-member="nodeGroup" data-text="nodeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-014"><api-link id="customizing_view-z_order_graphelements-424-api-link-016" data-member="edgeGroup" data-text="edgeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td></tr><tr id="customizing_view-z_order_graphelements-424-row-003"><td id="customizing_view-z_order_graphelements-424-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-015"><api-link id="customizing_view-z_order_graphelements-424-api-link-017" data-member="NODES" data-text="NODES" data-type="yfiles.view.HierarchicNestingPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-016">child group of parent node</para></td><td id="customizing_view-z_order_graphelements-424-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-017">child group of parent node</para></td><td id="customizing_view-z_order_graphelements-424-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-018"><api-link id="customizing_view-z_order_graphelements-424-api-link-018" data-member="edgeGroup" data-text="edgeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td></tr><tr id="customizing_view-z_order_graphelements-424-row-004"><td id="customizing_view-z_order_graphelements-424-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-019"><api-link id="customizing_view-z_order_graphelements-424-api-link-019" data-member="NODES_AND_EDGES" data-text="NODES_AND_EDGES" data-type="yfiles.view.HierarchicNestingPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-020">child group of parent node</para></td><td id="customizing_view-z_order_graphelements-424-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-021">child group of parent node</para></td><td id="customizing_view-z_order_graphelements-424-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-022">child group of the common ancestor of the edge’s source and target node</para></td></tr><tr id="customizing_view-z_order_graphelements-424-row-005"><td id="customizing_view-z_order_graphelements-424-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-023"><api-link id="customizing_view-z_order_graphelements-424-api-link-020" data-member="GROUP_NODES" data-text="GROUP_NODES" data-type="yfiles.view.HierarchicNestingPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-024">child group of <api-link id="customizing_view-z_order_graphelements-424-api-link-021" data-member="groupNodeGroup" data-text="groupNodeGroup" data-type="yfiles.view.GraphModelManager"></api-link> according to the nesting depth</para></td><td id="customizing_view-z_order_graphelements-424-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-025"><api-link id="customizing_view-z_order_graphelements-424-api-link-022" data-member="nodeGroup" data-text="nodeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-026"><api-link id="customizing_view-z_order_graphelements-424-api-link-023" data-member="edgeGroup" data-text="edgeGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-027",content:'The groups for ports and labels depends on the chosen <a href="#/dguide/tab_effect-PortLayerPolicy">PortLayerPolicy</a> and <a href="#/dguide/tab_effect-LabelLayerPolicy">LabelLayerPolicy</a>:'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_effect-PortLayerPolicy",rowsep:1,content:'<caption>Effect of PortLayerPolicy on the ICanvasObjectGroup of ports</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="customizing_view-z_order_graphelements-424-thead-002"><tr id="customizing_view-z_order_graphelements-424-row-006"><th id="customizing_view-z_order_graphelements-424-entry-021" align="left" valign="top">\nPolicy\n</th><th id="customizing_view-z_order_graphelements-424-entry-022" align="left" valign="top">\nLabels\n</th></tr></thead><tbody id="customizing_view-z_order_graphelements-424-tbody-002"><tr id="customizing_view-z_order_graphelements-424-row-007"><td id="customizing_view-z_order_graphelements-424-entry-023" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-028"><api-link id="customizing_view-z_order_graphelements-424-api-link-024" data-member="AT_OWNER" data-text="AT_OWNER" data-type="yfiles.view.PortLayerPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-024" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-029">child group of port owner</para></td></tr><tr id="customizing_view-z_order_graphelements-424-row-008"><td id="customizing_view-z_order_graphelements-424-entry-025" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-030"><api-link id="customizing_view-z_order_graphelements-424-api-link-025" data-member="SEPARATE_LAYER" data-text="SEPARATE_LAYER" data-type="yfiles.view.PortLayerPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-026" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-031"><api-link id="customizing_view-z_order_graphelements-424-api-link-026" data-member="portGroup" data-text="portGroup" data-type="yfiles.view.GraphModelManager"></api-link></para></td></tr></tbody>'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_effect-LabelLayerPolicy",rowsep:1,content:'<caption>Effect of LabelLayerPolicy on the ICanvasObjectGroup of labels</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="customizing_view-z_order_graphelements-424-thead-003"><tr id="customizing_view-z_order_graphelements-424-row-009"><th id="customizing_view-z_order_graphelements-424-entry-027" align="left" valign="top">\nPolicy\n</th><th id="customizing_view-z_order_graphelements-424-entry-028" align="left" valign="top">\nLabels\n</th></tr></thead><tbody id="customizing_view-z_order_graphelements-424-tbody-003"><tr id="customizing_view-z_order_graphelements-424-row-010"><td id="customizing_view-z_order_graphelements-424-entry-029" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-032"><api-link id="customizing_view-z_order_graphelements-424-api-link-027" data-member="AT_OWNER" data-text="AT_OWNER" data-type="yfiles.view.LabelLayerPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-030" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-033">child group of label owner</para></td></tr><tr id="customizing_view-z_order_graphelements-424-row-011"><td id="customizing_view-z_order_graphelements-424-entry-031" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-034"><api-link id="customizing_view-z_order_graphelements-424-api-link-028" data-member="SEPARATE_LAYER" data-text="SEPARATE_LAYER" data-type="yfiles.view.LabelLayerPolicy"></api-link></para></td><td id="customizing_view-z_order_graphelements-424-entry-032" align="left" valign="top"><para class="dguide-para" id="customizing_view-z_order_graphelements-424-simpara-035"><api-link id="customizing_view-z_order_graphelements-424-api-link-029" data-member="nodeLabelGroup" data-text="nodeLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link>, <api-link id="customizing_view-z_order_graphelements-424-api-link-030" data-member="edgeLabelGroup" data-text="edgeLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link> or <api-link id="customizing_view-z_order_graphelements-424-api-link-031" data-member="portLabelGroup" data-text="portLabelGroup" data-type="yfiles.view.GraphModelManager"></api-link> depending on the kind of label owner</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-036",content:'By default yFiles for HTML draws edges that cross group nodes <strong id="customizing_view-z_order_graphelements-424-emphasis-001" class="bold" role="bold">behind</strong> the group nodes.\nA common use case is to change this behavior so that edges are drawn <strong id="customizing_view-z_order_graphelements-424-emphasis-002" class="bold" role="bold">in front</strong> of group nodes.'},{tagname:"figure","class":"image",title:"Changing the rendering order of edges and group nodes",id:"customizing_view-z_order_graphelements-424-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_view_edge_behind_1.9f538e89.png",alt:"",title:'<para class="dguide-para">Default rendering order</para>'},{tagname:"img",src:"assets/customizing_view_edge_behind_2.4a5373e2.png",alt:"",title:'<para class="dguide-para">Changed rendering order</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_graphelements-424-simpara-037",content:'To achieve this you just have to configure the <span class="api">GraphModelManager</span> as shown\nin the following code snippet.'},{tagname:"example",id:"customizing_view-z_order_graphelements-424-example-001",title:"Drawing edges in front of group nodes",content:'<pre class="programlisting javascript" id="customizing_view-z_order_graphelements-424-programlisting-001" language="javascript" format="linespecific"><code>const graphModelManager = graphComponent.graphModelManager\r\n// draw all edges in a single layer\r\ngraphModelManager.useHierarchicEdgeNesting = false\r\n// move the edge layer in front of the node layer\r\ngraphModelManager.edgeGroup.after(graphModelManager.nodeGroup)\n</code></pre>'}]},{tagname:"section",id:"customizing_view-z_order_indicators",title:"The Z-order of Indicators",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_indicators-425-simpara-001",content:'There is a dedicated canvas object group for each of the three kinds of indication.\n<a href="#/dguide/view-main_canvas_object_groups">The main canvas object groups</a> lists these and the other predefined groups.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_indicators-425-simpara-002",content:"Re-order these groups to change the order in which the different kinds of decorations are drawn.\nTo change the drawing order of decorations of the same kind, re-order them in the corresponding group."}]},{tagname:"section",id:"customizing_view-z_order_custom",title:"Completely Customize the Z-order",children:[{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_custom-426-simpara-001",content:'All of the above mentioned approaches together offer a good set of possibilities to control the\nz-order of elements. However, you gain full control of the z-order by subclassing\n<span class="api">GraphModelManager</span> and overriding a few\nmethods. This way, you can implement your own Z-order for the elements.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_custom-426-simpara-002",content:'One set of methods\nthat can be overridden are the factory methods for the <span class="api">ICanvasObjectGroup</span>s. There\nis one factory method for each sub-group of the content group of the <span class="api">GraphComponent</span>.\nAdditionally, the factory method for the content group itself can be overridden on\n<span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_view-z_order_custom-426-simpara-003",content:'Another possibility is to implement your own set of <span class="api">ICanvasObjectGroup</span>s\nand override the methods that specify in which group an item should be placed.\nFor example, <api-link id="customizing_view-z_order_custom-426-api-link-001" data-member="getCanvasObjectGroup(yfiles.graph.INode)" data-text="getCanvasObjectGroup" data-type="yfiles.view.GraphModelManager"></api-link>\ncan be overridden to distribute nodes to different groups by certain characteristics.\nThere are also methods for the other items as well.'}]}]},{tagname:"section",id:"customizing_indicators",title:"Customizing Selection, Focus, and Highlight",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-427-simpara-001",content:'In this section, we describe how to customize the visualization of the <span class="def">indicators</span> for\nselected elements, the focused item, and for custom highlighting. These indicators are introduced in\nsection <a href="#/dguide/view_selection">Selection, Focus, and Highlight</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-427-simpara-002",content:'First, we describe how to <a href="#/dguide/customizing_indicators-styles">use element styles for the visualization</a> of\nthe indicators. Then, we explain in detail the classes that are responsible for the visualization,\nnamely <a href="#/dguide/customizing_indicators-model_manager">Model Manager</a> and\n<a href="#/dguide/customizing_indicators-installer">Indicator Installer</a>, and introduce the classes responsible\nfor the <a href="#/dguide/customizing_indicators-defaults">default indicators</a>.'},{tagname:"section",id:"customizing_indicators-styles",title:"Using Styles for the Indicators",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-styles-428-simpara-001",content:"yFiles for HTML contains three convenience classes that allow you to use any node, edge, or label\nstyle as visualization for the selection, focus, and highlight of a node, edge, or label, respectively."},{tagname:"para",content:'<dl id="customizing_indicators-styles-428-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_indicators-styles-428-term-001"><api-link id="customizing_indicators-styles-428-api-link-001" data-member="" data-text="NodeStyleDecorationInstaller" data-type="yfiles.view.NodeStyleDecorationInstaller"></api-link></dt><dd id="customizing_indicators-styles-428-listitem-001">\n<p id="customizing_indicators-styles-428-simpara-002">Uses an <api-link id="customizing_indicators-styles-428-api-link-002" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link> to render the selection, focus, or highlight indicator of nodes.</p>\n</dd>\n<dt id="customizing_indicators-styles-428-term-002"><api-link id="customizing_indicators-styles-428-api-link-003" data-member="" data-text="EdgeStyleDecorationInstaller" data-type="yfiles.view.EdgeStyleDecorationInstaller"></api-link></dt><dd id="customizing_indicators-styles-428-listitem-002">\n<p id="customizing_indicators-styles-428-simpara-003">Uses an <api-link id="customizing_indicators-styles-428-api-link-004" data-member="" data-text="IEdgeStyle" data-type="yfiles.styles.IEdgeStyle"></api-link> to render the selection, focus, or highlight indicator of edges.</p>\n</dd>\n<dt id="customizing_indicators-styles-428-term-003"><api-link id="customizing_indicators-styles-428-api-link-005" data-member="" data-text="LabelStyleDecorationInstaller" data-type="yfiles.view.LabelStyleDecorationInstaller"></api-link></dt><dd id="customizing_indicators-styles-428-listitem-003">\n<p id="customizing_indicators-styles-428-simpara-004">Uses an <api-link id="customizing_indicators-styles-428-api-link-006" data-member="" data-text="ILabelStyle" data-type="yfiles.styles.ILabelStyle"></api-link> to render the selection, focus, or highlight indicator of labels.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-styles-428-simpara-005",content:"All three of these classes can be used in the same way:"},{tagname:"para",content:'<ul id="customizing_indicators-styles-428-itemizedlist-001"><li id="customizing_indicators-styles-428-listitem-004"><p id="customizing_indicators-styles-428-simpara-006">Create a new instance of the installer and set your style to it.</p></li><li id="customizing_indicators-styles-428-listitem-005"><p id="customizing_indicators-styles-428-simpara-007"><a href="#/dguide/customizing_graph-graph_decorator">Decorate the graph</a> with the installer.\nFirst, select the decorator for your type of element:\n<api-link id="customizing_indicators-styles-428-api-link-007" data-member="" data-text="NodeDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>,\n<api-link id="customizing_indicators-styles-428-api-link-008" data-member="" data-text="EdgeDecorator" data-type="yfiles.graph.EdgeDecorator"></api-link>, or\n<api-link id="customizing_indicators-styles-428-api-link-009" data-member="" data-text="LabelDecorator" data-type="yfiles.graph.LabelDecorator"></api-link>.\nThen, select the decorator for the type of indicator you want to customize, e.g. for nodes:\n<api-link id="customizing_indicators-styles-428-api-link-010" data-member="selectionDecorator" data-text="selectionDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>,\n<api-link id="customizing_indicators-styles-428-api-link-011" data-member="focusIndicatorDecorator" data-text="focusIndicatorDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>, or\n<api-link id="customizing_indicators-styles-428-api-link-012" data-member="highlightDecorator" data-text="highlightDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>.\nFinally, set the installer to that decorator.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-styles-428-simpara-008",content:"The following example sets a custom style as selection indicator for all nodes:"},{tagname:"example",id:"ex_customizing_view_indicators_style_decorator",title:"Visualizing the selection of all nodes with a custom node style",content:'<pre class="programlisting javascript" id="customizing_indicators-styles-428-programlisting-001" language="javascript" format="linespecific"><code>// myNodeStyle is the custom INodeStyle\r\nconst decorationInstaller = new yfiles.view.NodeStyleDecorationInstaller()\r\ndecorationInstaller.nodeStyle = myNodeStyle\r\ngraph.decorator.nodeDecorator.selectionDecorator.setImplementation(decorationInstaller)\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"customizing_indicators-styles-428-tip-001",content:'<p id="customizing_indicators-styles-428-simpara-009">Since all indicators are rendered in front of the graph elements by default, setting styles with\nan opaque fill will hide the original element.\nIf that is not desired, either use a style that just draws the border or\n<a href="#/dguide/customizing_view-z_order_indicators">change the default z-order</a> of the rendering.</p><p id="customizing_indicators-styles-428-simpara-010">If you want to use geometric shapes as indicators, the <api-link id="customizing_indicators-styles-428-api-link-013" data-member="" data-text="ShapeNodeStyle" data-type="yfiles.styles.ShapeNodeStyle"></api-link>\nis a good choice. For labels, combine it with the <api-link id="customizing_indicators-styles-428-api-link-014" data-member="" data-text="NodeStyleLabelStyleAdapter" data-type="yfiles.styles.NodeStyleLabelStyleAdapter"></api-link>.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-styles-428-simpara-011",content:"Besides the style, the following configuration options are available for these classes."},{tagname:"para",content:'<dl id="customizing_indicators-styles-428-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="customizing_indicators-styles-428-term-004"><api-link id="customizing_indicators-styles-428-api-link-015" data-member="zoomPolicy" data-text="zoomPolicy" data-type="yfiles.view.NodeStyleDecorationInstaller"></api-link></dt><dd id="customizing_indicators-styles-428-listitem-006">\n<p id="customizing_indicators-styles-428-simpara-012">Specifies how the zoom level affects the rendering. Either, the visualization scales like\ngraph elements when zooming or it keeps a fixed size like the default indicators and handles in yFiles.</p>\n</dd>\n<dt id="customizing_indicators-styles-428-term-005"><api-link id="customizing_indicators-styles-428-api-link-016" data-member="margins" data-text="margins" data-type="yfiles.view.NodeStyleDecorationInstaller"></api-link></dt><dd id="customizing_indicators-styles-428-listitem-007">\n<p id="customizing_indicators-styles-428-simpara-013">Specifies additional margins around the node or label layout. The bounds rendered by the style\nare the original label layout enlarged by these margins. This option is not available for edges.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-styles-428-simpara-014",content:'The <a href="..\\..\\demos\\view\\graphviewer\\index.html" target="blank" class="demo-link" title="Displays sample graphs from various application domains.">Graph Viewer</a> demo shows how to use the\n<span class="api">NodeStyleDecorationInstaller</span> and\n<span class="api">EdgeStyleDecorationInstaller</span>.'}]},{tagname:"section",id:"customizing_indicators-model_manager",title:"Model Manager",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-model_manager-429-simpara-001",content:'Each type of indicator has its own <span class="def">model manager</span> that is defined on <span class="api">GraphComponent</span>:\nThe <api-link id="customizing_indicators-model_manager-429-api-link-001" data-member="selectionIndicatorManager" data-text="selectionIndicatorManager" data-type="yfiles.view.GraphComponent"></api-link>,\n<api-link id="customizing_indicators-model_manager-429-api-link-002" data-member="focusIndicatorManager" data-text="focusIndicatorManager" data-type="yfiles.view.GraphComponent"></api-link>, and\n<api-link id="customizing_indicators-model_manager-429-api-link-003" data-member="highlightIndicatorManager" data-text="highlightIndicatorManager" data-type="yfiles.view.GraphComponent"></api-link>. These are small entities that\nmanage a model (the selection, the focused item or the highlighted items) by creating\nand updating the visual appearances (<span class="api">ICanvasObject</span>) for it.\nEach of them places their <span class="api">ICanvasObject</span>s into its own\n<span class="api">ICanvasObjectGroup</span> in the <span class="api">GraphComponent</span> (mentioned\nin <a href="#/dguide/view-main_canvas_object_groups">The main canvas object groups</a>). The model managers are\nproperties on the <span class="api">GraphComponent</span> and of course, your own implementation can be set\nfor them.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-model_manager-429-simpara-002",content:"Which items a manager should decorate is provided by its underlying model."},{tagname:"para",content:'<ul id="customizing_indicators-model_manager-429-itemizedlist-001"><li id="customizing_indicators-model_manager-429-listitem-001"><p id="customizing_indicators-model_manager-429-simpara-003"><span class="api">SelectionIndicatorManager&lt;T></span>  operates on the <span class="api">GraphComponent</span>’s\n<api-link id="customizing_indicators-model_manager-429-api-link-004" data-member="selection" data-text="SelectionModel" data-type="yfiles.view.GraphComponent"></api-link> and decorates the items on\nwhich the selection is set to <code>true</code></p></li><li id="customizing_indicators-model_manager-429-listitem-002"><p id="customizing_indicators-model_manager-429-simpara-004"><span class="api">FocusIndicatorManager&lt;T></span> operates on the <span class="api">GraphComponent</span>’s\n<api-link id="customizing_indicators-model_manager-429-api-link-005" data-member="currentItem" data-text="currentItem" data-type="yfiles.view.GraphComponent"></api-link> and decorates it</p></li><li id="customizing_indicators-model_manager-429-listitem-003"><p id="customizing_indicators-model_manager-429-simpara-005"><span class="api">HighlightIndicatorManager&lt;T></span> operates on an internal model\nwhere the items to decorate must be manually\n<api-link id="customizing_indicators-model_manager-429-api-link-006" data-member="addHighlight(T)" data-text="added" data-type="yfiles.view.HighlightIndicatorManager"></api-link> /\n<api-link id="customizing_indicators-model_manager-429-api-link-007" data-member="removeHighlight(T)" data-text="removed" data-type="yfiles.view.HighlightIndicatorManager"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-model_manager-429-simpara-006",content:'The decoration itself is performed by creating an <span class="api">ICanvasObject</span>\nvia an <api-link id="customizing_indicators-model_manager-429-api-link-008" data-member="" data-text="ICanvasObjectInstaller" data-type="yfiles.view.ICanvasObjectInstaller"></api-link>. The result is inserted in one of the\nabove mentioned manager specific <span class="api">ICanvasObjectGroup</span>s on the\n<span class="api">GraphComponent</span>. To do this, the manager queries the <span class="api">ICanvasObjectInstaller</span>\nfrom the item to decorate using <a href="#/dguide/customizing_concepts_lookup_decoration">lookup</a>.\nThis means that you can insert your own implementation of\n<span class="api">ICanvasObjectInstaller</span> for a given item by simply decorating its lookup.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-model_manager-429-simpara-007",content:"There are some properties on the model managers for general configuration."},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="tab_modelmanager-properties">\n<dt id="customizing_indicators-model_manager-429-term-001" class="title" role="title">Configuration of the selection and focus indication</dt><dt id="customizing_indicators-model_manager-429-term-002"><api-link id="customizing_indicators-model_manager-429-api-link-009" data-member="focusedItem" data-text="FocusIndicatorManager&lt;T&gt;.focusedItem" data-type="yfiles.view.FocusIndicatorManager"></api-link></dt><dd id="customizing_indicators-model_manager-429-listitem-004">\n<p id="customizing_indicators-model_manager-429-simpara-008">Sets the item that should be decorated with the focus indication.\nThis is normally done automatically by <span class="api">GraphComponent</span> and\n<span class="api">GraphEditorInputMode</span>, as well when using the\n<span class="api">SET_CURRENT_ITEM</span>.</p>\n</dd>\n<dt id="customizing_indicators-model_manager-429-term-003"><api-link id="customizing_indicators-model_manager-429-api-link-010" data-member="showFocusPolicy" data-text="FocusIndicatorManager&lt;T&gt;.showFocusPolicy" data-type="yfiles.view.FocusIndicatorManager"></api-link></dt><dd id="customizing_indicators-model_manager-429-listitem-005">\n<p id="customizing_indicators-model_manager-429-simpara-009">Determines when to show the focus indication of an item.</p>\n</dd>\n<dt id="customizing_indicators-model_manager-429-term-004"><api-link id="customizing_indicators-model_manager-429-api-link-011" data-member="model" data-text="SelectionIndicatorManager&lt;T&gt;.model" data-type="yfiles.view.SelectionIndicatorManager"></api-link></dt><dd id="customizing_indicators-model_manager-429-listitem-006">\n<p id="customizing_indicators-model_manager-429-simpara-010">Changes the underlying model for the selection.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-model_manager-429-simpara-011",content:'Additionally, each manager has the\n<api-link id="customizing_indicators-model_manager-429-api-link-012" data-member="getInstaller(T)" data-text="getInstaller" data-type="yfiles.view.SelectionIndicatorManager"></api-link> and\n<api-link id="customizing_indicators-model_manager-429-api-link-013" data-member="getCanvasObjectGroup(T)" data-text="getCanvasObjectGroup" data-type="yfiles.view.SelectionIndicatorManager"></api-link> methods.\nYou can override them for more control over the visualization. Instead\nof decorating the lookup you can use the former method to return a <span class="api">ICanvasObjectInstaller</span> for a given item.\nThe <span class="api">ICanvasObjectInstaller</span> will then be used to retrieve the <span class="api">ICanvasObject</span> for the item.\nThe latter method can be used to specify into which <span class="api">ICanvasObjectGroup</span> the visualization for the indicator of that item\nshould be put (instead of using always the same\n<span class="api">ICanvasObjectGroup</span>).'}]},{tagname:"section",id:"customizing_indicators-installer",title:"Indicator Installer",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-installer-430-simpara-001",content:'The aforementioned model managers use the <api-link id="customizing_indicators-installer-430-api-link-001" data-member="" data-text="ICanvasObjectInstaller" data-type="yfiles.view.ICanvasObjectInstaller"></api-link> interface\nto build the visualization of the selection, focus, or highlight indication for a specific\nitem. There are three sub-interfaces of <span class="api">ICanvasObjectInstaller</span> that are\nused in yFiles for HTML by default:\n<api-link id="customizing_indicators-installer-430-api-link-002" data-member="" data-text="ISelectionIndicatorInstaller" data-type="yfiles.view.ISelectionIndicatorInstaller"></api-link> for creating the selection indicator\nfor the item for which it is queried, <api-link id="customizing_indicators-installer-430-api-link-003" data-member="" data-text="IFocusIndicatorInstaller" data-type="yfiles.view.IFocusIndicatorInstaller"></api-link>\nfor the focus indicator, and <api-link id="customizing_indicators-installer-430-api-link-004" data-member="" data-text="IHighlightIndicatorInstaller" data-type="yfiles.view.IHighlightIndicatorInstaller"></api-link>\nfor the highlight indicator.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-installer-430-simpara-002",content:'These indicator installers actually create the visual representation of the selection,\nfocus, or highlight for a given item. They are called <span class="def">installer</span> because they install\nan <span class="api">ICanvasObject</span> for a given item into the\n<span class="api">ICanvasObjectGroup</span> of the selection, focus, or highlight and\nsimultaneously provide an <span class="api">ICanvasObjectDescriptor</span>\nthat creates the visual appearance.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-installer-430-simpara-003",content:'For each type of graph element (except for bends) there are default indicator\ninstaller classes. They allow to customize the visualization of the indicators without the need to change the implementation,\nby providing certain objects via <a href="#/dguide/customizing_concepts_resource-keys">resource keys</a>. The\n<a href="#/dguide/tab_customizing-view_indicator-installer_resource-keys">Default indicator installer for graph elements and customization options</a> table shows the default indicator\ninstaller for the different graph elements, the resource keys, and the type\nthe resource key should return.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_customizing-view_indicator-installer_resource-keys",rowsep:1,content:'<caption>Default indicator installer for graph elements and customization options</caption><colgroup><col style="width:25%;"><col style="width:25%;"><col style="width:25%;"><col style="width:25%;"></colgroup><thead id="customizing_indicators-installer-430-thead-001"><tr id="customizing_indicators-installer-430-row-001"><th id="customizing_indicators-installer-430-entry-001" align="left" valign="top">\nGraph element\n</th><th id="customizing_indicators-installer-430-entry-002" align="left" valign="top">\nDefault Indicator Installer\n</th><th id="customizing_indicators-installer-430-entry-003" align="left" valign="top">\nResource Keys\n</th><th id="customizing_indicators-installer-430-entry-004" align="left" valign="top">\nExpected Type\n</th></tr></thead><tbody id="customizing_indicators-installer-430-tbody-001"><tr id="customizing_indicators-installer-430-row-002"><td id="customizing_indicators-installer-430-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-004">INode</para></td><td id="customizing_indicators-installer-430-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-005"><api-link id="customizing_indicators-installer-430-api-link-005" data-member="" data-text="RectangleIndicatorInstaller" data-type="yfiles.view.RectangleIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-006"><api-link id="customizing_indicators-installer-430-api-link-006" data-member="SELECTION_TEMPLATE_KEY" data-text="SELECTION_TEMPLATE_KEY" data-type="yfiles.view.RectangleIndicatorInstaller"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-007" data-member="FOCUS_TEMPLATE_KEY" data-text="FOCUS_TEMPLATE_KEY" data-type="yfiles.view.RectangleIndicatorInstaller"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-008" data-member="HIGHLIGHT_TEMPLATE_KEY" data-text="HIGHLIGHT_TEMPLATE_KEY" data-type="yfiles.view.RectangleIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-007"><api-link id="customizing_indicators-installer-430-api-link-009" data-member="" data-text="IVisualTemplate" data-type="yfiles.view.IVisualTemplate"></api-link></para></td></tr><tr id="customizing_indicators-installer-430-row-003"><td id="customizing_indicators-installer-430-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-008">IEdge</para></td><td id="customizing_indicators-installer-430-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-009"><api-link id="customizing_indicators-installer-430-api-link-010" data-member="" data-text="EdgeSelectionIndicatorInstaller" data-type="yfiles.view.EdgeSelectionIndicatorInstaller"></api-link>\n<api-link id="customizing_indicators-installer-430-api-link-011" data-member="" data-text="EdgeFocusIndicatorInstaller" data-type="yfiles.view.EdgeFocusIndicatorInstaller"></api-link>\n<api-link id="customizing_indicators-installer-430-api-link-012" data-member="" data-text="EdgeHighlightIndicatorInstaller" data-type="yfiles.view.EdgeHighlightIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-010"><api-link id="customizing_indicators-installer-430-api-link-013" data-member="STROKE_KEY" data-text="STROKE_KEY" data-type="yfiles.view.EdgeSelectionIndicatorInstaller"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-014" data-member="BEND_TEMPLATE_KEY" data-text="BEND_TEMPLATE_KEY" data-type="yfiles.view.EdgeSelectionIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-011"><api-link id="customizing_indicators-installer-430-api-link-015" data-member="" data-text="Stroke" data-type="yfiles.view.Stroke"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-016" data-member="" data-text="IVisualTemplate" data-type="yfiles.view.IVisualTemplate"></api-link></para></td></tr><tr id="customizing_indicators-installer-430-row-004"><td id="customizing_indicators-installer-430-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-012">IPort</para></td><td id="customizing_indicators-installer-430-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-013"><api-link id="customizing_indicators-installer-430-api-link-017" data-member="" data-text="PointSelectionIndicatorInstaller" data-type="yfiles.view.PointSelectionIndicatorInstaller"></api-link> (no default for focus or highlight)</para></td><td id="customizing_indicators-installer-430-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-014">none</para></td><td id="customizing_indicators-installer-430-entry-016" align="left" valign="top"></td></tr><tr id="customizing_indicators-installer-430-row-005"><td id="customizing_indicators-installer-430-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-015">ILabel</para></td><td id="customizing_indicators-installer-430-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-016"><api-link id="customizing_indicators-installer-430-api-link-018" data-member="" data-text="OrientedRectangleIndicatorInstaller" data-type="yfiles.view.OrientedRectangleIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-017"><api-link id="customizing_indicators-installer-430-api-link-019" data-member="SELECTION_TEMPLATE_KEY" data-text="SELECTION_TEMPLATE_KEY" data-type="yfiles.view.OrientedRectangleIndicatorInstaller"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-020" data-member="FOCUS_TEMPLATE_KEY" data-text="FOCUS_TEMPLATE_KEY" data-type="yfiles.view.OrientedRectangleIndicatorInstaller"></api-link>,\n<api-link id="customizing_indicators-installer-430-api-link-021" data-member="HIGHLIGHT_TEMPLATE_KEY" data-text="HIGHLIGHT_TEMPLATE_KEY" data-type="yfiles.view.OrientedRectangleIndicatorInstaller"></api-link></para></td><td id="customizing_indicators-installer-430-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_indicators-installer-430-simpara-018"><api-link id="customizing_indicators-installer-430-api-link-022" data-member="" data-text="IVisualTemplate" data-type="yfiles.view.IVisualTemplate"></api-link></para></td></tr></tbody>'
},{tagname:"para","class":"dguide-para note",id:"customizing_indicators-installer-430-note-001",content:'<p id="customizing_indicators-installer-430-simpara-019">Bends do not have distinct indicator installers because they are not selectable\nor focusable by default. Their indicators are drawn as part of the edge visualization and can be customized using the corresponding <span class="api">BEND_TEMPLATE_KEY</span>.</p>'}]},{tagname:"section",id:"customizing_indicators-defaults",title:"Customizing the Predefined Indicators",children:[{tagname:"para",content:'<dl id="customizing_indicators-defaults-431-variablelist-001"><dt id="customizing_indicators-defaults-431-term-001"><span class="api">RectangleIndicatorInstaller</span></dt><dd id="customizing_indicators-defaults-431-listitem-001"><p id="customizing_indicators-defaults-431-simpara-001">Installs an <span class="api">ICanvasObject</span> as a rectangle. The actual\ndrawing of the rectangle is done by an <span class="api">IVisualTemplate</span>, which is an interface quite similar to <api-link id="customizing_indicators-defaults-431-api-link-001" data-member="" data-text="IVisualCreator" data-type="yfiles.view.IVisualCreator"></api-link>.\nIts methods <api-link id="customizing_indicators-defaults-431-api-link-002" data-member="createVisual(yfiles.view.IRenderContext,yfiles.geometry.Rect,Object)" data-text="createVisual" data-type="yfiles.view.IVisualTemplate"></api-link> and <api-link id="customizing_indicators-defaults-431-api-link-003" data-member="updateVisual(yfiles.view.IRenderContext,yfiles.view.SvgVisual,yfiles.geometry.Rect,Object)" data-text="updateVisual" data-type="yfiles.view.IVisualTemplate"></api-link> get the bounds of the data to visualize as well as an optional data object as additional parameter.\nThe <span class="api">IVisualTemplate</span> is queried using the appropriate ResourceKey.</p><p id="customizing_indicators-defaults-431-simpara-002">The <api-link id="customizing_indicators-defaults-431-api-link-004" data-member="getRectangle(Object)" data-text="getRectangle" data-type="yfiles.view.RectangleIndicatorInstaller"></api-link> method\ncan be overridden. It returns the bounds of the rectangle to paint for\nthe object for which the indicator is installed for.</p></dd><dt id="customizing_indicators-defaults-431-term-002"><span class="api">OrientedRectangleIndicatorInstaller</span></dt><dd id="customizing_indicators-defaults-431-listitem-002"><p id="customizing_indicators-defaults-431-simpara-003">Installs an <span class="api">ICanvasObject</span> as an oriented rectangle, which\nis defined by an anchor in the lower left corner of the rectangle and an up vector\nthat defines the rotation of the rectangle. Just\nlike the <span class="api">RectangleIndicatorInstaller</span>, the actual\ndrawing of the rectangle is done by an <span class="api">IVisualTemplate</span>.</p><p id="customizing_indicators-defaults-431-simpara-004">The <api-link id="customizing_indicators-defaults-431-api-link-005" data-member="getRectangle(Object)" data-text="getRectangle" data-type="yfiles.view.OrientedRectangleIndicatorInstaller"></api-link> method\ncan be overridden. It returns an <span class="api">IOrientedRectangle</span>\ninstead of a normal rectangle.</p></dd><dt id="customizing_indicators-defaults-431-term-003"><span class="api">EdgeSelectionIndicatorInstaller</span> <span class="api">EdgeFocusIndicatorInstaller</span> <span class="api">EdgeHighlightIndicatorInstaller</span> </dt><dd id="customizing_indicators-defaults-431-listitem-003"><p id="customizing_indicators-defaults-431-simpara-005">Installs an <span class="api">ICanvasObject</span> that paints a line along the\nedge path and also decorates the bends. The\n<api-link id="customizing_indicators-defaults-431-api-link-006" data-member="STROKE_KEY" data-text="STROKE_KEY" data-type="yfiles.view.EdgeSelectionIndicatorInstaller"></api-link> can\nbe used to change the pen that the line is drawn with.\nThe <api-link id="customizing_indicators-defaults-431-api-link-007" data-member="BEND_TEMPLATE_KEY" data-text="BEND_TEMPLATE_KEY" data-type="yfiles.view.EdgeSelectionIndicatorInstaller"></api-link> can be used to change the visual appearance for the decorated bends.</p></dd><dt id="customizing_indicators-defaults-431-term-004">PointSelectionIndicatorInstaller</dt><dd id="customizing_indicators-defaults-431-listitem-004"><p id="customizing_indicators-defaults-431-simpara-006">Has two properties: <api-link id="customizing_indicators-defaults-431-api-link-008" data-member="stroke" data-text="stroke" data-type="yfiles.view.PointSelectionIndicatorInstaller"></api-link>\nand <api-link id="customizing_indicators-defaults-431-api-link-009" data-member="fill" data-text="fill" data-type="yfiles.view.PointSelectionIndicatorInstaller"></api-link> that can be used\nto change the style of the selection indicator. Also, you can override the\n<api-link id="customizing_indicators-defaults-431-api-link-010" data-member="getCenterPoint(Object)" data-text="getCenterPoint" data-type="yfiles.view.PointSelectionIndicatorInstaller"></api-link> method\nto return the center of the visualization for the object to decorate.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-defaults-431-simpara-007",content:'The following example shows how to change the selection indication for nodes. We simply have\nto register a custom <span class="api">IVisualTemplate</span> that paints the indication, using the appropriate resource key.'},{tagname:"example",id:"customizing_indicators-defaults-431-example-001",title:"Specifying a custom indication for selected nodes",content:"<pre class=\"programlisting javascript\" id=\"customizing_indicators-defaults-431-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// create a custom selection template with a blue border and transparent fill\r\nconst selectionTemplate = new yfiles.view.IVisualTemplate({\r\n  createVisual(context, bounds) {\r\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    rect.setAttribute('stroke', 'blue')\r\n    rect.setAttribute('fill', 'none')\r\n    return new yfiles.view.SvgVisual(rect)\r\n  },\r\n  updateVisual(context, oldVisual, bounds) {\r\n    const rect = oldVisual.svgElement\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return oldVisual\r\n  }\r\n})\r\n// register the template to be used for drawing the selection indicator of nodes\r\ngraphComponent.resources.set(\r\n  yfiles.view.RectangleIndicatorInstaller.SELECTION_TEMPLATE_KEY,\r\n  selectionTemplate\r\n)\n</code></pre>"},{tagname:"figure","class":"image",title:"Changing the indication for selected nodes",id:"customizing_indicators-defaults-431-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_view_selection_indicator_1.7e24c482.png",alt:"",title:'<para class="dguide-para">Default selection indication</para>'},{tagname:"img",src:"assets/customizing_view_selection_indicator_2.6bc049e3.png",alt:"",title:'<para class="dguide-para">Custom selection indication</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_indicators-defaults-431-simpara-008",content:'The last example modifies the selection indication for <strong id="customizing_indicators-defaults-431-emphasis-001" class="bold" role="bold">all</strong> nodes.\nIf you want to change the\nselection indication for only <strong id="customizing_indicators-defaults-431-emphasis-002" class="bold" role="bold">certain</strong> nodes instead, then you have to\n<a href="#/dguide/customizing_graph-graph_decorator">decorate the graph</a> with a custom\n<api-link id="customizing_indicators-defaults-431-api-link-011" data-member="" data-text="ISelectionIndicatorInstaller" data-type="yfiles.view.ISelectionIndicatorInstaller"></api-link>. In the next example we specify\na custom <span class="api">ISelectionIndicatorInstaller</span> for nodes that\nhave at least one label. For all other nodes the default\n<span class="api">ISelectionIndicatorInstaller</span> is used.'},{tagname:"example",id:"customizing_indicators-defaults-431-example-002",title:"Specifying a custom selection indicator for nodes with labels",content:'<pre class="programlisting javascript" id="customizing_indicators-defaults-431-programlisting-002" language="javascript" format="linespecific"><code>const nodeDecorator = graphComponent.graph.decorator.nodeDecorator\r\nnodeDecorator.selectionDecorator.setFactory(\r\n  node => node.labels.size > 0,\r\n  node => {\r\n    const installer = new yfiles.view.RectangleIndicatorInstaller(node.layout)\r\n    installer.template = selectionTemplate\r\n    return installer\r\n  }\r\n)\n</code></pre>'},{tagname:"figure","class":"image",title:"Custom selection indicator for nodes with labels",id:"customizing_indicators-defaults-431-figure-002","float":0,children:[{tagname:"img",src:"assets/customizing_view_selection_indicator_3.92fe98bd.png",alt:"customizing view selection indicator 3",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_indicators-defaults-431-simpara-009",content:'Last but not least, we can modify the selection indication for <strong id="customizing_indicators-defaults-431-emphasis-003" class="bold" role="bold">certain</strong> styles.\nFor example, if you have a custom\n<api-link id="customizing_indicators-defaults-431-api-link-012" data-member="" data-text="node style" data-type="yfiles.styles.INodeStyle"></api-link> that extends the\n<api-link id="customizing_indicators-defaults-431-api-link-013" data-member="" data-text="NodeStyleBase" data-type="yfiles.styles.NodeStyleBase"></api-link> class, you just need to override its\n<a href="#/dguide/customizing_concepts_lookup_interfaces">lookup method</a> and return your own\n<span class="api">ISelectionIndicatorInstaller</span> implementation.'},{tagname:"example",id:"customizing_indicators-defaults-431-example-003",title:"Specifying a custom selection indicator for certain node styles",content:'<pre class="programlisting javascript" id="customizing_indicators-defaults-431-programlisting-003" language="javascript" format="linespecific"><code>lookup(node, type) {\r\n  if (type === yfiles.view.ISelectionIndicatorInstaller.$class) {\r\n    const installer = new yfiles.view.RectangleIndicatorInstaller(node.layout)\r\n    installer.template = this.selectionTemplate\r\n    return installer\r\n  } else {\r\n    return super.lookup(node, type)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"customizing_indicators-defaults-431-note-001",content:'<p id="customizing_indicators-defaults-431-simpara-010">Since the indicator installers are always created anew when being queried from an\nitem via lookup, simply getting them from the lookup and setting the properties\non the returned instance won’t do. Instead, you’d have to decorate the lookup in\nsuch a way that the configured instance is returned; either by adjusting the instance\nthat is returned from the inner lookup or returning a configured object directly\n(via creation with new and adjusting the new object).</p>'}]},{tagname:"section",id:"customizing_indicators-custom_installer",title:"Implementing a Custom Indicator Installer",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-custom_installer-432-simpara-001",content:'<span class="api">ISelectionIndicatorInstaller</span>,\n<span class="api">IFocusIndicatorInstaller</span>, and\n<span class="api">IHighlightIndicatorInstaller</span> all extend the same interface\n<span class="api">ICanvasObjectInstaller</span> which has only one method:\n<api-link id="customizing_indicators-custom_installer-432-api-link-001" data-member="addCanvasObject(yfiles.view.ICanvasContext,yfiles.view.ICanvasObjectGroup,Object)" data-text="addCanvasObject" data-type="yfiles.view.ICanvasObjectInstaller"></api-link>. This method takes an item to install the indicator for and the\n<span class="api">ICanvasObjectGroup</span> in which the indicator for\nthe item should be installed into.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-custom_installer-432-simpara-002",content:'In principle the method should somewhere call\n<api-link id="customizing_indicators-custom_installer-432-api-link-002" data-member="addChild(Object,yfiles.view.ICanvasObjectDescriptor)" data-text="addChild" data-type="yfiles.view.ICanvasObjectGroup"></api-link>\nand return the resulting <span class="api">ICanvasObject</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-custom_installer-432-simpara-003",content:'To implement this meaningfully, you have to provide an\n<span class="api">ICanvasObjectDescriptor</span> for the given object.\nThis descriptor should yield an <span class="api">IVisualCreator</span>\nfor the visualization as well as\n<api-link id="customizing_indicators-custom_installer-432-api-link-003" data-member="" data-text="IHitTestable" data-type="yfiles.input.IHitTestable"></api-link>,\n<api-link id="customizing_indicators-custom_installer-432-api-link-004" data-member="" data-text="IVisibilityTestable" data-type="yfiles.view.IVisibilityTestable"></api-link>,\nand <api-link id="customizing_indicators-custom_installer-432-api-link-005" data-member="" data-text="IBoundsProvider" data-type="yfiles.view.IBoundsProvider"></api-link>\nfor the logical bounds of the visualization as described in the section\n<a href="#/dguide/customizing_view_visualizing_arbitrary_objects">Visualizing Arbitrary Objects</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-custom_installer-432-simpara-004",content:"You can then use your custom indicator installer for the selection, focus, or\nhighlighting for decoration on the item’s lookup and it will use your\nimplementation when decorating this item."}]},{tagname:"section",id:"customizing_indicators-own_decorations",title:"Adding your own Indicator for Objects",children:[{tagname:"para","class":"dguide-para",id:"customizing_indicators-own_decorations-433-simpara-001",content:'If you want to add a custom indicator for your objects that is neither a\nselection, nor a focus indication, nor a general highlighting, you can use the\n<a href="#/dguide/customizing_indicators-model_manager">model manager concept</a>\nto implement your own indicator for items.'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-own_decorations-433-simpara-002",content:'<api-link id="customizing_indicators-own_decorations-433-api-link-001" data-member="" data-text="ModelManager&lt;T&gt;" data-type="yfiles.view.ModelManager"></api-link> has four abstract methods:'},{tagname:"para",content:'<dl id="customizing_indicators-own_decorations-433-variablelist-001"><dt id="customizing_indicators-own_decorations-433-term-001"><api-link id="customizing_indicators-own_decorations-433-api-link-002" data-member="onEnabled()" data-text="onEnabled" data-type="yfiles.view.ModelManager"></api-link> and <api-link id="customizing_indicators-own_decorations-433-api-link-003" data-member="onDisabled()" data-text="onDisabled" data-type="yfiles.view.ModelManager"></api-link></dt><dd id="customizing_indicators-own_decorations-433-listitem-001"><p id="customizing_indicators-own_decorations-433-simpara-003">These methods are called when the manager is being enabled or disabled and are commonly\nused to set up the manager and clean up resources.</p></dd><dt id="customizing_indicators-own_decorations-433-term-002"><api-link id="customizing_indicators-own_decorations-433-api-link-004" data-member="getCanvasObjectGroup(T)" data-text="getCanvasObjectGroup" data-type="yfiles.view.ModelManager"></api-link></dt><dd id="customizing_indicators-own_decorations-433-listitem-002"><p id="customizing_indicators-own_decorations-433-simpara-004">Returns the <span class="api">ICanvasObjectGroup</span> in which the indicators\nfor the items should reside in. This can be a predefined\n<span class="api">ICanvasObjectGroup</span> (obtainable from <span class="api">GraphComponent</span>)\nor a new one (creatable by <api-link id="customizing_indicators-own_decorations-433-api-link-005" data-member="addGroup()" data-text="addGroup" data-type="yfiles.view.ICanvasObjectGroup"></api-link>\non the parent group)</p></dd><dt id="customizing_indicators-own_decorations-433-term-003"><api-link id="customizing_indicators-own_decorations-433-api-link-006" data-member="getInstaller(T)" data-text="getInstaller" data-type="yfiles.view.ModelManager"></api-link></dt><dd id="customizing_indicators-own_decorations-433-listitem-003"><p id="customizing_indicators-own_decorations-433-simpara-005">Retrieves the <span class="api">ICanvasObjectInstaller</span> instance\nthat creates the indicator for the given item. In the yFiles for HTML model managers,\nthis uses the lookup of the item to query the implementations,\nhowever this can be implemented as needed.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"customizing_indicators-own_decorations-433-simpara-006",content:'That’s it. When an item is added to a model manager via\n<api-link id="customizing_indicators-own_decorations-433-api-link-007" data-member="add(T)" data-text="add" data-type="yfiles.view.ModelManager"></api-link> then the other\nmethods are used to install an <span class="api">ICanvasObject</span> into the\n<span class="api">ICanvasObjectGroup</span> that decorates the item. You can wire\nup some user interaction to the\n<api-link id="customizing_indicators-own_decorations-433-api-link-008" data-member="add(T)" data-text="add" data-type="yfiles.view.ModelManager"></api-link> and\n<api-link id="customizing_indicators-own_decorations-433-api-link-009" data-member="remove(T)" data-text="remove" data-type="yfiles.view.ModelManager"></api-link> methods to\nmanage decoration for certain gestures, for example. This concept can be\nextended as needed to bind the manager to more complex models.'}]}]},{tagname:"section",id:"customizing_view_limit_viewport",title:"Restricting the Viewport",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-001",content:'You can restrict the area to which a user can interactively zoom and scroll.\nSuch a limitation of the <a href="#/dguide/view_graphcontrol_managing-the-view">viewport</a> of the <span class="api">GraphComponent</span> is\ndefined by a <api-link id="customizing_view_limit_viewport-434-api-link-001" data-member="" data-text="ViewportLimiter" data-type="yfiles.view.ViewportLimiter"></api-link> and can be set with\n<api-link id="customizing_view_limit_viewport-434-api-link-002" data-member="viewportLimiter" data-text="viewportLimiter" data-type="yfiles.view.CanvasComponent"></api-link> on the <span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-002",content:'The limitations imposed by a <span class="api">ViewportLimiter</span> are honored by features\nthat are typically executed by the user, in particular\ninteractive actions such as zooming and panning, layout morphing, and animations.\nHowever, programmatically changing the properties on <span class="api">GraphComponent</span> like\n<api-link id="customizing_view_limit_viewport-434-api-link-003" data-member="zoom" data-text="zoom" data-type="yfiles.view.CanvasComponent"></api-link> or <api-link id="customizing_view_limit_viewport-434-api-link-004" data-member="viewPoint" data-text="viewPoint" data-type="yfiles.view.CanvasComponent"></api-link> will not be affected by the\n<span class="api">ViewportLimiter</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-003",content:'The usage of a <span class="api">ViewportLimiter</span> is easy.\nA <span class="api">ViewportLimiter</span> ready for usage is by\ndefault already set on the <span class="api">GraphComponent</span>. For basic restrictions,\na client can simply get the <api-link id="customizing_view_limit_viewport-434-api-link-005" data-member="viewportLimiter" data-text="viewportLimiter" data-type="yfiles.view.CanvasComponent"></api-link>\nproperty  and use its <api-link id="customizing_view_limit_viewport-434-api-link-006" data-member="bounds" data-text="bounds" data-type="yfiles.view.ViewportLimiter"></api-link>\nto restrict the viewport to that bounds.'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-004",content:'The <api-link id="customizing_view_limit_viewport-434-api-link-007" data-member="honorBothDimensions" data-text="honorBothDimensions" data-type="yfiles.view.ViewportLimiter"></api-link> property\ncan be adjusted to control whether the horizontal or vertical sides of\nthe bounds should be limited or both (which is the default).'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-005",content:'You can extend <span class="api">ViewportLimiter</span> to override some of its methods for more advanced use cases.\nIf you want to dynamically calculate the limited\nbounds for the <span class="api">viewport</span>, you can override the\n<api-link id="customizing_view_limit_viewport-434-api-link-008" data-member="getCurrentBounds(yfiles.view.CanvasComponent,yfiles.geometry.Rect)" data-text="getCurrentBounds" data-type="yfiles.view.ViewportLimiter"></api-link> method\ninstead of setting the <api-link id="customizing_view_limit_viewport-434-api-link-009" data-member="bounds" data-text="bounds" data-type="yfiles.view.ViewportLimiter"></api-link> property. The default implementation of\n<api-link id="customizing_view_limit_viewport-434-api-link-010" data-member="getCurrentBounds(yfiles.view.CanvasComponent,yfiles.geometry.Rect)" data-text="getCurrentBounds" data-type="yfiles.view.ViewportLimiter"></api-link>\nsimply returns the value of the\n<api-link id="customizing_view_limit_viewport-434-api-link-011" data-member="bounds" data-text="bounds" data-type="yfiles.view.ViewportLimiter"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-006",content:'Or you can override the method that calculates the limited\n<span class="api">viewport</span> itself, which is\n<api-link id="customizing_view_limit_viewport-434-api-link-012" data-member="limitViewport(yfiles.view.CanvasComponent,yfiles.geometry.Rect)" data-text="limitViewport" data-type="yfiles.view.ViewportLimiter"></api-link>.\nThis method is used by <span class="api">GraphComponent</span> to actually limit the\n<span class="api">viewport</span> by providing the\nsuggested bounds. The method then calculates the actual\nbounds that should be used instead.'},{tagname:"para","class":"dguide-para",id:"customizing_view_limit_viewport-434-simpara-007",content:'The <a href="..\\..\\demos\\complete\\orgchart\\index.html" target="blank" class="demo-link" title="An interactive viewer for organization charts with automatic layout updates.">Organization Chart</a> demo uses a <span class="api">ViewportLimiter</span>\nwith static bounds to restrict the viewport to the actual bounds of its content.'}]},{tagname:"section",id:"customizing_view_animations",title:"Animations",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_animations-435-simpara-001",content:"yFiles for HTML offers specialized animations and visual effects for graph\nelements, more precisely their visual representations.\nPredefined animations are, for example:"},{tagname:"para",content:'<ul id="customizing_view_animations-435-itemizedlist-001"><li id="customizing_view_animations-435-listitem-001"><p id="customizing_view_animations-435-simpara-002">transformations of node layouts, i.e., moving and resizing of nodes</p></li><li id="customizing_view_animations-435-listitem-002"><p id="customizing_view_animations-435-simpara-003">transformations of edge paths, i.e., moving ports and bends</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations-435-simpara-004",content:'These animations build upon the general animation framework found in namespace\n<api-link id="customizing_view_animations-435-api-link-001" data-member="" data-text="yfiles.view" data-type=""></api-link> which enables processing of animations.'},{tagname:"para","class":"dguide-para tip",id:"customizing_view_animations-435-tip-001",content:'<p id="customizing_view_animations-435-simpara-005">The typical way of <a href="#/dguide/layout-applying_a_layout">applying an automatic layout</a> to your diagram\nalready includes suitable animations for many use cases. You typically don’t need to set\nan animation by yourself in this case.</p>'},{tagname:"section",id:"customizing_view_animations_predefined",title:"Predefined Animations",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_animations_predefined-436-simpara-001",content:'Predefined animations for model items in an IGraph are provided by the following\nfactory methods on <api-link id="customizing_view_animations_predefined-436-api-link-001" data-member="" data-text="IAnimation" data-type="yfiles.view.IAnimation"></api-link>:'},{tagname:"para",content:'<dl id="customizing_view_animations_predefined-436-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_view_animations_predefined-436-term-001" class="title" role="title">Predefined animations for graph elements</dt><dt id="customizing_view_animations_predefined-436-term-002"><api-link id="customizing_view_animations_predefined-436-api-link-002" data-member="createEdgeSegmentAnimation(yfiles.graph.IGraph,yfiles.graph.IEdge,Array,yfiles.geometry.Point,yfiles.geometry.Point,yfiles.lang.TimeSpan)" data-text="createEdgeSegmentAnimation" data-type="yfiles.view.IAnimation"></api-link></dt><dd id="customizing_view_animations_predefined-436-listitem-001">\n<p id="customizing_view_animations_predefined-436-simpara-002">Animates transformations of an edge layout, i.e., changes of the locations\nof ports and bends.</p>\n</dd>\n<dt id="customizing_view_animations_predefined-436-term-003"><api-link id="customizing_view_animations_predefined-436-api-link-003" data-member="createNodeAnimation(yfiles.graph.IGraph,yfiles.graph.INode,yfiles.geometry.IRectangle,yfiles.lang.TimeSpan)" data-text="createNodeAnimation" data-type="yfiles.view.IAnimation"></api-link></dt><dd id="customizing_view_animations_predefined-436-listitem-002">\n<p id="customizing_view_animations_predefined-436-simpara-003">Animates transformations of a node layout, i.e., changes of the location\nand the dimensions.</p>\n</dd>\n<dt id="customizing_view_animations_predefined-436-term-004"><api-link id="customizing_view_animations_predefined-436-api-link-004" data-member="createPathAnimation(yfiles.geometry.GeneralPath,yfiles.geometry.IMutablePoint,yfiles.lang.TimeSpan)" data-text="createPathAnimation" data-type="yfiles.view.IAnimation"></api-link></dt><dd id="customizing_view_animations_predefined-436-listitem-003">\n<p id="customizing_view_animations_predefined-436-simpara-004">Animates a mutable point along a path.</p>\n</dd>\n<dt id="customizing_view_animations_predefined-436-term-005"><api-link id="customizing_view_animations_predefined-436-api-link-005" data-member="createLayoutAnimation(yfiles.graph.IGraph,yfiles.layout.CopiedLayoutGraph,yfiles.lang.TimeSpan)" data-text="createLayoutAnimation" data-type="yfiles.view.IAnimation"></api-link></dt><dd id="customizing_view_animations_predefined-436-listitem-004">\n<p id="customizing_view_animations_predefined-436-simpara-005">Creates an <span class="api">IAnimation</span> which animates transformations of the layout of model items in a graph.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_predefined-436-simpara-006",content:"Further predefined animations that render arbitrary graphical objects are available:"},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_predefined-436-simpara-007",content:'Class <api-link id="customizing_view_animations_predefined-436-api-link-006" data-member="" data-text="ViewportAnimation" data-type="yfiles.view.ViewportAnimation"></api-link> animates changing the viewport bounds and the zoom factor.'}]},{tagname:"section",id:"customizing_view_animations_framework",title:"Animation Framework",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-001",content:'The classes <api-link id="customizing_view_animations_framework-437-api-link-001" data-member="" data-text="IAnimation" data-type="yfiles.view.IAnimation"></api-link> and <api-link id="customizing_view_animations_framework-437-api-link-002" data-member="" data-text="Animator" data-type="yfiles.view.Animator"></api-link>\nconstitute a general animation framework.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-002",content:'The <api-link id="customizing_view_animations_framework-437-api-link-003" data-member="" data-text="Animator" data-type="yfiles.view.Animator"></api-link> class is the\ncentral instance that governs an animation process.\nAt creation time, it is associated with the <span class="api">CanvasComponent</span> that contains the\nactual elements involved with an animation.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-003",content:'The animation itself, respectively the compound of animations that is to be\npresented in the component, is encapsulated in a so-called animation object, an\nimplementation of interface <api-link id="customizing_view_animations_framework-437-api-link-004" data-member="" data-text="IAnimation" data-type="yfiles.view.IAnimation"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-004",content:'Effectively, an animation object provides a sequence of so-called <span class="def">frames</span> that\nrepresent the animation’s state as it evolves over time.\n<span class="api">Animator</span> progresses the overall animation process by continuously triggering\nthe given animation object to calculate a single new frame that\ncorresponds to the supplied (strictly monotonic) increasing time value.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-005",content:"Whenever a new frame has been calculated, the animator initiates an update in\nthe given control so that the new frame is displayed."},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-006",content:'<span class="api">Animator</span> also triggers initialization of an <span class="api">IAnimation</span> object before the\nanimation process and any necessary cleanup thereafter by calling appropriate\nmethods.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-007",content:'Setup for processing a given animation object and having the progress of the\n(compound) animation displayed in a control is demonstrated in\n<a href="#/dguide/ex_animation">Playing a (compound) animation.</a>.'},{tagname:"example",id:"ex_animation",title:"Playing a (compound) animation.",content:'<pre class="programlisting javascript" id="customizing_view_animations_framework-437-programlisting-001" language="javascript" format="linespecific"><code>function startAnimation(component, animation) {\r\n  // Create a new Animator for the given component that processes the given\r\n  // animation.\r\n  const animator = new yfiles.view.Animator(graphComponent)\r\n  // Play the given animation.\r\n  animator.animate(animation)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-008",content:'Implementations of interface <span class="api">IAnimation</span>\nare the actual provider of an animation.\nTheir task is to generate a sequence of frames that represent the animation’s\nstate as it evolves over time.\nAn animation’s time is defined to run in the range 0.0 to 1.0 from animation\nstart to animation end.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-009",content:'<api-link id="customizing_view_animations_framework-437-api-link-005" data-member="" data-text="IAnimation" data-type="yfiles.view.IAnimation"></api-link> provides a set of convenience methods to create\n<span class="api">IAnimation</span> instances for the most common use-cases:'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-010",content:'To achieve concurrent processing of a set of animations, method\n<api-link id="customizing_view_animations_framework-437-api-link-006" data-member="createParallelAnimation(yfiles.collections.IEnumerable,boolean)" data-text="createParallelAnimation" data-type="yfiles.view.IAnimation"></api-link>\ncreates an\n<span class="api">IAnimation</span> implementation that provides the necessary methods to add single\nanimations to form compound animations.\nCorrespondingly, a set of animations which are applied one after another can be created using method\n<api-link id="customizing_view_animations_framework-437-api-link-007" data-member="createSequentialAnimation(yfiles.collections.IEnumerable)" data-text="createSequentialAnimation" data-type="yfiles.view.IAnimation"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_view_animations_framework-437-simpara-011",content:'<api-link id="customizing_view_animations_framework-437-api-link-008" data-member="createEasedAnimation(number,number)" data-text="createEasedAnimation" data-type="yfiles.view.IAnimation"></api-link> creates\nanother implementation of interface <span class="api">IAnimation</span> which provides\nease in and ease out effects and can be used as a decorator for other\nanimations.\nAn ease in effect applies a configurable acceleration at the beginning of a\ngiven animation, likewise, an ease out effect applies a configurable\ndeceleration at the end.'}]}]},{tagname:"section",id:"customizing_view_graphics",title:"Support for Colors and Fills",children:[{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-001",content:"yFiles for HTML has a strong relationship to the yWorks diagramming libraries for\nthe Microsoft .NET platform, especially to yFiles WPF.\nParts of the APIs that deal with 2D graphics are very similar\nand thus many types that are common in the Windows Presentation Foundation (WPF)\nworld, also appear in yFiles for HTML."},{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-002",content:'These types include, for example, <api-link id="customizing_view_graphics-438-api-link-001" data-member="" data-text="Stroke" data-type="yfiles.view.Stroke"></api-link>,\n<api-link id="customizing_view_graphics-438-api-link-002" data-member="" data-text="Fill" data-type="yfiles.view.Fill"></api-link>, or <api-link id="customizing_view_graphics-438-api-link-003" data-member="" data-text="Color" data-type="yfiles.view.Color"></api-link>.\nAnd also other classes like <api-link id="customizing_view_graphics-438-api-link-004" data-member="" data-text="LinearGradient" data-type="yfiles.view.LinearGradient"></api-link>,\netc.'},{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-003",content:"Each of them provides a lean subset of the corresponding WPF type’s API, which exactly\nsuits the needs of yFiles for HTML.\nThe actual implementations of the methods and properties are specific to the HTML5/SVG\nenvironment, though."},{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-004",content:"Also, further extensions to the API of these types can provide additional functionality,\nfor example, for generation of SVG markup."},{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-005",content:"Information related to the graphics and rendering system in WPF can be found in\nthe Microsoft .NET framework’s documentation.\nIn particular:"},{tagname:"para","class":"dguide-para",id:"customizing_view_graphics-438-simpara-006",content:'*\n<a href="http://msdn.microsoft.com/en-us/library/ms743593.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms743593.aspx</a>\ngives an overview of topics discussing brushes and related types'}]}]},{tagname:"section",id:"customizing_interaction",title:"Customizing User Interaction",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction-015-simpara-001",content:"yFiles for HTML supports a wide range of user interactions for creating and editing diagrams.\nAll user interactions are configurable to a wide extent, making it possible\nto impose constraints, change visible feedback, or even completely\nchange gestures and introduce new ways of user interaction."},{tagname:"para","class":"dguide-para",id:"customizing_interaction-015-simpara-002",content:'This section shows how to customize the various user interactions supported by yFiles for HTML.\nA general explanation of the user interactions can be found in chapter\n<a href="#/dguide/interaction">User Interaction</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction-015-simpara-003",content:'Some customizations require the knowledge of certain design patterns or API concepts.\nA general explanation of the most important concepts is listed in the chapter\n<a href="#/dguide/customizing_concepts">General Concepts for Customization</a>.'},{tagname:"section",id:"customizing_interaction_canvas_navigation",xreflabel:"Customizing Canvas Navigation",title:"Zooming, Panning, and Scrolling",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_canvas_navigation-439-simpara-001",content:'Canvas navigation can be divided into two main categories:\nzooming and scrollbar handling which is managed by the <span class="api">CanvasComponent</span> itself,\nand panning which is managed by the <span class="api">MoveViewportInputMode</span>.'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_canvas_navigation-439-note-001",content:'<p id="customizing_interaction_canvas_navigation-439-simpara-002">The scrollable area as well as the zoom can be efficiently limited using a\n  <api-link id="customizing_interaction_canvas_navigation-439-api-link-001" data-member="" data-text="ViewportLimiter" data-type="yfiles.view.ViewportLimiter"></api-link> as discussed in the section <a href="#/dguide/customizing_view_limit_viewport">Restricting the Viewport</a>.</p>'},{tagname:"section",id:"customizing_interaction_canvascontrol",xreflabel:"Customizing {GraphControl}`'s Navigation Features",title:"Mouse Wheel and Scroll Bars",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_canvascontrol-440-simpara-001",content:'The <span class="api">GraphComponent</span> provides a number of properties which allow\nspecifying mouse wheel behavior, scroll bar policy, and zoom limits.'},{tagname:"para",content:'<dl id="customizing_interaction_canvascontrol-440-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_canvascontrol-440-term-001"><api-link id="customizing_interaction_canvascontrol-440-api-link-001" data-member="mouseWheelBehavior" data-text="mouseWheelBehavior" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-001">\n<p id="customizing_interaction_canvascontrol-440-simpara-002">Whether the mouse wheel is used to zoom or scroll (or both).</p>\n</dd>\n<dt id="customizing_interaction_canvascontrol-440-term-002"><api-link id="customizing_interaction_canvascontrol-440-api-link-002" data-member="mouseWheelZoomFactor" data-text="mouseWheelZoomFactor" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-002">\n<p id="customizing_interaction_canvascontrol-440-simpara-003">How fast the zoom level changes when the mouse wheel is turned.</p>\n</dd>\n<dt id="customizing_interaction_canvascontrol-440-term-003"><api-link id="customizing_interaction_canvascontrol-440-api-link-003" data-member="mouseWheelScrollFactor" data-text="mouseWheelScrollFactor" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-003">\n<p id="customizing_interaction_canvascontrol-440-simpara-004">How fast the viewport scrolls when the mouse wheel is turned.</p>\n</dd>\n<dt id="customizing_interaction_canvascontrol-440-term-004"><api-link id="customizing_interaction_canvascontrol-440-api-link-004" data-member="centerZoomEventRecognizer" data-text="centerZoomEventRecognizer" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-004">\n<p id="customizing_interaction_canvascontrol-440-simpara-005">An event recognizer which determines whether\nzooming is towards the center of the view or towards the mouse location.</p>\n</dd>\n<dt id="customizing_interaction_canvascontrol-440-term-005"><api-link id="customizing_interaction_canvascontrol-440-api-link-005" data-member="verticalScrollBarPolicy" data-text="verticalScrollBarPolicy" data-type="yfiles.view.CanvasComponent"></api-link></dt><dt id="customizing_interaction_canvascontrol-440-term-006"><api-link id="customizing_interaction_canvascontrol-440-api-link-006" data-member="horizontalScrollBarPolicy" data-text="horizontalScrollBarPolicy" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-005">\n<p id="customizing_interaction_canvascontrol-440-simpara-006">Whether and when to display vertical and horizontal scroll bars.</p>\n</dd>\n<dt id="customizing_interaction_canvascontrol-440-term-007"><api-link id="customizing_interaction_canvascontrol-440-api-link-007" data-member="minimumZoom" data-text="minimumZoom" data-type="yfiles.view.CanvasComponent"></api-link></dt><dt id="customizing_interaction_canvascontrol-440-term-008"><api-link id="customizing_interaction_canvascontrol-440-api-link-008" data-member="maximumZoom" data-text="maximumZoom" data-type="yfiles.view.CanvasComponent"></api-link></dt><dd id="customizing_interaction_canvascontrol-440-listitem-006">\n<p id="customizing_interaction_canvascontrol-440-simpara-007">Minimum and maximum allowed values for the <api-link id="customizing_interaction_canvascontrol-440-api-link-009" data-member="zoom" data-text="zoom factor" data-type="yfiles.view.CanvasComponent"></api-link>.</p>\n</dd>\n</dl>'},{tagname:"table","class":"",id:"customizing_interaction_canvascontrol-440-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_canvascontrol-440-thead-001"><tr id="customizing_interaction_canvascontrol-440-row-001"><th id="customizing_interaction_canvascontrol-440-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_canvascontrol-440-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_canvascontrol-440-tbody-001"><tr id="customizing_interaction_canvascontrol-440-row-002"><td id="customizing_interaction_canvascontrol-440-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_canvascontrol-440-simpara-008"><api-link id="customizing_interaction_canvascontrol-440-api-link-010" data-member="ViewportChanged" data-text="ViewportChanged" data-type="yfiles.view.CanvasComponent"></api-link></para></td><td id="customizing_interaction_canvascontrol-440-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_canvascontrol-440-simpara-009">…​ the viewport has been changed.\n  This also happens when the zoom factor changes, or the scrollbars change visibility.</para></td></tr><tr id="customizing_interaction_canvascontrol-440-row-003"><td id="customizing_interaction_canvascontrol-440-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_canvascontrol-440-simpara-010"><api-link id="customizing_interaction_canvascontrol-440-api-link-011" data-member="ZoomChanged" data-text="ZoomChanged" data-type="yfiles.view.CanvasComponent"></api-link></para></td><td id="customizing_interaction_canvascontrol-440-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_canvascontrol-440-simpara-011">…​ the zoom factor has been changed.</para></td></tr></tbody>'}]},{tagname:"section",id:"customizing_interaction_panning",xreflabel:"Customizing Panning",title:"Panning",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_panning-441-simpara-001",content:'Panning, i.e. dragging the visible area with the mouse, is handled by\n<api-link id="customizing_interaction_panning-441-api-link-001" data-member="" data-text="MoveViewportInputMode" data-type="yfiles.input.MoveViewportInputMode"></api-link>.\nThis input mode is a child input mode of both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_panning-441-simpara-002",content:'<span class="api">MoveViewportInputMode</span> allows\ncustomization by changing the recognizers for some gestures.\nThis might be of importance to avoid conflicts with input modes\nwhich share the same gesture (dragging on an empty canvas),\ne.g. <a href="#/dguide/customizing_interaction_marquee">MarqueeSelectionInputMode</a> or <a href="#/dguide/customizing_interaction_lasso">LassoSelectionInputMode</a>.'},{tagname:"para",content:'<dl id="customizing_interaction_panning-441-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_panning-441-term-001"><api-link id="customizing_interaction_panning-441-api-link-002" data-member="pressedRecognizer" data-text="pressedRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-001">\n<p id="customizing_interaction_panning-441-simpara-003">An event recognizer which returns <code>true</code> if an event\nis recognized as a valid gesture during viewport movement. This\nrecognizer <strong id="customizing_interaction_panning-441-emphasis-001" class="bold" role="bold">has</strong> to return <code>true</code> for all events during the complete drag gesture.</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-002"><api-link id="customizing_interaction_panning-441-api-link-003" data-member="draggedRecognizer" data-text="draggedRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-002">\n<p id="customizing_interaction_panning-441-simpara-004">An event recognizer which returns <code>true</code> if an event\nis recognized as a drag gesture that actually starts moving the viewport.\nThis is only queried if the <span class="api">pressedRecognizer</span>\nalready returns <code>true</code>.</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-003"><api-link id="customizing_interaction_panning-441-api-link-004" data-member="releasedRecognizer" data-text="releasedRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-003">\n<p id="customizing_interaction_panning-441-simpara-005">An event recognizer which returns <code>true</code> if an event\nis recognized as a valid gesture to finish panning.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_panning-441-simpara-006",content:'<span class="api">MoveViewportInputMode</span> also supports touch gestures.\nBesides panning its touch support also manages zooming by pinch gestures.'},{tagname:"para",content:'<dl id="customizing_interaction_panning-441-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_panning-441-term-004"><api-link id="customizing_interaction_panning-441-api-link-005" data-member="primaryDownRecognizer" data-text="primaryDownRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-004">\n<p id="customizing_interaction_panning-441-simpara-007">An event recognizer which returns <code>true</code> if an event\nis recognized as a gesture that can start a marquee selection or a pinch zoom,\nusually the primary touch (i.e. "first finger down").</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-005"><api-link id="customizing_interaction_panning-441-api-link-006" data-member="primaryMoveRecognizer" data-text="primaryMoveRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-005">\n<p id="customizing_interaction_panning-441-simpara-008">An event recognizer which returns <code>true</code> if an event\nis recognized as a drag gesture. The gesture actually starts moving the viewport if no secondary touch\ndevice is down, otherwise it starts a pinch zoom gesture.\nThis is only queried if the <span class="api">primaryMoveRecognizer</span>\nalready returns <code>true</code>.</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-006"><api-link id="customizing_interaction_panning-441-api-link-007" data-member="primaryUpRecognizer" data-text="primaryUpRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-006">\n<p id="customizing_interaction_panning-441-simpara-009">An event recognizer which returns <code>true</code> if an event\nis recognized as a valid gesture to finish panning.</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-007"><api-link id="customizing_interaction_panning-441-api-link-008" data-member="secondaryDownRecognizer" data-text="secondaryDownRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-007">\n<p id="customizing_interaction_panning-441-simpara-010">An event recognizer which returns <code>true</code> if an event\nis recognized as a valid gesture to start the actual pinch zoom,\nusually the second touch ("second finger down").\n<api-link id="customizing_interaction_panning-441-api-link-009" data-member="secondaryMoveRecognizer" data-text="secondaryMoveRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></p>\n<p id="customizing_interaction_panning-441-simpara-011">An event recognizer which returns <code>true</code> if an event\nis recognized as a pinch gesture (if primary touch device is down)\nor pan (if no primary touch device is down).</p>\n</dd>\n<dt id="customizing_interaction_panning-441-term-008"><api-link id="customizing_interaction_panning-441-api-link-010" data-member="secondaryUpRecognizer" data-text="secondaryUpRecognizer" data-type="yfiles.input.MoveViewportInputMode"></api-link></dt><dd id="customizing_interaction_panning-441-listitem-008">\n<p id="customizing_interaction_panning-441-simpara-012">An event recognizer which returns <code>true</code> if an event\nis recognized as a valid gesture to finish pinch zoom or panning if no primary touch is down.</p>\n</dd>\n</dl>'},{tagname:"table","class":"",id:"customizing_interaction_panning-441-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_panning-441-thead-001"><tr id="customizing_interaction_panning-441-row-001"><th id="customizing_interaction_panning-441-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_panning-441-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_panning-441-tbody-001"><tr id="customizing_interaction_panning-441-row-002"><td id="customizing_interaction_panning-441-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-013"><api-link id="customizing_interaction_panning-441-api-link-011" data-member="DragStarting" data-text="DragStarting" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-014">…​ a drag gesture is recognized, but before the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_panning-441-row-003"><td id="customizing_interaction_panning-441-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-015"><api-link id="customizing_interaction_panning-441-api-link-012" data-member="DragStarted" data-text="DragStarted" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-016">…​ a drag gesture is recognized, after the input mode has been initialized for dragging.</para></td></tr><tr id="customizing_interaction_panning-441-row-004"><td id="customizing_interaction_panning-441-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-017"><api-link id="customizing_interaction_panning-441-api-link-013" data-member="Dragging" data-text="Dragging" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-018">…​ the mouse is moved during drag operations and before the viewport is moved in response to that drag.</para></td></tr><tr id="customizing_interaction_panning-441-row-005"><td id="customizing_interaction_panning-441-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-019"><api-link id="customizing_interaction_panning-441-api-link-014" data-member="Dragged" data-text="Dragged" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-020">…​ the mouse is moved during drag operations and after the viewport has been moved in response to that drag.</para></td></tr><tr id="customizing_interaction_panning-441-row-006"><td id="customizing_interaction_panning-441-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-021"><api-link id="customizing_interaction_panning-441-api-link-015" data-member="DragCanceling" data-text="DragCanceling" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-022">…​ a drag gesture is canceled, but before the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_panning-441-row-007"><td id="customizing_interaction_panning-441-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-023"><api-link id="customizing_interaction_panning-441-api-link-016" data-member="DragCanceled" data-text="DragCanceled" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-024">…​ a drag gesture is canceled, after the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_panning-441-row-008"><td id="customizing_interaction_panning-441-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-025"><api-link id="customizing_interaction_panning-441-api-link-017" data-member="DragFinishing" data-text="DragFinishing" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-026">…​ a drag gesture has ended successfully, but before any final cleanup happens.</para></td></tr><tr id="customizing_interaction_panning-441-row-009"><td id="customizing_interaction_panning-441-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-027"><api-link id="customizing_interaction_panning-441-api-link-018" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.MoveViewportInputMode"></api-link></para></td><td id="customizing_interaction_panning-441-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_panning-441-simpara-028">…​ a drag gesture has ended successfully, after final cleanup has happened.</para></td></tr></tbody>'}]}]},{tagname:"section",id:"customizing_interaction_creating_nodes",xreflabel:"Customizing Creating Nodes",title:"Creating Nodes",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_nodes-442-simpara-001",content:'<a href="#/dguide/interaction-creating_nodes">Node creation</a> by clicking or tapping on an empty canvas location is handled by <span class="api">GraphEditorInputMode</span>.\nYou can turn it off by setting <span class="api">GraphEditorInputMode</span>’s\n<api-link id="customizing_interaction_creating_nodes-442-api-link-001" data-member="allowCreateNode" data-text="allowCreateNode" data-type="yfiles.input.GraphEditorInputMode"></api-link> property to false.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_nodes-442-simpara-002",content:'You can customize the actual node creation by providing a custom\n<api-link id="customizing_interaction_creating_nodes-442-api-link-002" data-member="nodeCreator" data-text="nodeCreator" data-type="yfiles.input.GraphEditorInputMode"></api-link> callback.\nThe default node creator creates a node with default style and size in the\ngiven graph at the given location with the given parent.\nA custom node creator can be used to create a node a different way. Note that it can also return <code>null</code> to prevent\nnode creation.'},{tagname:"example",id:"customizing_interaction_creating_nodes-442-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_nodes-442-programlisting-001" language="javascript" format="linespecific"><code>// set a custom node creator which creates a label on the new node\r\ngraphEditorInputMode.nodeCreator = (context, graph, location, parent) => {\r\n  // create a node at the location with the given parent and the default size\r\n  let node\r\n  if (parent !== null) {\r\n    node = graph.createNode(\r\n      parent,\r\n      yfiles.geometry.Rect.fromCenter(location, graph.nodeDefaults.size)\r\n    )\r\n  } else {\r\n    node = graph.createNode(yfiles.geometry.Rect.fromCenter(location, graph.nodeDefaults.size))\r\n  }\r\n  // add a label\r\n  graph.addLabel(node, \'A new node\')\r\n  // return the new node\r\n  return node\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_nodes-442-simpara-003",content:'The node creator will only be called if <api-link id="customizing_interaction_creating_nodes-442-api-link-003" data-member="allowCreateNode" data-text="allowCreateNode" data-type="yfiles.input.GraphEditorInputMode"></api-link> is <code>true</code>.\nBy default it is called with the topmost group node at the click location as parent. If the node creator returns\na node an event is dispatched and the new node is set as current item. You can customize this behavior by\noverriding <api-link id="customizing_interaction_creating_nodes-442-api-link-004" data-member="createNode(yfiles.geometry.Point)" data-text="createNode" data-type="yfiles.input.GraphEditorInputMode"></api-link>.'},{tagname:"table","class":"",id:"customizing_interaction_creating_nodes-442-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_creating_nodes-442-thead-001"><tr id="customizing_interaction_creating_nodes-442-row-001"><th id="customizing_interaction_creating_nodes-442-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_creating_nodes-442-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_creating_nodes-442-tbody-001"><tr id="customizing_interaction_creating_nodes-442-row-002"><td id="customizing_interaction_creating_nodes-442-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_nodes-442-simpara-004"><api-link id="customizing_interaction_creating_nodes-442-api-link-005" data-member="NodeCreated" data-text="NodeCreated" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_creating_nodes-442-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_nodes-442-simpara-005">…​ a node has been created by <span class="api">GraphEditorInputMode</span></para></td></tr></tbody>'}]},{tagname:"section",id:"customizing_interaction_creating_edges",xreflabel:"Customizing Creating Edges",title:"Creating Edges",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-001",content:'<a href="#/dguide/interaction-creating_edges">Edge creation</a> is handled by <api-link id="customizing_interaction_creating_edges-443-api-link-001" data-member="" data-text="CreateEdgeInputMode" data-type="yfiles.input.CreateEdgeInputMode"></api-link>,\nmostly used as a child input mode of <span class="api">GraphEditorInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-002",content:'The actual edge creation is done in method <api-link id="customizing_interaction_creating_edges-443-api-link-002" data-member="createEdge(yfiles.graph.IGraph,yfiles.input.IPortCandidate,yfiles.input.IPortCandidate)" data-text="createEdge" data-type="yfiles.input.CreateEdgeInputMode"></api-link> which\nitself delegates to the callback set in <api-link id="customizing_interaction_creating_edges-443-api-link-003" data-member="edgeCreator" data-text="edgeCreator" data-type="yfiles.input.CreateEdgeInputMode"></api-link>.\nWhile it is possible to customize the actual edge creation by overriding\n<span class="api">createEdge</span> setting a new\n<span class="api">edgeCreator</span> should be preferred:'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-001" language="javascript" format="linespecific"><code>// set a custom edge creator which creates a label on the new edge\r\ngraphEditorInputMode.createEdgeInputMode.edgeCreator = (\r\n  context,\r\n  graph,\r\n  sourceCandidate,\r\n  targetCandidate,\r\n  dummyEdge\r\n) => {\r\n  // the targetCandidate might be null if the edge creation ended prematurely\r\n  if (targetCandidate === null) {\r\n    // no target - no edge\r\n    return null\r\n  }\r\n  // get the source and target ports from the candidates\r\n  let sourcePort = sourceCandidate.port || sourceCandidate.createPort(context)\r\n  let targetPort = targetCandidate.port || targetCandidate.createPort(context)\r\n  // create the edge between the source and target port\r\n  let edge = graph.createEdge(sourcePort, targetPort, dummyEdge.style)\r\n  // create a label\r\n  graph.addLabel(edge, \'A new edge\')\r\n  // return the created edge\r\n  return edge\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"customizing_interaction_creating_edges-443-tip-001",content:'<p id="customizing_interaction_creating_edges-443-simpara-003">If <api-link id="customizing_interaction_creating_edges-443-api-link-004" data-member="prematureEndHitTestable" data-text="prematureEndHitTestable" data-type="yfiles.input.CreateEdgeInputMode"></api-link> is not changed the\n<span class="api">edgeCreator</span>\'s <code>targetCandidate</code> parameter is\nnever <code>null</code>.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-004",content:'During edge creation a preview of the new edge is shown. The <span class="api">IEdge</span> instance which represents\nthis preview edge can be retrieved via the <api-link id="customizing_interaction_creating_edges-443-api-link-005" data-member="dummyEdge" data-text="dummyEdge" data-type="yfiles.input.CreateEdgeInputMode"></api-link>\nproperty. You can change this preview edge (e.g. setting a different style, or adding labels) using the graph provided by\n<api-link id="customizing_interaction_creating_edges-443-api-link-006" data-member="dummyEdgeGraph" data-text="dummyEdgeGraph" data-type="yfiles.input.CreateEdgeInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-005",content:'By default, all properties of the preview edge are copied to the final edge that is created eventually.\nThis includes bends, style, labels, and the edge’s tag.\nThus, a viable option for customizing the created edge can also be to change the preview edge\nduring the gesture, and have those changes copied automatically to the final edge.\nThis has the benefit that the changes show up during the gesture, as opposed to changes\ndone by the <span class="api">edgeCreator</span>, which are only\napplied after the edge creation gesture is already complete:'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-002",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-002" language="javascript" format="linespecific"><code>// add an event handler for the GestureStarting event that adds a label to the dummy edge\r\ngraphEditorInputMode.createEdgeInputMode.addGestureStartingListener((sender, args) => {\r\n  let createEdgeInputMode = sender\r\n  createEdgeInputMode.dummyEdgeGraph.addLabel(createEdgeInputMode.dummyEdge, \'A new edge\')\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-006",content:"The preview edge is reset to its default state after every edge creation gesture, so\nno further cleanup is necessary to prevent preview edge changes from persisting over\nmultiple gestures."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-007",content:"The following events occur during an edge creation gesture (in the order they might occur):"},{tagname:"table","class":"",id:"customizing_interaction_creating_edges-443-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_creating_edges-443-thead-001"><tr id="customizing_interaction_creating_edges-443-row-001"><th id="customizing_interaction_creating_edges-443-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_creating_edges-443-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_creating_edges-443-tbody-001"><tr id="customizing_interaction_creating_edges-443-row-002"><td id="customizing_interaction_creating_edges-443-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-008"><api-link id="customizing_interaction_creating_edges-443-api-link-007" data-member="EdgeCreationStarted" data-text="EdgeCreationStarted" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-009">…​ the edge creation has started, i.e., when the cursor is dragged over the source node.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-003"><td id="customizing_interaction_creating_edges-443-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-010"><api-link id="customizing_interaction_creating_edges-443-api-link-008" data-member="GestureStarting" data-text="GestureStarting" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-011">…​ <span class="api">CreateEdgeInputMode</span> begins its actual creation gesture (i.e., starting to drag the edge from its source node).\n  This event is raised before the preparations start.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-004"><td id="customizing_interaction_creating_edges-443-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-012"><api-link id="customizing_interaction_creating_edges-443-api-link-009" data-member="GestureStarted" data-text="GestureStarted" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-013">…​ <span class="api">CreateEdgeInputMode</span> begins its actual creation gesture (i.e., starting to drag the edge from its source node).\n  This event is raised after the preparations have been finished.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-005"><td id="customizing_interaction_creating_edges-443-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-014"><api-link id="customizing_interaction_creating_edges-443-api-link-010" data-member="Moving" data-text="Moving" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-015">…​ the mouse moved during the drag operation and before any actions related to that drag are performed.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-006"><td id="customizing_interaction_creating_edges-443-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-016"><api-link id="customizing_interaction_creating_edges-443-api-link-011" data-member="Moved" data-text="Moved" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-017">…​ the mouse moved during the drag operation and after any actions related to that drag have been performed.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-007"><td id="customizing_interaction_creating_edges-443-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-018"><api-link id="customizing_interaction_creating_edges-443-api-link-012" data-member="SourcePortCandidateChanged" data-text="SourcePortCandidateChanged" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-019">…​ the value of <api-link id="customizing_interaction_creating_edges-443-api-link-013" data-member="sourcePortCandidate" data-text="sourcePortCandidate" data-type="yfiles.input.CreateEdgeInputMode"></api-link> changes.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-008"><td id="customizing_interaction_creating_edges-443-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-020"><api-link id="customizing_interaction_creating_edges-443-api-link-014" data-member="TargetPortCandidateChanged" data-text="TargetPortCandidateChanged" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-021">…​ the value of <api-link id="customizing_interaction_creating_edges-443-api-link-015" data-member="targetPortCandidate" data-text="targetPortCandidate" data-type="yfiles.input.CreateEdgeInputMode"></api-link> changes.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-009"><td id="customizing_interaction_creating_edges-443-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-022"><api-link id="customizing_interaction_creating_edges-443-api-link-016" data-member="GestureCanceling" data-text="GestureCanceling" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-023">…​ the edge creation is about to be aborted,\n  before the input mode has been reset to its initial state.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-010"><td id="customizing_interaction_creating_edges-443-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-024"><api-link id="customizing_interaction_creating_edges-443-api-link-017" data-member="GestureCanceled" data-text="GestureCanceled" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-025">…​ the edge creation has been aborted and the input mode has been reset to its initial state.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-011"><td id="customizing_interaction_creating_edges-443-entry-021" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-026"><api-link id="customizing_interaction_creating_edges-443-api-link-018" data-member="GestureFinishing" data-text="GestureFinishing" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-022" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-027">…​ the edge creation gesture is about be finished.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-012"><td id="customizing_interaction_creating_edges-443-entry-023" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-028"><api-link id="customizing_interaction_creating_edges-443-api-link-019" data-member="PortAdded" data-text="PortAdded" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-024" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-029">…​ a new port is created during edge creation.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-013"><td id="customizing_interaction_creating_edges-443-entry-025" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-030"><api-link id="customizing_interaction_creating_edges-443-api-link-020" data-member="EdgeCreated" data-text="EdgeCreated" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-026" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-031">…​ an edge has been created. The new edge is already present in the graph at this point.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-014"><td id="customizing_interaction_creating_edges-443-entry-027" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-032"><api-link id="customizing_interaction_creating_edges-443-api-link-021" data-member="GestureFinished" data-text="GestureFinished" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-028" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-033">…​ the edge creation gesture has been completely finished, i.e. after the edge has been created and the\n  input mode has been reset to its initial state.</para></td></tr></tbody>'},{tagname:"heading",id:"customizing_interaction_port_candidates",renderas:"sect3",content:"Port Candidates and Port Candidate Providers"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-034",content:'Fine-grained control where edges can and cannot connect during interactive edge creation\nis possible using port candidates: <span class="api">CreateEdgeInputMode</span> retrieves an <api-link id="customizing_interaction_creating_edges-443-api-link-022" data-member="" data-text="IPortCandidateProvider" data-type="yfiles.input.IPortCandidateProvider"></api-link>\nto find potential candidates for both source and target ports.\nThe provider returns a set of port candidates which represent potential connection points for source and target\nports for the edge to be created.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-035",content:'An <api-link id="customizing_interaction_creating_edges-443-api-link-023" data-member="" data-text="IPortCandidate" data-type="yfiles.input.IPortCandidate"></api-link> represents a <strong id="customizing_interaction_creating_edges-443-emphasis-001" class="bold" role="bold">potential</strong> port. Depending on the implementation\nthis can be an existing port, but could also be a placeholder for a port yet to be created.\nFurthermore, an <span class="api">IPortCandidate</span> has a <api-link id="customizing_interaction_creating_edges-443-api-link-024" data-member="validity" data-text="validity" data-type="yfiles.input.IPortCandidate"></api-link> that changes how (or if) edges can connect to it. <span class="api">CreateEdgeInputMode</span> can potentially connect\nthe edge to be created to a <api-link id="customizing_interaction_creating_edges-443-api-link-025" data-member="VALID" data-text="valid" data-type="yfiles.input.PortCandidateValidity"></api-link> port candidate\nbut not to an <api-link id="customizing_interaction_creating_edges-443-api-link-026" data-member="INVALID" data-text="invalid" data-type="yfiles.input.PortCandidateValidity"></api-link> one.'},{tagname:"figure","class":"image",title:"Port candidates and edge creation: no candidates, invalid candidate, valid candidate",id:"customizing_interaction_creating_edges-443-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_port_candidates.40854981.png",alt:"",title:'<para class="dguide-para">Invalid port candidates add visual feedback to edge creation: the red square of the invalid port candidate in the middle shows explicitly that it is not allowed to connect to that node.</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-036",content:'Note that invalid port candidates are visually indicated, thus providing a better user experience than simply not\nproviding a port candidate.\nThey can also help distinguishing the case “no edge may connect here” (no candidate)\nfrom “<strong id="customizing_interaction_creating_edges-443-emphasis-002" class="bold" role="bold">this</strong> edge may not connect here” (invalid candidate) — similar to disabled UI controls.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-037",content:'A third kind of validity is <api-link id="customizing_interaction_creating_edges-443-api-link-027" data-member="DYNAMIC" data-text="DYNAMIC" data-type="yfiles.input.PortCandidateValidity"></api-link>: a dynamic port candidate\nhas no fixed position but will be placed at the current (cursor) location. This usually has to be accompanied by\na gesture, usually the <kbd>Shift ⇧</kbd> key held down.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-038",content:'When edge creation is finished <span class="api">IPortCandidate</span>’s <api-link id="customizing_interaction_creating_edges-443-api-link-028" data-member="port" data-text="port" data-type="yfiles.input.IPortCandidate"></api-link> property\nis queried first. If the candidate represents an existing port, that port is used. If not, the\n<api-link id="customizing_interaction_creating_edges-443-api-link-029" data-member="createPort(yfiles.input.IInputModeContext)" data-text="createPort" data-type="yfiles.input.IPortCandidate"></api-link> method\nis called by <span class="api">CreateEdgeInputMode</span> to create and provide an appropriate port.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-039",content:'<span class="api">IPortCandidate</span>s are provided by an <api-link id="customizing_interaction_creating_edges-443-api-link-030" data-member="" data-text="IPortCandidateProvider" data-type="yfiles.input.IPortCandidateProvider"></api-link> which is retrieved from the\n<a href="#/dguide/customizing_concepts_lookup">lookup</a> of a potential port owner. During edge creation <span class="api">CreateEdgeInputMode</span> calls the following methods:'},{tagname:"table","class":"",id:"customizing_interaction_creating_edges-443-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="customizing_interaction_creating_edges-443-thead-002"><tr id="customizing_interaction_creating_edges-443-row-015"><th id="customizing_interaction_creating_edges-443-entry-029" align="left" valign="top">\nMethod\n</th><th id="customizing_interaction_creating_edges-443-entry-030" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_creating_edges-443-tbody-002"><tr id="customizing_interaction_creating_edges-443-row-016"><td id="customizing_interaction_creating_edges-443-entry-031" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-040"><api-link id="customizing_interaction_creating_edges-443-api-link-031" data-member="getAllSourcePortCandidates(yfiles.input.IInputModeContext)" data-text="getAllSourcePortCandidates(IInputModeContext)" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-032" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-041">Called at the beginning of edge creation for a list of all possible candidates for an edge’s source port.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-017"><td id="customizing_interaction_creating_edges-443-entry-033" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-042"><api-link id="customizing_interaction_creating_edges-443-api-link-032" data-member="getTargetPortCandidates(yfiles.input.IInputModeContext,yfiles.input.IPortCandidate)" data-text="getTargetPortCandidates(IInputModeContext, IPortCandidate)" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-034" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-043">Called during edge creation for a list of all possible candidates for a target port for an edge\n  which starts at the given source port candidate.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-018"><td id="customizing_interaction_creating_edges-443-entry-035" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-044"><api-link id="customizing_interaction_creating_edges-443-api-link-033" data-member="getAllTargetPortCandidates(yfiles.input.IInputModeContext)" data-text="getAllTargetPortCandidates(IInputModeContext)" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-036" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-045">Called during edge creation for a list of all possible candidates for target ports.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-019"><td id="customizing_interaction_creating_edges-443-entry-037" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-046"><api-link id="customizing_interaction_creating_edges-443-api-link-034" data-member="getSourcePortCandidates(yfiles.input.IInputModeContext,yfiles.input.IPortCandidate)" data-text="getSourcePortCandidates(IInputModeContext, IPortCandidate)" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-038" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-047">Should return a list of possible candidates for source ports opposite to the given target port candidate.\n  Some <span class="api">IEdgeReconnectionPortCandidateProvider</span> implementations may delegate to this method to find a new source port during\n  <a href="#/dguide/customizing_interaction_edge_reconnection">edge reconnection</a>.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-048",content:"Implementers have to implement above methods to return an appropriate list of candidates. Note that this list may be\nempty (or contain only invalid candidates) if an edge should not connect to the owner which is related to the provider."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-049",content:'The <api-link id="customizing_interaction_creating_edges-443-api-link-035" data-member="" data-text="PortCandidateProviderBase" data-type="yfiles.input.PortCandidateProviderBase"></api-link> class is a simplification of the\n<span class="api">IPortCandidateProvider</span> interface. All its <span class="api">IPortCandidateProvider</span> method implementations delegate to the\n<api-link id="customizing_interaction_creating_edges-443-api-link-036" data-member="getPortCandidates(yfiles.input.IInputModeContext)" data-text="getPortCandidates" data-type="yfiles.input.PortCandidateProviderBase"></api-link> method\nand thus all return the same set of candidates. They can also be overridden to return something different, of course.\nFurthermore, <span class="api">PortCandidateProviderBase</span>\nprovides a set of convenience methods which you can use to easily create port candidates: the\n<api-link id="customizing_interaction_creating_edges-443-api-link-037" data-member="addExistingPorts(yfiles.graph.IPortOwner,yfiles.collections.IList)" data-text="addExistingPorts" data-type="yfiles.input.PortCandidateProviderBase"></api-link> method,\nand <api-link id="customizing_interaction_creating_edges-443-api-link-038" data-member="createCandidate(yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter,boolean)" data-text="createCandidate" data-type="yfiles.input.PortCandidateProviderBase"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-050",content:"The following example shows a simple port candidate provider which allows edges to connect to existing ports, but only if the\nsource port has the same tag as the target port:"},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-003",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-003" language="javascript" format="linespecific"><code>class SameTagPortCandidateProvider extends yfiles.input.PortCandidateProviderBase {\r\n  // each instance is built for a specific port owner\r\n  constructor(owner) {\r\n    super()\r\n    this.owner = owner\r\n  }\r\n\r\n  // the port candidate list which is returned by default\r\n  getPortCandidates(context) {\r\n    // create a new list\r\n    let candidates = new yfiles.collections.List()\r\n    // add candidates for all existing ports\r\n    this.addExistingPorts(this.owner, candidates)\r\n    return candidates\r\n  }\r\n\r\n  // override this method to return candidates for each existing port\r\n  // but mark some as invalid\r\n  getTargetPortCandidates(context, source) {\r\n    return this.owner.ports\r\n      .map(port => {\r\n        // create a candidate\r\n        let pc = new yfiles.input.DefaultPortCandidate(port)\r\n        // mark it as invalid if the source port\'s user tag\r\n        // is not equal to the current port\'s  user tag\r\n        pc.validity =\r\n          port.tag === source.port.tag\r\n            ? yfiles.input.PortCandidateValidity.VALID\r\n            : yfiles.input.PortCandidateValidity.INVALID\r\n        return pc\r\n      })\r\n      .toList()\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-051",content:'The port owner’s lookup has to be modified to return an instance of this provider. You can do this\nusing a <a href="#/dguide/customizing_graph-graph_decorator">NodeDecorator</a>\n(or <span class="api">EdgeDecorator</span> in case of edge to edge connections):'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-004",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-004" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.mementoSupportDecorator.setFactory(\r\n  node => new SameTagPortCandidateProvider(node)\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-052",content:'By default, a node returns a port candidate provider which returns all unoccupied ports if there is at least one, else\nit creates a new port candidate for the center of the node. yFiles for HTML already provides a number of <span class="api">IPortCandidateProvider</span>\nimplementations for the most common use cases which are mostly available through factory methods on the\n<api-link id="customizing_interaction_creating_edges-443-api-link-039" data-member="" data-text="IPortCandidateProvider" data-type="yfiles.input.IPortCandidateProvider"></api-link> interface:'},{tagname:"table","class":"",id:"customizing_interaction_creating_edges-443-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Predefined port candidate providers</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_creating_edges-443-thead-003"><tr id="customizing_interaction_creating_edges-443-row-020"><th id="customizing_interaction_creating_edges-443-entry-039" align="left" valign="top">\nFactory Method\n</th><th id="customizing_interaction_creating_edges-443-entry-040" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_creating_edges-443-tbody-003"><tr id="customizing_interaction_creating_edges-443-row-021"><td id="customizing_interaction_creating_edges-443-entry-041" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-053"><api-link id="customizing_interaction_creating_edges-443-api-link-040" data-member="NO_CANDIDATES" data-text="NO_CANDIDATES" data-type="yfiles.input.IPortCandidateProvider"></api-link> (constant)</para></td><td id="customizing_interaction_creating_edges-443-entry-042" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-054">An <span class="api">IPortCandidateProvider</span> which provides no candidates. This effectively disables edge creation.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-022"><td id="customizing_interaction_creating_edges-443-entry-043" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-055"><api-link id="customizing_interaction_creating_edges-443-api-link-041" data-member="fromExistingPorts(yfiles.graph.IPortOwner)" data-text="fromExistingPorts" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-044" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-056">Creates an <span class="api">IPortCandidateProvider</span> which returns candidates for all ports held by the given port owner.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-023"><td id="customizing_interaction_creating_edges-443-entry-045" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-057"><api-link id="customizing_interaction_creating_edges-443-api-link-042" data-member="fromUnoccupiedPorts(yfiles.graph.IPortOwner)" data-text="fromUnoccupiedPorts" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-046" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-058">Creates an <span class="api">IPortCandidateProvider</span> which returns candidates for all <strong id="customizing_interaction_creating_edges-443-emphasis-003" class="bold" role="bold">unoccupied</strong> ports held by the given port owner.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-024"><td id="customizing_interaction_creating_edges-443-entry-047" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-059"><api-link id="customizing_interaction_creating_edges-443-api-link-043" data-member="fromNodeCenter(yfiles.graph.INode)" data-text="fromNodeCenter" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-048" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-060">Creates an <span class="api">IPortCandidateProvider</span> which returns a single candidate at the given node’s center.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-025"><td id="customizing_interaction_creating_edges-443-entry-049" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-061"><api-link id="customizing_interaction_creating_edges-443-api-link-044" data-member="fromPortDefaults(yfiles.graph.IPortOwner)" data-text="fromPortDefaults" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-050" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-062">Creates an <span class="api">IPortCandidateProvider</span> which returns a single candidate at the\n  <api-link id="customizing_interaction_creating_edges-443-api-link-045" data-member="locationParameter" data-text="default location" data-type="yfiles.graph.IPortDefaults"></api-link>.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-026"><td id="customizing_interaction_creating_edges-443-entry-051" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-063"><api-link id="customizing_interaction_creating_edges-443-api-link-046" data-member="fromCandidates(yfiles.collections.IEnumerable)" data-text="fromCandidates" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-052" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-064">Creates an <span class="api">IPortCandidateProvider</span> which returns the given list of candidates.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-027"><td id="customizing_interaction_creating_edges-443-entry-053" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-065"><api-link id="customizing_interaction_creating_edges-443-api-link-047" data-member="fromShapeGeometry(yfiles.graph.IPortOwner,Array)" data-text="fromShapeGeometry" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-054" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-066">Creates an <span class="api">IPortCandidateProvider</span> which places a list of port candidates along the node’s outline using the given ratios (nodes only).</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-028"><td id="customizing_interaction_creating_edges-443-entry-055" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-067"><api-link id="customizing_interaction_creating_edges-443-api-link-048" data-member="combine(yfiles.collections.IEnumerable)" data-text="combine" data-type="yfiles.input.IPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-056" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-068">Creates an <span class="api">IPortCandidateProvider</span> that returns all candidates returned by any of the given providers.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-069",content:'The <a href="..\\..\\demos\\input\\portcandidateprovider\\index.html" target="blank" class="demo-link" title="Shows how edge creation can be customized.">Port Candidate Provider</a> demo\nshows how to implement <span class="api">IPortCandidateProvider</span> for different purposes.'},{tagname:"heading",id:"customizing_interaction_showing_port_candidates",renderas:"sect3",content:"Showing Port Candidates while Creating Edges"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-070",content:'<span class="api">CreateEdgeInputMode</span> can display port candidates during edge creation.\nIts <span class="api">showPortCandidates</span> property determines which\nport candidates should be displayed.'
},{tagname:"table","class":"",id:"customizing_interaction_creating_edges-443-table-003",colsep:1,frame:"all",rowsep:1,content:'<caption>Displaying port candidates</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_creating_edges-443-thead-004"><tr id="customizing_interaction_creating_edges-443-row-029"><th id="customizing_interaction_creating_edges-443-entry-057" align="left" valign="top"><span class="api">ShowPortCandidates</span> value\n</th><th id="customizing_interaction_creating_edges-443-entry-058" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_creating_edges-443-tbody-004"><tr id="customizing_interaction_creating_edges-443-row-030"><td id="customizing_interaction_creating_edges-443-entry-059" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-071"><api-link id="customizing_interaction_creating_edges-443-api-link-049" data-member="NONE" data-text="NONE" data-type="yfiles.input.ShowPortCandidates"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-060" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-072">Don’t show any port candidates.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-031"><td id="customizing_interaction_creating_edges-443-entry-061" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-073"><api-link id="customizing_interaction_creating_edges-443-api-link-050" data-member="SOURCE" data-text="SOURCE" data-type="yfiles.input.ShowPortCandidates"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-062" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-074">Show port candidates for starting edge creation.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-032"><td id="customizing_interaction_creating_edges-443-entry-063" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-075"><api-link id="customizing_interaction_creating_edges-443-api-link-051" data-member="TARGET" data-text="TARGET" data-type="yfiles.input.ShowPortCandidates"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-064" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-076">Show port candidates for possible ends of the newly created edge.</para></td></tr><tr id="customizing_interaction_creating_edges-443-row-033"><td id="customizing_interaction_creating_edges-443-entry-065" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-077"><api-link id="customizing_interaction_creating_edges-443-api-link-052" data-member="ALL" data-text="ALL" data-type="yfiles.input.ShowPortCandidates"></api-link></para></td><td id="customizing_interaction_creating_edges-443-entry-066" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_creating_edges-443-simpara-078">Show port candidates for both the start and the end of the newly created edge.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-079",content:'Setting this property to\n<span class="api">SOURCE</span> or\n<span class="api">ALL</span>\nwill result in displaying source port candidates for each node the mouse is hovering over.'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-005",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-005" language="javascript" format="linespecific"><code>graphEditorInputMode.createEdgeInputMode.showPortCandidates = yfiles.input.ShowPortCandidates.ALL\n</code></pre>'},{tagname:"figure","class":"image",title:"Showing port candidates for both the start and the end",id:"customizing_interaction_creating_edges-443-figure-002","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_show_port_candidates_1.0a52ab07.png",alt:"",title:'<para class="dguide-para">Starting edge creation</para>'},{tagname:"img",src:"assets/customizing_interaction_show_port_candidates_2.fc3ed56e.png",alt:"",title:'<para class="dguide-para">Creating a bend</para>'},{tagname:"img",src:"assets/customizing_interaction_show_port_candidates_3.4a119dad.png",alt:"",title:'<para class="dguide-para">Finishing edge creation</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-080",content:'For a <span class="api">CreateEdgeInputMode</span> as child of a default\n<span class="api">GraphEditorInputMode</span>\nselected nodes will rather be moved than serve as source of an edge creation.\nThere are two ways to solve this problem:'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-081",content:'We can change the priority of the\n<span class="api">MoveInputMode</span> lower (higher value) than the priority of the\n<span class="api">CreateEdgeInputMode</span> and enable the\n<api-link id="customizing_interaction_creating_edges-443-api-link-053" data-member="startOverCandidateOnly" data-text="startOverCandidateOnly" data-type="yfiles.input.CreateEdgeInputMode"></api-link> property.\nNow you can create edges directly on the candidate. In places where there is no candidate,\nthe selected node can be moved.'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-006",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-006" language="javascript" format="linespecific"><code>graphEditorInputMode.createEdgeInputMode.startOverCandidateOnly = true\r\ngraphEditorInputMode.createEdgeInputMode.priority = 40\r\ngraphEditorInputMode.moveInputMode.priority = 45\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-082",content:"Or we simply do not show candidates on selected nodes with an appropriate hit testable …​"},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-007",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-007" language="javascript" format="linespecific"><code>class UnselectedNodesHitTestable extends yfiles.lang.Class(yfiles.input.IHitTestable) {\r\n  isHit(context, location) {\r\n    const canvas = context.canvasComponent\r\n    return canvas.graph.nodes.some(\r\n      node =>\r\n        !canvas.selection.isSelected(node) &&\r\n        node.style.renderer.getHitTestable(node, node.style).isHit(context, location)\r\n    )\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-083",content:'… and set an instance to the properties\n<api-link id="customizing_interaction_creating_edges-443-api-link-054" data-member="showSourcePortCandidatesHitTestable" data-text="showSourcePortCandidatesHitTestable" data-type="yfiles.input.CreateEdgeInputMode"></api-link> and\n<api-link id="customizing_interaction_creating_edges-443-api-link-055" data-member="beginHitTestable" data-text="beginHitTestable" data-type="yfiles.input.CreateEdgeInputMode"></api-link>.'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-008",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-008" language="javascript" format="linespecific"><code>const hitTestable = new UnselectedNodesHitTestable()\r\ngraphEditorInputMode.createEdgeInputMode.showSourcePortCandidatesHitTestable = hitTestable\r\ngraphEditorInputMode.createEdgeInputMode.beginHitTestable = hitTestable\n</code></pre>'},{tagname:"heading",id:"_example_configuring_createedgeinputmode_to_create_sub_trees",renderas:"sect3",content:"Example: Configuring CreateEdgeInputMode to Create Sub Trees"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-084",content:'In this example we demonstrate the use of various settings to configure <span class="api">CreateEdgeInputMode</span> to a completely different behavior.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-085",content:'By default, <span class="api">CreateEdgeInputMode</span> can only connect two existing nodes. It is, however, possible to let the edge creation\nend anywhere (“prematurely”) and create a new target node at the end point.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-086",content:'First, we configure <span class="api">CreateEdgeInputMode</span> not to end at other nodes by setting the <api-link id="customizing_interaction_creating_edges-443-api-link-056" data-member="endHitTestable" data-text="endHitTestable" data-type="yfiles.input.CreateEdgeInputMode"></api-link>\nto <api-link id="customizing_interaction_creating_edges-443-api-link-057" data-member="NEVER" data-text="IHitTestable.NEVER" data-type="yfiles.input.IHitTestable"></api-link>.\nInstead, we support ending at any location (“prematurely”) by setting the <api-link id="customizing_interaction_creating_edges-443-api-link-058" data-member="prematureEndHitTestable" data-text="prematureEndHitTestable" data-type="yfiles.input.CreateEdgeInputMode"></api-link>\nto <api-link id="customizing_interaction_creating_edges-443-api-link-059" data-member="ALWAYS" data-text="IHitTestable.ALWAYS" data-type="yfiles.input.IHitTestable"></api-link>.'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-009",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-009" language="javascript" format="linespecific"><code>// never search for target ports\r\ncreateEdgeInputMode.endHitTestable = yfiles.input.IHitTestable.NEVER\r\n// any location is a valid target location\r\ncreateEdgeInputMode.prematureEndHitTestable = yfiles.input.IHitTestable.ALWAYS\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-087",content:"Since we don’t want to connect to other nodes we have to turn off snapping to targets. We also turn off\nshowing possible targets."},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-010",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-010" language="javascript" format="linespecific"><code>// don\'t react to target ports\r\ncreateEdgeInputMode.forceSnapToCandidate = false\r\ncreateEdgeInputMode.snapToTargetCandidate = false\r\n// don\'t even show them\r\ncreateEdgeInputMode.showPortCandidates = false\r\ncreateEdgeInputMode.allowSelfloops = false\r\n// don\'t highlight target nodes\r\ngraphComponent.graph.decorator.nodeDecorator.highlightDecorator.hideImplementation()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-088",content:'Since we always create a new node at the target of the edge we want to show the new node already in the preview.\nActually, we always have a target node during edge creation. It is, however, invisible because it has size (0,0)\nand the invisible <span class="api">VoidNodeStyle</span>. To show the the preview target node we have to set the defaults\nof the <api-link id="customizing_interaction_creating_edges-443-api-link-060" data-member="dummyEdgeGraph" data-text="dummyEdgeGraph" data-type="yfiles.input.CreateEdgeInputMode"></api-link>:'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-011",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-011" language="javascript" format="linespecific"><code>// provide a default size\r\ncreateEdgeInputMode.dummyEdgeGraph.nodeDefaults.size = graphComponent.graph.nodeDefaults.size\r\n// set a style to become visible\r\ncreateEdgeInputMode.dummyEdgeGraph.nodeDefaults.style = graphComponent.graph.nodeDefaults.style\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-089",content:'Finally, we have to use an <api-link id="customizing_interaction_creating_edges-443-api-link-061" data-member="edgeCreator" data-text="edgeCreator" data-type="yfiles.input.CreateEdgeInputMode"></api-link> which does not only create a new edge\nbut also a target node to connect the edge to:'},{tagname:"example",id:"customizing_interaction_creating_edges-443-informalexample-012",content:'<pre class="programlisting javascript" id="customizing_interaction_creating_edges-443-programlisting-012" language="javascript" format="linespecific"><code>// let the EdgeCreator create a new target node and connect the new edge to it\r\ncreateEdgeInputMode.edgeCreator = (\r\n  context,\r\n  graph,\r\n  sourcePortCandidate,\r\n  targetPortCandidate,\r\n  dummyEdge\r\n) => {\r\n  // copy the style from the dummy node\r\n  let dummyTargetNode = createEdgeInputMode.dummyTargetNode\r\n  let node = graph.createNode(\r\n    dummyTargetNode.layout.toRect(),\r\n    dummyTargetNode.style,\r\n    dummyTargetNode.tag\r\n  )\r\n  // create a port at the center\r\n  let targetPort = graph.addPort(node, createEdgeInputMode.dummyTargetNodePort.locationParameter)\r\n  // create the edge from the source port candidate to the new node\r\n  return graph.createEdge(sourcePortCandidate.createPort(context), targetPort, dummyEdge.style)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_creating_edges-443-simpara-090",content:'That’s it: now the re-configured <span class="api">CreateEdgeInputMode</span> doesn’t connect two existing nodes anymore. Instead, it creates a new\nconnected node.'},{tagname:"para","class":"dguide-para tip",id:"customizing_interaction_creating_edges-443-tip-002",content:'<p id="customizing_interaction_creating_edges-443-simpara-091">To run a layout after each edge creation you can listen to the <api-link id="customizing_interaction_creating_edges-443-api-link-062" data-member="EdgeCreated" data-text="EdgeCreated" data-type="yfiles.input.CreateEdgeInputMode"></api-link> event.</p>'}]},{tagname:"section",id:"customizing_interaction_edge_reconnection",xreflabel:"Customizing Reconnecting Edges",title:"Reconnecting Edges",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-001",content:"Edge reconnection means moving an edge’s source or target to another port. In yFiles for HTML this is done by\nselecting an edge and dragging the handle which represents its source or target port. Edge reconnection\nis enabled by default, but the edges can only be reconnected to ports at the same owner."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-002",content:'Possible candidates for new source and target nodes are provided by implementations of\n<api-link id="customizing_interaction_edge_reconnection-444-api-link-001" data-member="" data-text="IEdgeReconnectionPortCandidateProvider" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link> which are queried from the edge’s\n<a href="#/dguide/customizing_concepts_lookup">lookup</a>. During reconnections the following methods are queried to return a list of port candidates:'},{tagname:"table","class":"",id:"customizing_interaction_edge_reconnection-444-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="customizing_interaction_edge_reconnection-444-thead-001"><tr id="customizing_interaction_edge_reconnection-444-row-001"><th id="customizing_interaction_edge_reconnection-444-entry-001" align="left" valign="top">\nMethod\n</th><th id="customizing_interaction_edge_reconnection-444-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_edge_reconnection-444-tbody-001"><tr id="customizing_interaction_edge_reconnection-444-row-002"><td id="customizing_interaction_edge_reconnection-444-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-003"><api-link id="customizing_interaction_edge_reconnection-444-api-link-002" data-member="getSourcePortCandidates(yfiles.input.IInputModeContext)" data-text="getSourcePortCandidates(IInputModeContext)" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_edge_reconnection-444-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-004">Queried for a list of all possible candidates for an edge’s source port.</para></td></tr><tr id="customizing_interaction_edge_reconnection-444-row-003"><td id="customizing_interaction_edge_reconnection-444-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-005"><api-link id="customizing_interaction_edge_reconnection-444-api-link-003" data-member="getTargetPortCandidates(yfiles.input.IInputModeContext)" data-text="getTargetPortCandidates(IInputModeContext)" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_edge_reconnection-444-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-006">Queried for a list of all possible candidates for target ports.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-007",content:'Implementers have to implement above methods to return an appropriate list of candidates. Note that this list may be\nempty (or contain only invalid candidates) if an edge cannot be reconnected. The concept of port candidates\nis explained <a href="#/dguide/customizing_interaction_port_candidates">above</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-008",content:'yFiles for HTML already provides a number of <span class="api">IEdgeReconnectionPortCandidateProvider</span> implementations for the most common use cases which\nare available through factory methods or constants on the\n<api-link id="customizing_interaction_edge_reconnection-444-api-link-004" data-member="" data-text="IEdgeReconnectionPortCandidateProvider" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link> interface:'},{tagname:"table","class":"",id:"customizing_interaction_edge_reconnection-444-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Predefined edge reconnection port candidate providers</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_edge_reconnection-444-thead-002"><tr id="customizing_interaction_edge_reconnection-444-row-004"><th id="customizing_interaction_edge_reconnection-444-entry-007" align="left" valign="top">\nConstant / Factory Method\n</th><th id="customizing_interaction_edge_reconnection-444-entry-008" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_edge_reconnection-444-tbody-002"><tr id="customizing_interaction_edge_reconnection-444-row-005"><td id="customizing_interaction_edge_reconnection-444-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-009"><api-link id="customizing_interaction_edge_reconnection-444-api-link-005" data-member="ALL_NODE_CANDIDATES" data-text="ALL_NODE_CANDIDATES" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_edge_reconnection-444-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-010">An <span class="api">IEdgeReconnectionPortCandidateProvider</span> that queries all nodes for their <span class="api">IPortCandidateProvider</span> implementation and returns a union\n  of all port candidates returned by their\n  <api-link id="customizing_interaction_edge_reconnection-444-api-link-006" data-member="getAllSourcePortCandidates(yfiles.input.IInputModeContext)" data-text="getAllSourcePortCandidates" data-type="yfiles.input.IPortCandidateProvider"></api-link>\n  or <api-link id="customizing_interaction_edge_reconnection-444-api-link-007" data-member="getAllTargetPortCandidates(yfiles.input.IInputModeContext)" data-text="getAllTargetPortCandidates" data-type="yfiles.input.IPortCandidateProvider"></api-link>\n  methods.</para></td></tr><tr id="customizing_interaction_edge_reconnection-444-row-006"><td id="customizing_interaction_edge_reconnection-444-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-011"><api-link id="customizing_interaction_edge_reconnection-444-api-link-008" data-member="ALL_NODE_AND_EDGE_CANDIDATES" data-text="ALL_NODE_AND_EDGE_CANDIDATES" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_edge_reconnection-444-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-012">An <span class="api">IEdgeReconnectionPortCandidateProvider</span> that queries all nodes and edges for their <span class="api">IPortCandidateProvider</span> implementation and returns a union\n    of all port candidates returned by their\n    <api-link id="customizing_interaction_edge_reconnection-444-api-link-009" data-member="getAllSourcePortCandidates(yfiles.input.IInputModeContext)" data-text="getAllSourcePortCandidates" data-type="yfiles.input.IPortCandidateProvider"></api-link>\n    or <api-link id="customizing_interaction_edge_reconnection-444-api-link-010" data-member="getAllTargetPortCandidates(yfiles.input.IInputModeContext)" data-text="getAllTargetPortCandidates" data-type="yfiles.input.IPortCandidateProvider"></api-link>\n    methods.</para></td></tr><tr id="customizing_interaction_edge_reconnection-444-row-007"><td id="customizing_interaction_edge_reconnection-444-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-013"><api-link id="customizing_interaction_edge_reconnection-444-api-link-011" data-member="fromSourceAndTarget(yfiles.graph.IEdge)" data-text="fromSourceAndTarget" data-type="yfiles.input.IEdgeReconnectionPortCandidateProvider"></api-link></para></td><td id="customizing_interaction_edge_reconnection-444-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_edge_reconnection-444-simpara-014">Creates an <span class="api">IEdgeReconnectionPortCandidateProvider</span> which queries the edge’s source and target port owner, respectively, for an <span class="api">IPortCandidateProvider</span>\n  which then is queried to return a list of port candidates.\n  This allows to reconnect edges only to other ports on the same node.\n \n  This is the default implementation.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-015",content:'The edge’s lookup has to be modified to return an instance of the new provider. You can do this\nusing an <a href="#/dguide/customizing_graph-graph_decorator">EdgeDecorator</a>:'},{tagname:"example",id:"customizing_interaction_edge_reconnection-444-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_edge_reconnection-444-programlisting-001" language="javascript" format="linespecific"><code>graph.decorator.edgeDecorator.edgeReconnectionPortCandidateProviderDecorator.setImplementation(\r\n  yfiles.input.IEdgeReconnectionPortCandidateProvider.ALL_NODE_CANDIDATES\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_edge_reconnection-444-simpara-016",content:'The tutorial demo application\n<a href="..\\..\\demos\\input\\edgereconnection\\index.html" target="blank" class="demo-link" title="Shows how the reconnection of edge ports can be customized and restricted.">Edge Reconnection</a>\nshows how to implement <span class="api">IEdgeReconnectionPortCandidateProvider</span> for different purposes.'}]},{tagname:"section",id:"customizing_interaction_labels",xreflabel:"Customizing Adding and Editing Labels",title:"Adding and Editing Labels",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-001",content:'<span class="api">GraphEditorInputMode</span> supports interactively adding and editing labels.\nThe most prominent options to control label editing are presented in the <a href="#/dguide/interaction-labels">Adding and Editing Labels</a> section.\nYou can further customize the process of adding or editing labels by overriding the\n<api-link id="customizing_interaction_labels-445-api-link-001" data-member="shouldAddLabel(yfiles.graph.IModelItem)" data-text="shouldAddLabel" data-type="yfiles.input.GraphEditorInputMode"></api-link> and\n<api-link id="customizing_interaction_labels-445-api-link-002" data-member="shouldEditLabel(yfiles.graph.IModelItem)" data-text="shouldEditLabel" data-type="yfiles.input.GraphEditorInputMode"></api-link> methods. For example, you\ncould disallow adding or editing specific labels under certain circumstances.\nThe following example shows how to ensure that label owners have no more than a single label\nby restricting adding labels appropriately:'},{tagname:"example",id:"customizing_interaction_labels-445-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_labels-445-programlisting-001" language="javascript" format="linespecific"><code>shouldAddLabel(item) {\r\n  // the item is an ILabelOwner\r\n  let owner = item\r\n  // don\'t allow more than one label\r\n  return owner.labels.size &lt; 1\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-002",content:"Furthermore, you can use the following two events to achieve very similar results\nto overriding the above methods:"},{tagname:"table","class":"",id:"customizing_interaction_labels-445-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Customization events related to label adding and editing</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_labels-445-thead-001"><tr id="customizing_interaction_labels-445-row-001"><th id="customizing_interaction_labels-445-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_labels-445-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_labels-445-tbody-001"><tr id="customizing_interaction_labels-445-row-002"><td id="customizing_interaction_labels-445-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-003"><api-link id="customizing_interaction_labels-445-api-link-003" data-member="LabelAdding" data-text="LabelAdding" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-004">…​ a label is about to be added.</para></td></tr><tr id="customizing_interaction_labels-445-row-003"><td id="customizing_interaction_labels-445-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-005"><api-link id="customizing_interaction_labels-445-api-link-004" data-member="LabelEditing" data-text="LabelEditing" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-006">…​ a label is about to be edited.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-007",content:'They allow you to change the label editing process completely by calling appropriate\nmethods on their event argument.\nThat argument, a <api-link id="customizing_interaction_labels-445-api-link-005" data-member="" data-text="LabelEditingEventArgs" data-type="yfiles.input.LabelEditingEventArgs"></api-link> instance, offers\nvarious properties to customize editing labels.\nFor example, to achieve the same result as the overloaded\n<span class="api">shouldAddLabel</span> method above, you can also\nuse the following event listener:'},{tagname:"example",id:"customizing_interaction_labels-445-informalexample-002",content:'<pre class="programlisting javascript" id="customizing_interaction_labels-445-programlisting-002" language="javascript" format="linespecific"><code>graphEditorInputMode.addLabelAddingListener((source, args) => {\r\n  if (args.owner.labels.size >= 1) {\r\n    args.cancel = true\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-008",content:'Apart from the <api-link id="customizing_interaction_labels-445-api-link-006" data-member="cancel" data-text="cancel" data-type="yfiles.input.LabelEditingEventArgs"></api-link>\nproperty you can also set a\n<api-link id="customizing_interaction_labels-445-api-link-007" data-member="style" data-text="different style" data-type="yfiles.input.LabelEditingEventArgs"></api-link>,\n<api-link id="customizing_interaction_labels-445-api-link-008" data-member="layoutParameter" data-text="label layout parameter" data-type="yfiles.input.LabelEditingEventArgs"></api-link>,\nor even <api-link id="customizing_interaction_labels-445-api-link-009" data-member="label" data-text="redirect the editing process to a completely different label" data-type="yfiles.input.LabelEditingEventArgs"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-009",content:'<span class="api">GraphEditorInputMode</span> offers a number of other events that allow you to react to certain stages in\nlabel editing:'},{tagname:"table","class":"",id:"customizing_interaction_labels-445-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_labels-445-thead-002"><tr id="customizing_interaction_labels-445-row-004"><th id="customizing_interaction_labels-445-entry-007" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_labels-445-entry-008" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_labels-445-tbody-002"><tr id="customizing_interaction_labels-445-row-005"><td id="customizing_interaction_labels-445-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-010"><api-link id="customizing_interaction_labels-445-api-link-010" data-member="LabelAdded" data-text="LabelAdded" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-011">…​ a label has been added.</para></td></tr><tr id="customizing_interaction_labels-445-row-006"><td id="customizing_interaction_labels-445-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-012"><api-link id="customizing_interaction_labels-445-api-link-011" data-member="LabelTextEditingStarted" data-text="LabelTextEditingStarted" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-013">…​ the text editor is about to be opened for adding or editing a label.</para></td></tr><tr id="customizing_interaction_labels-445-row-007"><td id="customizing_interaction_labels-445-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-014"><api-link id="customizing_interaction_labels-445-api-link-012" data-member="LabelTextChanged" data-text="LabelTextChanged" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-015">…​ a label has been edited successfully.</para></td></tr><tr id="customizing_interaction_labels-445-row-008"><td id="customizing_interaction_labels-445-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-016"><api-link id="customizing_interaction_labels-445-api-link-013" data-member="LabelTextEditingCanceled" data-text="LabelTextEditingCanceled" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-017">…​ text editing has been canceled.</para></td></tr><tr id="customizing_interaction_labels-445-row-009"><td id="customizing_interaction_labels-445-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-018"><api-link id="customizing_interaction_labels-445-api-link-014" data-member="ValidateLabelText" data-text="ValidateLabelText" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-019">…​ text editing has been committed (usually by pressing <kbd>Enter ↵</kbd>).\n  You can use this event to validate the text to apply to the new or edited label. You can set\n  the <api-link id="customizing_interaction_labels-445-api-link-015" data-member="cancel" data-text="cancel" data-type="yfiles.input.LabelTextValidatingEventArgs"></api-link> property to <code>true</code>\n  to prevent setting an invalid label text. This results either in a new label\n  not being added, or an existing label not changing its text.\n  You can also change the text to a different value to implement validation that\n  does not reject new values, but rewrites them.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-020",content:'The <span class="api">LabelAdding</span> and <span class="api">LabelEditing</span> events offer\nquick and easy customization for all items. To change behavior only for certain\nlabel owners or labels, you can also <a href="#/dguide/customizing_graph-graph_decorator">decorate the lookup</a>\nwith a custom implementation of <api-link id="customizing_interaction_labels-445-api-link-016" data-member="" data-text="IEditLabelHelper" data-type="yfiles.input.IEditLabelHelper"></api-link>.\nThis interface defines two callback methods that are functionally identical to the\n<span class="api">LabelAdding</span> and <span class="api">LabelEditing</span> events on <span class="api">GraphEditorInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-021",content:'While the overall process of adding and editing labels is handled by <span class="api">GraphEditorInputMode</span>,\nthe actual text editor is managed by <api-link id="customizing_interaction_labels-445-api-link-017" data-member="" data-text="TextEditorInputMode" data-type="yfiles.input.TextEditorInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-022",content:'Most prominently, <span class="api">TextEditorInputMode</span> displays\na div element containing a <code>textarea</code> which you can obtain from its\n<api-link id="customizing_interaction_labels-445-api-link-018" data-member="editorContainer" data-text="editorContainer" data-type="yfiles.input.TextEditorInputMode"></api-link> property and customize\nas necessary. For example, you can implement custom validation code that rejects\ntyped characters during editing (as opposed to the\n<span class="api">GraphEditorInputMode.ValidateLabelText</span> event which can only reject a\nlabel text after the user pressed <kbd>Enter ↵</kbd>)\nby adding a suitable <code>keypress</code> to the container:'},{tagname:"example",id:"customizing_interaction_labels-445-example-001",title:"Customizing label editing by only allowing numeric input",content:'<pre class="programlisting javascript" id="customizing_interaction_labels-445-programlisting-003" language="javascript" format="linespecific"><code>const editorContainer = graphEditorInputMode.textEditorInputMode.editorContainer\r\neditorContainer.addEventListener(\'keypress\', e => {\r\n  if (e.keyCode >= 48 && e.keyCode &lt;= 57) {\r\n    // prevent numeric input\r\n    e.preventDefault()\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-023",content:'<span class="api">TextEditorInputMode</span> also provides a number of\nevents to listen to:'},{tagname:"table","class":"",id:"customizing_interaction_labels-445-table-003",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_labels-445-thead-003"><tr id="customizing_interaction_labels-445-row-010"><th id="customizing_interaction_labels-445-entry-019" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_labels-445-entry-020" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_labels-445-tbody-003"><tr id="customizing_interaction_labels-445-row-011"><td id="customizing_interaction_labels-445-entry-021" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-024"><api-link id="customizing_interaction_labels-445-api-link-019" data-member="EditingStarted" data-text="EditingStarted" data-type="yfiles.input.TextEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-022" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-025">…​ editing starts, but before the text area is displayed.</para></td></tr><tr id="customizing_interaction_labels-445-row-012"><td id="customizing_interaction_labels-445-entry-023" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-026"><api-link id="customizing_interaction_labels-445-api-link-020" data-member="EditingCanceled" data-text="EditingCanceled" data-type="yfiles.input.TextEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-024" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-027">…​ editing has been canceled.</para></td></tr><tr id="customizing_interaction_labels-445-row-013"><td id="customizing_interaction_labels-445-entry-025" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-028"><api-link id="customizing_interaction_labels-445-api-link-021" data-member="TextEdited" data-text="TextEdited" data-type="yfiles.input.TextEditorInputMode"></api-link></para></td><td id="customizing_interaction_labels-445-entry-026" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_labels-445-simpara-029">…​ label editing has stopped, before the text area is hidden.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_labels-445-simpara-030",content:'The <api-link id="customizing_interaction_labels-445-api-link-022" data-member="" data-text="LabelEditingEventArgs" data-type="yfiles.input.LabelEditingEventArgs"></api-link> used in <span class="api">GraphEditorInputMode</span>’s\n<span class="api">LabelAdding</span> and <span class="api">LabelEditing</span> events\nas well as <span class="api">IEditLabelHelper</span>’s methods\nprovides the <api-link id="customizing_interaction_labels-445-api-link-023" data-member="textEditorInputModeConfigurator" data-text="textEditorInputModeConfigurator" data-type="yfiles.input.LabelEditingEventArgs"></api-link>\nproperty which you can use to configure the\n<span class="api">TextEditorInputMode</span> for a given label.'}]},{tagname:"section",id:"customizing_interaction_deleting",xreflabel:"Customizing Deleting Items",title:"Deleting Items",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_deleting-446-simpara-001",content:'The easiest way to control which items should be deleted is setting the\n<api-link id="customizing_interaction_deleting-446-api-link-001" data-member="deletableItems" data-text="deletableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> or\n<api-link id="customizing_interaction_deleting-446-api-link-002" data-member="deletablePredicate" data-text="deletablePredicate" data-type="yfiles.input.GraphEditorInputMode"></api-link> property as mentioned in the <a href="#/dguide/interaction-deleting">Deleting Items</a> section.\nFor example, the following code snippet will prevent nodes from being deleted when\nthey still have edges connected to them:'},{tagname:"example",id:"customizing_interaction_deleting-446-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_deleting-446-programlisting-001" language="javascript" format="linespecific"><code>// Prevent deletion of nodes that are connected to other nodes\r\ngraphEditorInputMode.deletablePredicate = item => {\r\n  if (yfiles.graph.INode.isInstance(item)) {\r\n    if (graph.edgesAt(item).size !== 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_deleting-446-simpara-002",content:'Alternatively to setting the <span class="api">deletablePredicate</span> property\nyou can also override the <api-link id="customizing_interaction_deleting-446-api-link-003" data-member="shouldDelete(yfiles.graph.IModelItem)" data-text="shouldDelete" data-type="yfiles.input.GraphEditorInputMode"></api-link> method\nfrom which you can also access other protected members of <span class="api">GraphEditorInputMode</span>.'},{tagname:"para","class":"dguide-para important",id:"customizing_interaction_deleting-446-important-001",content:'<p id="customizing_interaction_deleting-446-simpara-003">Note that the <api-link id="customizing_interaction_deleting-446-api-link-004" data-member="shouldDelete(yfiles.graph.IModelItem)" data-text="shouldDelete" data-type="yfiles.input.GraphEditorInputMode"></api-link> method in its default implementation\ndelegates to the <span class="api">deletableItems</span> and <span class="api">deletablePredicate</span> properties.\nThe latter is used to constrain the former.</p><p id="customizing_interaction_deleting-446-simpara-004">Overriding the method without taking into account those properties means that they are ignored\nfor whether items are considered deletable. However, <span class="api">deletableItems</span>\nis still used as a shortcut to decide whether the <span class="api">DELETE</span> command\nshould be enabled or not.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_deleting-446-simpara-005",content:'The <api-link id="customizing_interaction_deleting-446-api-link-005" data-member="deleteSelection()" data-text="deleteSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link> method is called in response to the <api-link id="customizing_interaction_deleting-446-api-link-006" data-member="DELETE" data-text="DELETE" data-type="yfiles.input.ICommand"></api-link> command\nand actually deletes the selected items after querying the <span class="api">shouldDelete</span> method\nfor every item.\nIt also raises the events listed below.\nYou can customize the entire process by overriding this method.'},{tagname:"table","class":"",id:"customizing_interaction_deleting-446-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_deleting-446-thead-001"><tr id="customizing_interaction_deleting-446-row-001"><th id="customizing_interaction_deleting-446-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_deleting-446-entry-002" align="left" valign="top">\nOccurs …​\n</th></tr></thead><tbody id="customizing_interaction_deleting-446-tbody-001"><tr id="customizing_interaction_deleting-446-row-002"><td id="customizing_interaction_deleting-446-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-006"><api-link id="customizing_interaction_deleting-446-api-link-007" data-member="DeletingSelection" data-text="DeletingSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_deleting-446-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-007">…​ before the items are deleted.</para></td></tr><tr id="customizing_interaction_deleting-446-row-003"><td id="customizing_interaction_deleting-446-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-008"><api-link id="customizing_interaction_deleting-446-api-link-008" data-member="DeletedItem" data-text="DeletedItem" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_deleting-446-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-009">…​ for items that have been deleted.\n  Note that this will not include items that are deleted implicitly, e.g. labels\n  belonging to nodes when deleting a node, not even when those dependent items\n  were in the selection to be deleted.</para></td></tr><tr id="customizing_interaction_deleting-446-row-004"><td id="customizing_interaction_deleting-446-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-010"><api-link id="customizing_interaction_deleting-446-api-link-009" data-member="DeletedSelection" data-text="DeletedSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_deleting-446-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_deleting-446-simpara-011">…​ after the items have been deleted.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_deleting-446-note-001",content:'<p id="customizing_interaction_deleting-446-simpara-012">The <span class="api">shouldDelete</span> method may be called\nmore than once for the same item.</p>'}]},{tagname:"section",id:"customizing_interaction_moving",xreflabel:"Customizing Moving Items",title:"Moving Items",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-001",content:'Moving graph items is handled by <span class="api">GraphEditorInputMode</span> which delegates most of the work to its child input modes\n<api-link id="customizing_interaction_moving-447-api-link-001" data-member="" data-text="MoveInputMode" data-type="yfiles.input.MoveInputMode"></api-link> in general and <api-link id="customizing_interaction_moving-447-api-link-002" data-member="" data-text="MoveLabelInputMode" data-type="yfiles.input.MoveLabelInputMode"></api-link> for labels in particular.\nThe types of items that can be moved are defined by the <api-link id="customizing_interaction_moving-447-api-link-003" data-member="movableItems" data-text="movableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-002",content:'Some general customization options such as configurable properties are presented in section <a href="#/dguide/interaction-moving">Moving Items</a>.\nMoving labels is explained in\n<a href="#/dguide/customizing_interaction_moving_labels">a separate section below</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-003",content:'Moving items in general is handled by <api-link id="customizing_interaction_moving-447-api-link-004" data-member="" data-text="MoveInputMode" data-type="yfiles.input.MoveInputMode"></api-link>.\nSome items such as bends or ports, however, are instead moved with a special\n<a href="#/dguide/customizing_interaction_handle">IHandle</a>, managed by <api-link id="customizing_interaction_moving-447-api-link-005" data-member="" data-text="HandleInputMode" data-type="yfiles.input.HandleInputMode"></api-link>.\nNote that actually customizing the <strong id="customizing_interaction_moving-447-emphasis-001" class="bold" role="bold">results</strong> of the gesture works the same in either case,\nas described below.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-004",content:'The items which are involved in the moving operation can be retrieved from property\n<api-link id="customizing_interaction_moving-447-api-link-006" data-member="affectedItems" data-text="affectedItems" data-type="yfiles.input.MoveInputMode"></api-link>. All events below are dispatched\nat a time where the <span class="api">affectedItems</span> are valid, therefore\nit is safe to access it in event handlers for these events to determine the moved items.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"customizing_interaction_moving_events",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_moving-447-thead-001"><tr id="customizing_interaction_moving-447-row-001"><th id="customizing_interaction_moving-447-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_moving-447-entry-002" align="left" valign="top">\nOccurs when…​\n</th></tr></thead><tbody id="customizing_interaction_moving-447-tbody-001"><tr id="customizing_interaction_moving-447-row-002"><td id="customizing_interaction_moving-447-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-005"><api-link id="customizing_interaction_moving-447-api-link-007" data-member="DragStarting" data-text="DragStarting" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-006">…​ a drag gesture is recognized, before the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_moving-447-row-003"><td id="customizing_interaction_moving-447-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-007"><api-link id="customizing_interaction_moving-447-api-link-008" data-member="QueryPositionHandler" data-text="QueryPositionHandler" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-008">…​ a drag gesture is recognized.\n  Queries for a custom <span class="api">IPositionHandler</span>. If the event arguments are not\n  <api-link id="customizing_interaction_moving-447-api-link-009" data-member="handled" data-text="handled" data-type="yfiles.input.QueryPositionHandlerEventArgs"></api-link>,\n  the <span class="api">IPositionHandler</span> in the <api-link id="customizing_interaction_moving-447-api-link-010" data-member="positionHandler" data-text="positionHandler" data-type="yfiles.input.MoveInputMode"></api-link> property is used.</para></td></tr><tr id="customizing_interaction_moving-447-row-004"><td id="customizing_interaction_moving-447-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-009"><api-link id="customizing_interaction_moving-447-api-link-011" data-member="DragStarted" data-text="DragStarted" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-010">…​ a drag gesture is recognized, after the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_moving-447-row-005"><td id="customizing_interaction_moving-447-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-011"><api-link id="customizing_interaction_moving-447-api-link-012" data-member="Dragging" data-text="Dragging" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-012">…​ a mouse move event occurs during drag operations, <strong id="customizing_interaction_moving-447-emphasis-002" class="bold" role="bold">before</strong> the actual drag is performed.</para></td></tr><tr id="customizing_interaction_moving-447-row-006"><td id="customizing_interaction_moving-447-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-013"><api-link id="customizing_interaction_moving-447-api-link-013" data-member="Dragged" data-text="Dragged" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-014">…​ a mouse move event occurs during drag operations, <strong id="customizing_interaction_moving-447-emphasis-003" class="bold" role="bold">after</strong> the actual drag has been performed.</para></td></tr><tr id="customizing_interaction_moving-447-row-007"><td id="customizing_interaction_moving-447-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-015"><api-link id="customizing_interaction_moving-447-api-link-014" data-member="DragCanceling" data-text="DragCanceling" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-016">…​ the drag gesture is canceled before the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_moving-447-row-008"><td id="customizing_interaction_moving-447-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-017"><api-link id="customizing_interaction_moving-447-api-link-015" data-member="DragCanceled" data-text="DragCanceled" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-018">…​ the drag gesture is canceled after the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_moving-447-row-009"><td id="customizing_interaction_moving-447-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-019"><api-link id="customizing_interaction_moving-447-api-link-016" data-member="DragFinishing" data-text="DragFinishing" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-020">…​ a drag gesture has ended successfully before the actual drag operations have been finished.</para></td></tr><tr id="customizing_interaction_moving-447-row-010"><td id="customizing_interaction_moving-447-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-021"><api-link id="customizing_interaction_moving-447-api-link-017" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.MoveInputMode"></api-link></para></td><td id="customizing_interaction_moving-447-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_moving-447-simpara-022">…​ a drag gesture has ended successfully after the actual drag operations have been finished.\n  At the time the event is raised the <span class="api">affectedItems</span>\n  are still valid.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-023",content:'If you want to be informed about a completed move operation, you can listen for\n<api-link id="customizing_interaction_moving-447-api-link-018" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.MoveInputMode"></api-link> events.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-024",content:'The actual moving of the graph items is performed by a so-called position handler,\nmodeled by implementations of the <api-link id="customizing_interaction_moving-447-api-link-019" data-member="" data-text="IPositionHandler" data-type="yfiles.input.IPositionHandler"></api-link> interface.\n<span class="api">IPositionHandler</span>s are similar to <a href="#/dguide/customizing_interaction_handle">handles</a>\nand both actually inherit the same parent interface.\nThe implementation of an <span class="api">IPositionHandler</span> is responsible for actually moving\nthe item.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-025",content:'The default <span class="api">IPositionHandler</span> is a composite handler which collects all movable item’s\nposition handlers (and handles) from the item’s <a href="#/dguide/customizing_concepts_lookup">lookup</a>.\n<a href="#/dguide/customizing_graph-graph_decorator">Modifying the lookup</a> to return a custom position\nhandler can be a means to further customize the move behavior. E.g., modifying a node’s lookup\nto hide the position handler prevents the node from being moved:'},{tagname:"example",id:"customizing_interaction_moving-447-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_moving-447-programlisting-001" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.positionHandlerDecorator.hideImplementation(shouldBeFixedPredicate)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-026",content:'In many cases wrapping the existing implementation is a good way of customizing\nmovement of graph items, as shown below in\n<a href="#/dguide/ex_customizing_interaction-wrap-positionhandler">Register a custom position handler as wrapper</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving-447-simpara-027",content:'<span class="api">IPositionHandler</span> uses four methods to maintain its life cycle:'},{tagname:"para",content:'<dl id="customizing_interaction_moving-447-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_moving-447-term-001"><api-link id="customizing_interaction_moving-447-api-link-020" data-member="initializeDrag(yfiles.input.IInputModeContext)" data-text="initializeDrag(context:&#xA0;IInputModeContext):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_moving-447-listitem-001">\n<p id="customizing_interaction_moving-447-simpara-028">Initializes the position handler at the start of a drag operation. Implementers should allocate required resources,\nremember the initial position, and, if applicable, initialize snapping and orthogonal edge editing.</p>\n</dd>\n<dt id="customizing_interaction_moving-447-term-002"><api-link id="customizing_interaction_moving-447-api-link-021" data-member="handleMove(yfiles.input.IInputModeContext,yfiles.geometry.Point,yfiles.geometry.Point)" data-text="handleMove(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point, newLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_moving-447-listitem-002">\n<p id="customizing_interaction_moving-447-simpara-029">Called during a move gesture to update the current position.</p>\n</dd>\n<dt id="customizing_interaction_moving-447-term-003"><api-link id="customizing_interaction_moving-447-api-link-022" data-member="cancelDrag(yfiles.input.IInputModeContext,yfiles.geometry.Point)" data-text="cancelDrag(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_moving-447-listitem-003">\n<p id="customizing_interaction_moving-447-simpara-030">Called when a move gesture is finished. Implementers should restore the initial position and free all resources here.</p>\n</dd>\n<dt id="customizing_interaction_moving-447-term-004"><api-link id="customizing_interaction_moving-447-api-link-023" data-member="dragFinished(yfiles.input.IInputModeContext,yfiles.geometry.Point,yfiles.geometry.Point)" data-text="dragFinished(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point, newLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_moving-447-listitem-004">\n<p id="customizing_interaction_moving-447-simpara-031">Called when a move gesture has finished successfully. Implementers should set the current position and free all resources here.</p>\n</dd>\n</dl>'},{tagname:"example",id:"ex_customizing_interaction-wrap-positionhandler",title:"Register a custom position handler as wrapper",content:'<pre class="programlisting javascript" id="customizing_interaction_moving-447-programlisting-002" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.positionHandlerDecorator.setImplementationWrapper(\r\n  (node, handler) => new ConstrainedPositionHandler(handler)\r\n)\n</code></pre>'},{tagname:"example",id:"customizing_interaction_moving-447-example-002",title:"A constrained position handler wrapper",content:'<pre class="programlisting javascript" id="customizing_interaction_moving-447-programlisting-003" language="javascript" format="linespecific"><code>// a custom position handler which constrains the movement along the x axis\r\n// this implementation wraps the default position handler\r\n// and delegates most of the work to it\r\nclass ConstrainedPositionHandler extends yfiles.lang.Class(yfiles.input.IPositionHandler) {\r\n  // set the wrapped handler in the constructor\r\n  constructor(handler) {\r\n    super()\r\n    this.handler = handler\r\n  }\r\n\r\n  // interface implementation: delegate to wrapped handler\r\n  get location() {\r\n    return this.handler.location\r\n  }\r\n\r\n  // initializes the drag\r\n  initializeDrag(context) {\r\n    // delegate to the wrapped handler\r\n    this.handler.initializeDrag(context)\r\n    // remember the last location\r\n    this.lastLocation = this.handler.location.toPoint()\r\n  }\r\n\r\n  // handle the constrained move\r\n  handleMove(context, originalLocation, newLocation) {\r\n    // only move along the x axis, keep the original y coordinate\r\n    newLocation = new yfiles.geometry.Point(newLocation.x, originalLocation.y)\r\n    if (!newLocation.equalsEps(this.lastLocation, 0)) {\r\n      // delegate to the wrapped handler for the actual move\r\n      this.handler.handleMove(context, originalLocation, newLocation)\r\n      // remember the location\r\n      this.lastLocation = newLocation\r\n    }\r\n  }\r\n\r\n  // drag has been cancelled: delegate to the wrapped handler\r\n  cancelDrag(context, originalLocation) {\r\n    this.handler.cancelDrag(context, originalLocation)\r\n  }\r\n\r\n  // drag has been sucessfully finished: delegate to the wrapped handler with the constrained position\r\n  dragFinished(context, originalLocation, newLocation) {\r\n    this.handler.dragFinished(context, originalLocation, newLocation)\r\n  }\r\n}\n</code></pre>'},{tagname:"section",id:"customizing_interaction_moving_unselected",title:"Moving Unselected Items",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_unselected-448-simpara-001",content:'<span class="api">GraphEditorInputMode</span>’s <api-link id="customizing_interaction_moving_unselected-448-api-link-001" data-member="moveInputMode" data-text="moveInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> only handles items which are selected.\nThat means that the default behavior for moving items is that an item has to be selected before it can be moved.\nTo move items without the need to select them before <span class="api">GraphEditorInputMode</span> provides another input mode. This mode is available\nvia the <api-link id="customizing_interaction_moving_unselected-448-api-link-002" data-member="moveUnselectedInputMode" data-text="moveUnselectedInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.\nBy default, this mode is disabled.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_unselected-448-simpara-002",content:'Since the <span class="api">moveUnselectedInputMode</span> has the same starting gesture as the <span class="api">CreateEdgeInputMode</span>,\nyou need to take some precautions to avoid concurrency issues.\nIf you don’t disable <span class="api">CreateEdgeInputMode</span> completely, either'},{tagname:"para",content:'<ul id="customizing_interaction_moving_unselected-448-itemizedlist-001"><li id="customizing_interaction_moving_unselected-448-listitem-001"><p id="customizing_interaction_moving_unselected-448-simpara-003">Set the <span class="api">moveUnselectedInputMode</span>\'s priority higher (i.e. <strong id="customizing_interaction_moving_unselected-448-emphasis-001" class="bold" role="bold">lower priority value</strong>)\nthan the <span class="api">CreateEdgeInputMode</span>’s priority. Using a custom modifier recognizer can disable the <span class="api">moveUnselectedInputMode</span>\ntemporarily and allow the user to create edges. See also the example below.</p></li><li id="customizing_interaction_moving_unselected-448-listitem-002"><p id="customizing_interaction_moving_unselected-448-simpara-004">Switch between <span class="api">CreateEdgeInputMode</span> and <span class="api">moveUnselectedInputMode</span> by setting their <span class="api">enabled</span>\nproperty in turn.</p></li><li id="customizing_interaction_moving_unselected-448-listitem-003"><p id="customizing_interaction_moving_unselected-448-simpara-005">Use a custom <api-link id="customizing_interaction_moving_unselected-448-api-link-003" data-member="hitTestable" data-text="hitTestable" data-type="yfiles.input.MoveInputMode"></api-link> to restrict the draggable area of a node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_unselected-448-simpara-006",content:'There might be other options. The following example shows how to configure the <span class="api">moveUnselectedInputMode</span>\nwith a higher priority than <span class="api">CreateEdgeInputMode</span> and allow for disabling it by pressing the <kbd>Shift ⇧</kbd> key while dragging.'},{tagname:"example",id:"customizing_interaction_moving_unselected-448-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_moving_unselected-448-programlisting-001" language="javascript" format="linespecific"><code>// Disable the standard move input mode\r\ngraphEditorInputMode.moveInputMode.enabled = false\r\n// Enable the move input mode for unselected items\r\nconst moveUnselectedInputMode = graphEditorInputMode.moveUnselectedInputMode\r\nmoveUnselectedInputMode.enabled = true\r\n\r\n// Use a modifier recognizer for shift key not held down.\r\nmoveUnselectedInputMode.pressedRecognizer = yfiles.input.EventRecognizers.createAndRecognizer(\r\n  moveUnselectedInputMode.pressedRecognizer,\r\n  yfiles.input.EventRecognizers.inverse(yfiles.input.KeyEventRecognizers.SHIFT_IS_DOWN)\r\n)\r\nmoveUnselectedInputMode.hoverRecognizer = yfiles.input.EventRecognizers.createAndRecognizer(\r\n  moveUnselectedInputMode.hoverRecognizer,\r\n  yfiles.input.EventRecognizers.inverse(yfiles.input.KeyEventRecognizers.SHIFT_IS_DOWN)\r\n)\r\n// Set a higher priority than CreateEdgeInputMode\r\nmoveUnselectedInputMode.priority = graphEditorInputMode.createEdgeInputMode.priority - 1\n</code></pre>'}]},{tagname:"section",id:"customizing_interaction_moving_labels",title:"Moving Labels",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_labels-449-simpara-001",content:'Usually, a label cannot be moved freely. Most labels can only be moved to a discrete set of positions,\ndetermined by the label’s <api-link id="customizing_interaction_moving_labels-449-api-link-001" data-member="" data-text="ILabelModel" data-type="yfiles.graph.ILabelModel"></api-link> and\n<api-link id="customizing_interaction_moving_labels-449-api-link-002" data-member="" data-text="ILabelModelParameter" data-type="yfiles.graph.ILabelModelParameter"></api-link>.'},{tagname:"formalpara",id:"customizing_interaction_moving_labels-449-formalpara-001",title:"Multiple candidate positions for moving a label",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_labels-449-para-001",content:"image::displaying-the-graph_item-layout_labels_interior.png"}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_labels-449-simpara-002",content:'<span class="api">GraphEditorInputMode</span> supports moving labels via its child input mode <api-link id="customizing_interaction_moving_labels-449-api-link-003" data-member="" data-text="MoveLabelInputMode" data-type="yfiles.input.MoveLabelInputMode"></api-link>.\nThe <span class="api">MoveLabelInputMode</span> dispatches the same <a href="#/dguide/customizing_interaction_moving_events">events</a> as the <span class="api">MoveInputMode</span>.\nIt also provides similar configuration options. Additionally,'},{tagname:"para",content:'<dl id="customizing_interaction_moving_labels-449-variablelist-001"><dt id="customizing_interaction_moving_labels-449-term-001"><api-link id="customizing_interaction_moving_labels-449-api-link-004" data-member="movedLabel" data-text="movedLabel" data-type="yfiles.input.MoveLabelInputMode"></api-link></dt><dd id="customizing_interaction_moving_labels-449-listitem-001"><p id="customizing_interaction_moving_labels-449-simpara-003">provides access to the label which is currently handled. Similar to <span class="api">MoveInputMode</span>’s\n<span class="api">affectedItems</span>.</p></dd><dt id="customizing_interaction_moving_labels-449-term-002"><api-link id="customizing_interaction_moving_labels-449-api-link-005" data-member="shouldMove(yfiles.input.IInputModeContext,yfiles.graph.ILabel)" data-text="shouldMove" data-type="yfiles.input.MoveLabelInputMode"></api-link></dt><dd id="customizing_interaction_moving_labels-449-listitem-002"><p id="customizing_interaction_moving_labels-449-simpara-004">can be overridden to allow or disallow moving the given label.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_labels-449-simpara-005",content:"Depending on the label’s lookup the label positions are determined in a different manner:"},{tagname:"para",content:'<ul id="customizing_interaction_moving_labels-449-itemizedlist-001"><li id="customizing_interaction_moving_labels-449-listitem-003"><p id="customizing_interaction_moving_labels-449-simpara-006">If the lookup returns an <span class="api">IPositionHandler</span> this handler will be used. In that case no candidates will\nbe shown and the label is freely movable.</p></li><li id="customizing_interaction_moving_labels-449-listitem-004"><p id="customizing_interaction_moving_labels-449-simpara-007">If the lookup returns an <api-link id="customizing_interaction_moving_labels-449-api-link-006" data-member="" data-text="ILabelModelParameterProvider" data-type="yfiles.graph.ILabelModelParameterProvider"></api-link> this instance\nwill be used to get the list of candidates. Visualizations will be rendered and\nthe label can only be moved to these positions.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_moving_labels-449-simpara-008",content:'This behavior can be overridden by holding down the <kbd>Ctrl</kbd> key during drag or by setting\n<api-link id="customizing_interaction_moving_labels-449-api-link-007" data-member="useLabelModelParameterFinder" data-text="useLabelModelParameterFinder" data-type="yfiles.input.MoveLabelInputMode"></api-link> to <code>true</code>:\nIf the lookup returns an <api-link id="customizing_interaction_moving_labels-449-api-link-008" data-member="" data-text="ILabelModelParameterFinder" data-type="yfiles.graph.ILabelModelParameterFinder"></api-link> this instance\nwill be used to calculate the closest candidate allowed by the label model. Depending on the\nlabel model this will allow the label to move freely along the positions allowed by the\nlabel model, e.g. moving along at a defined distance to an edge.'}]}]},{tagname:"section",id:"customizing_interaction_resizing",xreflabel:"Customizing Resizing Nodes",title:"Resizing Nodes",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-001",content:'Nodes are interactively resized by dragging a so-called resize handle. A handle is a small\ndraggable object modeled by interface <api-link id="customizing_interaction_resizing-450-api-link-001" data-member="" data-text="IHandle" data-type="yfiles.input.IHandle"></api-link>.\nThe handle is responsible for translating a drag gesture into a change on its handled model item.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-002",content:'Actually moving the handles is managed by <api-link id="customizing_interaction_resizing-450-api-link-002" data-member="" data-text="HandleInputMode" data-type="yfiles.input.HandleInputMode"></api-link>,\na child input mode of <span class="api">GraphEditorInputMode</span>. In fact, it is up to the <span class="api">IHandle</span> to translate the movement\ninto a resize operation.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-003",content:'<span class="api">HandleInputMode</span> not only handles resize operations but also move operations for elements\nwhich provide handles, e.g. bends or ports.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-004",content:'The items which are currently dragged (or to be dragged) can be retrieved via the\n<api-link id="customizing_interaction_resizing-450-api-link-003" data-member="affectedItems" data-text="affectedItems" data-type="yfiles.input.HandleInputMode"></api-link> property. All events below are dispatched\nat a time the <span class="api">affectedItems</span> are valid, therefore\nit is safe to access it in event handlers for these events to determine the moved items.'},{tagname:"table","class":"",id:"customizing_interaction_resizing-450-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_resizing-450-thead-001"><tr id="customizing_interaction_resizing-450-row-001"><th id="customizing_interaction_resizing-450-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_resizing-450-entry-002" align="left" valign="top">\nOccurs when\n</th></tr></thead><tbody id="customizing_interaction_resizing-450-tbody-001"><tr id="customizing_interaction_resizing-450-row-002"><td id="customizing_interaction_resizing-450-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-005"><api-link id="customizing_interaction_resizing-450-api-link-004" data-member="DragStarting" data-text="DragStarting" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-006">…​ a drag gesture is recognized, before the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_resizing-450-row-003"><td id="customizing_interaction_resizing-450-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-007"><api-link id="customizing_interaction_resizing-450-api-link-005" data-member="DragStarted" data-text="DragStarted" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-008">…​ a drag gesture is recognized, after the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_resizing-450-row-004"><td id="customizing_interaction_resizing-450-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-009"><api-link id="customizing_interaction_resizing-450-api-link-006" data-member="Dragging" data-text="Dragging" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-010">…​ the mouse is moved during drag operations and before the actual drag is performed.</para></td></tr><tr id="customizing_interaction_resizing-450-row-005"><td id="customizing_interaction_resizing-450-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-011"><api-link id="customizing_interaction_resizing-450-api-link-007" data-member="Dragged" data-text="Dragged" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-012">…​ the mouse is moved during drag operations and after the actual drag is performed.</para></td></tr><tr id="customizing_interaction_resizing-450-row-006"><td id="customizing_interaction_resizing-450-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-013"><api-link id="customizing_interaction_resizing-450-api-link-008" data-member="DragCanceling" data-text="DragCanceling" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-014">…​ the drag gesture is canceled before the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_resizing-450-row-007"><td id="customizing_interaction_resizing-450-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-015"><api-link id="customizing_interaction_resizing-450-api-link-009" data-member="DragCanceled" data-text="DragCanceled" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-016">…​ the drag gesture is canceled after the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_resizing-450-row-008"><td id="customizing_interaction_resizing-450-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-017"><api-link id="customizing_interaction_resizing-450-api-link-010" data-member="DragFinishing" data-text="DragFinishing" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-018">…​ a drag gesture has ended successfully before the actual drag operations have been finished.</para></td></tr><tr id="customizing_interaction_resizing-450-row-009"><td id="customizing_interaction_resizing-450-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-019"><api-link id="customizing_interaction_resizing-450-api-link-011" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.HandleInputMode"></api-link></para></td><td id="customizing_interaction_resizing-450-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_resizing-450-simpara-020">…​ a drag gesture has ended successfully after the actual drag operations have been finished.\n  At the time the event is raised the <span class="api">affectedItems</span>\n  are still valid.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-021",content:'<span class="api">HandleInputMode</span> makes extensive use of the <a href="#/dguide/customizing_concepts_lookup">service locator pattern</a>.\nIts behavior can be influenced to a large extent by modifying an item’s lookup to return custom\nimplementations of the following interfaces.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_resizing-450-simpara-022",content:'The handles collection of a <span class="api">HandleInputMode</span> which is configured by <span class="api">GraphEditorInputMode</span> is updated upon changes in the selection:\nthe lookup of all selected items is queried for implementations of'},{tagname:"para",content:'<ul id="customizing_interaction_resizing-450-itemizedlist-001"><li id="customizing_interaction_resizing-450-listitem-001"><p id="customizing_interaction_resizing-450-simpara-023"><span class="api">IReshapeHandleProvider</span> to provide handles for each supported position.\nIf none is found the lookup is queried for an</p></li><li id="customizing_interaction_resizing-450-listitem-002"><p id="customizing_interaction_resizing-450-simpara-024"><span class="api">IHandleProvider</span> to provide a set of arbitrary handles. Additionally, bends of selected edges are directly queried for an</p></li><li id="customizing_interaction_resizing-450-listitem-003"><p id="customizing_interaction_resizing-450-simpara-025"><span class="api">IHandle</span> which will be added directly.</p></li></ul>'},{tagname:"section",id:"customizing_interaction_reshapehandleprovider",title:"IReshapeHandleProvider",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_reshapehandleprovider-451-simpara-001",content:'An <api-link id="customizing_interaction_reshapehandleprovider-451-api-link-001" data-member="" data-text="IReshapeHandleProvider" data-type="yfiles.input.IReshapeHandleProvider"></api-link> provides specialized handles for resize operations.\nThese handles are used differently depending on their position,\ne.g. a handle at the top border of a rectangle is usually used to move that border\nin vertical direction. The positions are defined by the <api-link id="customizing_interaction_reshapehandleprovider-451-api-link-002" data-member="" data-text="HandlePositions" data-type="yfiles.input.HandlePositions"></api-link> enumeration.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_reshapehandleprovider-451-simpara-002",content:'<span class="api">IReshapeHandleProvider</span> implementations have to implement two methods:'},{tagname:"para",content:'<dl id="customizing_interaction_reshapehandleprovider-451-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_reshapehandleprovider-451-term-001"><api-link id="customizing_interaction_reshapehandleprovider-451-api-link-003" data-member="getAvailableHandles(yfiles.input.IInputModeContext)" data-text="getAvailableHandles(context:&#xA0;IInputModeContext):&#xA0;HandlePositions" data-type="yfiles.input.IReshapeHandleProvider"></api-link></dt><dd id="customizing_interaction_reshapehandleprovider-451-listitem-001">\n<p id="customizing_interaction_reshapehandleprovider-451-simpara-003">Provides the positions for available handles as <api-link id="customizing_interaction_reshapehandleprovider-451-api-link-004" data-member="" data-text="HandlePositions" data-type="yfiles.input.HandlePositions"></api-link></p>\n</dd>\n<dt id="customizing_interaction_reshapehandleprovider-451-term-002"><api-link id="customizing_interaction_reshapehandleprovider-451-api-link-005" data-member="getHandle(yfiles.input.IInputModeContext,yfiles.input.HandlePositions)" data-text="getHandle(context:&#xA0;IInputModeContext, position:&#xA0;HandlePositions):&#xA0;IHandle" data-type="yfiles.input.IReshapeHandleProvider"></api-link></dt><dd id="customizing_interaction_reshapehandleprovider-451-listitem-002">\n<p id="customizing_interaction_reshapehandleprovider-451-simpara-004">Returns a handle for the given position.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_reshapehandleprovider-451-simpara-005",content:'The node’s lookup can be modified to return an instance of a custom <span class="api">IReshapeHandleProvider</span> implementation.\nYou can do this using the\n<a href="#/dguide/customizing_graph-graph_decorator">NodeDecorator</a>’s\n<api-link id="customizing_interaction_reshapehandleprovider-451-api-link-006" data-member="reshapeHandleProviderDecorator" data-text="reshapeHandleProviderDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>:'},{tagname:"example",id:"customizing_interaction_reshapehandleprovider-451-example-001",title:"Showing resize handles only at the corners of nodes",content:'<pre class="programlisting javascript" id="customizing_interaction_reshapehandleprovider-451-programlisting-001" language="javascript" format="linespecific"><code>class CustomReshapeHandlerProvider extends yfiles.input.ReshapeHandleProviderBase {\r\n  constructor(originalProvider) {\r\n    super()\r\n    this.originalProvider = originalProvider\r\n  }\r\n\r\n  getAvailableHandles(context) {\r\n    // Only show resize handles at the corners of the node\r\n    return yfiles.input.HandlePositions.CORNERS\r\n  }\r\n\r\n  getHandle(context, position) {\r\n    // Delegate the actual handle creation to the original provider\r\n    return this.originalProvider.getHandle(context, position)\r\n  }\r\n}\r\n\r\ngraph.decorator.nodeDecorator.reshapeHandleProviderDecorator.setImplementationWrapper(\r\n  (node, originalProvider) => new CustomReshapeHandlerProvider(originalProvider)\r\n)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_reshapehandleprovider-451-simpara-006",content:'The <a href="..\\..\\demos\\input\\reshapehandleprovider\\index.html" target="blank" class="demo-link" title="Shows how resizing of nodes can be customized.">Reshape Handle Provider</a> demo\nshows how to use different <span class="api">IReshapeHandleProvider</span> implementations to\ncontrol the resize behavior of nodes.'}]},{tagname:"section",id:"customizing_interaction_handleprovider",title:"IHandleProvider",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_handleprovider-452-simpara-001",content:'An <api-link id="customizing_interaction_handleprovider-452-api-link-001" data-member="" data-text="IHandleProvider" data-type="yfiles.input.IHandleProvider"></api-link> returns a list of handles for arbitrary purposes via its\n<api-link id="customizing_interaction_handleprovider-452-api-link-002" data-member="getHandles(yfiles.input.IInputModeContext)" data-text="getHandles" data-type="yfiles.input.IHandleProvider"></api-link> method.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_handleprovider-452-simpara-002",content:'Any model item’s lookup can be modified to return an instance of a custom <span class="api">IHandleProvider</span> implementation.\nYou can do this using the\n<a href="#/dguide/customizing_concepts_lookup_decoration">decorator</a>’s\n<api-link id="customizing_interaction_handleprovider-452-api-link-003" data-member="handleProviderDecorator" data-text="handleProviderDecorator" data-type="yfiles.graph.NodeDecorator"></api-link>.'}]},{tagname:"section",id:"customizing_interaction_handle",title:"IHandle",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_handle-453-simpara-001",content:'<api-link id="customizing_interaction_handle-453-api-link-001" data-member="" data-text="IHandle" data-type="yfiles.input.IHandle"></api-link> is the actual interface which is used to\npromote a drag gesture into a related change on its handled model item.\nIt provides a drag point for a drag operation and translates the drag operation into a change on the model item.\nThis can be a change in the model item’s size as discussed in this section, or a move operation as\nhandled in the previous section, or even something completely different, as long as it fits the\n“small handle that can be dragged” paradigm.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_handle-453-simpara-002",content:'<span class="api">IHandle</span> uses four methods to maintain its life cycle:'},{tagname:"para",content:'<dl id="customizing_interaction_handle-453-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_handle-453-term-001"><api-link id="customizing_interaction_handle-453-api-link-002" data-member="initializeDrag(yfiles.input.IInputModeContext)" data-text="initializeDrag(context:&#xA0;IInputModeContext):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_handle-453-listitem-001">\n<p id="customizing_interaction_handle-453-simpara-003">Initializes the handle at the start of a drag operation. Implementers should allocate their required resources,\nremember the initial position, and, if applicable, initialize snapping and orthogonal edge editing.</p>\n</dd>\n<dt id="customizing_interaction_handle-453-term-002"><api-link id="customizing_interaction_handle-453-api-link-003" data-member="handleMove(yfiles.input.IInputModeContext,yfiles.geometry.Point,yfiles.geometry.Point)" data-text="handleMove(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point, newLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_handle-453-listitem-002">\n<p id="customizing_interaction_handle-453-simpara-004">Called during a move gesture to update the current position</p>\n</dd>\n<dt id="customizing_interaction_handle-453-term-003"><api-link id="customizing_interaction_handle-453-api-link-004" data-member="cancelDrag(yfiles.input.IInputModeContext,yfiles.geometry.Point)" data-text="cancelDrag(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_handle-453-listitem-003">\n<p id="customizing_interaction_handle-453-simpara-005">Called when a move gesture is finished. Implementers should restore the initial position and free all resources here.</p>\n</dd>\n<dt id="customizing_interaction_handle-453-term-004"><api-link id="customizing_interaction_handle-453-api-link-005" data-member="dragFinished(yfiles.input.IInputModeContext,yfiles.geometry.Point,yfiles.geometry.Point)" data-text="dragFinished(context:&#xA0;IInputModeContext, originalLocation:&#xA0;Point, newLocation:&#xA0;Point):&#xA0;void" data-type="yfiles.input.IDragHandler"></api-link></dt><dd id="customizing_interaction_handle-453-listitem-004">\n<p id="customizing_interaction_handle-453-simpara-006">Called when a move gesture has finished successfully. Implementers should set the current position and free all resources here.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_handle-453-simpara-007",content:'Besides these methods <span class="api">IHandle</span> also provides properties which can be used by <span class="api">HandleInputMode</span> to determine the\n<api-link id="customizing_interaction_handle-453-api-link-006" data-member="type" data-text="type" data-type="yfiles.input.IHandle"></api-link> of the handle and a preferred\n<api-link id="customizing_interaction_handle-453-api-link-007" data-member="cursor" data-text="cursor" data-type="yfiles.input.IHandle"></api-link> to visualize its purpose.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_handle-453-simpara-008",content:'Node resizing is mediated by <span class="api">IHandle</span> implementations that delegate\nto an <api-link id="customizing_interaction_handle-453-api-link-008" data-member="" data-text="IReshapeHandler" data-type="yfiles.input.IReshapeHandler"></api-link> (see below) in the\n<span class="api">handleMove</span>\nmethod.'}]},{tagname:"section",id:"customizing_interaction_reshapehandler",title:"IReshapeHandler",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_reshapehandler-454-simpara-001",content:'An <api-link id="customizing_interaction_reshapehandler-454-api-link-001" data-member="" data-text="IReshapeHandler" data-type="yfiles.input.IReshapeHandler"></api-link> manages reshaping,\nthat is, changing the dimensions of an arbitrary item.'},{tagname:"para",content:'<dl id="customizing_interaction_reshapehandler-454-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_reshapehandler-454-term-001"><api-link id="customizing_interaction_reshapehandler-454-api-link-002" data-member="initializeReshape(yfiles.input.IInputModeContext)" data-text="initializeReshape(context:&#xA0;IInputModeContext):&#xA0;void" data-type="yfiles.input.IReshapeHandler"></api-link></dt><dd id="customizing_interaction_reshapehandler-454-listitem-001">\n<p id="customizing_interaction_reshapehandler-454-simpara-002">Initializes the reshape handler at the start of a drag operation. Implementers should allocate required resources,\nremember the initial bounds, and, if applicable, initialize snapping and orthogonal edge editing.</p>\n</dd>\n<dt id="customizing_interaction_reshapehandler-454-term-002"><api-link id="customizing_interaction_reshapehandler-454-api-link-003" data-member="handleReshape(yfiles.input.IInputModeContext,yfiles.geometry.Rect,yfiles.geometry.Rect)" data-text="handleReshape(context:&#xA0;IInputModeContext, originalBounds:&#xA0;Rect, newBounds:&#xA0;Rect):&#xA0;void" data-type="yfiles.input.IReshapeHandler"></api-link></dt><dd id="customizing_interaction_reshapehandler-454-listitem-002">\n<p id="customizing_interaction_reshapehandler-454-simpara-003">Called during a move gesture to update the current bounds.</p>\n</dd>\n<dt id="customizing_interaction_reshapehandler-454-term-003"><api-link id="customizing_interaction_reshapehandler-454-api-link-004" data-member="cancelReshape(yfiles.input.IInputModeContext,yfiles.geometry.Rect)" data-text="cancelReshape(context:&#xA0;IInputModeContext, originalBounds:&#xA0;Rect):&#xA0;void" data-type="yfiles.input.IReshapeHandler"></api-link></dt><dd id="customizing_interaction_reshapehandler-454-listitem-003">\n<p id="customizing_interaction_reshapehandler-454-simpara-004">Called when a move gesture is finished. Implementers should restore the initial bounds and free all resources here.</p>\n</dd>\n<dt id="customizing_interaction_reshapehandler-454-term-004"><api-link id="customizing_interaction_reshapehandler-454-api-link-005" data-member="reshapeFinished(yfiles.input.IInputModeContext,yfiles.geometry.Rect,yfiles.geometry.Rect)" data-text="reshapeFinished(context:&#xA0;IInputModeContext, originalBounds:&#xA0;Rect, newBounds:&#xA0;Rect):&#xA0;void" data-type="yfiles.input.IReshapeHandler"></api-link></dt><dd id="customizing_interaction_reshapehandler-454-listitem-004">\n<p id="customizing_interaction_reshapehandler-454-simpara-005">Called when a move gesture has finished successfully. Implementers should set the current bounds and free all resources here.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"__api_name_text_inodesizeconstraintprovider",title:"INodeSizeConstraintProvider",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_inodesizeconstraintprovider-455-simpara-001",content:'The default implementation of <span class="api">IReshapeHandler</span> queries its node’s <a href="#/dguide/customizing_concepts_lookup">lookup</a>\nfor an implementation of <api-link id="__api_name_text_inodesizeconstraintprovider-455-api-link-001" data-member="" data-text="INodeSizeConstraintProvider" data-type="yfiles.input.INodeSizeConstraintProvider"></api-link>. Its methods can be implemented\nto restrict resize operations by providing\na <api-link id="__api_name_text_inodesizeconstraintprovider-455-api-link-002" data-member="getMinimumSize(yfiles.graph.INode)" data-text="minimum" data-type="yfiles.input.INodeSizeConstraintProvider"></api-link>\nand a <api-link id="__api_name_text_inodesizeconstraintprovider-455-api-link-003" data-member="getMaximumSize(yfiles.graph.INode)" data-text="maximum" data-type="yfiles.input.INodeSizeConstraintProvider"></api-link> size.\nFurthermore, it can provide a\n<api-link id="__api_name_text_inodesizeconstraintprovider-455-api-link-004" data-member="getMinimumEnclosedArea(yfiles.graph.INode)" data-text="rectangle" data-type="yfiles.input.INodeSizeConstraintProvider"></api-link>\nwhich defines an area which must always be enclosed in the bounds to be resized.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_inodesizeconstraintprovider-455-simpara-002",content:'The interface’s default implementation, <api-link id="__api_name_text_inodesizeconstraintprovider-455-api-link-005" data-member="" data-text="NodeSizeConstraintProvider" data-type="yfiles.input.NodeSizeConstraintProvider"></api-link> provides properties\nto define these values.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_inodesizeconstraintprovider-455-simpara-003",content:'A node’s lookup can be <a href="#/dguide/customizing_graph-graph_decorator">decorated</a>\nto return an implementation of <span class="api">INodeSizeConstraintProvider</span>:'},{tagname:"example",id:"__api_name_text_inodesizeconstraintprovider-455-informalexample-001",content:'<pre class="programlisting javascript" id="__api_name_text_inodesizeconstraintprovider-455-programlisting-001" language="javascript" format="linespecific"><code>// nodes should not be smaller than 10x10 or larger than 100x100\r\ngraph.decorator.nodeDecorator.sizeConstraintProviderDecorator.setImplementation(\r\n  new yfiles.input.NodeSizeConstraintProvider(\r\n    new yfiles.geometry.Size(10, 10),\r\n    new yfiles.geometry.Size(100, 100),\r\n    yfiles.geometry.Rect.EMPTY\r\n  )\r\n)\n</code></pre>'
},{tagname:"para","class":"dguide-para",id:"__api_name_text_inodesizeconstraintprovider-455-simpara-004",content:'Note that in certain circumstances, e.g. with <a href="#/dguide/interaction-grouping">grouping</a>,\nthere can already be an instance of <span class="api">INodeSizeConstraintProvider</span>\npresent in a node’s lookup, e.g. for constraining a group node’s size to its contents.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_inodesizeconstraintprovider-455-simpara-005",content:'The demo application <a href="..\\..\\demos\\input\\sizeconstraintprovider\\index.html" target="blank" class="demo-link" title="Shows how resizing of nodes can be restricted.">Size Constraint Provider</a> shows how to\nimplement and use different <span class="api">INodeSizeConstraintProvider</span>\nimplementations.'}]}]},{tagname:"section",id:"customizing_interaction_keyboard",xreflabel:"Customizing Keyboard Input",title:"Keyboard Input",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_keyboard-456-simpara-001",content:'Keyboard support for <span class="api">GraphComponent</span> is handled by\n<api-link id="customizing_interaction_keyboard-456-api-link-001" data-member="" data-text="KeyboardInputMode" data-type="yfiles.input.KeyboardInputMode"></api-link>.\nInstead of manually adjusting the input and action maps of <span class="api">GraphComponent</span>,\nyou should use <span class="api">KeyboardInputMode</span> to bind gestures to commands.\nThis has the advantage that you can easily install and uninstall these commands\nas part of the input mode. Furthermore, they are automatically disabled or enabled\nwhen the input mode is (e.g. when an animation runs).'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_keyboard-456-simpara-002",content:'<span class="api">KeyboardInputMode</span> provides means to install and uninstall\n<api-link id="customizing_interaction_keyboard-456-api-link-002" data-member="" data-text="ICommand" data-type="yfiles.input.ICommand"></api-link> using a recognizer function or a combination\nof <api-link id="customizing_interaction_keyboard-456-api-link-003" data-member="" data-text="Key" data-type="yfiles.view.Key"></api-link> and <api-link id="customizing_interaction_keyboard-456-api-link-004" data-member="" data-text="ModifierKeys" data-type="yfiles.view.ModifierKeys"></api-link>.'},{tagname:"para",content:'<dl id="customizing_interaction_keyboard-456-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_keyboard-456-term-001"><api-link id="customizing_interaction_keyboard-456-api-link-005" data-member="addKeyBinding(yfiles.view.Key,yfiles.view.ModifierKeys,yfiles.input.ICommand,Object)" data-text="addKeyBinding(key:&#xA0;Key, modifiers:&#xA0;ModifierKeys, command:&#xA0;ICommand, commandParameter:&#xA0;Object):&#xA0;KeyboardInputModeBinding" data-type="yfiles.input.KeyboardInputMode"></api-link></dt><dt id="customizing_interaction_keyboard-456-term-002"><api-link id="customizing_interaction_keyboard-456-api-link-006" data-member="addRecognizerBinding(yfiles.input.EventRecognizer,yfiles.input.ICommand,Object)" data-text="addRecognizerBinding(recognizer:&#xA0;EventRecognizer, command:&#xA0;ICommand, commandParameter:&#xA0;Object):&#xA0;KeyboardInputModeBinding" data-type="yfiles.input.KeyboardInputMode"></api-link></dt><dd id="customizing_interaction_keyboard-456-listitem-001">\n<p id="customizing_interaction_keyboard-456-simpara-003">Registers an <span class="api">ICommand</span> to a given key stroke or recognizer function.</p>\n</dd>\n<dt id="customizing_interaction_keyboard-456-term-003"><api-link id="customizing_interaction_keyboard-456-api-link-007" data-member="addCommandBinding(yfiles.input.ICommand,yfiles.input.ExecuteCommandHandler,yfiles.input.CanExecuteCommandHandler)" data-text="addCommandBinding(command:&#xA0;ICommand, execute:&#xA0;ExecuteCommandHandler, canExecute:&#xA0;CanExecuteCommandHandler):&#xA0;KeyboardInputModeBinding" data-type="yfiles.input.KeyboardInputMode"></api-link></dt><dd id="customizing_interaction_keyboard-456-listitem-002">\n<p id="customizing_interaction_keyboard-456-simpara-004">Adds a command and associated execution handlers to the <span class="api">KeyboardInputMode</span>.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_interaction_click",xreflabel:"Customizing Mouse Clicks",title:"Mouse Clicks",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-001",content:'<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> allow convenient handling of mouse clicks on items.\nBoth dispatch a number of events for different kinds of mouse clicks\n(e.g. single, double, left, right, and combinations thereof) as listed in the table below).'},{tagname:"table","class":"",id:"customizing_interaction_click-457-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_click-457-thead-001"><tr id="customizing_interaction_click-457-row-001"><th id="customizing_interaction_click-457-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_click-457-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_click-457-tbody-001"><tr id="customizing_interaction_click-457-row-002"><td id="customizing_interaction_click-457-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-002"><api-link id="customizing_interaction_click-457-api-link-001" data-member="ItemLeftClicked" data-text="ItemLeftClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-003">…​ a left click on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_click-457-row-003"><td id="customizing_interaction_click-457-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-004"><api-link id="customizing_interaction_click-457-api-link-002" data-member="ItemRightClicked" data-text="ItemRightClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-005">…​ a right click on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_click-457-row-004"><td id="customizing_interaction_click-457-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-006"><api-link id="customizing_interaction_click-457-api-link-003" data-member="ItemClicked" data-text="ItemClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-007">…​ any mouse click on a clickable item occurred.\n  This event is dispatched after the event for left or right click.</para></td></tr><tr id="customizing_interaction_click-457-row-005"><td id="customizing_interaction_click-457-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-008"><api-link id="customizing_interaction_click-457-api-link-004" data-member="ItemLeftDoubleClicked" data-text="ItemLeftDoubleClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-009">…​ a double click with the left button on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_click-457-row-006"><td id="customizing_interaction_click-457-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-010"><api-link id="customizing_interaction_click-457-api-link-005" data-member="ItemRightDoubleClicked" data-text="ItemRightDoubleClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-011">…​ a double click with the right button on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_click-457-row-007"><td id="customizing_interaction_click-457-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-012"><api-link id="customizing_interaction_click-457-api-link-006" data-member="ItemDoubleClicked" data-text="ItemDoubleClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-013">…​ a double click with any button on a clickable item occurred.\n  This event is dispatched after the event for left or right double click.</para></td></tr><tr id="customizing_interaction_click-457-row-008"><td id="customizing_interaction_click-457-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-014"><api-link id="customizing_interaction_click-457-api-link-007" data-member="CanvasClicked" data-text="CanvasClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-015">…​ a mouse click is performed at a location where no clickable item can be found.\n  Note that this may be on another item if that item is not clickable.\n  The default action in this case is to create a new node\n  (cf. <a href="#/dguide/customizing_interaction_creating_nodes">Customizing Creating Nodes</a>).\n  Handling this event will prevent that.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-016",content:'In most cases handling click events only will suffice.\nIf you need complete control over what happens on clicks within <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span>\nyou can override the\n<api-link id="customizing_interaction_click-457-api-link-008" data-member="click(yfiles.graph.IModelItem,yfiles.input.ClickEventArgs)" data-text="click" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nmethod which handles all the default actions, such as raising click events, propagating\nthem to items that are at the clicked location and also handling default actions, such as\nselection and focus.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-017",content:'The items for which mouse clicks are reported (the <span class="def">clickable items</span>) can be defined using\nthe <api-link id="customizing_interaction_click-457-api-link-009" data-member="clickableItems" data-text="clickableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.\nThis property defines the item types for which clicks are reported using a combination\nof the values defined in <api-link id="customizing_interaction_click-457-api-link-010" data-member="" data-text="GraphItemTypes" data-type="yfiles.graph.GraphItemTypes"></api-link>.\nNone of the above events are raised when clicking an item that is not considered clickable.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-018",content:'Finer control can be achieved by overriding the\n<api-link id="customizing_interaction_click-457-api-link-011" data-member="shouldClick(yfiles.graph.IModelItem)" data-text="shouldClick" data-type="yfiles.input.GraphEditorInputMode"></api-link> method.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-019",content:'The hit testing order for single and double clicks is not necessarily the same as the <strong id="customizing_interaction_click-457-emphasis-001" class="bold" role="bold">display</strong> order of items.\nIt is determined by the\n<api-link id="customizing_interaction_click-457-api-link-012" data-member="clickHitTestOrder" data-text="clickHitTestOrder" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nand <api-link id="customizing_interaction_click-457-api-link-013" data-member="doubleClickHitTestOrder" data-text="doubleClickHitTestOrder" data-type="yfiles.input.GraphEditorInputMode"></api-link> properties, respectively.\nThese properties take an array of <api-link id="customizing_interaction_click-457-api-link-014" data-member="" data-text="GraphItemTypes" data-type="yfiles.graph.GraphItemTypes"></api-link>\nwhich is processed in the following way:\nThe hit test looks at the given location for the topmost item of the\ntype (or types) which is first in the array. If none is found,\nit searches for items of the types defined in the next element.'},{tagname:"example",id:"customizing_interaction_click-457-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_click-457-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.clickHitTestOrder = [\r\n  yfiles.graph.GraphItemTypes.NODE |\r\n    yfiles.graph.GraphItemTypes.EDGE |\r\n    yfiles.graph.GraphItemTypes.LABEL\r\n]\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-020",content:'In the above example the topmost element of type node or edge will be preferred as hit item,\neven if there are other types of elements (like labels) on top of them. Only if neither a node\nnor an edge can be found at the given location, the topmost label will be looked for.\nNote that when using combined values in this way, the <a href="#/dguide/customizing_view-z_order">visual order of those items</a>\n(usually nodes are on top of edges) takes precedence. It’s often preferable to\nonly use simple values in the hit testing order to avoid side effects when changing\nthe rendering order of items.'},{tagname:"para","class":"dguide-para important",id:"customizing_interaction_click-457-important-001",content:'<p id="customizing_interaction_click-457-simpara-021">Click handling and <a href="#/dguide/customizing_interaction_selection">click selection</a> are closely related.\nClick selection will be handled after handling mouse clicks. This has a few consequences:</p><para><ul id="customizing_interaction_click-457-itemizedlist-001"><li id="customizing_interaction_click-457-listitem-001"><p id="customizing_interaction_click-457-simpara-022">Click selection will not be handled for items which do not report mouse clicks.\nTherefore, <api-link id="customizing_interaction_click-457-api-link-015" data-member="clickSelectableItems" data-text="clickSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nis treated as a subset of <api-link id="customizing_interaction_click-457-api-link-016" data-member="clickableItems" data-text="clickableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link>.</p></li><li id="customizing_interaction_click-457-listitem-002"><p id="customizing_interaction_click-457-simpara-023">Setting <api-link id="customizing_interaction_click-457-api-link-017" data-member="handled" data-text="handled" data-type="yfiles.input.ItemClickedEventArgs&lt;T&gt;"></api-link>\non the <api-link id="customizing_interaction_click-457-api-link-018" data-member="" data-text="ItemClickedEventArgs&lt;T&gt;" data-type="yfiles.input.ItemClickedEventArgs&lt;T&gt;"></api-link>\nwill stop the event from being further processed internally.\nTherefore, setting <span class="api">handled</span>\nto <code>true</code> for an item will prevent this item from being selected by this mouse click.</p></li><li id="customizing_interaction_click-457-listitem-003"><p id="customizing_interaction_click-457-simpara-024">The <span class="api">clickHitTestOrder</span>\nis overridden by detail selection and cyclic selection.\nSee also section <a href="#/dguide/interaction-selection">Selection</a>.</p></li></ul></para>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-025",content:'The actual click handling is delegated to <span class="api">GraphEditorInputMode</span>’s and <span class="api">GraphViewerInputMode</span>’s child input mode\n<api-link id="customizing_interaction_click-457-api-link-019" data-member="" data-text="ClickInputMode" data-type="yfiles.input.ClickInputMode"></api-link>. Both listen for <span class="api">ClickInputMode</span>’s\n<api-link id="customizing_interaction_click-457-api-link-020" data-member="Clicked" data-text="Clicked" data-type="yfiles.input.ClickInputMode"></api-link> and\n<api-link id="customizing_interaction_click-457-api-link-021" data-member="DoubleClicked" data-text="DoubleClicked" data-type="yfiles.input.ClickInputMode"></api-link>\nevents to handle mouse clicks.'},{tagname:"table","class":"",id:"customizing_interaction_click-457-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_click-457-thead-002"><tr id="customizing_interaction_click-457-row-009"><th id="customizing_interaction_click-457-entry-017" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_click-457-entry-018" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_click-457-tbody-002"><tr id="customizing_interaction_click-457-row-010"><td id="customizing_interaction_click-457-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-026"><api-link id="customizing_interaction_click-457-api-link-022" data-member="Clicked" data-text="Clicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-027">…​ a mouse click has been detected.</para></td></tr><tr id="customizing_interaction_click-457-row-011"><td id="customizing_interaction_click-457-entry-021" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-028"><api-link id="customizing_interaction_click-457-api-link-023" data-member="LeftClicked" data-text="LeftClicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-022" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-029">…​ a left click has been detected.</para></td></tr><tr id="customizing_interaction_click-457-row-012"><td id="customizing_interaction_click-457-entry-023" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-030"><api-link id="customizing_interaction_click-457-api-link-024" data-member="RightClicked" data-text="RightClicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-024" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-031">…​ a right click has been detected.</para></td></tr><tr id="customizing_interaction_click-457-row-013"><td id="customizing_interaction_click-457-entry-025" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-032"><api-link id="customizing_interaction_click-457-api-link-025" data-member="DoubleClicked" data-text="DoubleClicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-026" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-033">…​ a double click has been detected.</para></td></tr><tr id="customizing_interaction_click-457-row-014"><td id="customizing_interaction_click-457-entry-027" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-034"><api-link id="customizing_interaction_click-457-api-link-026" data-member="LeftDoubleClicked" data-text="LeftDoubleClicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-028" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-035">…​ a double click with the left mouse button has been detected.</para></td></tr><tr id="customizing_interaction_click-457-row-015"><td id="customizing_interaction_click-457-entry-029" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-036"><api-link id="customizing_interaction_click-457-api-link-027" data-member="RightDoubleClicked" data-text="RightDoubleClicked" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="customizing_interaction_click-457-entry-030" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_click-457-simpara-037">…​ a double click with the right mouse button has been detected.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-038",content:'You may want to listen for these events, if <span class="api">GraphEditorInputMode</span>’s or <span class="api">GraphViewerInputMode</span>’s item click events\nare not applicable for your use case.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_click-457-simpara-039",content:'<span class="api">ClickInputMode</span> provides a number of properties to further customize click handling:'},{tagname:"para",content:'<dl id="customizing_interaction_click-457-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_click-457-term-001"><api-link id="customizing_interaction_click-457-api-link-028" data-member="doubleClickPolicy" data-text="doubleClickPolicy" data-type="yfiles.input.ClickInputMode"></api-link></dt><dd id="customizing_interaction_click-457-listitem-004">\n<p id="customizing_interaction_click-457-simpara-040">Uses the values defined in <api-link id="customizing_interaction_click-457-api-link-029" data-member="" data-text="DoubleClickPolicy" data-type="yfiles.input.DoubleClickPolicy"></api-link>\nto determine how to dispatch single click events for double clicks.\nBy default, both the first and second click are reported\nbefore the double click itself is reported.</p>\n</dd>\n<dt id="customizing_interaction_click-457-term-002"><api-link id="customizing_interaction_click-457-api-link-030" data-member="validClickHitTestable" data-text="validClickHitTestable" data-type="yfiles.input.ClickInputMode"></api-link></dt><dd id="customizing_interaction_click-457-listitem-005">\n<p id="customizing_interaction_click-457-simpara-041">Allows to restrict the area where mouse clicks should be recognized.\nBy default the area is unrestricted.</p>\n</dd>\n<dt id="customizing_interaction_click-457-term-003"><api-link id="customizing_interaction_click-457-api-link-031" data-member="activeButtons" data-text="activeButtons" data-type="yfiles.input.ClickInputMode"></api-link></dt><dd id="customizing_interaction_click-457-listitem-006">\n<p id="customizing_interaction_click-457-simpara-042">Determines for which buttons mouse clicks should be reported.\nBy default left and right clicks are reported.</p>\n</dd>\n<dt id="customizing_interaction_click-457-term-004"><api-link id="customizing_interaction_click-457-api-link-032" data-member="swallowFocusClick" data-text="swallowFocusClick" data-type="yfiles.input.ClickInputMode"></api-link></dt><dd id="customizing_interaction_click-457-listitem-007">\n<p id="customizing_interaction_click-457-simpara-043">Whether clicks should be discarded if they occur within 100ms\nafter the canvas got the focus.\nBy default this is disabled.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_interaction_touch",xreflabel:"Customizing Touch Gestures",title:"Touch handling",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-001",content:'<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> allow convenient handling of tap gestures on items.\nBoth single and double taps are reported in a similar manner as mouse clicks.\nNote that a tap or double tap will raise the same events as a mouse click or double click.\nAlso, property <api-link id="customizing_interaction_touch-458-api-link-001" data-member="clickableItems" data-text="clickableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nspecifies the graph item types for which a tap is reported as well.\nThe dispatched events are listed in the table below:'},{tagname:"table","class":"",id:"customizing_interaction_touch-458-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_touch-458-thead-001"><tr id="customizing_interaction_touch-458-row-001"><th id="customizing_interaction_touch-458-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_touch-458-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_touch-458-tbody-001"><tr id="customizing_interaction_touch-458-row-002"><td id="customizing_interaction_touch-458-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-002"><api-link id="customizing_interaction_touch-458-api-link-002" data-member="ItemClicked" data-text="ItemClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_touch-458-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-003">…​ a tap on on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_touch-458-row-003"><td id="customizing_interaction_touch-458-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-004"><api-link id="customizing_interaction_touch-458-api-link-003" data-member="ItemDoubleClicked" data-text="ItemDoubleClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_touch-458-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-005">…​ a double tap on a clickable item occurred.</para></td></tr><tr id="customizing_interaction_touch-458-row-004"><td id="customizing_interaction_touch-458-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-006"><api-link id="customizing_interaction_touch-458-api-link-004" data-member="CanvasClicked" data-text="CanvasClicked" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_touch-458-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-007">…​ a tap is performed at a location where no clickable item can be found.\n  Note that this may be on another item if that item is not clickable.\n  The default action in this case is to create a new node\n  (cf. <a href="#/dguide/customizing_interaction_creating_nodes">Customizing Creating Nodes</a>).\n  Handling this event will prevent that.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-008",content:'In most cases handling click events only will suffice.\nIf you need complete control over what happens on clicks within <span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span>\nyou can override the\n<api-link id="customizing_interaction_touch-458-api-link-005" data-member="tap(yfiles.graph.IModelItem,yfiles.input.TapEventArgs)" data-text="tap" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nmethod which handles all the default actions, such as raising click events, propagating\nthem to items that are at the tapped location and also handling default actions, such as\nselection and focus.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-009",content:'Defining the items for which taps are reported as well as defining the hit test order\ncan be achieved using the same properties as for mouse clicks.\nPlease refer to <a href="#/dguide/customizing_interaction_click">the according section</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-010",content:'The actual tap handling is delegated to <span class="api">GraphEditorInputMode</span>’s and <span class="api">GraphViewerInputMode</span>’s child input mode\n<api-link id="customizing_interaction_touch-458-api-link-006" data-member="" data-text="TapInputMode" data-type="yfiles.input.TapInputMode"></api-link>. Both listen for <span class="api">ClickInputMode</span>’s\n<api-link id="customizing_interaction_touch-458-api-link-007" data-member="Tapped" data-text="Tapped" data-type="yfiles.input.TapInputMode"></api-link> and\n<api-link id="customizing_interaction_touch-458-api-link-008" data-member="DoubleTapped" data-text="DoubleTapped" data-type="yfiles.input.TapInputMode"></api-link>\nevents to handle taps and double taps.'},{tagname:"table","class":"",id:"customizing_interaction_touch-458-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_touch-458-thead-002"><tr id="customizing_interaction_touch-458-row-005"><th id="customizing_interaction_touch-458-entry-009" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_touch-458-entry-010" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_touch-458-tbody-002"><tr id="customizing_interaction_touch-458-row-006"><td id="customizing_interaction_touch-458-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-011"><api-link id="customizing_interaction_touch-458-api-link-009" data-member="Tapped" data-text="Tapped" data-type="yfiles.input.TapInputMode"></api-link></para></td><td id="customizing_interaction_touch-458-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-012">…​ a tap has been detected.</para></td></tr><tr id="customizing_interaction_touch-458-row-007"><td id="customizing_interaction_touch-458-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-013"><api-link id="customizing_interaction_touch-458-api-link-010" data-member="DoubleTapped" data-text="DoubleTapped" data-type="yfiles.input.TapInputMode"></api-link></para></td><td id="customizing_interaction_touch-458-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_touch-458-simpara-014">…​ a double tap has been detected.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-015",content:'You may want to listen for these events, if <span class="api">GraphEditorInputMode</span>’s or <span class="api">GraphViewerInputMode</span>’s item click events\nare not applicable for your use case.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_touch-458-simpara-016",content:'<span class="api">TapInputMode</span> provides a number of properties to further customize tap handling:'},{tagname:"para",content:'<dl id="customizing_interaction_touch-458-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_touch-458-term-001"><api-link id="customizing_interaction_touch-458-api-link-011" data-member="validTapHitTestable" data-text="validTapHitTestable" data-type="yfiles.input.TapInputMode"></api-link></dt><dd id="customizing_interaction_touch-458-listitem-001">\n<p id="customizing_interaction_touch-458-simpara-017">Allows to restrict the area where taps should be recognized.\nBy default the area is unrestricted.</p>\n</dd>\n<dt id="customizing_interaction_touch-458-term-002"><api-link id="customizing_interaction_touch-458-api-link-012" data-member="swallowFocusTap" data-text="swallowFocusTap" data-type="yfiles.input.TapInputMode"></api-link></dt><dd id="customizing_interaction_touch-458-listitem-002">\n<p id="customizing_interaction_touch-458-simpara-018">Whether taps should be discarded if they occur within 100ms\nafter the canvas got the focus.\nBy default this is disabled.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_interaction_selection",xreflabel:"Customizing Selection",title:"Selection",children:[{tagname:"heading",id:"_general",renderas:"sect3",content:"General"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-001",content:'The selection state of items is maintained by the\n<api-link id="customizing_interaction_selection-459-api-link-001" data-member="" data-text="IGraphSelection" data-type="yfiles.view.IGraphSelection"></api-link> instance found in <span class="api">GraphComponent</span>’s\n<api-link id="customizing_interaction_selection-459-api-link-002" data-member="selection" data-text="selection" data-type="yfiles.view.GraphComponent"></api-link> property.\nThe <span class="api">IGraphSelection</span> provides <api-link id="customizing_interaction_selection-459-api-link-003" data-member="" data-text="ISelectionModel&lt;T&gt;" data-type="yfiles.view.ISelectionModel"></api-link> instances\nfor each type of graph items. It also allows querying and changing the\nselection state for each model item.'},{tagname:"para",content:'<dl id="customizing_interaction_selection-459-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_selection-459-term-001" class="title" role="title">Selection models available on IGraphSelection</dt><dt id="customizing_interaction_selection-459-term-002"><api-link id="customizing_interaction_selection-459-api-link-004" data-member="selectedNodes" data-text="selectedNodes" data-type="yfiles.view.IGraphSelection"></api-link></dt><dt id="customizing_interaction_selection-459-term-003"><api-link id="customizing_interaction_selection-459-api-link-005" data-member="selectedLabels" data-text="selectedLabels" data-type="yfiles.view.IGraphSelection"></api-link></dt><dt id="customizing_interaction_selection-459-term-004"><api-link id="customizing_interaction_selection-459-api-link-006" data-member="selectedEdges" data-text="selectedEdges" data-type="yfiles.view.IGraphSelection"></api-link></dt><dt id="customizing_interaction_selection-459-term-005"><api-link id="customizing_interaction_selection-459-api-link-007" data-member="selectedPorts" data-text="selectedPorts" data-type="yfiles.view.IGraphSelection"></api-link></dt><dt id="customizing_interaction_selection-459-term-006"><api-link id="customizing_interaction_selection-459-api-link-008" data-member="selectedBends" data-text="selectedBends" data-type="yfiles.view.IGraphSelection"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-001">\n<p id="customizing_interaction_selection-459-simpara-002"><span class="api">ISelectionModel&lt;T></span>s for the different types of graph items.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-007" class="title" role="title">Methods for querying and setting the selection state on </dt><dt id="customizing_interaction_selection-459-term-008"><api-link id="customizing_interaction_selection-459-api-link-009" data-member="isSelected(T)" data-text="isSelected(item:&#xA0;T):&#xA0;boolean" data-type="yfiles.view.ISelectionModel"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-002">\n<p id="customizing_interaction_selection-459-simpara-003">Whether the given model item is selected.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-009"><api-link id="customizing_interaction_selection-459-api-link-010" data-member="setSelected(T,boolean)" data-text="setSelected(item:&#xA0;T, selected:&#xA0;boolean):&#xA0;void" data-type="yfiles.view.ISelectionModel"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-003">\n<p id="customizing_interaction_selection-459-simpara-004">Setting the selection state of the given item to selected (<code>true</code>) or unselected (<code>false</code>).</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-010"><api-link id="customizing_interaction_selection-459-api-link-011" data-member="clear()" data-text="clear():&#xA0;void" data-type="yfiles.view.ISelectionModel"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-004">\n<p id="customizing_interaction_selection-459-simpara-005">Set all model items maintained by the selection model to unselected.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-006",content:'<a href="#/dguide/interaction-selection">Interactive selection</a> of graph items is supported by both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.\nBoth provide access to the selection they manage:\n<api-link id="customizing_interaction_selection-459-api-link-012" data-member="graphSelection" data-text="graphSelection" data-type="yfiles.input.GraphEditorInputMode"></api-link>.\nThis is the same instance found in the <span class="api">selection</span>\nproperty of the <span class="api">GraphComponent</span> these input modes manage.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-007",content:'Both modes provide convenience methods to directly select or deselect a single item\nas well as all marquee-selectable items in a given area:\n<api-link id="customizing_interaction_selection-459-api-link-013" data-member="setSelected(yfiles.graph.IModelItem,boolean)" data-text="setSelected(IModelItem, boolean)" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nand\n<api-link id="customizing_interaction_selection-459-api-link-014" data-member="marqueeSelect(yfiles.geometry.Rect)" data-text="marqueeSelect(Rect)" data-type="yfiles.input.GraphEditorInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-008",content:'<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> support three ways of selecting elements interactively:\nselection by mouse click or tap, marquee selection, and the\n<api-link id="customizing_interaction_selection-459-api-link-015" data-member="SELECT_ALL" data-text="select all command" data-type="yfiles.input.ICommand"></api-link>.\nThe items which are handled by these kinds of selection can be\ndefined using the <code>…​SelectableItems</code> properties.\nThese properties define the item types which can be selected using a combination\nof the values defined in <api-link id="customizing_interaction_selection-459-api-link-016" data-member="" data-text="GraphItemTypes" data-type="yfiles.graph.GraphItemTypes"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-009",content:"Finer control can be achieved by overriding the <code>should…​Select</code> methods:"},{tagname:"table","class":"",id:"customizing_interaction_selection-459-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:17%;"><col style="width:17%;"><col style="width:67%;"></colgroup><thead id="customizing_interaction_selection-459-thead-001"><tr id="customizing_interaction_selection-459-row-001"><th id="customizing_interaction_selection-459-entry-001" align="left" valign="top">\nMember\n</th><th id="customizing_interaction_selection-459-entry-002" align="left" valign="top">\nInteraction\n</th><th id="customizing_interaction_selection-459-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="customizing_interaction_selection-459-tbody-001"><tr id="customizing_interaction_selection-459-row-002"><td id="customizing_interaction_selection-459-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-010"><api-link id="customizing_interaction_selection-459-api-link-017" data-member="selectableItems" data-text="selectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-011">click, marquee, lasso, select all</para></td><td id="customizing_interaction_selection-459-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-012">Determines which types of graph items are selectable.</para></td></tr><tr id="customizing_interaction_selection-459-row-003"><td id="customizing_interaction_selection-459-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-013"><api-link id="customizing_interaction_selection-459-api-link-018" data-member="selectablePredicate" data-text="selectablePredicate" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-014">click, marquee, lasso, select all</para></td><td id="customizing_interaction_selection-459-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-015">A predicate function which determines whether the given item should be selected.</para></td></tr><tr id="customizing_interaction_selection-459-row-004"><td id="customizing_interaction_selection-459-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-016"><api-link id="customizing_interaction_selection-459-api-link-019" data-member="shouldSelectItem(yfiles.graph.IModelItem)" data-text="shouldSelectItem(item:&#xA0;IModelItem):&#xA0;boolean" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-017">click, marquee, lasso, select all</para></td><td id="customizing_interaction_selection-459-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-018">Whether the given item should be selected. Can be overridden for customization.</para></td></tr><tr id="customizing_interaction_selection-459-row-005"><td id="customizing_interaction_selection-459-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-019"><api-link id="customizing_interaction_selection-459-api-link-020" data-member="clickSelectableItems" data-text="clickSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-020">click</para></td><td id="customizing_interaction_selection-459-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-021">Determines which types of graph items are selectable by mouse click or tap.\n  Note that this is treated as a subset of\n  <span class="api">selectableItems</span>.</para></td></tr><tr id="customizing_interaction_selection-459-row-006"><td id="customizing_interaction_selection-459-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-022"><api-link id="customizing_interaction_selection-459-api-link-021" data-member="shouldClickSelect(yfiles.graph.IModelItem)" data-text="shouldClickSelect(item:&#xA0;IModelItem):&#xA0;boolean" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-023">click</para></td><td id="customizing_interaction_selection-459-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-024">Whether the given item should be selected by mouse click or tap. Can be overridden for customization.</para></td></tr><tr id="customizing_interaction_selection-459-row-007"><td id="customizing_interaction_selection-459-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-025"><api-link id="customizing_interaction_selection-459-api-link-022" data-member="marqueeSelectableItems" data-text="marqueeSelectableItems" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-026">marquee, lasso</para></td><td id="customizing_interaction_selection-459-entry-021" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-027">Determines which types of graph items are marquee selectable.</para></td></tr><tr id="customizing_interaction_selection-459-row-008"><td id="customizing_interaction_selection-459-entry-022" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-028"><api-link id="customizing_interaction_selection-459-api-link-023" data-member="shouldMarqueeSelect(yfiles.graph.IModelItem)" data-text="shouldMarqueeSelect(item:&#xA0;IModelItem):&#xA0;boolean" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-023" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-029">marquee, lasso</para></td><td id="customizing_interaction_selection-459-entry-024" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-030">Whether the given item should be selected by marquee selection. Can be overridden for customization.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-031",content:'Instead of overriding the\n<api-link id="customizing_interaction_selection-459-api-link-024" data-member="shouldSelectItem(yfiles.graph.IModelItem)" data-text="shouldSelectItem" data-type="yfiles.input.GraphEditorInputMode"></api-link> method\nyou can set a predicate function using the\n<api-link id="customizing_interaction_selection-459-api-link-025" data-member="selectablePredicate" data-text="selectablePredicate" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-032",content:'Note that an item is only selected if all conditions are met. For example,\nan item is only considered for click selection if its type is set in both\n<span class="api">selectableItems</span>\nand <span class="api">clickSelectableItems</span>.\nMore, click selection is only handled for items\nwhich are clickable, see section <a href="#/dguide/customizing_interaction_click">Customizing Mouse Clicks</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-033",content:'<span class="api">IGraphSelection</span> dispatches an event for each item whose selection state changes,\nthe <api-link id="customizing_interaction_selection-459-api-link-026" data-member="ItemSelectionChanged" data-text="ItemSelectionChanged" data-type="yfiles.view.ISelectionModel"></api-link> event.\nOn a higher level, both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> dispatch events at the beginning and the end\nof a user interaction which changes the selection state of one or more graph items:\n<api-link id="customizing_interaction_selection-459-api-link-027" data-member="MultiSelectionStarted" data-text="MultiSelectionStarted" data-type="yfiles.input.GraphEditorInputMode"></api-link> and\n<api-link id="customizing_interaction_selection-459-api-link-028" data-member="MultiSelectionFinished" data-text="MultiSelectionFinished" data-type="yfiles.input.GraphEditorInputMode"></api-link>.\nDespite their name these events are also dispatched when the state of only one item changes.'},{tagname:"table","class":"",id:"customizing_interaction_selection-459-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_selection-459-thead-002"><tr id="customizing_interaction_selection-459-row-009"><th id="customizing_interaction_selection-459-entry-025" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_selection-459-entry-026" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_selection-459-tbody-002"><tr id="customizing_interaction_selection-459-row-010"><td id="customizing_interaction_selection-459-entry-027" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-034"><api-link id="customizing_interaction_selection-459-api-link-029" data-member="MultiSelectionStarted" data-text="GraphEditorInputMode.MultiSelectionStarted" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-028" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-035">…​ the selection state of one or more items is about to be changed\n  as a result of a user interaction.</para></td></tr><tr id="customizing_interaction_selection-459-row-011"><td id="customizing_interaction_selection-459-entry-029" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-036"><api-link id="customizing_interaction_selection-459-api-link-030" data-member="ItemSelectionChanged" data-text="ISelectionModel&lt;T&gt;.ItemSelectionChanged" data-type="yfiles.view.ISelectionModel"></api-link></para></td><td id="customizing_interaction_selection-459-entry-030" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-037">…​ the selection state of a graph item has changed.</para></td></tr><tr id="customizing_interaction_selection-459-row-012"><td id="customizing_interaction_selection-459-entry-031" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-038"><api-link id="customizing_interaction_selection-459-api-link-031" data-member="MultiSelectionFinished" data-text="GraphEditorInputMode.MultiSelectionFinished" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-032" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-039">…​ the selection state of one or more items has been changed\n  as a result of a user interaction.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_selection-459-note-001",content:'<para><ul id="customizing_interaction_selection-459-itemizedlist-001"><li id="customizing_interaction_selection-459-listitem-005"><p id="customizing_interaction_selection-459-simpara-040">The <span class="api">ItemSelectionChanged</span> event\nis also dispatched upon programmatic selection changes.</p></li><li id="customizing_interaction_selection-459-listitem-006"><p id="customizing_interaction_selection-459-simpara-041">For each affected item one <span class="api">ItemSelectionChanged</span>\nevent is dispatched, even if the changes happen in one method call or upon one single interaction.</p></li><li id="customizing_interaction_selection-459-listitem-007"><p id="customizing_interaction_selection-459-simpara-042">For user interaction driven changes, all\n<span class="api">ItemSelectionChanged</span> events\nare dispatched in between a\n<api-link id="customizing_interaction_selection-459-api-link-032" data-member="MultiSelectionStarted" data-text="MultiSelectionStarted" data-type="yfiles.input.GraphEditorInputMode"></api-link> and a\n<api-link id="customizing_interaction_selection-459-api-link-033" data-member="MultiSelectionFinished" data-text="MultiSelectionFinished" data-type="yfiles.input.GraphEditorInputMode"></api-link> event.</p></li></ul></para>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-043",content:'You can make further click selection customizations by modifying the click or touch handling\nas discussed in sections <a href="#/dguide/customizing_interaction_click">Customizing Mouse Clicks</a> and <a href="#/dguide/customizing_interaction_touch">Customizing Touch Gestures</a>.'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_selection-459-note-002",content:'<p id="customizing_interaction_selection-459-simpara-044">The highlighting visualization of selected elements themselves can be customized as described in\nsection <a href="#/dguide/customizing_indicators">Customizing Selection, Focus, and Highlight</a>.</p>'},{tagname:"heading",id:"_marquee_selection",renderas:"sect3",content:"Marquee selection"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_marquee",content:'For marquee selection <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> let their child input mode\n<api-link id="customizing_interaction_selection-459-api-link-034" data-member="" data-text="MarqueeSelectionInputMode" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link> handle the marquee rectangle.\n<span class="api">MarqueeSelectionInputMode</span> allows customization by changing the recognizers for some gestures.\nThis might be of importance to avoid conflicts with input modes\nwhich share the same gesture (i.e. dragging on an empty canvas),\ne.g. <a href="#/dguide/customizing_interaction_panning">MoveViewportInputMode</a>.'},{tagname:"para",content:'<dl id="customizing_interaction_selection-459-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_selection-459-term-011"><api-link id="customizing_interaction_selection-459-api-link-035" data-member="pressedRecognizer" data-text="pressedRecognizer" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-008">\n<p id="customizing_interaction_selection-459-simpara-046">An event recognizer which returns <code>true</code> if the given event\nshould be recognized as a mouse down gesture that might start a marquee selection.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-012"><api-link id="customizing_interaction_selection-459-api-link-036" data-member="draggedRecognizer" data-text="draggedRecognizer" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-009">\n<p id="customizing_interaction_selection-459-simpara-047">An event recognizer which returns <code>true</code> if the given event\nshould be recognized as a drag gesture.\nThis is only queried if the <span class="api">MarqueeSelectionInputMode</span> is already activated by a previous gesture.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-013"><api-link id="customizing_interaction_selection-459-api-link-037" data-member="releasedRecognizer" data-text="releasedRecognizer" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-010">\n<p id="customizing_interaction_selection-459-simpara-048">An event recognizer which returns <code>true</code> if the given event\nshould be recognized as a valid gesture to successfully finish the marquee selection.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_selection-459-note-003",content:'<p id="customizing_interaction_selection-459-simpara-049"><span class="api">GraphViewerInputMode</span> has different recognizers than <span class="api">GraphEditorInputMode</span> for marquee selection and its\n      <span class="api">MarqueeSelectionInputMode</span> is disabled by default.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-050",content:'During the drag gesture <span class="api">MarqueeSelectionInputMode</span> dispatches a sequence of events:'},{tagname:"table","class":"",id:"customizing_interaction_selection-459-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_selection-459-thead-003"><tr id="customizing_interaction_selection-459-row-013"><th id="customizing_interaction_selection-459-entry-033" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_selection-459-entry-034" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_selection-459-tbody-003"><tr id="customizing_interaction_selection-459-row-014"><td id="customizing_interaction_selection-459-entry-035" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-051"><api-link id="customizing_interaction_selection-459-api-link-038" data-member="DragStarting" data-text="DragStarting" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-036" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-052">…​ a drag gesture is recognized, before the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_selection-459-row-015"><td id="customizing_interaction_selection-459-entry-037" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-053"><api-link id="customizing_interaction_selection-459-api-link-039" data-member="DragStarted" data-text="DragStarted" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-038" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-054">…​ a drag gesture is recognized, after the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_selection-459-row-016"><td id="customizing_interaction_selection-459-entry-039" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-055"><api-link id="customizing_interaction_selection-459-api-link-040" data-member="Dragging" data-text="Dragging" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-040" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-056">…​ the mouse moves during drag operations and before the actual drag is performed.</para></td></tr><tr id="customizing_interaction_selection-459-row-017"><td id="customizing_interaction_selection-459-entry-041" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-057"><api-link id="customizing_interaction_selection-459-api-link-041" data-member="Dragged" data-text="Dragged" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-042" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-058">…​ the mouse moves during drag operations and after the actual drag is performed.</para></td></tr><tr id="customizing_interaction_selection-459-row-018"><td id="customizing_interaction_selection-459-entry-043" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-059"><api-link id="customizing_interaction_selection-459-api-link-042" data-member="DragCanceling" data-text="DragCanceling" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-044" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-060">…​ the drag gesture is canceled before the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_selection-459-row-019"><td id="customizing_interaction_selection-459-entry-045" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-061"><api-link id="customizing_interaction_selection-459-api-link-043" data-member="DragCanceled" data-text="DragCanceled" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-046" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-062">…​ the drag gesture is canceled after the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_selection-459-row-020"><td id="customizing_interaction_selection-459-entry-047" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-063"><api-link id="customizing_interaction_selection-459-api-link-044" data-member="DragFinishing" data-text="DragFinishing" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-048" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-064">…​ a drag gesture has ended successfully before the actual drag operations have been finished.</para></td></tr><tr id="customizing_interaction_selection-459-row-021"><td id="customizing_interaction_selection-459-entry-049" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-065"><api-link id="customizing_interaction_selection-459-api-link-045" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-050" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-066">…​ a drag gesture has ended successfully after the actual drag operations have been finished.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-067",content:'The visualization of the marquee rectangle can be customized by setting a custom\n<api-link id="customizing_interaction_selection-459-api-link-046" data-member="" data-text="IVisualTemplate" data-type="yfiles.view.IVisualTemplate"></api-link> to <span class="api">MarqueeSelectionInputMode</span>’s\n<api-link id="customizing_interaction_selection-459-api-link-047" data-member="template" data-text="template" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link> property or by\nregistering a custom <span class="api">IVisualTemplate</span> with the <a href="#/dguide/customizing_concepts_resource-keys">resource key</a>\n<api-link id="customizing_interaction_selection-459-api-link-048" data-member="MARQUEE_RECTANGLE_TEMPLATE_KEY" data-text="MARQUEE_RECTANGLE_TEMPLATE_KEY" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link>.'},{tagname:"example",id:"customizing_interaction_selection-459-informalexample-001",content:"<pre class=\"programlisting javascript\" id=\"customizing_interaction_selection-459-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// Create a new RectangleTemplate\r\nconst rectangleTemplate = new yfiles.view.IVisualTemplate({\r\n  createVisual(context, bounds, dataObject) {\r\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\r\n    rect.setAttribute('stroke-width', '1')\r\n    rect.setAttribute('stroke', 'red')\r\n    rect.setAttribute('stroke-dasharray', '1.5, 1.5')\r\n    rect.setAttribute('fill', 'red')\r\n    rect.setAttribute('fill-opacity', '0.25')\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return new yfiles.view.SvgVisual(rect)\r\n  },\r\n  updateVisual(context, oldVisual, bounds, dataObject) {\r\n    const rect = oldVisual.svgElement\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return oldVisual\r\n  }\r\n})\r\n\r\n// Set this template as the one to use for drawing the marquee selection rectangle\r\ngraphEditorInputMode.marqueeSelectionInputMode.template = rectangleTemplate\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-068",content:"Above example results in the following marquee selection rectangle:"},{tagname:"figure","class":"image",title:"Custom marquee selection rectangle",id:"customizing_interaction_selection-459-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_marquee_rectangle_painter.fc354e14.png",alt:"customizing interaction marquee rectangle painter",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-069",content:'You can set the cursor shown during dragging using the\n<api-link id="customizing_interaction_selection-459-api-link-049" data-member="marqueeCursor" data-text="marqueeCursor" data-type="yfiles.input.MarqueeSelectionInputMode"></api-link> property.'},{tagname:"heading",id:"customizing_interaction_lasso",renderas:"sect3",content:"Lasso selection"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-070",content:'Lasso selection in <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> is performed by their child input mode\n<api-link id="customizing_interaction_selection-459-api-link-050" data-member="" data-text="LassoSelectionInputMode" data-type="yfiles.input.LassoSelectionInputMode"></api-link>, which handles drawing a path within which to select items.\nThis child input mode is disabled by default, to avoid conflicting with marquee selection.\n<span class="api">LassoSelectionInputMode</span> allows customization by changing the recognizers for some gestures.\nThis might be of importance to avoid conflicts with input modes\nwhich share the same gesture (i.e. dragging on an empty canvas),\ne.g. <a href="#/dguide/customizing_interaction_panning">MoveViewportInputMode</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-071",content:'By default, <span class="api">LassoSelectionInputMode</span> is configured to draw the path around the selection\narea in a freehand gesture while dragging the mouse with the left mouse button held down.\nThe gesture is finished after releasing the mouse button and the path is closed with a straight\nline from the current location to its start.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-072",content:'By changing one or more of its various event recognizers <span class="api">LassoSelectionInputMode</span>\ncan be configured to support a polyline path or a mixture of both freehand and straight segments.\nAlso, it is possible to configure the input mode to finish only when the gesture is ended in\nan area around the start point of the path.'},{tagname:"para",content:'<dl id="customizing_interaction_selection-459-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_selection-459-term-014"><api-link id="customizing_interaction_selection-459-api-link-051" data-member="prepareRecognizer" data-text="prepareRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="customizing_interaction_selection-459-term-015"><api-link id="customizing_interaction_selection-459-api-link-052" data-member="prepareRecognizerTouch" data-text="prepareRecognizerTouch" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-011">\n<p id="customizing_interaction_selection-459-simpara-073">event recognizers that determine when to start\nthe gesture.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-016"><api-link id="customizing_interaction_selection-459-api-link-053" data-member="dragFreeRecognizer" data-text="dragFreeRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-012">\n<p id="customizing_interaction_selection-459-simpara-074">event recognizer which determines when to perform a freehand drag.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-017"><api-link id="customizing_interaction_selection-459-api-link-054" data-member="finishRecognizer" data-text="finishRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="customizing_interaction_selection-459-term-018"><api-link id="customizing_interaction_selection-459-api-link-055" data-member="finishRecognizerTouch" data-text="finishRecognizerTouch" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-013">\n<p id="customizing_interaction_selection-459-simpara-075">event recognizers which determine when to end the gesture.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-019"><api-link id="customizing_interaction_selection-459-api-link-056" data-member="startSegmentRecognizer" data-text="startSegmentRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="customizing_interaction_selection-459-term-020"><api-link id="customizing_interaction_selection-459-api-link-057" data-member="endSegmentRecognizer" data-text="endSegmentRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-014">\n<p id="customizing_interaction_selection-459-simpara-076">event recognizers that determine when and how to switch from free drawing\nmode to segment mode.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-021"><api-link id="customizing_interaction_selection-459-api-link-058" data-member="dragSegmentRecognizer" data-text="dragSegmentRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-015">\n<p id="customizing_interaction_selection-459-simpara-077">event recognizer which determines when to draw a segment.</p>\n</dd>\n<dt id="customizing_interaction_selection-459-term-022"><api-link id="customizing_interaction_selection-459-api-link-059" data-member="finishRegionRecognizer" data-text="finishRegionRecognizer" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="customizing_interaction_selection-459-term-023"><api-link id="customizing_interaction_selection-459-api-link-060" data-member="finishRegionRecognizerTouch" data-text="finishRegionRecognizerTouch" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dt id="customizing_interaction_selection-459-term-024"><api-link id="customizing_interaction_selection-459-api-link-061" data-member="finishRadius" data-text="finishRadius" data-type="yfiles.input.LassoSelectionInputMode"></api-link></dt><dd id="customizing_interaction_selection-459-listitem-016">\n<p id="customizing_interaction_selection-459-simpara-078">event recognizers which determine when to end the gesture within a defined\nradius from the starting point and the radius itself.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_selection-459-note-004",content:'<p id="customizing_interaction_selection-459-simpara-079"><span class="api">GraphViewerInputMode</span> has different recognizers than <span class="api">GraphEditorInputMode</span> for lasso selection and its\n      <span class="api">LassoSelectionInputMode</span> is disabled by default.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-080",content:'The following settings configure <span class="api">LassoSelectionInputMode</span> to support a polyline lasso, i.e. a\npath consisting of straight segments:'},{tagname:"example",id:"customizing_interaction_selection-459-informalexample-002",content:'<pre class="programlisting javascript" id="customizing_interaction_selection-459-programlisting-002" language="javascript" format="linespecific"><code>const lassoSelectionInputMode = graphEditorInputMode.lassoSelectionInputMode\r\nlassoSelectionInputMode.dragFreeRecognizer = yfiles.input.MouseEventRecognizers.DRAG\r\n// start a segment immediately at the beginning of the gesture or after the last segment is ended\r\nlassoSelectionInputMode.startSegmentRecognizer = yfiles.input.EventRecognizers.ALWAYS\r\n// end a segment when the mouse button is pressed or released\r\nlassoSelectionInputMode.endSegmentRecognizer = yfiles.input.EventRecognizers.createOrRecognizer(\r\n  yfiles.input.MouseEventRecognizers.LEFT_CLICK,\r\n  yfiles.input.MouseEventRecognizers.LEFT_UP\r\n)\r\nlassoSelectionInputMode.dragSegmentRecognizer = yfiles.input.MouseEventRecognizers.MOVE_OR_DRAG\r\n// outside the finish radius finish only with double click\r\nlassoSelectionInputMode.finishRecognizer = yfiles.input.MouseEventRecognizers.LEFT_DOUBLE_CLICK\r\n// or finish within the finish radius around the start point\r\nlassoSelectionInputMode.finishRadius = 10\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-081",content:'Note that the gesture now can only be ended by either a double click where the path is closed automatically\nby drawing a straight segment between the current location and the start of the path or\nby ending a segment with in the <api-link id="customizing_interaction_selection-459-api-link-062" data-member="finishRadius" data-text="finishRadius" data-type="yfiles.input.LassoSelectionInputMode"></api-link> around its start point.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-082",content:'It is also possible to mix the freehand and the polyline gestures. The following settings configure\n<span class="api">LassoSelectionInputMode</span> to draw a freehand path while dragging the mouse with the left\nbutton down and straight segments when the button is released. Similar to the freehand configuration\nthe gesture now can only be finished with a double click or by pressing or releasing the mouse button\nwithin the <span class="api">finishRadius</span> around its start point.'},{tagname:"example",id:"customizing_interaction_selection-459-informalexample-003",content:'<pre class="programlisting javascript" id="customizing_interaction_selection-459-programlisting-003" language="javascript" format="linespecific"><code>const lassoSelectionInputMode = graphEditorInputMode.lassoSelectionInputMode\r\n// start a segment when the mouse button is released\r\nlassoSelectionInputMode.startSegmentRecognizer = yfiles.input.MouseEventRecognizers.LEFT_UP\r\n// outside the finish radius finish only with double click\r\nlassoSelectionInputMode.finishRecognizer = yfiles.input.MouseEventRecognizers.LEFT_DOUBLE_CLICK\r\n// or finish within the finish radius around the start point\r\nlassoSelectionInputMode.finishRadius = 10\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-083",content:'During the drag gesture <span class="api">LassoSelectionInputMode</span> dispatches a sequence of events:'},{tagname:"table","class":"",id:"customizing_interaction_selection-459-table-003",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_selection-459-thead-004"><tr id="customizing_interaction_selection-459-row-022"><th id="customizing_interaction_selection-459-entry-051" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_selection-459-entry-052" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_selection-459-tbody-004"><tr id="customizing_interaction_selection-459-row-023"><td id="customizing_interaction_selection-459-entry-053" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-084"><api-link id="customizing_interaction_selection-459-api-link-063" data-member="DragStarting" data-text="DragStarting" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-054" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-085">…​ a drag gesture is recognized, before the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_selection-459-row-024"><td id="customizing_interaction_selection-459-entry-055" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-086"><api-link id="customizing_interaction_selection-459-api-link-064" data-member="DragStarted" data-text="DragStarted" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-056" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-087">…​ a drag gesture is recognized, after the input mode is initialized for dragging.</para></td></tr><tr id="customizing_interaction_selection-459-row-025"><td id="customizing_interaction_selection-459-entry-057" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-088"><api-link id="customizing_interaction_selection-459-api-link-065" data-member="Dragging" data-text="Dragging" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-058" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-089">…​ the mouse moves during drag operations and before the actual drag is performed.</para></td></tr><tr id="customizing_interaction_selection-459-row-026"><td id="customizing_interaction_selection-459-entry-059" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-090"><api-link id="customizing_interaction_selection-459-api-link-066" data-member="Dragged" data-text="Dragged" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-060" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-091">…​ the mouse moves during drag operations and after the actual drag is performed.</para></td></tr><tr id="customizing_interaction_selection-459-row-027"><td id="customizing_interaction_selection-459-entry-061" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-092"><api-link id="customizing_interaction_selection-459-api-link-067" data-member="DragCanceling" data-text="DragCanceling" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-062" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-093">…​ the drag gesture is canceled before the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_selection-459-row-028"><td id="customizing_interaction_selection-459-entry-063" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-094"><api-link id="customizing_interaction_selection-459-api-link-068" data-member="DragCanceled" data-text="DragCanceled" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-064" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-095">…​ the drag gesture is canceled after the input mode has been cleaned up.</para></td></tr><tr id="customizing_interaction_selection-459-row-029"><td id="customizing_interaction_selection-459-entry-065" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-096"><api-link id="customizing_interaction_selection-459-api-link-069" data-member="DragFinishing" data-text="DragFinishing" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-066" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-097">…​ a drag gesture has ended successfully before the actual drag operations have been finished.</para></td></tr><tr id="customizing_interaction_selection-459-row-030"><td id="customizing_interaction_selection-459-entry-067" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-098"><api-link id="customizing_interaction_selection-459-api-link-070" data-member="DragFinished" data-text="DragFinished" data-type="yfiles.input.LassoSelectionInputMode"></api-link></para></td><td id="customizing_interaction_selection-459-entry-068" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_selection-459-simpara-099">…​ a drag gesture has ended successfully after the actual drag operations have been finished.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-100",content:'The visualization of the path can be customized by setting the\n<api-link id="customizing_interaction_selection-459-api-link-071" data-member="stroke" data-text="stroke" data-type="yfiles.input.LassoSelectionInputMode"></api-link> and <api-link id="customizing_interaction_selection-459-api-link-072" data-member="fill" data-text="fill" data-type="yfiles.input.LassoSelectionInputMode"></api-link> properties or by\nregistering a custom <api-link id="customizing_interaction_selection-459-api-link-073" data-member="" data-text="Stroke" data-type="yfiles.view.Stroke"></api-link> or <api-link id="customizing_interaction_selection-459-api-link-074" data-member="" data-text="Fill" data-type="yfiles.view.Fill"></api-link> with the <a href="#/dguide/customizing_concepts_resource-keys">resource keys</a>\n<api-link id="customizing_interaction_selection-459-api-link-075" data-member="LASSO_STROKE_KEY" data-text="LASSO_STROKE_KEY" data-type="yfiles.input.LassoSelectionInputMode"></api-link> and <api-link id="customizing_interaction_selection-459-api-link-076" data-member="LASSO_FILL_KEY" data-text="LASSO_FILL_KEY" data-type="yfiles.input.LassoSelectionInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-101",content:'During the gesture <span class="api">LassoSelectionInputMode</span> can display an indicator for the region around the start location\nwhere the lasso gesture can be finished. Per default this indicator isn’t used but can be set via\n<api-link id="customizing_interaction_selection-459-api-link-077" data-member="finishRegionTemplate" data-text="finishRegionTemplate" data-type="yfiles.input.LassoSelectionInputMode"></api-link> or <api-link id="customizing_interaction_selection-459-api-link-078" data-member="FINISH_REGION_TEMPLATE_KEY" data-text="FINISH_REGION_TEMPLATE_KEY" data-type="yfiles.input.LassoSelectionInputMode"></api-link>.\nWhen entering this region a highlight indicator is used to indicate that the gesture can now be finished.\nThe visualization for this can be changed via <api-link id="customizing_interaction_selection-459-api-link-079" data-member="finishRegionHighlightTemplate" data-text="finishRegionHighlightTemplate" data-type="yfiles.input.LassoSelectionInputMode"></api-link> or\n<api-link id="customizing_interaction_selection-459-api-link-080" data-member="FINISH_REGION_HIGHLIGHT_TEMPLATE_KEY" data-text="FINISH_REGION_HIGHLIGHT_TEMPLATE_KEY" data-type="yfiles.input.LassoSelectionInputMode"></api-link>.'},{tagname:"example",id:"customizing_interaction_selection-459-informalexample-004",content:"<pre class=\"programlisting javascript\" id=\"customizing_interaction_selection-459-programlisting-004\" language=\"javascript\" format=\"linespecific\"><code>const graphEditorInputMode = new yfiles.input.GraphEditorInputMode()\r\nconst lassoSelectionInputMode = graphEditorInputMode.lassoSelectionInputMode\r\n\r\n//region CustomLassoSelectionVisualization\r\n// Set a custom stroke and fill\r\nlassoSelectionInputMode.stroke = new yfiles.view.Stroke({\r\n  fill: yfiles.view.Fill.RED,\r\n  dashStyle: new yfiles.view.DashStyle([2, 4], 1)\r\n})\r\nlassoSelectionInputMode.fill = new yfiles.view.SolidColorFill(255, 0, 0, 65)\r\n// Set a custom finish region visualization\r\nlassoSelectionInputMode.circleTemplate = new yfiles.view.IVisualTemplate({\r\n  createVisual(context, bounds, dataObject) {\r\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\r\n    rect.setAttribute('stroke-width', '3')\r\n    rect.setAttribute('stroke', 'darkred')\r\n    rect.setAttribute('fill', 'none')\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return new yfiles.view.SvgVisual(rect)\r\n  },\r\n  updateVisual(context, oldVisual, bounds, dataObject) {\r\n    const rect = oldVisual.svgElement\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return oldVisual\r\n  }\r\n})\r\n// Set a custom finish region highlight visualization\r\nlassoSelectionInputMode.circleHighlightTemplate = new yfiles.view.IVisualTemplate({\r\n  createVisual(context, bounds, dataObject) {\r\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\r\n    rect.setAttribute('stroke', 'darkred')\r\n    rect.setAttribute('fill', 'none')\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return new yfiles.view.SvgVisual(rect)\r\n  },\r\n  updateVisual(context, oldVisual, bounds, dataObject) {\r\n    const rect = oldVisual.svgElement\r\n    rect.x.baseVal.value = bounds.x\r\n    rect.y.baseVal.value = bounds.y\r\n    rect.width.baseVal.value = bounds.width\r\n    rect.height.baseVal.value = bounds.height\r\n    return oldVisual\r\n  }\r\n})\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-102",content:"Above example results in the following lasso selection visualization:"},{tagname:"figure","class":"image",title:"Custom lasso visualization",id:"customizing_interaction_selection-459-figure-002","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_lasso_visualization.f02cf64c.png",alt:"customizing interaction lasso visualization",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_selection-459-simpara-103",content:'You can set the cursor shown during dragging using the\n<api-link id="customizing_interaction_selection-459-api-link-081" data-member="lassoCursor" data-text="lassoCursor" data-type="yfiles.input.LassoSelectionInputMode"></api-link> property.'}]},{tagname:"section",id:"customizing_interaction_tooltips",xreflabel:"Customizing Tooltips",title:"Tooltips",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-001",content:'Tooltips are supported by both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-002",content:'Most conveniently, a tooltip text for a graph item can be provided in a handler for\n<span class="api">GraphEditorInputMode</span>’s or <span class="api">GraphViewerInputMode</span>’s <api-link id="customizing_interaction_tooltips-460-api-link-001" data-member="QueryItemToolTip" data-text="QueryItemToolTip" data-type="yfiles.input.GraphEditorInputMode"></api-link> event:'},{tagname:"example",id:"customizing_interaction_tooltips-460-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_tooltips-460-programlisting-001" language="javascript" format="linespecific"><code>graphEditorInputMode.toolTipItems = yfiles.graph.GraphItemTypes.NODE\r\n// register a listener\r\ngraphEditorInputMode.addQueryItemToolTipListener((src, eventArgs) => {\r\n  if (eventArgs.handled) {\r\n    // A tooltip has already been assigned => nothing to do.\r\n    return\r\n  }\r\n  // We can safely assume a node here because we set toolTipItems to only NODE\r\n  let hitNode = eventArgs.item\r\n  if (hitNode.labels.size > 0) {\r\n    eventArgs.toolTip = hitNode.labels.get(0).text\r\n    // Indicate that the tooltip has been set.\r\n    eventArgs.handled = true\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-003",content:'The <api-link id="customizing_interaction_tooltips-460-api-link-002" data-member="toolTipItems" data-text="toolTipItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> property on <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> controls for which items the\ntooltip events trigger when clicked. You can obtain a more specific distinction by overriding\n<api-link id="customizing_interaction_tooltips-460-api-link-003" data-member="shouldQueryToolTip(yfiles.graph.IModelItem)" data-text="shouldQueryToolTip" data-type="yfiles.input.GraphEditorInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-004",content:'The actual work is done by the <api-link id="customizing_interaction_tooltips-460-api-link-004" data-member="" data-text="MouseHoverInputMode" data-type="yfiles.input.MouseHoverInputMode"></api-link>\nwhich is a child input mode for both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-005",content:'Further customizations can be done on the <span class="api">MouseHoverInputMode</span>:\n<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> trigger the <api-link id="customizing_interaction_tooltips-460-api-link-005" data-member="QueryItemToolTip" data-text="QueryItemToolTip" data-type="yfiles.input.GraphEditorInputMode"></api-link> upon\n<span class="api">MouseHoverInputMode</span>’s\n<api-link id="customizing_interaction_tooltips-460-api-link-006" data-member="QueryToolTip" data-text="QueryToolTip" data-type="yfiles.input.MouseHoverInputMode"></api-link> event.\nFor customizations you can override the actual dispatching method,\n<api-link id="customizing_interaction_tooltips-460-api-link-007" data-member="onQueryToolTip(yfiles.input.ToolTipQueryEventArgs)" data-text="onQueryToolTip" data-type="yfiles.input.MouseHoverInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_tooltips-460-simpara-006",content:'The <api-link id="customizing_interaction_tooltips-460-api-link-008" data-member="validHoverLocationHitTestable" data-text="validHoverLocationHitTestable" data-type="yfiles.input.MouseHoverInputMode"></api-link>\nspecifies the area in which a tooltip will be queried.'}]},{tagname:"section",id:"customizing_interaction_context_menu",xreflabel:"Customizing Context Menus",title:"Context Menus",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_context_menu-461-simpara-001",content:'Context menus are supported by both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_context_menu-461-simpara-002",content:'A context menu can be opened and populated in a handler for\n<span class="api">GraphEditorInputMode</span>’s or <span class="api">GraphViewerInputMode</span>’s <api-link id="customizing_interaction_context_menu-461-api-link-001" data-member="PopulateItemContextMenu" data-text="PopulateItemContextMenu" data-type="yfiles.input.GraphEditorInputMode"></api-link> event.\nThis event occurs <strong id="customizing_interaction_context_menu-461-emphasis-001" class="bold" role="bold">after</strong> the user has requested a context menu, but <strong id="customizing_interaction_context_menu-461-emphasis-002" class="bold" role="bold">before</strong>\nthe menu is actually displayed.\nThis allows you to create context menus that are, well, <strong id="customizing_interaction_context_menu-461-emphasis-003" class="bold" role="bold">contextual</strong> to the item\nthat has been right-clicked by appropriately populating the context menu with <code>MenuItem</code>s:'},{tagname:"example",id:"customizing_interaction_context_menu-461-example-001",title:"Register the event handler",content:'<pre class="programlisting javascript" id="customizing_interaction_context_menu-461-programlisting-001" language="javascript" format="linespecific"><code>// handle context menus only for nodes\r\ngraphEditorInputMode.contextMenuItems = yfiles.graph.GraphItemTypes.NODE\r\n// register a listener for populating the menu\r\ngraphEditorInputMode.addPopulateItemContextMenuListener(populateItemContextMenuCallback)\n</code></pre>'},{tagname:"example",id:"customizing_interaction_context_menu-461-example-002",title:"Handler for populating a context menu",content:'<pre class="programlisting javascript" id="customizing_interaction_context_menu-461-programlisting-002" language="javascript" format="linespecific"><code>function populateItemContextMenuCallback(source, args) {\r\n  if (yfiles.graph.INode.isInstance(args.item)) {\r\n    // create a menu item to delete the node\r\n    function deleteNode() {\r\n      graphComponent.graph.remove(args.item)\r\n    }\r\n\r\n    // show the menu\r\n    args.showMenu = true\r\n    // and mark the event as handled\r\n    args.handled = true\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_context_menu-461-simpara-003",content:'The <api-link id="customizing_interaction_context_menu-461-api-link-002" data-member="contextMenuItems" data-text="contextMenuItems" data-type="yfiles.input.GraphEditorInputMode"></api-link> property on <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> controls for which items the\ncontext menu events trigger when clicked. A more specific distinction can be obtained by overriding\n<api-link id="customizing_interaction_context_menu-461-api-link-003" data-member="shouldPopulateContextMenu(yfiles.graph.IModelItem)" data-text="shouldPopulateContextMenu" data-type="yfiles.input.GraphEditorInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_context_menu-461-simpara-004",content:'The actual work is done by the <api-link id="customizing_interaction_context_menu-461-api-link-004" data-member="" data-text="ContextMenuInputMode" data-type="yfiles.input.ContextMenuInputMode"></api-link> which is a child input mode for both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_context_menu-461-simpara-005",content:'Further customizations can be done on the <span class="api">ContextMenuInputMode</span>:\n<span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span> trigger the <api-link id="customizing_interaction_context_menu-461-api-link-005" data-member="PopulateItemContextMenu" data-text="PopulateItemContextMenu" data-type="yfiles.input.GraphEditorInputMode"></api-link> upon\n<span class="api">ContextMenuInputMode</span>’s <api-link id="customizing_interaction_context_menu-461-api-link-006" data-member="PopulateMenu" data-text="PopulateMenu" data-type="yfiles.input.ContextMenuInputMode"></api-link> event.\nYou can override the actual dispatching method,\n<api-link id="customizing_interaction_context_menu-461-api-link-007" data-member="onPopulateMenu(yfiles.input.PopulateMenuEventArgs)" data-text="onPopulateMenu" data-type="yfiles.input.ContextMenuInputMode"></api-link>\nfor customizations.'},{tagname:"para",content:'<dl id="customizing_interaction_context_menu-461-variablelist-001"><dt id="customizing_interaction_context_menu-461-term-001"><api-link id="customizing_interaction_context_menu-461-api-link-008" data-member="validMenuLocationHitTestable" data-text="validMenuLocationHitTestable" data-type="yfiles.input.ContextMenuInputMode"></api-link></dt><dd id="customizing_interaction_context_menu-461-listitem-001"><p id="customizing_interaction_context_menu-461-simpara-006">specifies the area in which a context menu can be requested.</p></dd></dl>'}]},{tagname:"section",id:"customizing_interaction_drag_drop",xreflabel:"Customizing Drag and Drop",title:"Drag and Drop",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop-462-simpara-001",content:'Out of the box, <span class="api">GraphEditorInputMode</span>’s <api-link id="customizing_interaction_drag_drop-462-api-link-001" data-member="" data-text="NodeDropInputMode" data-type="yfiles.input.NodeDropInputMode"></api-link> can handle drop events\nwhere an <span class="api">INode</span> instance is dropped. A copy of the node will then be created at the location of the drop.\nSimilarly, <span class="api">ILabel</span>s and <span class="api">IPort</span>s are handled by <api-link id="customizing_interaction_drag_drop-462-api-link-002" data-member="" data-text="LabelDropInputMode" data-type="yfiles.input.LabelDropInputMode"></api-link> and\n<api-link id="customizing_interaction_drag_drop-462-api-link-003" data-member="" data-text="PortDropInputMode" data-type="yfiles.input.PortDropInputMode"></api-link>, respectively.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop-462-simpara-002",content:'However, you can use the drag and drop mechanism in yFiles for HTML to drag and drop anything into the\n<span class="api">GraphComponent</span>. As usual, an <api-link id="customizing_interaction_drag_drop-462-api-link-004" data-member="" data-text="IInputMode" data-type="yfiles.input.IInputMode"></api-link> is responsible for\nhandling the appropriate events on the <span class="api">GraphComponent</span>.'
},{tagname:"section",id:"_general_drag_and_drop_support",title:"General Drag and Drop Support",children:[{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-001",content:'The <api-link id="_general_drag_and_drop_support-463-api-link-001" data-member="" data-text="DropInputMode" data-type="yfiles.input.DropInputMode"></api-link> class provides an abstraction for drop event handling.\nEach instance of <span class="api">DropInputMode</span> is specific for a ’format’ string that is passed\nto the constructor. This string serves as an identifier for the input mode and\nlets you install several input modes that handle different droppped data.\nThe <span class="api">DropInputMode</span> processes any drag events that occur on the <span class="api">GraphComponent</span> and\nfires its events accordingly if the drag operation carries data of the expected format.'},{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-002",content:'For example, if you wish to process files that are dropped onto the <span class="api">GraphComponent</span>, you could use\nthe following <span class="api">DropInputMode</span>:'},{tagname:"example",id:"_general_drag_and_drop_support-463-informalexample-001",content:'<pre class="programlisting javascript" id="_general_drag_and_drop_support-463-programlisting-001" language="javascript" format="linespecific"><code>let dropInputMode = new yfiles.input.DropInputMode(\'someFormat\')\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-003",content:'Its subclasses <span class="api">ItemDropInputMode&lt;T></span> and <span class="api">NodeDropInputMode</span>\nhandle only drag and drop operations that carry <api-link id="_general_drag_and_drop_support-463-api-link-002" data-member="" data-text="IModelItems" data-type="yfiles.graph.IModelItem"></api-link> and <api-link id="_general_drag_and_drop_support-463-api-link-003" data-member="" data-text="INodes" data-type="yfiles.graph.INode"></api-link>,\nrespectively.'},{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-004",content:'If you wish to process drag and drop operations for arbitrary types of objects however, you need to configure\na <span class="api">DropInputMode</span> appropriately. For this, you can react to the following drag related events:'},{tagname:"table","class":"",id:"_general_drag_and_drop_support-463-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_general_drag_and_drop_support-463-thead-001"><tr id="_general_drag_and_drop_support-463-row-001"><th id="_general_drag_and_drop_support-463-entry-001" align="left" valign="top">\nEvent\n</th><th id="_general_drag_and_drop_support-463-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="_general_drag_and_drop_support-463-tbody-001"><tr id="_general_drag_and_drop_support-463-row-002"><td id="_general_drag_and_drop_support-463-entry-003" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-005"><api-link id="_general_drag_and_drop_support-463-api-link-004" data-member="DragEntered" data-text="DragEntered" data-type="yfiles.input.DropInputMode"></api-link></para></td><td id="_general_drag_and_drop_support-463-entry-004" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-006">…​ a drag operation enters the <span class="api">GraphComponent</span>.</para></td></tr><tr id="_general_drag_and_drop_support-463-row-003"><td id="_general_drag_and_drop_support-463-entry-005" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-007"><api-link id="_general_drag_and_drop_support-463-api-link-005" data-member="DragOver" data-text="DragOver" data-type="yfiles.input.DropInputMode"></api-link></para></td><td id="_general_drag_and_drop_support-463-entry-006" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-008">…​ a drag operation is over the <span class="api">GraphComponent</span>.</para></td></tr><tr id="_general_drag_and_drop_support-463-row-004"><td id="_general_drag_and_drop_support-463-entry-007" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-009"><api-link id="_general_drag_and_drop_support-463-api-link-006" data-member="DragLeft" data-text="DragLeft" data-type="yfiles.input.DropInputMode"></api-link></para></td><td id="_general_drag_and_drop_support-463-entry-008" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-010">…​ a previously entered drag operation left the <span class="api">GraphComponent</span> or was canceled.</para></td></tr><tr id="_general_drag_and_drop_support-463-row-005"><td id="_general_drag_and_drop_support-463-entry-009" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-011"><api-link id="_general_drag_and_drop_support-463-api-link-007" data-member="DragDropped" data-text="DragDropped" data-type="yfiles.input.DropInputMode"></api-link></para></td><td id="_general_drag_and_drop_support-463-entry-010" align="left" valign="top"><para class="dguide-para" id="_general_drag_and_drop_support-463-simpara-012">…​ a drop onto the <span class="api">GraphComponent</span> has been performed.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-013",content:'For example, you could implement a <span class="api">DropInputMode</span> that accepts strings,\nso you can drag and drop a string into the <span class="api">GraphComponent</span> and automatically create\na node with the droppped string as label by reacting to the\n<api-link id="_general_drag_and_drop_support-463-api-link-008" data-member="DragDropped" data-text="DragDropped" data-type="yfiles.input.DropInputMode"></api-link> event as illustrated in\nthe following example:'},{tagname:"example",id:"_general_drag_and_drop_support-463-informalexample-002",content:'<pre class="programlisting javascript" id="_general_drag_and_drop_support-463-programlisting-002" language="javascript" format="linespecific"><code>let dropInputMode = new yfiles.input.DropInputMode(\'someFormat\')\r\ndropInputMode.addDragDroppedListener((source, args) => {\r\n  // drop data is list of dropped files\r\n  let data = dropInputMode.dropData\r\n\r\n  if (data.length > 0) {\r\n    // this is a string... - create a node with a label using the given text\r\n    const node = graphComponent.graph.createNode()\r\n    graph.addLabel(node, { labels: [data] })\r\n  }\r\n})\r\ndropInputMode.priority = graphEditorInputMode.nodeDropInputMode.priority - 1\r\ngraphEditorInputMode.add(dropInputMode)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_general_drag_and_drop_support-463-simpara-014",content:'You can also control the area on which a drop may occur via the\n<api-link id="_general_drag_and_drop_support-463-api-link-009" data-member="validDropHitTestable" data-text="validDropHitTestable" data-type="yfiles.input.DropInputMode"></api-link> property.\nBy default, the area is unrestricted.\nFor example, you could set the property to <api-link id="_general_drag_and_drop_support-463-api-link-010" data-member="NEVER" data-text="NEVER" data-type="yfiles.input.IHitTestable"></api-link>,\nthus effectively preventing to drop <strong id="_general_drag_and_drop_support-463-emphasis-001" class="bold" role="bold">anywhere</strong>,\nand then only react to the above mentioned drag events:'},{tagname:"example",id:"_general_drag_and_drop_support-463-informalexample-003",content:'<pre class="programlisting javascript" id="_general_drag_and_drop_support-463-programlisting-003" language="javascript" format="linespecific"><code>dropInputMode.addDragEnteredListener((sender, args) => {\r\n  // first call the super class method that does some basic checks\r\n  // (is the input mode active, is the GraphComponent editable, does the type of the drag match)\r\n  let dropData = dropInputMode.dropData\r\n  // we only accept dropping one file\r\n  if (dropData === \'magicData\') {\r\n    // set the valid drop HitTestable so that nowhere can be dropped (effectively rejecting the drag)\r\n    sender.validDropHitTestable = yfiles.input.IHitTestable.NEVER\r\n    // important: remember to reset the HitTestable when the drag is exited/canceled\r\n  }\r\n})\r\n// reset the HitTestable when the drag is exited/canceled\r\n// The DragLeft event is raised in those cases, so we can do this here\r\ndropInputMode.addDragLeftListener((sender, args) => {\r\n  sender.validDropHitTestable = yfiles.input.IHitTestable.ALWAYS\r\n})\n</code></pre>'}]},{tagname:"section",id:"_drag_and_drop_of_graph_items",title:"Drag and Drop of Graph Items",children:[{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_graph_items-464-simpara-001",content:'The <api-link id="_drag_and_drop_of_graph_items-464-api-link-001" data-member="" data-text="ItemDropInputMode&lt;T&gt;" data-type="yfiles.input.ItemDropInputMode"></api-link> adds highlight and preview functionality to\n<span class="api">DropInputMode</span> and is specific for <span class="api">IModelItem</span>.\nIt also supports snapping of the previewed item. You can disable these features as desired\nusing the properties listed below.'},{tagname:"para",content:'<dl id="_drag_and_drop_of_graph_items-464-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_drag_and_drop_of_graph_items-464-term-001"><api-link id="_drag_and_drop_of_graph_items-464-api-link-002" data-member="showPreview" data-text="showPreview" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-001">\n<p id="_drag_and_drop_of_graph_items-464-simpara-002">Whether to show a preview of the dragged item during the drag.</p>\n</dd>\n<dt id="_drag_and_drop_of_graph_items-464-term-002"><api-link id="_drag_and_drop_of_graph_items-464-api-link-003" data-member="snappingEnabled" data-text="snappingEnabled" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-002">\n<p id="_drag_and_drop_of_graph_items-464-simpara-003">Whether snapping is enabled. Note that a valid snap context either has to be set as\n<api-link id="_drag_and_drop_of_graph_items-464-api-link-004" data-member="snapContext" data-text="snapContext" data-type="yfiles.input.ItemDropInputMode"></api-link> or it\nhas to be retrieved from the <span class="api">IInputModeContext</span>,\nwhich is the case if snapping is enabled on the parent <span class="api">GraphEditorInputMode</span>.</p>\n</dd>\n<dt id="_drag_and_drop_of_graph_items-464-term-003"><api-link id="_drag_and_drop_of_graph_items-464-api-link-005" data-member="highlightDropTarget" data-text="highlightDropTarget" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-003">\n<p id="_drag_and_drop_of_graph_items-464-simpara-004">Whether to indicate a potential drop target item with a highlight visualization.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_graph_items-464-simpara-005",content:'After a drop operation the <span class="api">ItemDropInputMode&lt;T></span> delegates the creation of an item\nto a callback that can be set using the\n<api-link id="_drag_and_drop_of_graph_items-464-api-link-006" data-member="itemCreator" data-text="itemCreator" data-type="yfiles.input.ItemDropInputMode"></api-link> property.\nThe callback gets all information needed to create a copy\nof the dragged item in the <span class="api">GraphComponent</span>’s <span class="api">graph</span>:'},{tagname:"table","class":"",id:"_drag_and_drop_of_graph_items-464-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Parameter list of the itemCreator</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_drag_and_drop_of_graph_items-464-thead-001"><tr id="_drag_and_drop_of_graph_items-464-row-001"><th id="_drag_and_drop_of_graph_items-464-entry-001" align="left" valign="top">\nParameter\n</th><th id="_drag_and_drop_of_graph_items-464-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_drag_and_drop_of_graph_items-464-tbody-001"><tr id="_drag_and_drop_of_graph_items-464-row-002"><td id="_drag_and_drop_of_graph_items-464-entry-003" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-006"><code>context</code></para></td><td id="_drag_and_drop_of_graph_items-464-entry-004" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-007">The <span class="api">IInputModeContext</span> for which the item should be created.</para></td></tr><tr id="_drag_and_drop_of_graph_items-464-row-003"><td id="_drag_and_drop_of_graph_items-464-entry-005" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-008"><code>graph</code></para></td><td id="_drag_and_drop_of_graph_items-464-entry-006" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-009">The graph in which to create the item.</para></td></tr><tr id="_drag_and_drop_of_graph_items-464-row-004"><td id="_drag_and_drop_of_graph_items-464-entry-007" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-010"><code>draggedItem</code></para></td><td id="_drag_and_drop_of_graph_items-464-entry-008" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-011">The item that was dragged and should therefore be created. Can serve as blueprint for a copy.</para></td></tr><tr id="_drag_and_drop_of_graph_items-464-row-005"><td id="_drag_and_drop_of_graph_items-464-entry-009" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-012"><code>dropTarget</code></para></td><td id="_drag_and_drop_of_graph_items-464-entry-010" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-013">The item on which the item is dropped, e.g. a potential parent group node. Might be <code>null</code>.</para></td></tr><tr id="_drag_and_drop_of_graph_items-464-row-006"><td id="_drag_and_drop_of_graph_items-464-entry-011" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-014"><code>dropLocation</code></para></td><td id="_drag_and_drop_of_graph_items-464-entry-012" align="left" valign="top"><para class="dguide-para" id="_drag_and_drop_of_graph_items-464-simpara-015">The location where the item should be created.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para note",id:"_drag_and_drop_of_graph_items-464-note-001",content:'<p id="_drag_and_drop_of_graph_items-464-simpara-016">A newly created default <span class="api">ItemDropInputMode&lt;T></span> without a set <api-link id="_drag_and_drop_of_graph_items-464-api-link-007" data-member="itemCreator" data-text="itemCreator" data-type="yfiles.input.ItemDropInputMode"></api-link>\ndoesn’t do anything on its own. You have to either set an <api-link id="_drag_and_drop_of_graph_items-464-api-link-008" data-member="itemCreator" data-text="itemCreator" data-type="yfiles.input.ItemDropInputMode"></api-link>\nor, in the case of <span class="api">INode</span> or <api-link id="_drag_and_drop_of_graph_items-464-api-link-009" data-member="" data-text="IStripe" data-type="yfiles.graph.IStripe"></api-link>, use the subclasses\n<api-link id="_drag_and_drop_of_graph_items-464-api-link-010" data-member="" data-text="NodeDropInputMode" data-type="yfiles.input.NodeDropInputMode"></api-link> or <api-link id="_drag_and_drop_of_graph_items-464-api-link-011" data-member="" data-text="StripeDropInputMode" data-type="yfiles.input.StripeDropInputMode"></api-link>.\nThey have an <api-link id="_drag_and_drop_of_graph_items-464-api-link-012" data-member="itemCreator" data-text="itemCreator" data-type="yfiles.input.ItemDropInputMode"></api-link> set by default\nto handle dropping the items that they are specified for.</p>'},{tagname:"heading",id:"customizing_interaction_drag_drop_preview",renderas:"sect4",xreflabel:"Customizing the Item Preview",content:'Preview within the <span class="api">GraphComponent</span>'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_graph_items-464-simpara-017",content:'The <span class="api">GraphComponent</span> can display a preview of the currently dragged item with proper\nsnapping support while dragging within the <span class="api">GraphComponent</span>. There are several\nprotected methods that you can override to customize the drop preview:'},{tagname:"para",content:'<dl id="_drag_and_drop_of_graph_items-464-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_drag_and_drop_of_graph_items-464-term-004"><api-link id="_drag_and_drop_of_graph_items-464-api-link-013" data-member="initializePreview()" data-text="initializePreview" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-004">\n<p id="_drag_and_drop_of_graph_items-464-simpara-018">Is called when the drag enters the <span class="api">GraphComponent</span>. The default implementation initializes\na separate graph model that is meant to contain the preview items. It then calls the following two methods:</p>\n</dd>\n<dt id="_drag_and_drop_of_graph_items-464-term-005"><api-link id="_drag_and_drop_of_graph_items-464-api-link-014" data-member="populatePreviewGraph(yfiles.graph.IGraph)" data-text="populatePreviewGraph" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-005">\n<p id="_drag_and_drop_of_graph_items-464-simpara-019">Subclasses are meant to create items that act as a drop preview in this method. The given <span class="api">IGraph</span> instance is not the\n<span class="api">IGraph</span> of the <span class="api">GraphComponent</span>, but a separate instance that only contains the preview items. The base implementation\ndoes nothing.</p>\n</dd>\n<dt id="_drag_and_drop_of_graph_items-464-term-006"><api-link id="_drag_and_drop_of_graph_items-464-api-link-015" data-member="updatePreview(yfiles.graph.IGraph,yfiles.geometry.Point)" data-text="updatePreview" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-006">\n<p id="_drag_and_drop_of_graph_items-464-simpara-020">Called for each drag event that occurs while dragging over the <span class="api">GraphComponent</span>.\nAgain, the given <span class="api">IGraph</span> instance is not the <span class="api">IGraph</span> of the <span class="api">GraphComponent</span>\nbut a separate instance that only contains the preview items. The derived classes\nshould update the drop preview items in this method accordingly, e.g. adjusting the preview item’s\nlayout to the drag location or similar.</p>\n</dd>\n<dt id="_drag_and_drop_of_graph_items-464-term-007"><api-link id="_drag_and_drop_of_graph_items-464-api-link-016" data-member="cleanUpPreview()" data-text="cleanUpPreview" data-type="yfiles.input.ItemDropInputMode"></api-link></dt><dd id="_drag_and_drop_of_graph_items-464-listitem-007">\n<p id="_drag_and_drop_of_graph_items-464-simpara-021">This method is called once the drag and drop operation is completed or canceled and gives\nclient the chance to free resources etc.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_graph_items-464-simpara-022",content:"The following example shows how to customize the preview to make the preview item\ntransparent:"},{tagname:"example",id:"_drag_and_drop_of_graph_items-464-example-001",title:"Drop preview customization example",content:'<pre class="programlisting javascript" id="_drag_and_drop_of_graph_items-464-programlisting-001" language="javascript" format="linespecific"><code>class CustomPreviewNodeDropInputMode extends yfiles.input.NodeDropInputMode {\r\n  initializePreview() {\r\n    // call super method that generates a preview node in the preview graph\r\n    super.initializePreview()\r\n    let previewNode = this.previewGraph.nodes.first()\r\n    // assume ShapeNodeStyle for sake of brevity\r\n    let nodeStyle = previewNode.style.clone()\r\n    // important: clone the style to not alter the original style,\r\n    // because the reference to that style is used for the new node\r\n    let color = nodeStyle.fill.color // assume it\'s a solid color fill\r\n    // use the same color, but transparent\r\n    let transparentFill = new yfiles.view.SolidColorFill(\r\n      yfiles.view.Color.fromArgb(100, color.r, color.g, color.b)\r\n    )\r\n    transparentFill.freeze()\r\n    nodeStyle.fill = transparentFill\r\n    this.previewGraph.setStyle(previewNode, nodeStyle)\r\n  }\r\n}\r\n\r\nlet nodeDropInputMode = new CustomPreviewNodeDropInputMode()\r\ngraphEditorInputMode.nodeDropInputMode = nodeDropInputMode\n</code></pre>'},{tagname:"section",id:"_preview_outside_of_the_api_name_text_graphcomponent",title:"Preview outside of the GraphComponent",children:[{tagname:"para","class":"dguide-para",id:"_preview_outside_of_the_api_name_text_graphcomponent-465-simpara-001",content:'The library provides direct support for two approaches to display a drop preview\nwhile dragging the element outside of the <span class="api">GraphComponent</span>.'},{tagname:"section",id:"_providing_a_custom_preview_element",title:"Providing a Custom Preview Element",children:[{tagname:"para","class":"dguide-para",id:"_providing_a_custom_preview_element-466-simpara-001",content:'A custom preview element can be provided as last argument of the\n<api-link id="_providing_a_custom_preview_element-466-api-link-001" data-member="startDrag(HTMLElement,yfiles.graph.INode,yfiles.view.DragDropEffects,boolean,HTMLElement)" data-text="startDrag" data-type="yfiles.input.NodeDropInputMode"></api-link>\nmethod. A similar method is also available for the <api-link id="_providing_a_custom_preview_element-466-api-link-002" data-member="" data-text="LabelDropInputMode" data-type="yfiles.input.LabelDropInputMode"></api-link>,\n<api-link id="_providing_a_custom_preview_element-466-api-link-003" data-member="" data-text="PortDropInputMode" data-type="yfiles.input.PortDropInputMode"></api-link> and <api-link id="_providing_a_custom_preview_element-466-api-link-004" data-member="" data-text="StripeDropInputMode" data-type="yfiles.input.StripeDropInputMode"></api-link>.'},{tagname:"para","class":"dguide-para important",id:"_providing_a_custom_preview_element-466-important-001",content:'<p id="_providing_a_custom_preview_element-466-simpara-002">This approach needs <code>pointer-events="none"</code> support and thus does not\nwork in IE9 and IE10.</p>'},{tagname:"para","class":"dguide-para",id:"_providing_a_custom_preview_element-466-simpara-003",content:'The given element will automatically be included in the DOM and positioned\nbelow the pointer location during the drag operation. It will be removed when the\ngesture is canceled or the element is actually dropped into the <span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para",id:"_providing_a_custom_preview_element-466-simpara-004",content:'We recommend to hide this custom preview element while the dragging location is\nwithin the <span class="api">GraphComponent</span> and let the <span class="api">ItemDropInputMode&lt;T></span>\ndisplay its preview element instead because only then, item snapping can be\nconsidered and properly applied to the dragged item.'},{tagname:"para","class":"dguide-para",id:"_providing_a_custom_preview_element-466-simpara-005",content:'To hide the custom preview element, a suitable CSS class may be applied when the\ndrag gesture enters the <span class="api">GraphComponent</span> or removed again when the gesture leaves\nthe <span class="api">GraphComponent</span>. The <api-link id="_providing_a_custom_preview_element-466-api-link-005" data-member="" data-text="QueryContinueDragEventArgs" data-type="yfiles.view.QueryContinueDragEventArgs"></api-link> of the\n<api-link id="_providing_a_custom_preview_element-466-api-link-006" data-member="" data-text="DragSource" data-type="yfiles.view.DragSource"></api-link> return value of\n<span class="api">startDrag</span>.\nprovides a reference to the current <api-link id="_providing_a_custom_preview_element-466-api-link-007" data-member="" data-text="DropTarget" data-type="yfiles.view.DropTarget"></api-link> which can\nbe used to determine if there is a <span class="api">DropTarget</span> that can\nhandle the visualization of the preview element.'},{tagname:"example",id:"_providing_a_custom_preview_element-466-example-001",title:"Custom drop preview element example",content:'<pre class="programlisting javascript" id="_providing_a_custom_preview_element-466-programlisting-001" language="javascript" format="linespecific"><code>// create a drag preview element for a node that is shown during the drag\r\nconst dragPreview = document.getElementById(\'myCustomNodePreviewElement\')\r\n\r\n// start the drag\r\nconst dragSource = yfiles.input.NodeDropInputMode.startDrag(\r\n  dragElement,\r\n  simpleNode,\r\n  yfiles.view.DragDropEffects.ALL,\r\n  true,\r\n  dragPreview\r\n)\r\n\r\n// let the GraphComponent handle the preview rendering if possible\r\ndragSource.addQueryContinueDragListener((src, args) => {\r\n  if (args.dropTarget === null) {\r\n    app.removeClass(dragPreview, \'hidden\')\r\n  } else {\r\n    app.addClass(dragPreview, \'hidden\')\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_providing_a_custom_preview_element-466-simpara-006",content:'The <a href="..\\..\\demos\\03-tutorial-application-features\\drag-and-drop\\index.html" target="blank" class="demo-link" title="This demo shows how to use yfiles">Drag And Drop</a> sample of the\napplication features tutorial illustrates this approach.'}]},{tagname:"section",id:"_using_native_html5_drag_and_drop_api",title:"Using native HTML5 Drag and Drop API",children:[{tagname:"para","class":"dguide-para",id:"_using_native_html5_drag_and_drop_api-467-simpara-001",content:'The native HTML5 drag and drop API is also supported and may be used as alternative\napproach for showing a drag preview that is also visible outside of the <span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para",id:"_using_native_html5_drag_and_drop_api-467-simpara-002",content:'In contrast to the approach of providing a custom preview element, there is no\nway of letting the <span class="api">ItemDropInputMode&lt;T></span> take control while\nthe dragged element is within the <span class="api">GraphComponent</span> due to how the HTML5 drag and drop\nAPI is designed. Therefore, there is no <api-link id="_using_native_html5_drag_and_drop_api-467-api-link-001" data-member="previewGraph" data-text="previewGraph" data-type="yfiles.input.ItemDropInputMode"></api-link>\nand no snapping support.'},{tagname:"para","class":"dguide-para",id:"_using_native_html5_drag_and_drop_api-467-simpara-003",content:'To use this approach, the draggable elements need to have the <code>draggable</code> attribute\nset to <code>true</code> as well as a <code>dragstart</code> listener that configures some drop properties\nand also sets the transfer data to an item ID that represents the actual dragged graph item.\nAlso, a customized <api-link id="_using_native_html5_drag_and_drop_api-467-api-link-002" data-member="itemCreator" data-text="itemCreator" data-type="yfiles.input.ItemDropInputMode"></api-link> needs to provide\ndifferent items to insert into the graph.\nThe transferred data in the drag event may only be strings, which is why we need to\nuse a map from the node id to the actual node item which holds the information\nabout the node’s layout, style, tag etc.'},{tagname:"example",id:"_using_native_html5_drag_and_drop_api-467-example-001",title:"Native HTML5 drag and drop example",content:"<pre class=\"programlisting javascript\" id=\"_using_native_html5_drag_and_drop_api-467-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// this map is used to get the node instance from the string data of the data transfer during 'drop'\r\nconst nodes = new Map()\r\n\r\n// fill the map with the draggable nodes\r\nfor (let i = 0; i &lt; draggableNodeItems.length; i++) {\r\n  // the actual node item that is dragged\r\n  const node = items[i]\r\n\r\n  // the node ID is used to get the node instance from the data transfer during 'drop'\r\n  const nodeID = `node ${i}`\r\n  nodes.set(`node ${i}`, node)\r\n\r\n  // creates a div with draggable=\"true\" that contains a representation of the dragged node\r\n  const nodeElement = this.createNodeVisual(node, exportGraphComponent)\r\n\r\n  // set the node ID as data of the data transfer and configure some other drop properties\r\n  nodeElement.addEventListener('dragstart', e => {\r\n    e.dataTransfer.dropEffect = 'copy'\r\n    e.dataTransfer.effectAllowed = 'copy'\r\n    e.dataTransfer.setData('yfiles.graph.INode', nodeID)\r\n  })\r\n\r\n  // finally, add the visual to palette\r\n  dragDropPalette.appendChild(nodeElement)\r\n}\r\n\r\n// make the item creator return the node according to the given id\r\nconst oldItemCreator = nodeDropInputMode.itemCreator\r\nnodeDropInputMode.itemCreator = (context, graph, info, dropTarget, dropLocation) => {\r\n  const node = typeof info === 'string' ? nodes.get(info) : info\r\n  // The old item creator handles the placement of the new node in the graph\r\n  return oldItemCreator(context, graph, node, dropTarget, dropLocation)\r\n}\n</code></pre>"}]}]}]},{tagname:"section",id:"_drag_and_drop_of_api_name_text_inode_s",title:"Drag and Drop of INodes",children:[{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-001",content:'The <api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-001" data-member="" data-text="NodeDropInputMode" data-type="yfiles.input.NodeDropInputMode"></api-link> is a specialized <span class="api">ItemDropInputMode&lt;T></span> for nodes.\nIt specifies the expected format to be ‘yfiles.graph.INode’.'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-002",content:'To customize the creation process of the item that is being dropped, override the\n<api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-002" data-member="createNode(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.INode,yfiles.graph.IModelItem,yfiles.geometry.Rect)" data-text="createNode" data-type="yfiles.input.NodeDropInputMode"></api-link>\nmethod.'},{tagname:"para","class":"dguide-para note",id:"_drag_and_drop_of_api_name_text_inode_s-468-note-001",content:'<p id="_drag_and_drop_of_api_name_text_inode_s-468-simpara-003">The default implementation of the <span class="api">createNode</span>\nmethod is very sophisticated and minimizes the effort that is necessary to customize node dropping\nbehavior. We’d recommend to try to configure the <span class="api">NodeDropInputMode</span> properties\nand override the auxiliary methods like\n<api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-003" data-member="getNodeLayout(yfiles.geometry.Point,yfiles.geometry.Size)" data-text="getNodeLayout" data-type="yfiles.input.NodeDropInputMode"></api-link>\nfirst to achieve the desired behavior before resorting to override this method. Even then\nit is probably wise to let the derived class call the super method to let it perform the\nactual node creation first and then apply the desired customizations to the created node\ninstead of implementing the whole process yourself.</p>'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-004",content:'An example for an application that uses the <span class="api">NodeDropInputMode</span> to drag nodes from a palette and drop them\ninto the <span class="api">GraphComponent</span> can be found here: <a href="..\\..\\demos\\input\\draganddrop\\index.html" target="blank" class="demo-link" title="Shows drag and drop of nodes, groups and labels.">Drag and Drop</a>'},{tagname:"heading",id:"customizing_interaction_drag_drop_nodedropinputmode_behavior",renderas:"sect4",xreflabel:"Customizing the Behavior of {_NodeDropInputMode}",content:'Behavior of <span class="api">NodeDropInputMode</span>'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-005",content:'In the default configuration, the <span class="api">NodeDropInputMode</span>\nmanages dropping nodes directly into groups. The created node will then be part of that group.\nYou can customize what groups are valid targets for the drop by setting an appropriate\n<api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-004" data-member="isValidParentPredicate" data-text="isValidParentPredicate" data-type="yfiles.input.NodeDropInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-006",content:'Furthermore, you can enable additional grouping/folding features on the\n<span class="api">NodeDropInputMode</span>. For example, you can instruct it to automatically convert\nregular nodes to group nodes when dragging and dropping a node on it by enabling the\n<api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-005" data-member="allowNonGroupNodeAsParent" data-text="allowNonGroupNodeAsParent" data-type="yfiles.input.NodeDropInputMode"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-007",content:'Additionally, enabling <api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-006" data-member="allowFolderNodeAsParent" data-text="allowFolderNodeAsParent" data-type="yfiles.input.NodeDropInputMode"></api-link>\nlets you drop nodes into <a href="#/dguide/folding">collapsed group nodes</a>, adding them to the corresponding\ngroup nodes as well.'},{tagname:"heading",id:"_customizing_the_dropped_node",renderas:"sect4",content:"Customizing the Dropped Node"},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-008",content:'<span class="api">NodeDropInputMode</span> provides hooks to alter the node that was created in the <span class="api">IGraph</span> as a result\nof the drag and drop operation after the operation is completed.'},{tagname:"para","class":"dguide-para",id:"_drag_and_drop_of_api_name_text_inode_s-468-simpara-009",content:"You can:"},{tagname:"para",content:'<ul id="_drag_and_drop_of_api_name_text_inode_s-468-itemizedlist-001"><li id="_drag_and_drop_of_api_name_text_inode_s-468-listitem-001"><p id="_drag_and_drop_of_api_name_text_inode_s-468-simpara-010">Change the location and size of the dropped node by overriding <api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-007" data-member="getNodeLayout(yfiles.geometry.Point,yfiles.geometry.Size)" data-text="getNodeLayout(mouseLocation:&#xA0;Point, size:&#xA0;Size):&#xA0;Rect" data-type="yfiles.input.NodeDropInputMode"></api-link>.</p></li><li id="_drag_and_drop_of_api_name_text_inode_s-468-listitem-002"><p id="_drag_and_drop_of_api_name_text_inode_s-468-simpara-011">Create the node directly as a group node by setting an appropriate <api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-008" data-member="isGroupNodePredicate" data-text="isGroupNodePredicate" data-type="yfiles.input.NodeDropInputMode"></api-link>.</p></li><li id="_drag_and_drop_of_api_name_text_inode_s-468-listitem-003"><p id="_drag_and_drop_of_api_name_text_inode_s-468-simpara-012">Make alterations to the created node by overriding <api-link id="_drag_and_drop_of_api_name_text_inode_s-468-api-link-009" data-member="createNode(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.INode,yfiles.graph.IModelItem,yfiles.geometry.Rect)" data-text="createNode" data-type="yfiles.input.NodeDropInputMode"></api-link>\nas mentioned earlier.</p></li></ul>'}]},{tagname:"section",id:"customizing_interaction_drag_drop_labeldropinputmode",title:"Drag and Drop of ILabels",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_labeldropinputmode-469-simpara-001",content:'The <api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-001" data-member="" data-text="LabelDropInputMode" data-type="yfiles.input.LabelDropInputMode"></api-link> is a specialized <span class="api">ItemDropInputMode&lt;T></span> for labels\nwhich specifies the expected data format to be <span class="api">ILabel</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_labeldropinputmode-469-simpara-002",content:'To customize the creation process of the item that is being dropped, override the\n<api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-002" data-member="createLabel(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.ILabel,yfiles.graph.ILabelOwner,yfiles.graph.ILabelModelParameter)" data-text="createLabel" data-type="yfiles.input.LabelDropInputMode"></api-link>\nmethod.'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_drag_drop_labeldropinputmode-469-note-001",content:'<p id="customizing_interaction_drag_drop_labeldropinputmode-469-simpara-003">The default implementation of the <span class="api">createLabel</span>\nqueries the lookup of the provided <span class="api">ILabelOwner</span> for an <api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-003" data-member="" data-text="IEditLabelHelper" data-type="yfiles.input.IEditLabelHelper"></api-link>.</p>'},{tagname:"heading",id:"_customizing_the_dropped_label",renderas:"sect4",content:"Customizing the Dropped Label"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_labeldropinputmode-469-simpara-004",content:'<span class="api">LabelDropInputMode</span> provides hooks to alter the label that was created in the <span class="api">IGraph</span> as a result\nof the drag and drop operation after the operation is completed.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_labeldropinputmode-469-simpara-005",content:"You can:"},{tagname:"para",content:'<ul id="customizing_interaction_drag_drop_labeldropinputmode-469-itemizedlist-001"><li id="customizing_interaction_drag_drop_labeldropinputmode-469-listitem-001"><p id="customizing_interaction_drag_drop_labeldropinputmode-469-simpara-006">Change the <span class="api">ILabelModelParameter</span> of the dropped label by overriding <api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-004" data-member="getNewLabelModelParameter(yfiles.graph.ILabelOwner,yfiles.graph.ILabel,yfiles.geometry.Point)" data-text="getNewLabelModelParameter" data-type="yfiles.input.LabelDropInputMode"></api-link>.</p></li><li id="customizing_interaction_drag_drop_labeldropinputmode-469-listitem-002"><p id="customizing_interaction_drag_drop_labeldropinputmode-469-simpara-007">Change the owner of the newly created label by overriding <api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-005" data-member="getDropTarget(yfiles.geometry.Point)" data-text="getDropTarget" data-type="yfiles.input.LabelDropInputMode"></api-link>.\nNote that returning <code>null</code> will prevent a label from being created at the given location.</p></li><li id="customizing_interaction_drag_drop_labeldropinputmode-469-listitem-003"><p id="customizing_interaction_drag_drop_labeldropinputmode-469-simpara-008">Make alterations to the created label by overriding <api-link id="customizing_interaction_drag_drop_labeldropinputmode-469-api-link-006" data-member="createLabel(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.ILabel,yfiles.graph.ILabelOwner,yfiles.graph.ILabelModelParameter)" data-text="createLabel" data-type="yfiles.input.LabelDropInputMode"></api-link>[]\nas mentioned earlier.</p></li></ul>'}]},{tagname:"section",id:"customizing_interaction_drag_drop_portdropinputmode",title:"Drag and Drop of IPorts",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_portdropinputmode-470-simpara-001",content:'The <api-link id="customizing_interaction_drag_drop_portdropinputmode-470-api-link-001" data-member="" data-text="PortDropInputMode" data-type="yfiles.input.PortDropInputMode"></api-link> is a specialized <span class="api">ItemDropInputMode&lt;T></span> for ports\nwhich specifies the expected data format to be <span class="api">IPort</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_portdropinputmode-470-simpara-002",content:'To customize the creation process of the item that is being dropped, override the\n<api-link id="customizing_interaction_drag_drop_portdropinputmode-470-api-link-002" data-member="createPort(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.IPort,yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter)" data-text="createPort" data-type="yfiles.input.PortDropInputMode"></api-link>\nmethod.'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_drag_drop_portdropinputmode-470-note-001",content:'<p id="customizing_interaction_drag_drop_portdropinputmode-470-simpara-003">The default implementation of the <span class="api">createPort</span>\nmethod also copies the labels from the dragged port to the newly created port.</p>'},{tagname:"heading",id:"_customizing_the_dropped_port",renderas:"sect4",content:"Customizing the Dropped Port"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_portdropinputmode-470-simpara-004",content:'<span class="api">PortDropInputMode</span> provides hooks to alter the port that was created in the <span class="api">IGraph</span> as a result\nof the drag and drop operation after the operation is completed.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_drag_drop_portdropinputmode-470-simpara-005",content:"You can:"},{tagname:"para",content:'<ul id="customizing_interaction_drag_drop_portdropinputmode-470-itemizedlist-001"><li id="customizing_interaction_drag_drop_portdropinputmode-470-listitem-001"><p id="customizing_interaction_drag_drop_portdropinputmode-470-simpara-006">Change the <span class="api">IPortLocationModelParameter</span> of the dropped port by overriding <api-link id="customizing_interaction_drag_drop_portdropinputmode-470-api-link-003" data-member="getNewPortLocationModelParameter(yfiles.graph.IPortOwner,yfiles.graph.IPort,yfiles.geometry.Point)" data-text="getNewPortLocationModelParameter" data-type="yfiles.input.PortDropInputMode"></api-link>.</p></li><li id="customizing_interaction_drag_drop_portdropinputmode-470-listitem-002"><p id="customizing_interaction_drag_drop_portdropinputmode-470-simpara-007">Change the owner of the newly created port by overriding <api-link id="customizing_interaction_drag_drop_portdropinputmode-470-api-link-004" data-member="getDropTarget(yfiles.geometry.Point)" data-text="getDropTarget" data-type="yfiles.input.LabelDropInputMode"></api-link>.\nNote that returning <code>null</code> will prevent a port from being created at the given location.</p></li><li id="customizing_interaction_drag_drop_portdropinputmode-470-listitem-003"><p id="customizing_interaction_drag_drop_portdropinputmode-470-simpara-008">Make alterations to the created port by overriding <api-link id="customizing_interaction_drag_drop_portdropinputmode-470-api-link-005" data-member="createPort(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.IPort,yfiles.graph.IPortOwner,yfiles.graph.IPortLocationModelParameter)" data-text="createPort" data-type="yfiles.input.PortDropInputMode"></api-link>\nas mentioned earlier.</p></li></ul>'}]}]},{tagname:"section",id:"customizing_interaction_undo",xreflabel:"Customizing Undo and Redo",title:"Undo and Redo",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_undo-471-simpara-001",content:"The customization options of the undo mechanism in yFiles for HTML include changing the behavior of the built-in\nundo process, controlling the recording process of changes, and synchronizing your data and the changes made by undo."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_undo-471-simpara-002",content:'The undo support in yFiles for HTML is managed by class <api-link id="customizing_interaction_undo-471-api-link-001" data-member="" data-text="UndoEngine" data-type="yfiles.graph.UndoEngine"></api-link>.\nTo obtain the <span class="api">UndoEngine</span> from an <span class="api">IGraph</span> where\n<api-link id="customizing_interaction_undo-471-api-link-002" data-member="undoEngineEnabled" data-text="undo is enabled" data-type="yfiles.graph.IGraph"></api-link>, use the\n<api-link id="customizing_interaction_undo-471-api-link-003" data-member="undoEngine" data-text="undoEngine" data-type="yfiles.graph.IGraph"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_undo-471-simpara-003",content:'The <span class="api">UndoEngine</span> uses <api-link id="customizing_interaction_undo-471-api-link-004" data-member="" data-text="IUndoUnits" data-type="yfiles.graph.IUndoUnit"></api-link> which represent a change that can be undone and redone.\nBesides the standard undoable edits\n<a href="#/dguide/customizing_interaction_add_custom_undo_units">custom undo units</a> can be added as well.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_undo-471-simpara-004",content:'Furthermore, you can instruct the <span class="api">UndoEngine</span> to <a href="#/dguide/customizing_interaction_icompoundedit">record a sequence of changes</a>\nand automatically create a single unit thereof over a period of time.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_undo-471-simpara-005",content:'The <span class="api">UndoEngine</span> dispatches the following events for each undo unit that it undoes or redoes:'},{tagname:"table","class":"",id:"customizing_interaction_undo-471-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_undo-471-thead-001"><tr id="customizing_interaction_undo-471-row-001"><th id="customizing_interaction_undo-471-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_undo-471-entry-002" align="left" valign="top">\nOccurs when …​\n</th></tr></thead><tbody id="customizing_interaction_undo-471-tbody-001"><tr id="customizing_interaction_undo-471-row-002"><td id="customizing_interaction_undo-471-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_undo-471-simpara-006"><api-link id="customizing_interaction_undo-471-api-link-005" data-member="UnitUndone" data-text="UnitUndone" data-type="yfiles.graph.UndoEngine"></api-link></para></td><td id="customizing_interaction_undo-471-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_undo-471-simpara-007">…​ the undo engine has successfully executed <api-link id="customizing_interaction_undo-471-api-link-006" data-member="undo()" data-text="IUndoUnit.undo" data-type="yfiles.graph.IUndoUnit"></api-link>.</para></td></tr><tr id="customizing_interaction_undo-471-row-003"><td id="customizing_interaction_undo-471-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_undo-471-simpara-008"><api-link id="customizing_interaction_undo-471-api-link-007" data-member="UnitRedone" data-text="UnitRedone" data-type="yfiles.graph.UndoEngine"></api-link></para></td><td id="customizing_interaction_undo-471-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_undo-471-simpara-009">…​ the undo engine has successfully executed <api-link id="customizing_interaction_undo-471-api-link-008" data-member="redo()" data-text="IUndoUnit.redo" data-type="yfiles.graph.IUndoUnit"></api-link>.</para></td></tr></tbody>'},{tagname:"section",id:"customizing_interaction_add_custom_undo_units",title:"Custom Undo Units",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_add_custom_undo_units-472-simpara-001",content:'All changes to graph items are undoable by default. However, there are use cases where developers might\nwant to add custom operations to be undoable, too.\nFor example, while changing the style instance of an <span class="api">INode</span> is undoable by default, changing\na property of that style is not. If you have code that changes a property of a style dynamically,\nit might be a good idea to add an <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-001" data-member="" data-text="IUndoUnit" data-type="yfiles.graph.IUndoUnit"></api-link> that can conveniently revert that change.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_add_custom_undo_units-472-simpara-002",content:'For these use cases you need to create a custom <span class="api">IUndoUnit</span> and add it to the <span class="api">UndoEngine</span> using the\n<api-link id="customizing_interaction_add_custom_undo_units-472-api-link-002" data-member="addUnit(yfiles.graph.IUndoUnit)" data-text="addUnit" data-type="yfiles.graph.UndoEngine"></api-link> method when the change occurs. The undo unit must be of type\n<span class="api">IUndoUnit</span>. There is the <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-003" data-member="" data-text="UndoUnitBase" data-type="yfiles.graph.UndoUnitBase"></api-link> class which can be conveniently extended for this purpose. The\n<api-link id="customizing_interaction_add_custom_undo_units-472-api-link-004" data-member="undo()" data-text="undo" data-type="yfiles.graph.IUndoUnit"></api-link> method is supposed to revert the change it represents\nand <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-005" data-member="redo()" data-text="redo" data-type="yfiles.graph.IUndoUnit"></api-link> to restore the state after the change again.'},{tagname:"para","class":"dguide-para note",id:"customizing_interaction_add_custom_undo_units-472-note-001",content:'<p id="customizing_interaction_add_custom_undo_units-472-simpara-003">It is important that <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-006" data-member="redo()" data-text="redo" data-type="yfiles.graph.IUndoUnit"></api-link> is the exact inverse operation of\n<api-link id="customizing_interaction_add_custom_undo_units-472-api-link-007" data-member="undo()" data-text="undo" data-type="yfiles.graph.IUndoUnit"></api-link>. That is, when executing <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-008" data-member="redo()" data-text="redo" data-type="yfiles.graph.IUndoUnit"></api-link>\nafter <api-link id="customizing_interaction_add_custom_undo_units-472-api-link-009" data-member="undo()" data-text="undo" data-type="yfiles.graph.IUndoUnit"></api-link> the graph and its related objects\nare in the exact same state as before the undo.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_add_custom_undo_units-472-simpara-004",content:'The following example shows how to implement and apply a custom undo unit for changing a\n<span class="api">ShapeNodeStyle</span>’s <span class="api">fill</span> property:'},{tagname:"example",id:"customizing_interaction_add_custom_undo_units-472-example-001",title:"Implementing a custom undo unit and adding it to the undo engine",content:'<pre class="programlisting javascript" id="customizing_interaction_add_custom_undo_units-472-programlisting-001" language="javascript" format="linespecific"><code>// method that changes the color on the node\'s ShapeNodeStyle and makes this operation undoable.\r\nfunction changeNodeFill(node, fill) {\r\n  let style = node.style\r\n\r\n  // for the following operation, create an undo unit for it and insert it into the UndoEngine\r\n  let unit = new ChangeColorUndoUnit(style)\r\n  graph.undoEngine.addUnit(unit)\r\n\r\n  // execute the operation\r\n  style.fill = fill\r\n}\r\n\r\n// an undo unit that remember the paint of the given node style at creation\r\n// and undos and redos the changing of the paint property.\r\nclass ChangeColorUndoUnit extends yfiles.graph.UndoUnitBase {\r\n  constructor(style) {\r\n    super(\'Change Node Color\')\r\n    // remember the changed object\r\n    this.style = style\r\n    // remember the old value\r\n    this.oldFill = style.fill\r\n  }\r\n\r\n  undo() {\r\n    // remember the new value for redo\r\n    this.newFill = this.style.fill\r\n    // set the old value\r\n    this.style.fill = this.oldFill\r\n  }\r\n\r\n  redo() {\r\n    // set the new value\r\n    this.style.fill = this.newFill\r\n  }\r\n}\n</code></pre>'}]},{tagname:"section",id:"customizing_interaction_customize_buildin_units",xreflabel:"Customizing the Built-in Undo Units",title:"Built-in Undo Units",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_customize_buildin_units-473-simpara-001",content:"As mentioned above, yFiles for HTML automatically records every change to the graph structure in an undo unit.\nThere might be situations however when you want to customize the undo operation for graph structure changes,\nfor example for node removals, as a means to synchronize your own business data, for example."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_customize_buildin_units-473-simpara-002",content:'Even though the concrete implementation of these undo units is private, you can still\ndecorate them by overriding their factory methods on <api-link id="customizing_interaction_customize_buildin_units-473-api-link-001" data-member="" data-text="DefaultGraph" data-type="yfiles.graph.DefaultGraph"></api-link>.\nFor example, to decorate the undo unit that undoes the “delete node” action, override the\n<api-link id="customizing_interaction_customize_buildin_units-473-api-link-002" data-member="createUndoUnitForNodeRemoval(yfiles.graph.INode)" data-text="createUndoUnitForNodeRemoval" data-type="yfiles.graph.DefaultGraph"></api-link> method.\nThere are factory methods like this for every graph structure change.'}]},{tagname:"section",id:"customizing_interaction_icompoundedit",title:"Merging Changes into one Undo Unit",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_icompoundedit-474-simpara-001",content:'By default the <span class="api">UndoEngine</span> merges multiple undo units that occur during a certain time span as defined\nby <api-link id="customizing_interaction_icompoundedit-474-api-link-001" data-member="autoMergeTime" data-text="autoMergeTime" data-type="yfiles.graph.UndoEngine"></api-link>. You can disable this by setting the time span to a zero\nvalue. Independently, the <span class="api">UndoEngine</span> can also be configured to try to merge similar undo units into one single unit\nif possible. This behavior relies on <span class="api">IUndoUnit</span>’s\n<api-link id="customizing_interaction_icompoundedit-474-api-link-002" data-member="tryMergeUnit(yfiles.graph.IUndoUnit)" data-text="tryMergeUnit" data-type="yfiles.graph.IUndoUnit"></api-link> and\n<api-link id="customizing_interaction_icompoundedit-474-api-link-003" data-member="tryReplaceUnit(yfiles.graph.IUndoUnit)" data-text="tryReplaceUnit" data-type="yfiles.graph.IUndoUnit"></api-link> methods.\nYou can enable it by setting <api-link id="customizing_interaction_icompoundedit-474-api-link-004" data-member="mergeUnits" data-text="mergeUnits" data-type="yfiles.graph.UndoEngine"></api-link> to <code>true</code>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_icompoundedit-474-simpara-002",content:'Sometimes we want to merge a chain of changes into one single unit. This happens, e.g., when a node is moved,\nwhich would create a lot of undo units for position changes. However, we only want one single undo unit for\nthat, i.e. one change from its initial to its final position. The <span class="api">UndoEngine</span> supports recording a set of\nchanges and merging it into one single unit at the end of the gesture.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_icompoundedit-474-simpara-003",content:'To start recording, call <api-link id="customizing_interaction_icompoundedit-474-api-link-005" data-member="beginEdit(string,string)" data-text="beginEdit" data-type="yfiles.graph.IGraph"></api-link> on\n<span class="api">IGraph</span>. This method returns an instance of <api-link id="customizing_interaction_icompoundedit-474-api-link-006" data-member="" data-text="ICompoundEdit" data-type="yfiles.graph.ICompoundEdit"></api-link> which can be used as a hook\nto end or cancel the recording. To end the recording you need to call the <api-link id="customizing_interaction_icompoundedit-474-api-link-007" data-member="commit()" data-text="commit" data-type="yfiles.graph.ICompoundEdit"></api-link>\nmethod. The recorded undo unit is automatically added to the undo engine.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_icompoundedit-474-simpara-004",content:'If the action should be canceled or something went wrong while executing the changes, call\n<api-link id="customizing_interaction_icompoundedit-474-api-link-008" data-member="cancel()" data-text="cancel" data-type="yfiles.graph.ICompoundEdit"></api-link> to end the recording without adding an undo unit.\nFor example, an input gesture could be added where pressing <kbd>Escape</kbd> would cancel the gesture,\ne.g. moving a node. In this case we would not want to add the changes to the <span class="api">UndoEngine</span>.'},{tagname:"example",id:"customizing_interaction_icompoundedit-474-example-001",title:"Automatically recording a set of changes",content:'<pre class="programlisting javascript" id="customizing_interaction_icompoundedit-474-programlisting-001" language="javascript" format="linespecific"><code>// start recording\r\nlet edit = graph.beginEdit(\'The Undo Name\', \'The Redo Name\')\r\ntry {\r\n  // do some changes to the employee data\r\n  doSomeChanges()\r\n\r\n  // after the changes, stop the recording\r\n  // the changes were successful, so commit the undo to the engine\r\n  edit.commit()\r\n} catch (e) {\r\n  // something went wrong, ignore this edit\r\n  edit.cancel()\r\n}\n</code></pre>'}]},{tagname:"section",id:"_remembering_states_for_undo_memento_design_pattern",title:"Remembering States for Undo (Memento Design Pattern)",children:[{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-001",content:'The yFiles for HTML undo mechanism also supports the memento design pattern,\ni.e. taking snapshots of the <span class="def">state</span> of an object to be able to restore that state later.\nThis concept can be used to add undo support for your business data.\nMementos are particularly efficient where handling data states\nis easier than handling atomic changes to the items themselves.'},{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-002",content:'It is used for recording sessions of <a href="#/dguide/customizing_interaction_icompoundedit">ICompoundEdit</a>.\nYour model can be <strong id="_remembering_states_for_undo_memento_design_pattern-475-emphasis-001" class="bold" role="bold">watched</strong> over a course of actions and changes to it can be appropriately undone and redone.\nMementos are <span class="def">snapshots</span> of <span class="def">states</span> of arbitrary data. The <api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-001" data-member="" data-text="IMementoSupport" data-type="yfiles.graph.IMementoSupport"></api-link>\ninterface can be used to convert the data between these states.\nIn this regard mementos are a more abstract concept of <span class="api">IUndoUnit</span>s\nwhere the cumbersome process of creating and inserting <span class="api">IUndoUnit</span>s\nat the right time into the <span class="api">UndoEngine</span> is omitted.'},{tagname:"para",content:'<dl id="_remembering_states_for_undo_memento_design_pattern-475-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_remembering_states_for_undo_memento_design_pattern-475-term-001"><api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-002" data-member="getState(Object)" data-text="getState" data-type="yfiles.graph.IMementoSupport"></api-link></dt><dd id="_remembering_states_for_undo_memento_design_pattern-475-listitem-001">\n<p id="_remembering_states_for_undo_memento_design_pattern-475-simpara-003">Returns an object which represents the current state of the given object.</p>\n</dd>\n<dt id="_remembering_states_for_undo_memento_design_pattern-475-term-002"><api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-003" data-member="applyState(Object,Object)" data-text="applyState" data-type="yfiles.graph.IMementoSupport"></api-link></dt><dd id="_remembering_states_for_undo_memento_design_pattern-475-listitem-002">\n<p id="_remembering_states_for_undo_memento_design_pattern-475-simpara-004">Applies the given state to the given object, i.e. restores the saved state.</p>\n</dd>\n<dt id="_remembering_states_for_undo_memento_design_pattern-475-term-003"><api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-004" data-member="stateEquals(Object,Object)" data-text="stateEquals" data-type="yfiles.graph.IMementoSupport"></api-link></dt><dd id="_remembering_states_for_undo_memento_design_pattern-475-listitem-003">\n<p id="_remembering_states_for_undo_memento_design_pattern-475-simpara-005">Whether the two given states are equal. Used to avoid saving mementos for unchanged states.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-006",content:'To use memento support implement the <api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-005" data-member="" data-text="IMementoSupport" data-type="yfiles.graph.IMementoSupport"></api-link> interface …​'},{tagname:"example",id:"_remembering_states_for_undo_memento_design_pattern-475-informalexample-001",content:'<pre class="programlisting javascript" id="_remembering_states_for_undo_memento_design_pattern-475-programlisting-001" language="javascript" format="linespecific"><code>// The memento support for class Employee\r\nclass EmployeeMementoSupport extends yfiles.lang.Class(yfiles.graph.IMementoSupport) {\r\n  // Provides an EmployeeState instance\r\n  // which represents the current state of the Employee\r\n  getState(subject) {\r\n    if (subject instanceof Employee) {\r\n      return {\r\n        position: subject.position,\r\n        age: subject.age\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  // Applies the given state to the Employee instance\r\n  applyState(subject, state) {\r\n    if (subject instanceof Employee) {\r\n      let employee = subject\r\n      employee.position = state.position\r\n      employee.age = state.age\r\n    }\r\n  }\r\n\r\n  // Whether the two given states are equal\r\n  stateEquals(state1, state2) {\r\n    return state1.age === state2.age && state1.position === state2.position\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-007",content:"... and add a lookup to your business data:"},{tagname:"example",id:"_remembering_states_for_undo_memento_design_pattern-475-informalexample-002",content:'<pre class="programlisting javascript" id="_remembering_states_for_undo_memento_design_pattern-475-programlisting-002" language="javascript" format="linespecific"><code>// The business model\r\nclass Employee extends yfiles.lang.Class(yfiles.graph.ILookup) {\r\n  get name() {\r\n    return this._name\r\n  }\r\n\r\n  get position() {\r\n    return this._position\r\n  }\r\n\r\n  set position(value) {\r\n    this._position = value\r\n  }\r\n\r\n  get age() {\r\n    return this._age\r\n  }\r\n\r\n  set age(value) {\r\n    this._age = value\r\n  }\r\n\r\n  constructor(name) {\r\n    super()\r\n    this._name = name\r\n  }\r\n\r\n  // Implementing Lookup to return an implementation\r\n  // of IMementoSupport facilitates using the\r\n  // memento pattern for undo\r\n  lookup(type) {\r\n    if (type === yfiles.graph.IMementoSupport.$class) {\r\n      return new EmployeeMementoSupport()\r\n    }\r\n    return null\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-008",content:"The following example shows how to record all changes to a list of business objects:"},{tagname:"example",id:"_remembering_states_for_undo_memento_design_pattern-475-informalexample-003",content:'<pre class="programlisting javascript" id="_remembering_states_for_undo_memento_design_pattern-475-programlisting-003" language="javascript" format="linespecific"><code>// employees is of type Iterable&lt;Employee>\r\nlet edit = graph.beginEdit(\'The Undo Name\', \'The Redo Name\', employees)\r\n\r\n// do some changes to the employee data\r\ndoSomeChanges()\r\n\r\nedit.commit()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_remembering_states_for_undo_memento_design_pattern-475-simpara-009",content:'Note: If the business object classes cannot be modified and you cannot implement <span class="api">ILookup</span>\nto provide an <span class="api">IMementoSupport</span> implementation, you can provide an appropriate\n<api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-006" data-member="" data-text="IMementoSupport" data-type="yfiles.graph.IMementoSupport"></api-link> implementation in the\n<api-link id="_remembering_states_for_undo_memento_design_pattern-475-api-link-007" data-member="beginEdit(string,string,yfiles.collections.IEnumerable,yfiles.graph.MementoSupportProvider)" data-text="beginEdit&lt;T&gt;" data-type="yfiles.graph.IGraph"></api-link>\ncall:'},{tagname:"example",id:"_remembering_states_for_undo_memento_design_pattern-475-informalexample-004",content:'<pre class="programlisting javascript" id="_remembering_states_for_undo_memento_design_pattern-475-programlisting-004" language="javascript" format="linespecific"><code>// employees is of type Iterable&lt;Employee>\r\nlet edit = graph.beginEdit(\r\n  \'The Undo Name\',\r\n  \'The Redo Name\',\r\n  employees,\r\n  item => new EmployeeMementoSupport()\r\n)\r\n\r\n// do some changes to the employee data\r\ndoSomeChanges()\r\n\r\nedit.commit()\n</code></pre>'}]}]},{tagname:"section",id:"customizing_interaction_clipboard",xreflabel:"Customizing the Clipboard",title:"Clipboard",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_clipboard-476-simpara-001",content:'The clipboard functionality is controlled by the <span class="api">GraphClipboard</span> defined on the\n<api-link id="customizing_interaction_clipboard-476-api-link-001" data-member="clipboard" data-text="GraphComponent.clipboard" data-type="yfiles.view.GraphComponent"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_clipboard-476-simpara-002",content:'<span class="api">GraphClipboard</span> internally holds a separate <span class="api">IGraph</span> that serves as a container for the items\nto cut/copy/paste. This internal graph is the actual clipboard.\nTo store an item in the clipboard, <span class="api">GraphClipboard</span> copies the elements from and to the internal graph\nusing instances of <api-link id="customizing_interaction_clipboard-476-api-link-002" data-member="" data-text="GraphCopier" data-type="yfiles.graph.GraphCopier"></api-link>.\nYou can set your own implementations via read/write properties for further configuration.\nThese properties are <api-link id="customizing_interaction_clipboard-476-api-link-003" data-member="toClipboardCopier" data-text="toClipboardCopier" data-type="yfiles.graph.GraphClipboard"></api-link>\nfor cut and copy, <api-link id="customizing_interaction_clipboard-476-api-link-004" data-member="fromClipboardCopier" data-text="fromClipboardCopier" data-type="yfiles.graph.GraphClipboard"></api-link>\nfor paste, and <api-link id="customizing_interaction_clipboard-476-api-link-005" data-member="duplicateCopier" data-text="duplicateCopier" data-type="yfiles.graph.GraphClipboard"></api-link>\nfor duplicate operations. As the name suggests, <span class="api">GraphCopier</span> is\nan object that copies elements from one graph to another. In the <span class="api">GraphClipboard</span>,\none of these graphs is the internal clipboard graph and the other the graph\nof the <span class="api">GraphComponent</span>, depending on which property the <span class="api">GraphCopier</span> is set.\nThis class has several protected methods that deal with the copying of each\ntype of graph element and that can be customized to your needs.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_clipboard-476-simpara-003",content:'The clipboard graph itself can be accessed via the\n<api-link id="customizing_interaction_clipboard-476-api-link-006" data-member="clipboardGraph" data-text="clipboardGraph" data-type="yfiles.graph.GraphClipboard"></api-link> property.'},{tagname:"table","class":"",id:"customizing_interaction_clipboard-476-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_clipboard-476-thead-001"><tr id="customizing_interaction_clipboard-476-row-001"><th id="customizing_interaction_clipboard-476-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_clipboard-476-entry-002" align="left" valign="top">\nOccurs when…​\n</th></tr></thead><tbody id="customizing_interaction_clipboard-476-tbody-001"><tr id="customizing_interaction_clipboard-476-row-002"><td id="customizing_interaction_clipboard-476-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-004"><api-link id="customizing_interaction_clipboard-476-api-link-007" data-member="ElementsCut" data-text="ElementsCut" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-005">…​ the cut operation finished successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-003"><td id="customizing_interaction_clipboard-476-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-006"><api-link id="customizing_interaction_clipboard-476-api-link-008" data-member="ElementsCopied" data-text="ElementsCopied" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-007">…​ the copy operation finished successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-004"><td id="customizing_interaction_clipboard-476-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-008"><api-link id="customizing_interaction_clipboard-476-api-link-009" data-member="ElementsPasted" data-text="ElementsPasted" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-009">…​ the paste operation finished successfully.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_clipboard-476-simpara-010",content:'Besides the events that are dispatched by <span class="api">GraphClipboard</span> after the entire operation has finished, you\ncan also listen for events that are dispatched by the different <span class="api">GraphCopier</span> instances\nfor each copied item individually:'},{tagname:"table","class":"",id:"customizing_interaction_clipboard-476-table-002",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_clipboard-476-thead-002"><tr id="customizing_interaction_clipboard-476-row-005"><th id="customizing_interaction_clipboard-476-entry-009" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_clipboard-476-entry-010" align="left" valign="top">\nOccurs when…​\n</th></tr></thead><tbody id="customizing_interaction_clipboard-476-tbody-002"><tr id="customizing_interaction_clipboard-476-row-006"><td id="customizing_interaction_clipboard-476-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-011"><api-link id="customizing_interaction_clipboard-476-api-link-010" data-member="NodeCopied" data-text="NodeCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-012">…​ a node has been copied successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-007"><td id="customizing_interaction_clipboard-476-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-013"><api-link id="customizing_interaction_clipboard-476-api-link-011" data-member="EdgeCopied" data-text="EdgeCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-014">…​ an edge has been copied successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-008"><td id="customizing_interaction_clipboard-476-entry-015" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-015"><api-link id="customizing_interaction_clipboard-476-api-link-012" data-member="LabelCopied" data-text="LabelCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-016" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-016">…​ a label has been copied successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-009"><td id="customizing_interaction_clipboard-476-entry-017" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-017"><api-link id="customizing_interaction_clipboard-476-api-link-013" data-member="PortCopied" data-text="PortCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-018" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-018">…​ a port has been copied successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-010"><td id="customizing_interaction_clipboard-476-entry-019" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-019"><api-link id="customizing_interaction_clipboard-476-api-link-014" data-member="BendCopied" data-text="BendCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-020" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-020">…​ a bend has been copied successfully.</para></td></tr><tr id="customizing_interaction_clipboard-476-row-011"><td id="customizing_interaction_clipboard-476-entry-021" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-021"><api-link id="customizing_interaction_clipboard-476-api-link-015" data-member="ObjectCopied" data-text="ObjectCopied" data-type="yfiles.graph.GraphCopier"></api-link></para></td><td id="customizing_interaction_clipboard-476-entry-022" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_clipboard-476-simpara-022">…​ a user tag has been copied successfully.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_clipboard-476-simpara-023",content:"Additionally, the cut/copy/paste methods have overloads which take a\ncallback function that is invoked\nonce an element has been cut/copied/pasted."},{tagname:"section",id:"_defining_items_to_be_copied_and_pasted",title:"Defining Items to be Copied and Pasted",children:[{tagname:"para","class":"dguide-para",id:"_defining_items_to_be_copied_and_pasted-477-simpara-001",content:'In the case of <strong id="_defining_items_to_be_copied_and_pasted-477-emphasis-001" class="bold" role="bold">copying</strong> an element, you can set properties to generally define\nthe types of graph items that are allowed to be copied:'},{tagname:"table","class":"",id:"_defining_items_to_be_copied_and_pasted-477-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:29%;"><col style="width:14%;"><col style="width:57%;"></colgroup><thead id="_defining_items_to_be_copied_and_pasted-477-thead-001"><tr id="_defining_items_to_be_copied_and_pasted-477-row-001"><th id="_defining_items_to_be_copied_and_pasted-477-entry-001" align="left" valign="top">\nProperty\n</th><th id="_defining_items_to_be_copied_and_pasted-477-entry-002" align="left" valign="top">\nDefault\n</th><th id="_defining_items_to_be_copied_and_pasted-477-entry-003" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_defining_items_to_be_copied_and_pasted-477-tbody-001"><tr id="_defining_items_to_be_copied_and_pasted-477-row-002"><td id="_defining_items_to_be_copied_and_pasted-477-entry-004" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-002"><api-link id="_defining_items_to_be_copied_and_pasted-477-api-link-001" data-member="copyItems" data-text="copyItems" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-005" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-003">All</para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-006" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-004">Items which should be copied. Items which are not included are never copied,\n  neither as dependent nor as independent items.</para></td></tr><tr id="_defining_items_to_be_copied_and_pasted-477-row-003"><td id="_defining_items_to_be_copied_and_pasted-477-entry-007" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-005"><api-link id="_defining_items_to_be_copied_and_pasted-477-api-link-002" data-member="dependentCopyItems" data-text="dependentCopyItems" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-008" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-006">All except nodes</para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-009" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-007">Items which should be copied if the items they depend on are copied, even if the item itself is not selected.\n  See <a href="#/dguide/customizing_interaction_dependent_items">below</a> for a definition of dependent items.\n</para><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-008">  Note: If nodes are included the descendant nodes of a selected group node will be copied, too.</para></td></tr><tr id="_defining_items_to_be_copied_and_pasted-477-row-004"><td id="_defining_items_to_be_copied_and_pasted-477-entry-010" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-009"><api-link id="_defining_items_to_be_copied_and_pasted-477-api-link-003" data-member="independentCopyItems" data-text="independentCopyItems" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-011" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-010">All</para></td><td id="_defining_items_to_be_copied_and_pasted-477-entry-012" align="left" valign="top"><para class="dguide-para" id="_defining_items_to_be_copied_and_pasted-477-simpara-011">Items which should be copied even if they depend on another item that is not copied.\n  See <a href="#/dguide/customizing_interaction_independent_items">below</a> for a detailed explanation.</para></td></tr></tbody>'},{tagname:"section",id:"customizing_interaction_dependent_items",title:"Clipboard Operations with Dependent Items",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_dependent_items-478-simpara-001",content:"In a graph, only nodes are truly independent items. All other graph elements depend on other elements: Edges depend on their source and target,\nlabels and ports depend on either a node or an edge. Technically they cannot exist without the item on which they depend on, thus copying\nshould theoretically never occur without the other."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_dependent_items-478-simpara-002",content:'Graph items which depend on other items (that means, they cannot exist without them) are automatically copied if the item they depend on is directly or indirectly\nselected for copy and their type is included in the <api-link id="customizing_interaction_dependent_items-478-api-link-001" data-member="dependentCopyItems" data-text="dependentCopyItems" data-type="yfiles.graph.GraphClipboard"></api-link>. That means\nthat a <strong id="customizing_interaction_dependent_items-478-emphasis-001" class="bold" role="bold">label</strong> is copied if its <strong id="customizing_interaction_dependent_items-478-emphasis-002" class="bold" role="bold">owner</strong> is copied, <strong id="customizing_interaction_dependent_items-478-emphasis-003" class="bold" role="bold">even if the label is not selected</strong>. The dependencies are resolved\nrecursively, i.e. for a set of nodes which is copied into the clipboard, all their labels and ports will be copied,\ntoo. Also, all edges whose both source and target ports are copied are copied, too, as well as all bends, labels, and\nports belonging to those edges.'}]},{tagname:"section",id:"customizing_interaction_independent_items",title:"Copy Dependent Items Independently",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-001",content:'yFiles for HTML also supports copying items <strong id="customizing_interaction_independent_items-479-emphasis-001" class="bold" role="bold">independently</strong> even if they are dependent on another item,\nif the copying logic provides a suitable new target for them. This means that you can for example\ncopy one label from one node to another or edges with only one or no selected source or target node.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-002",content:"Whether these elements can be pasted back to the graph (or another graph) depends on whether an unambiguous appropriate target\ncan be found for these elements. This will be explained in the following in detail:"},{tagname:"heading",id:"_copying_a_node_with_a_single_edge",renderas:"sect5",content:"Copying a node with a single edge"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-003",content:"Items copied to the clipboard don’t need to be able to stand alone. While edges\nin yFiles for HTML cannot exist without a source and target node, they can be copied\nwithout one of them.\nIn that case, when pasting a node with an incident edge, the pasted edge can\nconnect to a different node.\nThis is a place where the selection is relevant for pasting, as\nthe selected node will be used as the target for the paste operation, i.e. it\nbecomes the node on the other side of the copied edge."},{tagname:"figure","class":"image",title:"Copy and paste of a node with an incident edge",id:"customizing_interaction_independent_items-479-figure-001","float":0,children:[{tagname:"img",src:"assets/interaction_copy2_1.ac591e4e.png",alt:"",title:'<para class="dguide-para">Selection before copying</para>'},{tagname:"img",src:"assets/interaction_copy2_2.85dc7862.png",alt:"",title:'<para class="dguide-para">Selection before pasting</para>'},{tagname:"img",src:"assets/interaction_copy2_3.8d950de1.png",alt:"",title:'<para class="dguide-para">Graph after pasting</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-004",content:'In the example above, the node <strong id="customizing_interaction_independent_items-479-emphasis-002" class="bold" role="bold">C</strong> is copied along with its incoming edge. Then <strong id="customizing_interaction_independent_items-479-emphasis-003" class="bold" role="bold">A</strong>\nis selected and the copied items are pasted. <strong id="customizing_interaction_independent_items-479-emphasis-004" class="bold" role="bold">A</strong> is then used as the new source\nnode for the copied edge.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-005",content:"When there is no selection, the original source node of the edge is used instead."},{tagname:"figure","class":"image",title:"Copy and paste of a node with an incident edge and no selection on paste",id:"customizing_interaction_independent_items-479-figure-002","float":0,children:[{tagname:"img",src:"assets/interaction_copy2_1.ac591e4e.png",alt:"",title:'<para class="dguide-para">Selection before copying</para>'},{tagname:"img",src:"assets/interaction_copy2_4.7fcdf6d1.png",alt:"",title:'<para class="dguide-para">Graph after pasting</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-006",content:"Having multiple nodes selected when pasting will paste the node and edge to all\nof the selected nodes."},{tagname:"heading",id:"_copying_a_single_dependent_item_label_or_edge",renderas:"sect5",content:"Copying a single dependent item (label or edge)"},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-007",content:'This is a similar case as the one above: Edges and labels can also be copied\nwithout any other items. For edges this means that on pasting <strong id="customizing_interaction_independent_items-479-emphasis-005" class="bold" role="bold">two</strong> nodes need\nto be selected to paste the edge between those two nodes. Any other number of\nselected nodes will cause the edge to be pasted between their original source\nand target nodes.'},{tagname:"figure","class":"image",title:"Copy and paste of an edge",id:"customizing_interaction_independent_items-479-figure-003","float":0,children:[{tagname:"img",src:"assets/interaction_copy3_1.d1a12f5b.png",alt:"",title:'<para class="dguide-para">Selection before copying</para>'},{tagname:"img",src:"assets/interaction_copy3_2.56095b17.png",alt:"",title:'<para class="dguide-para">Selection before pasting</para>'},{tagname:"img",src:"assets/interaction_copy3_3.4f960574.png",alt:"",title:'<para class="dguide-para">Graph after pasting</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-008",content:"When an edge is pasted between two other nodes, their spatial relationship and\nthe spatial relationship between the original source and target nodes will\ndetermine which node will become the source and which the target of the pasted\nedge."},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-009",content:"When copying a label without their owning items, it can be pasted to any other\npotential label owner, even those of different types."},{tagname:"figure","class":"image",title:"Copy and paste of a label",id:"customizing_interaction_independent_items-479-figure-004","float":0,children:[{tagname:"img",src:"assets/interaction_copy4_1.d6fe4b52.png",alt:"",title:'<para class="dguide-para">Selection before copying</para>'},{tagname:"img",src:"assets/interaction_copy4_2.6c3e630d.png",alt:"",title:'<para class="dguide-para">Selection before pasting</para>'},{tagname:"img",src:"assets/interaction_copy4_3.aa1ee8ea.png",alt:"",title:'<para class="dguide-para">Graph after pasting</para>'}]},{tagname:"para","class":"dguide-para",id:"customizing_interaction_independent_items-479-simpara-010",content:'These operations, pasting independent items from the clipboard into a graph,\nrequire finding an appropriate owner (or target).\nTo change the default behavior described above you can override the <api-link id="customizing_interaction_independent_items-479-api-link-001" data-member="getTargetLabeledItem" data-text="getTargetLabeledItem" data-type="yfiles.graph.GraphClipboard"></api-link>\nmethods. These methods are queried to return an appropriate owner for the given item (or <code>null</code>):'},{tagname:"para",content:'<dl id="customizing_interaction_independent_items-479-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_independent_items-479-term-001"><api-link id="customizing_interaction_independent_items-479-api-link-002" data-member="getTargetLabeledItem(yfiles.graph.ILabel)" data-text="getTargetLabeledItem(originalLabel:&#xA0;ILabel):&#xA0;ILabelOwner" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="customizing_interaction_independent_items-479-listitem-001">\n<p id="customizing_interaction_independent_items-479-simpara-011">Queried to find an owner for the provided label.</p>\n</dd>\n<dt id="customizing_interaction_independent_items-479-term-002"><api-link id="customizing_interaction_independent_items-479-api-link-003" data-member="getTargetPortOwner(yfiles.graph.IPort)" data-text="getTargetPortOwner(originalPort:&#xA0;IPort):&#xA0;IPortOwner" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="customizing_interaction_independent_items-479-listitem-002">\n<p id="customizing_interaction_independent_items-479-simpara-012">Queried to find an owner for the provided port.</p>\n</dd>\n<dt id="customizing_interaction_independent_items-479-term-003"><api-link id="customizing_interaction_independent_items-479-api-link-004" data-member="getTargetPort(yfiles.graph.IEdge,boolean)" data-text="getTargetPort(originalEdge:&#xA0;IEdge, atSource:&#xA0;boolean):&#xA0;IPort" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="customizing_interaction_independent_items-479-listitem-003">\n<p id="customizing_interaction_independent_items-479-simpara-013">Queried to find a source or target port for the provided edge.</p>\n</dd>\n<dt id="customizing_interaction_independent_items-479-term-004"><api-link id="customizing_interaction_independent_items-479-api-link-005" data-member="getTargetEdge(yfiles.graph.IBend)" data-text="getTargetEdge(originalBend:&#xA0;IBend):&#xA0;IEdge" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="customizing_interaction_independent_items-479-listitem-004">\n<p id="customizing_interaction_independent_items-479-simpara-014">Queried to find an owner for the provided bend.</p>\n</dd>\n<dt id="customizing_interaction_independent_items-479-term-005"><api-link id="customizing_interaction_independent_items-479-api-link-006" data-member="getTargetNode(yfiles.graph.INode)" data-text="getTargetNode(originalNode:&#xA0;INode):&#xA0;INode" data-type="yfiles.graph.GraphClipboard"></api-link></dt><dd id="customizing_interaction_independent_items-479-listitem-005">\n<p id="customizing_interaction_independent_items-479-simpara-015">Queried to find a parent group node for the provided node.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"customizing_interaction_independent_items-479-important-001",content:'<p id="customizing_interaction_independent_items-479-simpara-016">The items these methods will receive as parameter reside in the clipboard graph while the returned\nitem (the target) must exist in the target graph.</p>'}]}]},{tagname:"section",id:"_filtering_the_items_to_be_cut_copied_pasted",title:"Filtering the Items to be Cut / Copied / Pasted",children:[{tagname:"para","class":"dguide-para",id:"_filtering_the_items_to_be_cut_copied_pasted-480-simpara-001",content:'The cut/copy/paste methods of the <span class="api">GraphClipboard</span> also have overloads which take\npredicate function to filter the items which are\nallowed to be cut/copied/pasted.'},{tagname:"para","class":"dguide-para",id:"_filtering_the_items_to_be_cut_copied_pasted-480-simpara-002",content:'For setting general filter, you can override factory methods for default filters on\n<span class="api">GraphClipboard</span>:'},{tagname:"table","class":"",id:"_filtering_the_items_to_be_cut_copied_pasted-480-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_filtering_the_items_to_be_cut_copied_pasted-480-thead-001"><tr id="_filtering_the_items_to_be_cut_copied_pasted-480-row-001"><th id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-001" align="left" valign="top">\nFactory Method\n</th><th id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_filtering_the_items_to_be_cut_copied_pasted-480-tbody-001"><tr id="_filtering_the_items_to_be_cut_copied_pasted-480-row-002"><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-003" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-003"><api-link id="_filtering_the_items_to_be_cut_copied_pasted-480-api-link-001" data-member="createDefaultCutFilter(yfiles.view.IGraphSelection,yfiles.graph.IGraph)" data-text="createDefaultCutFilter(selection:&#xA0;IGraphSelection, graph:&#xA0;IGraph):&#xA0;Predicate&lt;IModelItem&gt;" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-004" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-004">Creates a predicate that decides whether a graph item can be cut.</para></td></tr><tr id="_filtering_the_items_to_be_cut_copied_pasted-480-row-003"><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-005" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-005"><api-link id="_filtering_the_items_to_be_cut_copied_pasted-480-api-link-002" data-member="createDefaultCopyFilter(yfiles.view.IGraphSelection,yfiles.graph.IGraph)" data-text="createDefaultCopyFilter(selection:&#xA0;IGraphSelection, graph:&#xA0;IGraph):&#xA0;Predicate&lt;IModelItem&gt;" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-006" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-006">Creates a predicate that decides whether a graph item can be copied.</para></td></tr><tr id="_filtering_the_items_to_be_cut_copied_pasted-480-row-004"><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-007" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-007"><api-link id="_filtering_the_items_to_be_cut_copied_pasted-480-api-link-003" data-member="createDefaultDuplicateFilter(yfiles.view.IGraphSelection,yfiles.graph.IGraph)" data-text="createDefaultDuplicateFilter(selection:&#xA0;IGraphSelection, graph:&#xA0;IGraph):&#xA0;Predicate&lt;IModelItem&gt;" data-type="yfiles.graph.GraphClipboard"></api-link></para></td><td id="_filtering_the_items_to_be_cut_copied_pasted-480-entry-008" align="left" valign="top"><para class="dguide-para" id="_filtering_the_items_to_be_cut_copied_pasted-480-simpara-008">Creates a predicate that decides whether a graph item can be duplicated.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_filtering_the_items_to_be_cut_copied_pasted-480-simpara-009",content:"Using filters you can decide for each individual item whether it may be processed or not."}]},{tagname:"section",id:"_customizations_for_paste",title:"Customizations for Paste",children:[{tagname:"heading",id:"_location_of_pasted_items",renderas:"sect4",content:"Location of Pasted Items"},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-001",content:"By default, items are pasted at the location of the items that have been copied."},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-002",content:'To avoid that pasted items are placed at the exact location of their original, <span class="api">GraphClipboard</span>\nplaces pasted items translated by a <api-link id="_customizations_for_paste-481-api-link-001" data-member="pasteDelta" data-text="pasteDelta" data-type="yfiles.graph.GraphClipboard"></api-link> that can be adjusted.\nThis offset is increased with each subsequent paste operation when using the\n<api-link id="_customizations_for_paste-481-api-link-002" data-member="PASTE" data-text="PASTE" data-type="yfiles.input.ICommand"></api-link> command or <span class="api">GraphEditorInputMode</span>’s\n<api-link id="_customizations_for_paste-481-api-link-003" data-member="paste()" data-text="paste" data-type="yfiles.input.GraphEditorInputMode"></api-link> method so that the newly pasted items don’t overlap the\npreviously pasted items.\nThe <api-link id="_customizations_for_paste-481-api-link-004" data-member="pasteDelta" data-text="pasteDelta" data-type="yfiles.graph.GraphClipboard"></api-link> is automatically reset upon copy or cut.'},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-003",content:'You can also specify a concrete location for the paste operation by using <span class="api">GraphEditorInputMode</span>’s\n<api-link id="_customizations_for_paste-481-api-link-005" data-member="pasteAtLocation(yfiles.geometry.Point)" data-text="pasteAtLocation" data-type="yfiles.input.GraphEditorInputMode"></api-link> method or the\n<api-link id="_customizations_for_paste-481-api-link-006" data-member="PASTE" data-text="PASTE" data-type="yfiles.input.ICommand"></api-link> command with a <span class="api">Point</span> as parameter.\nThe location is at the center of the bounds of all items that are pasted.'},{tagname:"heading",id:"_pasting_items_in_hierarchies",
renderas:"sect4",content:"Pasting Items in Hierarchies"},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-004",content:"yFiles for HTML can be instructed to automatically paste items into a group."},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-005",content:'You can specify whether nodes are pasted into a group node and how this node is determined by setting the\n<api-link id="_customizations_for_paste-481-api-link-007" data-member="parentNodeDetection" data-text="parentNodeDetection" data-type="yfiles.graph.GraphClipboard"></api-link> property using the values specified in\n<api-link id="_customizations_for_paste-481-api-link-008" data-member="" data-text="ParentNodeDetectionModes" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>:'},{tagname:"para",content:'<dl id="_customizations_for_paste-481-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_customizations_for_paste-481-term-001"><api-link id="_customizations_for_paste-481-api-link-009" data-member="ROOT" data-text="ROOT" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-001">\n<p id="_customizations_for_paste-481-simpara-006">Always places the nodes in the root (so pasted nodes are never grouped).</p>\n</dd>\n<dt id="_customizations_for_paste-481-term-002"><api-link id="_customizations_for_paste-481-api-link-010" data-member="SELECTION" data-text="SELECTION" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-002">\n<p id="_customizations_for_paste-481-simpara-007">Places the nodes into the selected node (if there is only one).\nIf combined with\n  <api-link id="_customizations_for_paste-481-api-link-011" data-member="ALLOW_SELF" data-text="ALLOW_SELF" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>\n  a node may be pasted into the original node of itself.</p>\n</dd>\n<dt id="_customizations_for_paste-481-term-003"><api-link id="_customizations_for_paste-481-api-link-012" data-member="PREVIOUS_PARENT" data-text="PREVIOUS_PARENT" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-003">\n<p id="_customizations_for_paste-481-simpara-008">Places the nodes into their original parent if the parent is close enough\n  from the paste location. If combined with\n  <api-link id="_customizations_for_paste-481-api-link-013" data-member="FORCE" data-text="FORCE" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>\n  the nodes are always placed into the original parent.</p>\n</dd>\n<dt id="_customizations_for_paste-481-term-004"><api-link id="_customizations_for_paste-481-api-link-014" data-member="AT_LOCATION" data-text="AT_LOCATION" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-004">\n<p id="_customizations_for_paste-481-simpara-009">Places the nodes into the topmost group node found at the location\n  they will be pasted to. If combined with\n  <api-link id="_customizations_for_paste-481-api-link-015" data-member="ALLOW_SELF" data-text="ALLOW_SELF" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>\n  a node may be pasted into the original node of itself.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-010",content:"These values can be combined with the following modifier values:"},{tagname:"para",content:'<dl id="_customizations_for_paste-481-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="_customizations_for_paste-481-term-005"><api-link id="_customizations_for_paste-481-api-link-016" data-member="ALLOW_SELF" data-text="ALLOW_SELF" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-005">\n<p id="_customizations_for_paste-481-simpara-011">Allows to paste a node into the original node of itself. May be combined with <api-link id="_customizations_for_paste-481-api-link-017" data-member="SELECTION" data-text="SELECTION" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>\nand <api-link id="_customizations_for_paste-481-api-link-018" data-member="AT_LOCATION" data-text="AT_LOCATION" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link>.</p>\n</dd>\n<dt id="_customizations_for_paste-481-term-006"><api-link id="_customizations_for_paste-481-api-link-019" data-member="FORCE" data-text="FORCE" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></dt><dd id="_customizations_for_paste-481-listitem-006">\n<p id="_customizations_for_paste-481-simpara-012">Forces a node to be pasted into its original parent, even if it is pasted\n  at a location far away from that node. May be combined with <api-link id="_customizations_for_paste-481-api-link-020" data-member="PREVIOUS_PARENT" data-text="PREVIOUS_PARENT" data-type="yfiles.graph.ParentNodeDetectionModes"></api-link></p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_customizations_for_paste-481-simpara-013",content:'Finding a parent for a pasted node can be customized even further by overriding <span class="api">GraphClipboard</span>’s method\n<api-link id="_customizations_for_paste-481-api-link-021" data-member="getTargetNode(yfiles.graph.INode)" data-text="getTargetNode(originalNode:&#xA0;INode):&#xA0;INode" data-type="yfiles.graph.GraphClipboard"></api-link>.'}]},{tagname:"section",id:"_customizing_the_clipboard_for_individual_items",title:"Customizing the Clipboard for Individual Items",children:[{tagname:"para","class":"dguide-para",id:"_customizing_the_clipboard_for_individual_items-482-simpara-001",content:'You can use the <api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-001" data-member="" data-text="IClipboardHelper" data-type="yfiles.graph.IClipboardHelper"></api-link> interface to customize the clipboard behavior for\nindividual graph items. During cut, copy, paste, or duplicate operations <span class="api">GraphClipboard</span>\nqueries each graph item’s <a href="#/dguide/customizing_concepts_lookup">lookup</a> for implementations of this interface. The <span class="api">IClipboardHelper</span>\nprovides two groups of methods:'},{tagname:"para",content:'<ul id="_customizing_the_clipboard_for_individual_items-482-itemizedlist-001"><li id="_customizing_the_clipboard_for_individual_items-482-listitem-001"><p id="_customizing_the_clipboard_for_individual_items-482-simpara-002">methods which determine whether the current item should be cut, copied, or pasted</p></li><li id="_customizing_the_clipboard_for_individual_items-482-listitem-002"><p id="_customizing_the_clipboard_for_individual_items-482-simpara-003">methods which manage arbitrary additional state</p></li></ul>'},{tagname:"para",content:'<dl id="_customizing_the_clipboard_for_individual_items-482-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-001"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-002" data-member="shouldCut(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem)" data-text="shouldCut(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem):&#xA0;boolean" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-003">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-004">Whether the given item should be cut. The item belongs to the original graph. If <a href="#/dguide/folding">folding</a> is enabled this item is a view item.</p>\n</dd>\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-002"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-003" data-member="shouldCopy(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem)" data-text="shouldCopy(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem):&#xA0;boolean" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-004">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-005">Whether the given item should be copied. The item belongs to the original graph. If <a href="#/dguide/folding">folding</a> is enabled this item is a view item.</p>\n</dd>\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-003"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-004" data-member="shouldPaste(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem,Object)" data-text="shouldPaste(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem, userData:&#xA0;Object):&#xA0;boolean" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-005">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-006">Whether the given item should be pasted. The item belongs to the clipboard graph.\n  The <code>userData</code> object is the state object which is created in one of the next methods.</p>\n</dd>\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-004"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-005" data-member="cut(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem)" data-text="cut(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem):&#xA0;Object" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-006">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-007">Creates an object which can be used to store additional state for the given item.</p>\n</dd>\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-005"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-006" data-member="copy(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem)" data-text="copy(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem):&#xA0;Object" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-007">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-008">Creates an object which can be used to store additional state for the given item.</p>\n</dd>\n<dt id="_customizing_the_clipboard_for_individual_items-482-term-006"><api-link id="_customizing_the_clipboard_for_individual_items-482-api-link-007" data-member="paste(yfiles.graph.IGraphClipboardContext,yfiles.graph.IModelItem,Object)" data-text="paste(context:&#xA0;IGraphClipboardContext, item:&#xA0;IModelItem, userData:&#xA0;Object):&#xA0;void" data-type="yfiles.graph.IClipboardHelper"></api-link></dt><dd id="_customizing_the_clipboard_for_individual_items-482-listitem-008">\n<p id="_customizing_the_clipboard_for_individual_items-482-simpara-009">Uses the given state object which has been created by one of the two above methods to restore additional state.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"_customizing_the_clipboard_for_individual_items-482-simpara-010",content:'The following example shows an implementation of <span class="api">IClipboardHelper</span> that only permits the copying and cutting of nodes\nthat have a certain tag:'},{tagname:"example",id:"_customizing_the_clipboard_for_individual_items-482-informalexample-001",content:'<pre class="programlisting javascript" id="_customizing_the_clipboard_for_individual_items-482-programlisting-001" language="javascript" format="linespecific"><code>shouldCopy(context, item) {\r\n  // Don\'t copy nodes with a red tag\r\n  return item.tag !== yfiles.view.Color.RED\r\n}\r\n\r\nshouldCut(context, item) {\r\n  // Don\'t cut nodes with a red tag\r\n  return item.tag !== yfiles.view.Color.RED\r\n}\r\n\r\nshouldPaste(context, item, userData) {\r\n  return true\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_customizing_the_clipboard_for_individual_items-482-simpara-011",content:'To use a custom <span class="api">IClipboardHelper</span>, you need to decorate the lookup of the nodes in the graph accordingly:'},{tagname:"example",id:"_customizing_the_clipboard_for_individual_items-482-informalexample-002",content:'<pre class="programlisting javascript" id="_customizing_the_clipboard_for_individual_items-482-programlisting-002" language="javascript" format="linespecific"><code>graph.decorator.nodeDecorator.clipboardHelperDecorator.setImplementation(\r\n  new PreventCopyingRedNodesClipboardHelper()\r\n)\n</code></pre>'}]}]},{tagname:"section",id:"customizing_interaction_snapping",xreflabel:"Customizing Snapping",title:"Snapping",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_snapping-483-simpara-001",content:'When talking about snapping we have to define the terms snap line and snap result, first.\nA <span class="def">snap line</span> is a (mostly invisible) line related to a fixed object to which a moved object\n<strong id="customizing_interaction_snapping-483-emphasis-001" class="bold" role="bold">might snap</strong>. A <span class="def">snap result</span> represents a snap line to which a moved object <strong id="customizing_interaction_snapping-483-emphasis-002" class="bold" role="bold">actually snaps</strong>\nat its current position. A moved object can have more than one snap result at the same location,\ni.e. snap to multiple snap lines at the same time. These snap lines are visualized.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_snapping-483-simpara-002",content:'You can set the color of the snap line visualization using the\n<a href="#/dguide/customizing_concepts_resource-keys">resource key</a>\n<api-link id="customizing_interaction_snapping-483-api-link-001" data-member="SNAP_LINE_STROKE_KEY" data-text="SNAP_LINE_STROKE_KEY" data-type="yfiles.input.SnapLine"></api-link>:'},{tagname:"example",id:"customizing_interaction_snapping-483-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_interaction_snapping-483-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.resources.set(yfiles.input.SnapLine.SNAP_LINE_STROKE_KEY, yfiles.view.Stroke.BLUE)\n</code></pre>'},{tagname:"section",id:"_adding_custom_snap_lines",title:"Adding Custom Snap Lines",children:[{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_lines-484-simpara-001",content:'To add custom snap lines for all elements <strong id="_adding_custom_snap_lines-484-emphasis-001" class="bold" role="bold">except</strong> labels, register a listener to the\n<span class="api">GraphSnapContext</span>’s\n<api-link id="_adding_custom_snap_lines-484-api-link-001" data-member="CollectSnapLines" data-text="CollectSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link> event. The\n<api-link id="_adding_custom_snap_lines-484-api-link-002" data-member="" data-text="arguments" data-type="yfiles.input.CollectGraphSnapLinesEventArgs"></api-link> of that event have a method to\n<api-link id="_adding_custom_snap_lines-484-api-link-003" data-member="addAdditionalSnapLine(yfiles.input.OrthogonalSnapLine)" data-text="add additional snap lines" data-type="yfiles.input.CollectGraphSnapLinesEventArgs"></api-link>.\nNote that these snap lines always have to be orthogonal.\nIf you also want to provide snap lines for labels, you should register an\nappropriate listener to the\n<span class="api">LabelSnapContext</span>’s\n<api-link id="_adding_custom_snap_lines-484-api-link-004" data-member="CollectSnapLines" data-text="CollectSnapLines" data-type="yfiles.input.LabelSnapContext"></api-link> event.\nSnap lines for labels can also be non-orthogonal.'},{tagname:"example",id:"_adding_custom_snap_lines-484-example-001",title:"Adding a custom snap line for all graph elements",content:'<pre class="programlisting javascript" id="_adding_custom_snap_lines-484-programlisting-001" language="javascript" format="linespecific"><code>function addSnapLine(graphSnapContext, labelSnapContext, start, end) {\r\n  let snapLine = createSnapLine(start, end)\r\n  if (snapLine !== null) {\r\n    // add a snap line for all graph elements expect labels\r\n    graphSnapContext.addCollectSnapLinesListener((source, args) =>\r\n      args.addAdditionalSnapLine(snapLine)\r\n    )\r\n    // add a snap line for labels\r\n    labelSnapContext.addCollectSnapLinesListener((source, args) => args.addSnapLine(snapLine))\r\n  }\r\n}\r\n\r\nfunction createSnapLine(start, end) {\r\n  // calculate the center of the snap line\r\n  let center = start.add(end).multiply(0.5)\r\n  // create a vertical snap line\r\n  if (start.x === end.x) {\r\n    return new yfiles.input.OrthogonalSnapLine(\r\n      yfiles.input.SnapLineOrientation.VERTICAL,\r\n      yfiles.input.SnapLineSnapTypes.CENTER,\r\n      yfiles.input.SnapLine.SNAP_LINE_FIXED_LINE_KEY,\r\n      center,\r\n      start.y,\r\n      end.y,\r\n      null,\r\n      50\r\n    )\r\n  }\r\n  // create a horizontal snap line\r\n  if (start.y === end.y) {\r\n    return new yfiles.input.OrthogonalSnapLine(\r\n      yfiles.input.SnapLineOrientation.HORIZONTAL,\r\n      yfiles.input.SnapLineSnapTypes.CENTER,\r\n      yfiles.input.SnapLine.SNAP_LINE_FIXED_LINE_KEY,\r\n      center,\r\n      start.x,\r\n      end.x,\r\n      null,\r\n      50\r\n    )\r\n  }\r\n  // we do not add non-orthogonal snap lines\r\n  return null\r\n}\n</code></pre>'},{tagname:"figure","class":"image",title:"Moving a node close to the custom snap line",id:"_adding_custom_snap_lines-484-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_custom_snapline_1.8204710e.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/customizing_interaction_custom_snapline_2.5ff88dd0.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_lines-484-simpara-002",content:"Note that the snap line appears only if you move a graph element close to it. The following snippet illustrates how to\nalways display the snap line."},{tagname:"example",id:"_adding_custom_snap_lines-484-example-002",title:"Painting the snap line",content:"<pre class=\"programlisting javascript\" id=\"_adding_custom_snap_lines-484-programlisting-002\" language=\"javascript\" format=\"linespecific\"><code>function paintSnapLine(start, end) {\r\n  let lineElement = document.createElementNS('http://www.w3.org/2000/svg', 'line')\r\n  lineElement.setAttribute('x1', start.x)\r\n  lineElement.setAttribute('y1', start.y)\r\n  lineElement.setAttribute('x2', end.x)\r\n  lineElement.setAttribute('y2', end.y)\r\n  lineElement.setAttribute('stroke', 'black')\r\n\r\n  graphComponent.backgroundGroup.addChild(\r\n    new yfiles.view.SvgVisual(lineElement),\r\n    yfiles.view.ICanvasObjectDescriptor.VISUAL\r\n  )\r\n}\n</code></pre>"},{tagname:"figure","class":"image",title:"Painting the snap line",id:"_adding_custom_snap_lines-484-figure-002","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_paint_snapline_1.99fc6870.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/customizing_interaction_paint_snapline_2.8201deea.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_lines-484-simpara-003",content:'Each graph item provides a default set of snap lines. A node, for example,\nprovides snap lines at its borders and its center.\nYou can change this behavior by\n<api-link id="_adding_custom_snap_lines-484-api-link-005" data-member="snapLineProviderDecorator" data-text="decorating" data-type="yfiles.graph.NodeDecorator"></api-link> the default\n<api-link id="_adding_custom_snap_lines-484-api-link-006" data-member="" data-text="snap line provider" data-type="yfiles.input.NodeSnapLineProvider"></api-link>.\nThe following example shows how to add an additional snap line 10 pixels above the top border of each node.'},{tagname:"example",id:"_adding_custom_snap_lines-484-example-003",title:"Adding snap lines to nodes",content:'<pre class="programlisting javascript" id="_adding_custom_snap_lines-484-programlisting-003" language="javascript" format="linespecific"><code>let nodeDecorator = graphComponent.graph.decorator.nodeDecorator\r\n\r\nnodeDecorator.snapLineProviderDecorator.setImplementationWrapper(\r\n  (node, wrapped) =>\r\n    new yfiles.input.ISnapLineProvider((context, args, item) => {\r\n      // add default snap lines\r\n      wrapped.addSnapLines(context, args, item)\r\n      // add a snap lines 10 pixels above the top border of a node\r\n      if (yfiles.graph.INode.isInstance(item)) {\r\n        let layout = item.layout.toRect()\r\n        // calculate the center of the snap line\r\n        let center = new yfiles.geometry.Point(layout.x + layout.width / 2, layout.y - 10)\r\n        let snapLine = new yfiles.input.OrthogonalSnapLine(\r\n          yfiles.input.SnapLineOrientation.HORIZONTAL,\r\n          yfiles.input.SnapLineSnapTypes.BOTTOM,\r\n          yfiles.input.SnapLine.SNAP_LINE_FIXED_LINE_KEY,\r\n          center,\r\n          layout.x - 50,\r\n          layout.maxX + 50,\r\n          node,\r\n          100\r\n        )\r\n        args.addAdditionalSnapLine(snapLine)\r\n      }\r\n    })\r\n)\n</code></pre>'},{tagname:"figure","class":"image",title:"Additional snap line of a node",id:"_adding_custom_snap_lines-484-figure-003","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_custom_node_snapline_1.69cf656c.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/customizing_interaction_custom_node_snapline_2.d10aca8a.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_lines-484-simpara-004",content:'<span class="api">GraphSnapContext</span> provides a number of properties\nwhich determine for which objects snap lines should be collected.'},{tagname:"table","class":"",id:"_adding_custom_snap_lines-484-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_adding_custom_snap_lines-484-thead-001"><tr id="_adding_custom_snap_lines-484-row-001"><th id="_adding_custom_snap_lines-484-entry-001" align="left" valign="top">\nProperty\n</th><th id="_adding_custom_snap_lines-484-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="_adding_custom_snap_lines-484-tbody-001"><tr id="_adding_custom_snap_lines-484-row-002"><td id="_adding_custom_snap_lines-484-entry-003" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-005"><api-link id="_adding_custom_snap_lines-484-api-link-007" data-member="collectEdgeSnapLines" data-text="collectEdgeSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-004" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-006">Whether to provide snap lines for orthogonal edge segments.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-003"><td id="_adding_custom_snap_lines-484-entry-005" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-007"><api-link id="_adding_custom_snap_lines-484-api-link-008" data-member="collectNodeSizes" data-text="collectNodeSizes" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-006" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-008">Whether to provide snap lines for sizes of fixed nodes.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-004"><td id="_adding_custom_snap_lines-484-entry-007" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-009"><api-link id="_adding_custom_snap_lines-484-api-link-009" data-member="collectNodeSnapLines" data-text="collectNodeSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-008" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-010">Whether to provide snap lines for fixed nodes\n  (parallel to borders, at border, at center).</para></td></tr><tr id="_adding_custom_snap_lines-484-row-005"><td id="_adding_custom_snap_lines-484-entry-009" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-011"><api-link id="_adding_custom_snap_lines-484-api-link-010" data-member="collectPortSnapLines" data-text="collectPortSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-010" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-012">Whether to provide snap lines for ports\n  (orthogonal snap lines at the port’s x and y coordinates).</para></td></tr><tr id="_adding_custom_snap_lines-484-row-006"><td id="_adding_custom_snap_lines-484-entry-011" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-013"><api-link id="_adding_custom_snap_lines-484-api-link-011" data-member="collectNodePairCenterSnapLines" data-text="collectNodePairCenterSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-012" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-014">Whether to provide snap lines for equal distances between two nodes\n  to which moved nodes will snap.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-007"><td id="_adding_custom_snap_lines-484-entry-013" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-015"><api-link id="_adding_custom_snap_lines-484-api-link-012" data-member="collectNodePairSegmentSnapLines" data-text="collectNodePairSegmentSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-014" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-016">Whether to provide snap lines for equal distances between two nodes\n  to which moved orthogonal edge segments will snap.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-008"><td id="_adding_custom_snap_lines-484-entry-015" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-017"><api-link id="_adding_custom_snap_lines-484-api-link-013" data-member="nodeToNodeDistance" data-text="nodeToNodeDistance" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-016" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-018">Defines the distance to a fixed node’s border\n  for snap lines to which moved nodes can snap.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-009"><td id="_adding_custom_snap_lines-484-entry-017" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-019"><api-link id="_adding_custom_snap_lines-484-api-link-014" data-member="nodeToEdgeDistance" data-text="nodeToEdgeDistance" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-018" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-020">Defines the distance to an orthogonal edge segment\n  for snap lines to which moved nodes can snap.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-010"><td id="_adding_custom_snap_lines-484-entry-019" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-021"><api-link id="_adding_custom_snap_lines-484-api-link-015" data-member="edgeToEdgeDistance" data-text="edgeToEdgeDistance" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-020" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-022">Defines the distance to an orthogonal edge segment\n  for snap lines to which moved orthogonal edge segments.</para></td></tr><tr id="_adding_custom_snap_lines-484-row-011"><td id="_adding_custom_snap_lines-484-entry-021" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-023"><api-link id="_adding_custom_snap_lines-484-api-link-016" data-member="cropSnapLines" data-text="cropSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_lines-484-entry-022" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_lines-484-simpara-024">Whether to crop snap lines at obstacles.</para></td></tr></tbody>'}]},{tagname:"section",id:"_adding_custom_snap_results",title:"Adding Custom Snap Results",children:[{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_results-485-simpara-001",content:'In the same way you can modify the set of <api-link id="_adding_custom_snap_results-485-api-link-001" data-member="" data-text="SnapResult" data-type="yfiles.input.SnapResult"></api-link>s collected during the move or edit operation.\nGrid snapping, for example, provides the center of a node as result to snap to the grid. In the next example we additionally specify\nthe top left corner of the node as snap result.'},{tagname:"example",id:"_adding_custom_snap_results-485-example-001",title:"Adding grid snap results to nodes",content:'<pre class="programlisting javascript" id="_adding_custom_snap_results-485-programlisting-001" language="javascript" format="linespecific"><code>let nodeDecorator = graphComponent.graph.decorator.nodeDecorator\r\n\r\nclass CustomNodeSnapResultProvider extends yfiles.input.NodeSnapResultProvider {\r\n  collectGridSnapResults(context, args, suggestedLayout, node) {\r\n    // add the default grid snap results (center of the node)\r\n    super.collectGridSnapResults(context, args, suggestedLayout, node)\r\n    // add the top left corner of the node as grid snap result\r\n    this.addGridSnapResult(context, args, suggestedLayout.topLeft, node)\r\n  }\r\n}\r\n\r\nnodeDecorator.nodeSnapResultProviderDecorator.setImplementation(\r\n  new CustomNodeSnapResultProvider()\r\n)\n</code></pre>'},{tagname:"figure","class":"image",title:"Additional snap result of a node",id:"_adding_custom_snap_results-485-figure-001","float":0,children:[{tagname:"img",src:"assets/customizing_interaction_custom_grid_snap_result_1.7ccda0d7.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/customizing_interaction_custom_grid_snap_result_2.2fe52a43.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_results-485-simpara-002",content:'<span class="api">GraphSnapContext</span> provides a number of properties\nto determine which moved object should snap to a specific kind of snap lines,\ni.e. the actual kind of snap results to collect.'},{tagname:"table","class":"",id:"_adding_custom_snap_results-485-informaltable-001",colsep:1,frame:"all",rowsep:1,content:'<colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_adding_custom_snap_results-485-thead-001"><tr id="_adding_custom_snap_results-485-row-001"><th id="_adding_custom_snap_results-485-entry-001" align="left" valign="top">\nProperty\n</th><th id="_adding_custom_snap_results-485-entry-002" align="left" valign="top">\nCollect snap results for\n</th></tr></thead><tbody id="_adding_custom_snap_results-485-tbody-001"><tr id="_adding_custom_snap_results-485-row-002"><td id="_adding_custom_snap_results-485-entry-003" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-003"><api-link id="_adding_custom_snap_results-485-api-link-002" data-member="snapNodesToSnapLines" data-text="snapNodesToSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-004" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-004">nodes</para></td></tr><tr id="_adding_custom_snap_results-485-row-003"><td id="_adding_custom_snap_results-485-entry-005" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-005"><api-link id="_adding_custom_snap_results-485-api-link-003" data-member="snapSegmentsToSnapLines" data-text="snapSegmentsToSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-006" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-006">orthogonal edge segments</para></td></tr><tr id="_adding_custom_snap_results-485-row-004"><td id="_adding_custom_snap_results-485-entry-007" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-007"><api-link id="_adding_custom_snap_results-485-api-link-004" data-member="snapBendsToSnapLines" data-text="snapBendsToSnapLines" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-008" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-008">bends</para></td></tr><tr id="_adding_custom_snap_results-485-row-005"><td id="_adding_custom_snap_results-485-entry-009" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-009"><api-link id="_adding_custom_snap_results-485-api-link-005" data-member="snapBendAdjacentSegments" data-text="snapBendAdjacentSegments" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-010" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-010">bends, in a way that the two adjacent segments will become\n  horizontally or vertically oriented</para></td></tr><tr id="_adding_custom_snap_results-485-row-006"><td id="_adding_custom_snap_results-485-entry-011" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-011"><api-link id="_adding_custom_snap_results-485-api-link-006" data-member="snapPortAdjacentSegments" data-text="snapPortAdjacentSegments" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-012" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-012">nodes, in a way that the first and last segments\n  of adjacent edges will become\n  horizontally or vertically oriented</para></td></tr><tr id="_adding_custom_snap_results-485-row-007"><td id="_adding_custom_snap_results-485-entry-013" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-013"><api-link id="_adding_custom_snap_results-485-api-link-007" data-member="snapOrthogonalMovement" data-text="snapOrthogonalMovement" data-type="yfiles.input.GraphSnapContext"></api-link></para></td><td id="_adding_custom_snap_results-485-entry-014" align="left" valign="top"><para class="dguide-para" id="_adding_custom_snap_results-485-simpara-014">all moved objects, in a way the movement becomes constrained to one axis</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_adding_custom_snap_results-485-simpara-015",content:'The source code of the <a href="..\\..\\demos\\input\\customsnapping\\index.html" target="blank" class="demo-link" title="Shows how the snapping feature can be customized.">Custom Snapping</a> demo\nshows how to customize snapping behavior and how to add custom snap lines.'}]}]},{tagname:"section",id:"customizing_interaction_orthogonal_edges",xreflabel:"Customizing Orthogonal Edge Editing",title:"Orthogonal Edge Editing",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-001",content:'As described in the section <a href="#/dguide/interaction-orthogonal_edge_editing">Orthogonal Edge Editing</a>,\nthe orthogonal edge editing feature is disabled by default. You need to\nenable it first by setting an instance\nof <api-link id="customizing_interaction_orthogonal_edges-486-api-link-001" data-member="" data-text="OrthogonalEdgeEditingContext" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link> to\n<span class="api">GraphEditorInputMode</span>’s <api-link id="customizing_interaction_orthogonal_edges-486-api-link-002" data-member="orthogonalEdgeEditingContext" data-text="orthogonalEdgeEditingContext" data-type="yfiles.input.GraphEditorInputMode"></api-link> property as demonstrated in\n<a href="#/dguide/interaction_ex_enable_OEE">this example</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-002",content:'The default <span class="api">OrthogonalEdgeEditingContext</span> supports orthogonal edge creation as well as orthogonal bend removal\n(i.e. removing bends in a way that the edge stays orthogonal).\nBoth features can be enabled or disabled independently by setting\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-003" data-member="orthogonalEdgeCreation" data-text="CreateEdgeInputMode.orthogonalEdgeCreation" data-type="yfiles.input.CreateEdgeInputMode"></api-link> or\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-004" data-member="orthogonalBendRemoval" data-text="GraphEditorInputMode.orthogonalBendRemoval" data-type="yfiles.input.GraphEditorInputMode"></api-link> to\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-005" data-member="ALWAYS" data-text="OrthogonalEdgeEditingPolicy.ALWAYS" data-type="yfiles.input.OrthogonalEdgeEditingPolicy"></api-link> or\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-006" data-member="NEVER" data-text="NEVER" data-type="yfiles.input.OrthogonalEdgeEditingPolicy"></api-link>, respectively.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-003",content:'The <span class="api">OrthogonalEdgeEditingContext</span> can be disabled temporarily by setting <api-link id="customizing_interaction_orthogonal_edges-486-api-link-007" data-member="enabled" data-text="enabled" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link>\nto false.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-004",content:'The <api-link id="customizing_interaction_orthogonal_edges-486-api-link-008" data-member="movePorts" data-text="movePorts" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link> property determines whether\nthe source port (target port) should move along with the first (last) bend to retain\northogonality of the first (last) edge segment.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-005",content:'<span class="api">OrthogonalEdgeEditingContext</span> dispatches a number of events at the start and end of the edge editing gesture:'},{tagname:"table","class":"",id:"customizing_interaction_orthogonal_edges-486-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Related events</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_interaction_orthogonal_edges-486-thead-001"><tr id="customizing_interaction_orthogonal_edges-486-row-001"><th id="customizing_interaction_orthogonal_edges-486-entry-001" align="left" valign="top">\nEvent\n</th><th id="customizing_interaction_orthogonal_edges-486-entry-002" align="left" valign="top">\nOccurs at…​\n</th></tr></thead><tbody id="customizing_interaction_orthogonal_edges-486-tbody-001"><tr id="customizing_interaction_orthogonal_edges-486-row-002"><td id="customizing_interaction_orthogonal_edges-486-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-006"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-009" data-member="Initializing" data-text="Initializing" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link></para></td><td id="customizing_interaction_orthogonal_edges-486-entry-004" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-007">…​ the start of the edge editing gesture before the context has been initialized.</para></td></tr><tr id="customizing_interaction_orthogonal_edges-486-row-003"><td id="customizing_interaction_orthogonal_edges-486-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-008"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-010" data-member="Initialized" data-text="Initialized" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link></para></td><td id="customizing_interaction_orthogonal_edges-486-entry-006" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-009">…​ the start of the edge editing gesture after the context has been initialized.</para></td></tr><tr id="customizing_interaction_orthogonal_edges-486-row-004"><td id="customizing_interaction_orthogonal_edges-486-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-010"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-011" data-member="CleanedUp" data-text="CleanedUp" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link></para></td><td id="customizing_interaction_orthogonal_edges-486-entry-008" align="left" valign="top"><para class="dguide-para" id="customizing_interaction_orthogonal_edges-486-simpara-011">…​ the end of the edge editing gesture after the context has been cleaned up.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-012",content:'<span class="api">OrthogonalEdgeEditingContext</span> queries the <a href="#/dguide/customizing_concepts_lookup">lookup</a> of each edge for an implementation of\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-012" data-member="" data-text="IOrthogonalEdgeHelper" data-type="yfiles.input.IOrthogonalEdgeHelper"></api-link>.\nThis allows fine-grained control of orthogonal edge editing by\n<a href="#/dguide/customizing_graph-graph_decorator">decorating the lookup</a> of each edge.'},{tagname:"para",content:'<dl id="customizing_interaction_orthogonal_edges-486-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_orthogonal_edges-486-term-001"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-013" data-member="shouldEditOrthogonally(yfiles.input.IInputModeContext,yfiles.graph.IEdge)" data-text="shouldEditOrthogonally(context:&#xA0;IInputModeContext, edge:&#xA0;IEdge):&#xA0;boolean" data-type="yfiles.input.IOrthogonalEdgeHelper"></api-link></dt><dd id="customizing_interaction_orthogonal_edges-486-listitem-001">\n<p id="customizing_interaction_orthogonal_edges-486-simpara-013">Returns whether the given edge should be edited orthogonally.</p>\n</dd>\n<dt id="customizing_interaction_orthogonal_edges-486-term-002"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-014" data-member="getSegmentOrientation(yfiles.input.IInputModeContext,yfiles.graph.IEdge,number)" data-text="getSegmentOrientation(context:&#xA0;IInputModeContext, edge:&#xA0;IEdge, segmentIndex:&#xA0;number):&#xA0;SegmentOrientation" data-type="yfiles.input.IOrthogonalEdgeHelper"></api-link></dt><dd id="customizing_interaction_orthogonal_edges-486-listitem-002">\n<p id="customizing_interaction_orthogonal_edges-486-simpara-014">Returns the orientation of the given edge segment as specified in <api-link id="customizing_interaction_orthogonal_edges-486-api-link-015" data-member="" data-text="SegmentOrientation" data-type="yfiles.input.SegmentOrientation"></api-link>.\nOne of <api-link id="customizing_interaction_orthogonal_edges-486-api-link-016" data-member="HORIZONTAL" data-text="HORIZONTAL" data-type="yfiles.input.SegmentOrientation"></api-link>,\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-017" data-member="VERTICAL" data-text="VERTICAL" data-type="yfiles.input.SegmentOrientation"></api-link>,\nor <api-link id="customizing_interaction_orthogonal_edges-486-api-link-018" data-member="NON_ORTHOGONAL" data-text="NON_ORTHOGONAL" data-type="yfiles.input.SegmentOrientation"></api-link>.\nThe latter can also be returned for segments which should not be edited orthogonally.</p>\n</dd>\n<dt id="customizing_interaction_orthogonal_edges-486-term-003"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-019" data-member="shouldMoveEndImplicitly(yfiles.input.IInputModeContext,yfiles.graph.IEdge,boolean)" data-text="shouldMoveEndImplicitly(context:&#xA0;IInputModeContext, edge:&#xA0;IEdge, sourceEnd:&#xA0;boolean):&#xA0;boolean" data-type="yfiles.input.IOrthogonalEdgeHelper"></api-link></dt><dd id="customizing_interaction_orthogonal_edges-486-listitem-003">\n<p id="customizing_interaction_orthogonal_edges-486-simpara-015">Returns whether this end of the provided edge can be moved in the input mode context. If <code>false</code> the orthogonality\nmight be kept by splitting the first or last segment. Note that this method is only queried if\n<api-link id="customizing_interaction_orthogonal_edges-486-api-link-020" data-member="movePorts" data-text="OrthogonalEdgeEditingContext.movePorts" data-type="yfiles.input.OrthogonalEdgeEditingContext"></api-link> is set to <code>true</code>.</p>\n</dd>\n<dt id="customizing_interaction_orthogonal_edges-486-term-004"><api-link id="customizing_interaction_orthogonal_edges-486-api-link-021" data-member="cleanUpEdge(yfiles.input.IInputModeContext,yfiles.graph.IGraph,yfiles.graph.IEdge)" data-text="cleanUpEdge(context:&#xA0;IInputModeContext, graph:&#xA0;IGraph, edge:&#xA0;IEdge):&#xA0;void" data-type="yfiles.input.IOrthogonalEdgeHelper"></api-link></dt><dd id="customizing_interaction_orthogonal_edges-486-listitem-004">\n<p id="customizing_interaction_orthogonal_edges-486-simpara-016">Called at the end of an editing gesture. Used to remove unused bends and finalize the gesture.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_orthogonal_edges-486-simpara-017",content:'The source code of the <a href="..\\..\\demos\\input\\orthogonaledges\\index.html" target="blank" class="demo-link" title="Shows the customization of orthogonal edge editing.">Orthogonal Edges</a> demo\nshows how to use different <span class="api">IOrthogonalEdgeHelper</span>\nimplementations to customize various aspects of orthogonal edge editing.'}]},{tagname:"section",id:"customizing_interaction_node_reparenting",xreflabel:"Customizing Reparenting Nodes",title:"Reparenting Nodes",children:[{tagname:"para","class":"dguide-para",id:"customizing_interaction_node_reparenting-487-simpara-001",content:'As mentioned in <a href="#/dguide/interaction-grouping">Grouping</a>, nodes can be interactively inserted into a group,\nmoved from one group to another and ungrouped entirely. This process is called <span class="def">node reparenting</span>.\nProgrammatically, this is controlled by an instance of <api-link id="customizing_interaction_node_reparenting-487-api-link-001" data-member="" data-text="IReparentNodeHandler" data-type="yfiles.input.IReparentNodeHandler"></api-link>\nwhich is set on <span class="api">GraphEditorInputMode</span> using the <api-link id="customizing_interaction_node_reparenting-487-api-link-002" data-member="reparentNodeHandler" data-text="reparentNodeHandler" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_node_reparenting-487-simpara-002",content:'You can disable node reparenting completely by setting <api-link id="customizing_interaction_node_reparenting-487-api-link-003" data-member="allowReparentNodes" data-text="GraphEditorInputMode.allowReparentNodes" data-type="yfiles.input.GraphEditorInputMode"></api-link> to <code>false</code>.'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_node_reparenting-487-simpara-003",content:'The <api-link id="customizing_interaction_node_reparenting-487-api-link-004" data-member="" data-text="IReparentNodeHandler" data-type="yfiles.input.IReparentNodeHandler"></api-link> interface defines methods that determine if a gesture should\nbe interpreted as a reparenting gesture, if an item can be reparented, if a certain parent is a valid target\nfor a node that is being reparented, and a method that actually performs the reparenting. Here is a detailed description:'},{tagname:"para",content:'<dl id="customizing_interaction_node_reparenting-487-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_interaction_node_reparenting-487-term-001"><api-link id="customizing_interaction_node_reparenting-487-api-link-005" data-member="isReparentGesture(yfiles.input.IInputModeContext,yfiles.graph.INode)" data-text="isReparentGesture(context:&#xA0;IInputModeContext, node:&#xA0;INode):&#xA0;boolean" data-type="yfiles.input.IReparentNodeHandler"></api-link></dt><dd id="customizing_interaction_node_reparenting-487-listitem-001">\n<p id="customizing_interaction_node_reparenting-487-simpara-004">Whether the current gesture is a reparent gesture. The current gesture can be determined from the context.</p>\n</dd>\n<dt id="customizing_interaction_node_reparenting-487-term-002"><api-link id="customizing_interaction_node_reparenting-487-api-link-006" data-member="shouldReparent(yfiles.input.IInputModeContext,yfiles.graph.INode)" data-text="shouldReparent(context:&#xA0;IInputModeContext, node:&#xA0;INode):&#xA0;boolean" data-type="yfiles.input.IReparentNodeHandler"></api-link></dt><dd id="customizing_interaction_node_reparenting-487-listitem-002">\n<p id="customizing_interaction_node_reparenting-487-simpara-005">Whether the parent of the current node can be changed.</p>\n</dd>\n<dt id="customizing_interaction_node_reparenting-487-term-003"><api-link id="customizing_interaction_node_reparenting-487-api-link-007" data-member="isValidParent(yfiles.input.IInputModeContext,yfiles.graph.INode,yfiles.graph.INode)" data-text="isValidParent(context:&#xA0;IInputModeContext, node:&#xA0;INode, newParent:&#xA0;INode):&#xA0;boolean" data-type="yfiles.input.IReparentNodeHandler"></api-link></dt><dd id="customizing_interaction_node_reparenting-487-listitem-003">\n<p id="customizing_interaction_node_reparenting-487-simpara-006">Whether the node’s parent can be changed to <code>newParent</code>.</p>\n</dd>\n<dt id="customizing_interaction_node_reparenting-487-term-004"><api-link id="customizing_interaction_node_reparenting-487-api-link-008" data-member="reparent(yfiles.input.IInputModeContext,yfiles.graph.INode,yfiles.graph.INode)" data-text="reparent(context:&#xA0;IInputModeContext, node:&#xA0;INode, newParent:&#xA0;INode):&#xA0;void" data-type="yfiles.input.IReparentNodeHandler"></api-link></dt><dd id="customizing_interaction_node_reparenting-487-listitem-004">\n<p id="customizing_interaction_node_reparenting-487-simpara-007">Called after the gesture has been finished to perform the actual change of the parent.\nShould be implemented to set <code>newParent</code> as the new parent of the <code>node</code>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_node_reparenting-487-simpara-008",content:'For your convenience, the default implementation of the <span class="api">IReparentNodeHandler</span> interface is\n<api-link id="customizing_interaction_node_reparenting-487-api-link-009" data-member="" data-text="ReparentNodeHandler" data-type="yfiles.input.ReparentNodeHandler"></api-link> which implements the interface trivially by allowing\nall nodes to be reparented. You can use this implementation as a base for your own implementation if desired.\nFor the implementation of <api-link id="customizing_interaction_node_reparenting-487-api-link-010" data-member="isReparentGesture(yfiles.input.IInputModeContext,yfiles.graph.INode)" data-text="isReparentGesture" data-type="yfiles.input.IReparentNodeHandler"></api-link>\nit uses an function that accepts key events as reparent gesture where the <kbd>Shift</kbd> modifier key is pressed.\nIf you only want to change the gesture of the default behavior, simply set the <api-link id="customizing_interaction_node_reparenting-487-api-link-011" data-member="reparentRecognizer" data-text="ReparentNodeHandler.reparentRecognizer" data-type="yfiles.input.ReparentNodeHandler"></api-link>\nof the default <api-link id="customizing_interaction_node_reparenting-487-api-link-012" data-member="reparentNodeHandler" data-text="reparentNodeHandler" data-type="yfiles.input.GraphEditorInputMode"></api-link> to something else.'},{tagname:"example",id:"customizing_interaction_node_reparenting-487-example-001",title:"A custom IReparentNodeHandler which uses labels to determined valid reparenting targets",content:'<pre class="programlisting javascript" id="customizing_interaction_node_reparenting-487-programlisting-001" language="javascript" format="linespecific"><code>// Custom IReparentNodeHandler which extends the default implementation\r\nclass CustomReparentNodeHandler extends yfiles.input.ReparentNodeHandler {\r\n  // Whether the current gesture is a reparent gesture\r\n  isReparentGesture(context, node) {\r\n    // either the default gesture\r\n    // or the node has the label "always"\r\n    return (\r\n      super.isReparentGesture(context, node) ||\r\n      (node.labels.size > 0 && \'always\' === node.labels.get(0).text)\r\n    )\r\n  }\r\n\r\n  shouldReparent(context, node) {\r\n    // all nodes which do not have the label "never" can be reparented\r\n    return node.labels.size === 0 || \'never\' !== node.labels.get(0).text\r\n  }\r\n\r\n  // forbid reparenting nodes to nodes which have the same label\r\n  isValidParent(context, node, newParent) {\r\n    return (\r\n      node.labels.size === 0 ||\r\n      newParent.labels.size === 0 ||\r\n      !node.labels.get(0).text === newParent.labels.get(0).text\r\n    )\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_interaction_node_reparenting-487-simpara-009",content:'The source code of the <a href="..\\..\\demos\\input\\reparenthandler\\index.html" target="blank" class="demo-link" title="Shows how reparenting of nodes can be customized.">Reparent Handler</a> demo\nshows how to extend <span class="api">IReparentNodeHandler</span>’s\ndefault implementation <api-link id="customizing_interaction_node_reparenting-487-api-link-013" data-member="" data-text="ReparentNodeHandler" data-type="yfiles.input.ReparentNodeHandler"></api-link>\nto customize node reparenting.'}]}]},{tagname:"section",id:"customizing_styles",title:"Customizing Styles",children:[{tagname:"para","class":"dguide-para",id:"customizing_styles-016-simpara-001",content:"Building custom visualizations for elements is a common requirement when implementing\nan application that uses yFiles for HTML. We will show how you can create your own\nvisualization, from simple use-cases to more advanced ones. This chapter is\naccompanying our custom style tutorial demo code, found in the yFiles for HTML package."},{tagname:"section",id:"custom-styles_basic",title:"Basic Style Implementation",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_basic-488-simpara-001",content:'The easiest and quickest way to create a custom visualization is to use one of\nyFiles for HTML’s convenience base classes. Each style interface has one of those\nconvenience classes. For example, for nodes and their <api-link id="custom-styles_basic-488-api-link-001" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link> interface,\nthere is the abstract class <api-link id="custom-styles_basic-488-api-link-002" data-member="" data-text="NodeStyleBase" data-type="yfiles.styles.NodeStyleBase"></api-link>, which only has one\nabstract method: <api-link id="custom-styles_basic-488-api-link-003" data-member="createVisual(yfiles.view.IRenderContext,yfiles.graph.INode)" data-text="createVisual" data-type="yfiles.styles.NodeStyleBase"></api-link>.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic-488-simpara-002",content:'Of course there are also similar abstract classes for edge, label, and port styles\n(namely <api-link id="custom-styles_basic-488-api-link-004" data-member="" data-text="EdgeStyleBase" data-type="yfiles.styles.EdgeStyleBase"></api-link>,\n<api-link id="custom-styles_basic-488-api-link-005" data-member="" data-text="LabelStyleBase" data-type="yfiles.styles.LabelStyleBase"></api-link>, and\n<api-link id="custom-styles_basic-488-api-link-006" data-member="" data-text="PortStyleBase" data-type="yfiles.styles.PortStyleBase"></api-link>),\nbut for simplicity’s sake we will use <span class="api">NodeStyleBase</span> as the\nexample for this chapter. Keep in mind that each subsection also applies\nto the other implementations as well.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic-488-simpara-003",content:'The <span class="api">createVisual</span> method has to be implemented to return an object of type <api-link id="custom-styles_basic-488-api-link-007" data-member="" data-text="Visual" data-type="yfiles.view.Visual"></api-link>.\nSince the framework expects this method to create a new object, it is called only when really necessary,\ne.g. when an item is displayed for the first time.\nThe section <a href="#/dguide/custom-styles_basic_ivisual_predefined">Predefined Visuals</a> teaches you how to use one\nof the predefined <span class="api">Visual</span> implementations and the section <a href="#/dguide/custom-styles_basic_ivisual_custom">Implementing an Visual</a>\nexplains how to create your own\nto return it from this method.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic-488-simpara-004",content:'By extending the abstract class <span class="api">NodeStyleBase</span> and implementing\n<span class="api">createVisual</span> you already get a working style implementation,\nready to use. It isn’t necessarily fast, however. Of course,\nthere are techniques and common practices that vastly enhance the performance,\nwhich we will talk about in the subsequent section\n<a href="#/dguide/custom-styles_basic_efficient-styles">Efficient Style Implementation</a>.'},{tagname:"section",id:"custom-styles_basic_ivisual_predefined",title:"Predefined Visuals",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_basic_ivisual_predefined-489-simpara-001",content:'<span class="api">Visual</span> is the interface for the low-level entities in yFiles for HTML that actually\nvisualize data by drawing on HTML5’s graphics context. The\n<api-link id="custom-styles_basic_ivisual_predefined-489-api-link-001" data-member="createVisual(yfiles.view.IRenderContext,yfiles.graph.INode)" data-text="createVisual" data-type="yfiles.styles.NodeStyleBase"></api-link> method is always called for one item at a time, which means\nthat there is a 1:1 relationship between items and <span class="api">Visual</span>s.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_ivisual_predefined-489-simpara-002",content:'There are some predefined <span class="api">Visual</span> implementations provided by yFiles for HTML that you can directly use.'},{tagname:"para",content:'<dl id="custom-styles_basic_ivisual_predefined-489-variablelist-001"><dt id="custom-styles_basic_ivisual_predefined-489-term-001"><api-link id="custom-styles_basic_ivisual_predefined-489-api-link-002" data-member="" data-text="SvgVisual" data-type="yfiles.view.SvgVisual"></api-link></dt><dd id="custom-styles_basic_ivisual_predefined-489-listitem-001"><p id="custom-styles_basic_ivisual_predefined-489-simpara-003">Wraps an SVGElement as <span class="api">Visual</span>.</p></dd><dt id="custom-styles_basic_ivisual_predefined-489-term-002"><api-link id="custom-styles_basic_ivisual_predefined-489-api-link-003" data-member="" data-text="SvgVisualGroup" data-type="yfiles.view.SvgVisualGroup"></api-link></dt><dd id="custom-styles_basic_ivisual_predefined-489-listitem-002"><p id="custom-styles_basic_ivisual_predefined-489-simpara-004">Groups multiple <span class="api">Visual</span>s together in one <span class="api">Visual</span>. <span class="api">Visual</span>s can be\n<api-link id="custom-styles_basic_ivisual_predefined-489-api-link-004" data-member="add(yfiles.view.SvgVisual)" data-text="added" data-type="yfiles.view.SvgVisualGroup"></api-link>\nor <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-005" data-member="remove(yfiles.view.SvgVisual)" data-text="removed" data-type="yfiles.view.SvgVisualGroup"></api-link>.\nAdditionally, it has a <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-006" data-member="transform" data-text="transform" data-type="yfiles.view.SvgVisualGroup"></api-link>\nproperty that is applied to the group and therefore to all of its children.</p></dd><dt id="custom-styles_basic_ivisual_predefined-489-term-003"><api-link id="custom-styles_basic_ivisual_predefined-489-api-link-007" data-member="" data-text="HtmlCanvasVisual" data-type="yfiles.view.HtmlCanvasVisual"></api-link></dt><dd id="custom-styles_basic_ivisual_predefined-489-listitem-003"><p id="custom-styles_basic_ivisual_predefined-489-simpara-005">Base class for <span class="api">Visual</span>s that use HTML5’s canvas for the visualization. The visualization\nis implemented by method <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-008" data-member="paint(yfiles.view.IRenderContext,CanvasRenderingContext2D)" data-text="paint" data-type="yfiles.view.HtmlCanvasVisual"></api-link>.\nIn contrast to the <span class="api">SvgVisual</span> this kind of visual can not be used in a <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-009" data-member="" data-text="SvgVisualGroup" data-type="yfiles.view.SvgVisualGroup"></api-link>.\nSee also section <a href="#/dguide/html_canvas">Canvas Rendering</a>.</p></dd><dt id="custom-styles_basic_ivisual_predefined-489-term-004"><api-link id="custom-styles_basic_ivisual_predefined-489-api-link-010" data-member="" data-text="WebGLVisual" data-type="yfiles.view.WebGLVisual"></api-link></dt><dd id="custom-styles_basic_ivisual_predefined-489-listitem-004"><p id="custom-styles_basic_ivisual_predefined-489-simpara-006">Base class for <span class="api">Visual</span>s that draw to an HTML5 canvas using WebGL for the visualization. The visualization\nis implemented by method <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-011" data-member="render(yfiles.view.IRenderContext,WebGLRenderingContext)" data-text="render" data-type="yfiles.view.WebGLVisual"></api-link>.\nIn contrast to the <span class="api">SvgVisual</span> this kind of visual can not be used in a <api-link id="custom-styles_basic_ivisual_predefined-489-api-link-012" data-member="" data-text="SvgVisualGroup" data-type="yfiles.view.SvgVisualGroup"></api-link>.\nSee also section <a href="#/dguide/webgl">WebGL Rendering</a>.</p></dd></dl>'}]},{tagname:"section",id:"custom-styles_basic_ivisual_custom",title:"Implementing an Visual",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_basic_ivisual_custom-490-simpara-001",content:'The <span class="api">SvgVisual</span> merely serves as a container for the SVG element.\nThe actual drawing can be implemented in the <span class="api">createVisual</span>\nmethod where the <span class="api">Visual</span> is created. Contextual\ninformation needed for drawing (like the bounds to draw in,\nor the item to visualize) is available in this method.'}]},{tagname:"section",id:"custom-styles_basic_efficient-styles",title:"Efficient Style Implementation",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_basic_efficient-styles-491-simpara-001",content:"In most cases, the performance of your custom visualization can\nbe vastly improved with just a few easy steps."},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_efficient-styles-491-simpara-002",content:'It is not necessary to create a new <span class="api">Visual</span> each time the\nrendering process decides to update the visible area. In fact,\nyFiles for HTML’s rendering engine doesn’t throw away the <span class="api">Visual</span>\nthat was used for the previous rendering step, but asks the\nstyle implementation for an <strong id="custom-styles_basic_efficient-styles-491-emphasis-001" class="bold" role="bold">update of the <span class="api">Visual</span></strong>, given\nthe new contextual information (e.g. changed location\nor size of the item to visualize). By that it gives the chance\nto reuse the <span class="api">Visual</span> object and makes it a container for\nthe logic to draw the information on the canvas.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_efficient-styles-491-simpara-003",content:'For this, the <api-link id="custom-styles_basic_efficient-styles-491-api-link-001" data-member="updateVisual(yfiles.view.IRenderContext,yfiles.view.Visual,yfiles.graph.INode)" data-text="updateVisual" data-type="yfiles.styles.NodeStyleBase"></api-link> method is called\nwhen an update is queried for the canvas. This method is passed the context\nof the rendering process as well as the old <span class="api">Visual</span> that was\npreviously used to visualize the given item.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_efficient-styles-491-simpara-004",content:'With overriding <span class="api">updateVisual</span> and updating the old\n<span class="api">Visual</span> with the new information (such as location and size\nof the item to visualize), you avoid unnecessarily re-creating\nobjects on every drawn frame. It is therefore highly recommended to implement the\n<span class="api">updateVisual</span> method when implementing custom styles.'},{tagname:"example",id:"custom-styles_basic_efficient-styles-491-example-001",title:"Simple updateVisual override",content:'<pre class="programlisting javascript" id="custom-styles_basic_efficient-styles-491-programlisting-001" language="javascript" format="linespecific"><code>updateVisual(context, oldVisual, node) {\r\n  // if the old visual cannot be updated: create a new visual from scratch\r\n  if (needsToBeRebuilt(oldVisual)) {\r\n    return createVisual(context, node)\r\n  }\r\n  // update the visual by updating the layout\r\n  oldVisual.element.setAttribute("transform", "translate(" + node.layout.x + " " + node.layout.y + ")")\r\n  // return the original visual\r\n  return oldVisual\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_efficient-styles-491-simpara-005",content:'Additionally, you can <strong id="custom-styles_basic_efficient-styles-491-emphasis-002" class="bold" role="bold">share</strong> information that is needed to\nvisualize items with the same style <strong id="custom-styles_basic_efficient-styles-491-emphasis-003" class="bold" role="bold">between multiple instances\nof <span class="api">Visual</span></strong>. This can be done by storing the information in\nthe style instance itself and updating the <span class="api">Visual</span>s in each\nupdate pass accordingly. This way you can bypass costly\nloading of resources or allocation of objects in your\n<span class="api">createVisual</span> or <span class="api">updateVisual</span> methods that\nare potentially called very often in an application’s life\ncycle.'}]},{tagname:"section",id:"custom-styles_basic_decorating-styles",title:"Decorating Styles",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-001",content:"It is possible to decorate existing styles with another style.\nThis way, you can extend an existing visualization without having to\nsubclass the other class."},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-002",content:'The important thing to know is that <strong id="custom-styles_basic_decorating-styles-492-emphasis-001" class="bold" role="bold">in your own</strong>  <span class="api">createVisual</span>\nmethod you can easily call <strong id="custom-styles_basic_decorating-styles-492-emphasis-002" class="bold" role="bold">the wrapped style’s</strong>  <span class="api">createVisual</span>\nmethod to obtain the visualization of the inner style for that element.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-003",content:'For this, you need to obtain the renderer from the wrapped style\n(using its <api-link id="custom-styles_basic_decorating-styles-492-api-link-001" data-member="renderer" data-text="renderer" data-type="yfiles.styles.INodeStyle"></api-link> property), and\nretrieve the <span class="api">IVisualCreator</span> from the renderer via\n<api-link id="custom-styles_basic_decorating-styles-492-api-link-002" data-member="getVisualCreator(yfiles.graph.INode,yfiles.styles.INodeStyle)" data-text="getVisualCreator" data-type="yfiles.styles.INodeStyleRenderer"></api-link>.'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-004",content:'Since the call is rather complicated, here’s a demonstration of how to obtain\nthe wrapped style’s <span class="api">Visual</span>:'},{tagname:"example",id:"ex_custom-styles_basic_decorating-styles-cv",title:"How to obtain the visualization of a decorated style",content:'<pre class="programlisting javascript" id="custom-styles_basic_decorating-styles-492-programlisting-001" language="javascript" format="linespecific"><code>const visual = wrappedStyle.renderer.getVisualCreator(item, wrappedStyle).createVisual(context)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-005",content:'Accordingly, in your implementation of <span class="api">updateVisual</span>,\nyou should let the <span class="api">IVisualCreator</span> of the wrapped style\n<strong id="custom-styles_basic_decorating-styles-492-emphasis-003" class="bold" role="bold">update</strong> the visualization that was also created from it:'},{tagname:"example",id:"ex_custom-styles_basic_decorating-styles-uv",title:"How to update the visualization of a decorated style",content:'<pre class="programlisting javascript" id="custom-styles_basic_decorating-styles-492-programlisting-002" language="javascript" format="linespecific"><code>const updatedVisual = wrappedStyle.renderer.getVisualCreator(item, wrappedStyle).updateVisual(context, oldVisual)\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"custom-styles_basic_decorating-styles-492-important-001",content:'<p id="custom-styles_basic_decorating-styles-492-simpara-006">The decorated style’s <span class="api">updateVisual</span> method might return a different instance.\nThis means that if you stored the old visual somewhere (cf. example below), you may have to replace that\nstored instance after calling <span class="api">updateVisual</span> on the wrapped style.</p>'},{tagname:"para","class":"dguide-para",id:"custom-styles_basic_decorating-styles-492-simpara-007",content:'It is common that decorators combine style visualizations by using a <api-link id="custom-styles_basic_decorating-styles-492-api-link-003" data-member="" data-text="SvgVisualGroup" data-type="yfiles.view.SvgVisualGroup"></api-link>.\nIn these cases it is important for the <span class="api">updateVisual</span> method to pass <span class="api">Visual</span>s to the correct\nstyle’s <span class="api">updateVisual</span> method. Also, if the <span class="api">updateVisual</span> methods of the decorated styles\nreturn new instances, they have to be exchanged with the old ones on the original group:'},{tagname:"example",id:"custom-styles_basic_decorating-styles-492-informalexample-001",content:'<pre class="programlisting javascript" id="custom-styles_basic_decorating-styles-492-programlisting-003" language="javascript" format="linespecific"><code>createVisual(context, node) {\r\n  const group = new yfiles.view.SvgVisualGroup()\r\n  // add the element to decorate first to the group\r\n  group.add(wrappedStyle.renderer.getVisualCreator(node, wrappedStyle).createVisual(context))\r\n\r\n  // create a decoration and add it as second visual\r\n  const decorationElement = this.createDecorationElement(node)\r\n  group.add(new yfiles.view.SvgVisual(decorationElement))\r\n  return group\r\n}\r\n\r\nupdateVisual(context, oldVisual, node) {\r\n  const group = oldVisual\r\n  if (group.children.size != 2) {\r\n    // something unexpected: rebuild from scratch\r\n    return this.createVisual(context, node)\r\n  }\r\n  // the decorated style\'s visual is the first child\r\n  const oldDecoratedVisual = group.children.get(0)\r\n  // call the update visual method for the decorated style\r\n  const newDecoratedVisual = wrappedStyle.renderer\r\n    .getVisualCreator(node, wrappedStyle).updateVisual(context, oldDecoratedVisual)\r\n  if (newDecoratedVisual !== oldDecoratedVisual) {\r\n    // note that the returned visual might be a new instance:\r\n    // exchange the visual in this case\r\n    group.children.set(0, newDecoratedElement)\r\n  }\r\n\r\n  // update the decoration\r\n  this.updateDecorationElement(node, group.children.get(1).element)\r\n  return oldVisual\r\n}\n</code></pre>'}]}]},{tagname:"section",id:"custom-styles_advanced-functionality",title:"Refining a Style’s Behavior",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_advanced-functionality-493-simpara-001",content:'There are other methods that you can override in <span class="api">NodeStyleBase</span>.\nThese methods wire up the internal logic for the visualizations and are\nactually delegated to from several interfaces.'},{tagname:"para","class":"dguide-para",id:"custom-styles_advanced-functionality-493-simpara-002",content:"The original interfaces of these methods are:"},{tagname:"section",id:"__api_name_text_ihittestable",title:"IHitTestable",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_ihittestable-494-simpara-001",content:'<api-link id="__api_name_text_ihittestable-494-api-link-001" data-member="isHit(yfiles.input.IInputModeContext,yfiles.geometry.Point,yfiles.graph.INode)" data-text="isHit(IInputModeContext, Point, INode)" data-type="yfiles.styles.NodeStyleBase"></api-link>,\ndelegated to from <api-link id="__api_name_text_ihittestable-494-api-link-002" data-member="" data-text="IHitTestable" data-type="yfiles.input.IHitTestable"></api-link>:'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ihittestable-494-simpara-002",content:'Used for detection of hits, for example for mouse clicks, hover,\nor drag and drop. Also, methods that try to check for items at\na certain location, such as\n<span class="api">GraphComponent</span>.<api-link id="__api_name_text_ihittestable-494-api-link-003" data-member="hitElementsAt(yfiles.geometry.Point,yfiles.view.ICanvasObjectGroup,system.Predicate)" data-text="hitElementsAt" data-type="yfiles.view.CanvasComponent"></api-link>,\nrely on the implementation of this interface.'},{tagname:"figure","class":"image",title:"Customizing the hit tests",id:"__api_name_text_ihittestable-494-figure-001","float":0,children:[{tagname:"img",src:"assets/custom-styles_hittest-default.edeaea2d.png",alt:"",title:'<para class="dguide-para">Default: the hand cursor wrongly indicates the node as selectable anywhere within its bounding box</para>'},{tagname:"img",src:"assets/custom-styles_hittest-correct.b712c48a.png",alt:"",title:'<para class="dguide-para">Overridden: the node is not considered as hit outside its elliptical shape</para>'}]},{tagname:"para","class":"dguide-para",id:"__api_name_text_ihittestable-494-simpara-003",content:'The <span class="api">IInputModeContext</span> provides the\n<api-link id="__api_name_text_ihittestable-494-api-link-004" data-member="hitTestRadius" data-text="hitTestRadius" data-type="yfiles.view.ICanvasContext"></api-link> property (which can be set on\n<span class="api">GraphComponent</span>). This is a distance that should be used for fuzzy testing of\nwhether a shape has been hit. It is especially important for things like edge\npaths or points where it can be hard to exactly hit a certain pixel with the\nmouse. The hit test radius is given in view coordinates to ensure it doesn’t\ndepend on the zoom level. The example below takes the hit test radius into account by\npassing it as a parameter to\n<span class="api">GeomUtilities.ellipseContains</span>.'},{tagname:"example",id:"__api_name_text_ihittestable-494-example-001",title:"Considering an elliptical shape in isHit",content:'<pre class="programlisting javascript" id="__api_name_text_ihittestable-494-programlisting-001" language="javascript" format="linespecific"><code>isHit(context, p, node) {\r\n  return yfiles.geometry.GeomUtilities.ellipseContains(node.layout.toRect(), p, context.hitTestRadius / context.zoom)\r\n}\n</code></pre>'}]},{tagname:"section",id:"__api_name_text_imarqueetestable",title:"IMarqueeTestable",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_imarqueetestable-495-simpara-001",content:'<api-link id="__api_name_text_imarqueetestable-495-api-link-001" data-member="isInBox(yfiles.input.IInputModeContext,yfiles.geometry.Rect,yfiles.graph.INode)" data-text="isInBox(IInputModeContext, Rect, INode)" data-type="yfiles.styles.NodeStyleBase"></api-link>,\ndelegated to from <api-link id="__api_name_text_imarqueetestable-495-api-link-002" data-member="" data-text="IMarqueeTestable" data-type="yfiles.input.IMarqueeTestable"></api-link>:'},{tagname:"para","class":"dguide-para",id:"__api_name_text_imarqueetestable-495-simpara-002",content:'Is used to test whether an item is hit by the <a href="#/dguide/interaction-selection-marquee-and-lasso">marquee selection</a> and\nshould therefore be selected. It is at the discretion of the style whether\nintersection with the item’s visualization is enough to select it or whether\nthe marquee selection box must fully encompass the item. All styles included\nwith yFiles for HTML only consider intersection.'},{tagname:"figure","class":"image",title:"Customizing the marquee test",id:"__api_name_text_imarqueetestable-495-figure-001","float":0,children:[{tagname:"img",src:"assets/custom-styles_marquee.7693f359.png",alt:"",title:'<para class="dguide-para">The marquee selection box should have to intersect with the elliptical shape</para>'}]},{tagname:"example",id:"__api_name_text_imarqueetestable-495-example-001",title:"Considering an elliptical shape in the isInBox method",content:'<pre class="programlisting javascript" id="__api_name_text_imarqueetestable-495-programlisting-001" language="javascript" format="linespecific"><code>isInBox(context, box, node) {\r\n  // early exit if not even the bounds are contained in the box\r\n  if (!super.isInBox(context, box, node)) {\r\n    return false\r\n  }\r\n\r\n  const eps = context.hitTestRadius / context.zoom\r\n  const layout = node.layout.toRect()\r\n  const outline = this.getOutline(node)\r\n\r\n  if (outline == null) {\r\n    return box.contains(layout.topLeft) && box.contains(layout.bottomRight)\r\n  }\r\n\r\n  // check if node is inside the given box\r\n  if (box.contains(layout.topLeft) && box.contains(layout.bottomRight)) {\r\n    return true\r\n  }\r\n\r\n  // check if the box is inside the node outline\r\n  if (outline.pathContains(box.topLeft, eps) && outline.pathContains(box.bottomRight, eps)) {\r\n    return true\r\n  }\r\n\r\n  // check if the node\'s outline and the box intersect\r\n  return outline.intersects(box, eps)\r\n}\n</code></pre>'}]},{tagname:"section",id:"__api_name_text_ilassotestable",title:"ILassoTestable",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_ilassotestable-496-simpara-001",content:'<api-link id="__api_name_text_ilassotestable-496-api-link-001" data-member="isInPath(yfiles.input.IInputModeContext,yfiles.geometry.GeneralPath,yfiles.graph.INode)" data-text="isInPath(IInputModeContext, GeneralPath, INode)" data-type="yfiles.styles.NodeStyleBase"></api-link>,\ndelegated to from <api-link id="__api_name_text_ilassotestable-496-api-link-002" data-member="" data-text="ILassoTestable" data-type="yfiles.input.ILassoTestable"></api-link>:'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ilassotestable-496-simpara-002",content:'Is used to test whether an item is hit by the <a href="#/dguide/interaction-selection-marquee-and-lasso">lasso selection</a> and\nshould therefore be selected. It is at the discretion of the style how\nlasso selection works exactly and which parts of an item have to be contained within the lasso path.\nAll styles included with yFiles for HTML consider an item selected when the lasso path and the item’s shape intersect.'},{tagname:"example",id:"__api_name_text_ilassotestable-496-example-001",title:"Changing lasso selection to consider a node selected as soon as its center is contained in the lasso path",content:'<pre class="programlisting javascript" id="__api_name_text_ilassotestable-496-programlisting-001" language="javascript" format="linespecific"><code>isInPath(context, path, node) {\r\n  // Check whether the center of the node is contained in the lasso path\r\n  return path.areaContains(node.layout.center, context.hitTestRadius)\r\n}\n</code></pre>'}]},{tagname:"section",id:"__api_name_text_iboundsprovider",title:"IBoundsProvider",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_iboundsprovider-497-simpara-001",content:'<api-link id="__api_name_text_iboundsprovider-497-api-link-001" data-member="getBounds(yfiles.view.ICanvasContext,yfiles.graph.INode)" data-text="getBounds(ICanvasContext, INode)" data-type="yfiles.styles.NodeStyleBase"></api-link>,\ndelegated to from <api-link id="__api_name_text_iboundsprovider-497-api-link-002" data-member="" data-text="IBoundsProvider" data-type="yfiles.view.IBoundsProvider"></api-link>:'},{tagname:"para","class":"dguide-para",id:"__api_name_text_iboundsprovider-497-simpara-002",content:'In some cases the visualization of an item can exceed the logical\nbounds of the item. Often this happens when an existing style is\ndecorated in some way, for example when a drop shadow is added.\n<span class="api">IBoundsProvider</span> implementations can be queried\nfor the bounding box of the complete visualization of an item.\nThis information is important\nfor functionality related to the viewport, like calculating the bounds\nof a graph when fitting the content, or for showing the scrollbars.\nIt is also a good hint about the required image size when exporting images.'},{tagname:"figure","class":"image",title:"Customizing the bounds provider",id:"__api_name_text_iboundsprovider-497-figure-001","float":0,children:[{tagname:"img",src:"assets/custom-styles_bounds-default.b61fd023.png",alt:"",title:'<para class="dguide-para">Default: the node shadow is ignored and we can’t scroll to see it</para>'},{tagname:"img",src:"assets/custom-styles_bounds-correct.c94b4d91.png",alt:"",title:'<para class="dguide-para">Overridden: the drop shadow is included</para>'}]},{tagname:"example",id:"__api_name_text_iboundsprovider-497-example-001",title:"Including a drop shadow in getBounds",content:'<pre class="programlisting javascript" id="__api_name_text_iboundsprovider-497-programlisting-001" language="javascript" format="linespecific"><code>getBounds(context, node) {\r\n  const bounds = node.layout.toRect()\r\n  // expand bounds to include drop shadow\r\n  return bounds.getEnlarged(new yfiles.geometry.Insets(0, 0, 3, 3))\r\n}\n</code></pre>'}]},{tagname:"section",id:"__api_name_text_ivisibilitytestable",title:"IVisibilityTestable",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_ivisibilitytestable-498-simpara-001",content:'<api-link id="__api_name_text_ivisibilitytestable-498-api-link-001" data-member="isVisible(yfiles.view.ICanvasContext,yfiles.geometry.Rect,yfiles.graph.INode)" data-text="isVisible(ICanvasContext, Rect, INode)" data-type="yfiles.styles.NodeStyleBase"></api-link>,\ndelegated to from <api-link id="__api_name_text_ivisibilitytestable-498-api-link-002" data-member="" data-text="IVisibilityTestable" data-type="yfiles.view.IVisibilityTestable"></api-link>:'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ivisibilitytestable-498-simpara-002",content:'This interface is used to determine if an item is\ncurrently visible in the canvas.\nThe framework doesn’t render objects that are considered invisible — neither <span class="api">createVisual</span> nor <span class="api">updateVisual</span> are\ncalled for the item in that case.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ivisibilitytestable-498-simpara-003",content:'Consequently the visibility check should be faster than calling <span class="api">updateVisual</span>\nand it’s not a big deal to err on the side of caution by returning <code>true</code> for items\nthat <strong id="__api_name_text_ivisibilitytestable-498-emphasis-001" class="bold" role="bold">may</strong> be visible instead of having a more expensive check that is more accurate.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ivisibilitytestable-498-simpara-004",content:'Note that if the visualization extends beyond the item’s usual bounds — like\nmentioned above for <span class="api">IBoundsProvider</span> already — you must take those into account for visibility as well.\nOtherwise items may suddenly disappear although there’s still some part of them\ninside the viewport.\nIt is not unusual to implement <span class="api">IVisibilityTestable</span>\nby delegating to <span class="api">IBoundsProvider</span> and a bounding box check.\nThe following code is actually the default implementation of\n<span class="api">isVisible</span>\nin <span class="api">NodeStyleBase</span>.'},{tagname:"example",id:"__api_name_text_ivisibilitytestable-498-example-001",title:"Delegating the implementation of isVisible to IBoundsProvider",content:'<pre class="programlisting javascript" id="__api_name_text_ivisibilitytestable-498-programlisting-001" language="javascript" format="linespecific"><code>isVisible(context, clip, node) {\r\n  return this.getBounds(context, node).intersects(clip)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ivisibilitytestable-498-simpara-005",content:'The methods above are defined in all abstract style classes\n(mentioned in the section <a href="#/dguide/custom-styles_basic">Basic Style Implementation</a>). But there are also\nspecial methods for nodes and edges that can be overridden\nin <span class="api">NodeStyleBase</span> and\n<span class="api">EdgeStyleBase</span>.\nFor nodes, the methods are delegated to from the\n<api-link id="__api_name_text_ivisibilitytestable-498-api-link-003" data-member="" data-text="IShapeGeometry" data-type="yfiles.styles.IShapeGeometry"></api-link> interface and for\nedges from the <api-link id="__api_name_text_ivisibilitytestable-498-api-link-004" data-member="" data-text="IPathGeometry" data-type="yfiles.styles.IPathGeometry"></api-link> interface.'}]},{tagname:"section",id:"__api_name_text_ishapegeometry",title:"IShapeGeometry",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_ishapegeometry-499-simpara-001",content:'The <api-link id="__api_name_text_ishapegeometry-499-api-link-001" data-member="" data-text="IShapeGeometry" data-type="yfiles.styles.IShapeGeometry"></api-link> interface and its methods\ntell the framework about the geometry of a node’s visualization.\nThis is used to determine the end points of incoming and outgoing\nedges and helps calculating the correct placement for\narrows so that they point exactly to the border of a node’s visualization.\nThis involves the methods\n<api-link id="__api_name_text_ishapegeometry-499-api-link-002" data-member="getIntersection(yfiles.graph.INode,yfiles.geometry.Point,yfiles.geometry.Point)" data-text="getIntersection" data-type="yfiles.styles.NodeStyleBase"></api-link>,\n<api-link id="__api_name_text_ishapegeometry-499-api-link-003" data-member="isInside(yfiles.graph.INode,yfiles.geometry.Point)" data-text="isInside" data-type="yfiles.styles.NodeStyleBase"></api-link>, and\n<api-link id="__api_name_text_ishapegeometry-499-api-link-004" data-member="getOutline(yfiles.graph.INode)" data-text="getOutline" data-type="yfiles.styles.NodeStyleBase"></api-link>.'},{tagname:"figure","class":"image",title:"Customizing the shape geometry",id:"__api_name_text_ishapegeometry-499-figure-001","float":0,children:[{tagname:"img",src:"assets/custom-styles_shape-default.527404c3.png",alt:"",title:'<para class="dguide-para">Default: the edges end at the node’s bounding box</para>'},{tagname:"img",src:"assets/custom-styles_shape-correct.b5afb62c.png",alt:"",title:'<para class="dguide-para">Overridden: the edges end at the node’s actual shape</para>'}]},{tagname:"example",id:"__api_name_text_ishapegeometry-499-example-001",title:"Considering an elliptical node shape in the IShapeGeometry-related methods",content:'<pre class="programlisting javascript" id="__api_name_text_ishapegeometry-499-programlisting-001" language="javascript" format="linespecific"><code>isInside(node, point) {\r\n  return yfiles.geometry.GeomUtilities.ellipseContains(node.layout.toRect(), point, 0)\r\n}\r\n\r\ngetIntersection(node, inner, outer) {\r\n  return yfiles.geometry.GeomUtilities.findEllipseLineIntersection(node.layout.toRect(), inner, outer)\r\n}\r\n\r\ngetOutline(node) {\r\n  const outline = new yfiles.geometry.GeneralPath()\r\n  outline.appendEllipse(node.layout.toRect(), false)\r\n  return outline\r\n}\n</code></pre>'}]},{tagname:"section",id:"__api_name_text_ipathgeometry",title:"IPathGeometry",children:[{tagname:"para","class":"dguide-para",id:"__api_name_text_ipathgeometry-500-simpara-001",content:'The <api-link id="__api_name_text_ipathgeometry-500-api-link-001" data-member="" data-text="IPathGeometry" data-type="yfiles.styles.IPathGeometry"></api-link> interface and its methods\ndescribe the geometry of an edge. This is used for correctly calculating\nthe possible positions for edge labels in edge label models, for\ndrawing an edge’s selection, focus, and highlight decorations, as well as for\nsnapping labels to the edge path. This involves the methods\n<api-link id="__api_name_text_ipathgeometry-500-api-link-002" data-member="getTangent(yfiles.graph.IEdge,number)" data-text="getTangent" data-type="yfiles.styles.EdgeStyleBase"></api-link>,\n<api-link id="__api_name_text_ipathgeometry-500-api-link-003" data-member="getTangent(yfiles.graph.IEdge,number,number)" data-text="getTangent" data-type="yfiles.styles.EdgeStyleBase"></api-link>,\n<api-link id="__api_name_text_ipathgeometry-500-api-link-004" data-member="getPath(yfiles.graph.IEdge)" data-text="getPath" data-type="yfiles.styles.EdgeStyleBase"></api-link>, and\n<api-link id="__api_name_text_ipathgeometry-500-api-link-005" data-member="getSegmentCount(yfiles.graph.IEdge)" data-text="getSegmentCount" data-type="yfiles.styles.EdgeStyleBase"></api-link>.'},{tagname:"para","class":"dguide-para",id:"__api_name_text_ipathgeometry-500-simpara-002",content:"All of the above mentioned interfaces are implemented with reasonable\ndefaults on the abstract style classes that work fine in many cases.\nFor nodes and edges, you won’t need to override the\ndefaults in cases where your visualization has no complex outline\nand in the case where nodes are more or less of rectangular shape."},{tagname:"para","class":"dguide-para tip",id:"__api_name_text_ipathgeometry-500-tip-001",content:'<p id="__api_name_text_ipathgeometry-500-simpara-003">As soon as your visualization becomes more complex and differs\nfrom the default shape, you may want to consider overriding\nsome of these methods to adjust them to your visualization.\nAfter all, the user experience suffers if a node’s visualization extends\nbeyond the node bounds and that part cannot be used to select the node,\nor when the arrow vanishes beneath a node’s visualization or\nstops just short of it.</p>'}]}]},{tagname:"section",id:"custom-styles_style-renderer",title:"Separating Style and Renderer",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-001",content:'<span class="api">NodeStyleBase</span> hides the implementation of multiple\ninterfaces in favor of convenience for the application developer.\nThe only method that you <strong id="custom-styles_style-renderer-501-emphasis-001" class="bold" role="bold">really</strong> need to implement is <api-link id="custom-styles_style-renderer-501-api-link-001" data-member="createVisual(yfiles.view.IRenderContext,yfiles.graph.INode)" data-text="createVisual" data-type="yfiles.styles.NodeStyleBase"></api-link>,\nwhich makes it a convenient starting point when writing your own styles.'},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-002",content:'In yFiles for HTML’s rendering engine, the instances that actually produce the\nvisual representations of an item are of type <api-link id="custom-styles_style-renderer-501-api-link-002" data-member="" data-text="IVisualCreator" data-type="yfiles.view.IVisualCreator"></api-link>.\nIn the graph element visualization process, those <span class="api">IVisualCreator</span> instances\nare returned for a certain object by <span class="def">style renderers</span>.\nThe style interfaces themselves are only responsible to hold a suitable\nrenderer instance. For example, <api-link id="custom-styles_style-renderer-501-api-link-003" data-member="" data-text="INodeStyle" data-type="yfiles.styles.INodeStyle"></api-link> has a\n<api-link id="custom-styles_style-renderer-501-api-link-004" data-member="renderer" data-text="renderer" data-type="yfiles.styles.INodeStyle"></api-link> property that\nreturns an object of type <api-link id="custom-styles_style-renderer-501-api-link-005" data-member="" data-text="INodeStyleRenderer" data-type="yfiles.styles.INodeStyleRenderer"></api-link>. There is a\ncorresponding renderer interface for each style interface in yFiles for HTML\n(<span class="api">INodeStyleRenderer</span> for <span class="api">INodeStyle</span>, <api-link id="custom-styles_style-renderer-501-api-link-006" data-member="" data-text="ILabelStyleRenderer" data-type="yfiles.styles.ILabelStyleRenderer"></api-link>\nfor <api-link id="custom-styles_style-renderer-501-api-link-007" data-member="" data-text="ILabelStyle" data-type="yfiles.styles.ILabelStyle"></api-link> and so on).'},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-003",content:'To acquire the visual representation of an element, the framework\nqueries the style for its renderer, and calls the appropriate methods\non the <span class="api">IVisualCreator</span> that is returned by the renderer.'},{tagname:"figure","class":"image",title:"Relationship between styles, renderers, and IVisualCreators at the example of node styles",id:"fig_custom-styles_separating-style-classes_style-renderer-visual-creator-relation","float":0,children:[{tagname:"img",src:"assets/custom-styles_separating-style-classes_style-renderer-visual-creator-relation.7bcd1b9a.png",alt:"custom styles separating style classes style renderer visual creator relation",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para note",id:"custom-styles_style-renderer-501-note-001",content:'<p id="custom-styles_style-renderer-501-simpara-004">The abstract style classes hide this separation for convenience and simplicity.\nHowever, separating the style and its renderer actually has advantages in certain use-cases.</p>'},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-005",content:'On an interface level, the <strong id="custom-styles_style-renderer-501-emphasis-002" class="bold" role="bold">styles</strong> have only one method that is supposed to\nprovide the style renderer (e.g. <api-link id="custom-styles_style-renderer-501-api-link-008" data-member="renderer" data-text="INodeStyle.renderer" data-type="yfiles.styles.INodeStyle"></api-link>).\nAside from that, the style itself is meant to hold the <strong id="custom-styles_style-renderer-501-emphasis-003" class="bold" role="bold">state</strong>\nthat is needed for rendering. Clients should be able to control\nproperties of the rendering on the style, for example, the used\ncolors or stroke.'},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-006",content:'<span class="def">Renderers</span>, however, are meant to contain the <strong id="custom-styles_style-renderer-501-emphasis-004" class="bold" role="bold">logic</strong> that converts\nthe state held by the style to a visualization on the canvas.\nThe yFiles for HTML rendering engine also uses this renderer to\nhandle application logic that depends on aspects of the visualization (such as hit\ntesting, or visibility checks). Because of this,\nthe renderer interfaces themselves are broader than necessary for just rendering items. Aside from the\n<api-link id="custom-styles_style-renderer-501-api-link-009" data-member="" data-text="IVisualCreator" data-type="yfiles.view.IVisualCreator"></api-link>, the renderer classes are responsible for\nproviding <api-link id="custom-styles_style-renderer-501-api-link-010" data-member="" data-text="IHitTestable" data-type="yfiles.input.IHitTestable"></api-link>,\n<api-link id="custom-styles_style-renderer-501-api-link-011" data-member="" data-text="IMarqueeTestable" data-type="yfiles.input.IMarqueeTestable"></api-link>,\n<api-link id="custom-styles_style-renderer-501-api-link-012" data-member="" data-text="ILassoTestable" data-type="yfiles.input.ILassoTestable"></api-link>,\n<api-link id="custom-styles_style-renderer-501-api-link-013" data-member="" data-text="IVisibilityTestable" data-type="yfiles.view.IVisibilityTestable"></api-link>, and\n<api-link id="custom-styles_style-renderer-501-api-link-014" data-member="" data-text="IBoundsProvider" data-type="yfiles.view.IBoundsProvider"></api-link> implementations.\nAdditionally, the renderer of\n<span class="api">INodeStyle</span>s and <span class="api">IEdgeStyle</span>s\nprovides implementations of the <api-link id="custom-styles_style-renderer-501-api-link-015" data-member="" data-text="IShapeGeometry" data-type="yfiles.styles.IShapeGeometry"></api-link>\nand the <api-link id="custom-styles_style-renderer-501-api-link-016" data-member="" data-text="IPathGeometry" data-type="yfiles.styles.IPathGeometry"></api-link> interface,\nrespectively.\nAll these interfaces are discussed\nin the section <a href="#/dguide/custom-styles_advanced-functionality">Refining a Style’s Behavior</a>.'},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-007",content:'When separating style and renderer classes, a <strong id="custom-styles_style-renderer-501-emphasis-005" class="bold" role="bold">flyweight pattern</strong>\ncan be implemented where renderers can be <strong id="custom-styles_style-renderer-501-emphasis-006" class="bold" role="bold">shared</strong> amongst styles.\nTwo styles of the same type can also be created with different\nrenderers to <strong id="custom-styles_style-renderer-501-emphasis-007" class="bold" role="bold">interpret their properties differently</strong> or an existing\nstyle and renderer pair can be <strong id="custom-styles_style-renderer-501-emphasis-008" class="bold" role="bold">customized</strong>. This is shown in the section\n<a href="#/dguide/custom-styles_customize-predefined-styles">Customizing Predefined Styles</a>.'
},{tagname:"para","class":"dguide-para",id:"custom-styles_style-renderer-501-simpara-008",content:'<span class="api">Visual</span>s can and should share information amongst each\nother where applicable. This can be done by storing the\nrelevant information on the renderer instance the <span class="api">Visual</span>s\nwere created from.'},{tagname:"para","class":"dguide-para tip",id:"custom-styles_style-renderer-501-tip-001",content:'<p id="custom-styles_style-renderer-501-simpara-009">Sharing data between <span class="api">Visual</span>s speeds up the creation and\nupdating process of new <span class="api">Visual</span>s since resources can be\nallocated efficiently. This improves memory usage\nof your application.</p>'}]},{tagname:"section",id:"custom-styles_customize-predefined-styles",title:"Customizing Predefined Styles",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-001",content:"Customizing the existing styles in yFiles for HTML is a great example\nof the usefulness of distinct style and renderer implementations.\nyFiles for HTML offers a number of predefined styles for nodes,\nedges, and labels. Instead of implementing a new style and\nrenderer from scratch, you may want to consider customizing\nthe existing styles of yFiles for HTML for your needs and benefit\nfrom advanced default implementation for the application logic.\nThis is especially the case if your desired style is just a minor\ndeviation of how an existing style looks and works."},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-002",content:'All of yFiles for HTML’s predefined style renderers implement the interfaces\nmentioned in the section <a href="#/dguide/custom-styles_advanced-functionality">Refining a Style’s Behavior</a>\ndirectly, i.e., the interfaces <api-link id="custom-styles_customize-predefined-styles-502-api-link-001" data-member="" data-text="IHitTestable" data-type="yfiles.input.IHitTestable"></api-link>,\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-002" data-member="" data-text="IMarqueeTestable" data-type="yfiles.input.IMarqueeTestable"></api-link>,\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-003" data-member="" data-text="ILassoTestable" data-type="yfiles.input.ILassoTestable"></api-link>,\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-004" data-member="" data-text="IVisibilityTestable" data-type="yfiles.view.IVisibilityTestable"></api-link>, and\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-005" data-member="" data-text="IBoundsProvider" data-type="yfiles.view.IBoundsProvider"></api-link> as well as\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-006" data-member="" data-text="IShapeGeometry" data-type="yfiles.styles.IShapeGeometry"></api-link> for node styles and\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-007" data-member="" data-text="IPathGeometry" data-type="yfiles.styles.IPathGeometry"></api-link> for edge styles.'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-003",content:"The default implementations for these interfaces can be changed\nfor any predefined renderer by subclassing the renderer and\neither overriding the interface methods directly or returning a\ncustom instance via one of the renderer interface’s getter methods."},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-004",content:'Additionally, each renderer provides a protected\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-008" data-member="configure()" data-text="configure" data-type="yfiles.styles.ShapeNodeStyleRenderer"></api-link> method\nthat is meant to be used by subclasses to inject custom logic when\na renderer is being initialized.'},{tagname:"para","class":"dguide-para note",id:"custom-styles_customize-predefined-styles-502-note-001",content:'<p id="custom-styles_customize-predefined-styles-502-simpara-005">The renderer properties of styles in yFiles for HTML are <strong id="custom-styles_customize-predefined-styles-502-emphasis-001" class="bold" role="bold">immutable</strong>, because\nchanging the renderer of a style at runtime can lead to unforeseen\ninconsistencies in the rendering engine.\nRenderers can <strong id="custom-styles_customize-predefined-styles-502-emphasis-002" class="bold" role="bold">only</strong> be passed to the style interface by calling\nthe appropriate <strong id="custom-styles_customize-predefined-styles-502-emphasis-003" class="bold" role="bold">constructor overload</strong>.</p>'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-006",content:"There are also properties and methods that you can override\nin the renderer classes that are specific to the style."},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-007",content:'For example, the <api-link id="custom-styles_customize-predefined-styles-502-api-link-009" data-member="" data-text="CollapsibleNodeStyleDecoratorRenderer" data-type="yfiles.styles.CollapsibleNodeStyleDecoratorRenderer"></api-link>\nis a renderer for a decorating style that adds a button to another\nstyle implementation. This renderer provides the\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-010" data-member="createButton(yfiles.view.IRenderContext,boolean,yfiles.geometry.Size)" data-text="createButton" data-type="yfiles.styles.CollapsibleNodeStyleDecoratorRenderer"></api-link> method\nthat you can override to create a custom appearance for the expand/collapse\nbutton.'},{tagname:"heading",id:"__anchor_id_custom_styles_customize_edge_visualization_xreflabel_custom_styles_customize_edge_visualization_customizing_the_default_edge_style",renderas:"sect3",content:'<anchor id="custom-styles_customize-edge-visualization" xreflabel="[custom-styles_customize-edge-visualization]"></anchor> Customizing the Default Edge Style'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-008",content:'A more complicated example is the way edges are rendered in yFiles for HTML.\nThere are two styles and corresponding renderer classes,\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-011" data-member="" data-text="PolylineEdgeStyleRenderer" data-type="yfiles.styles.PolylineEdgeStyleRenderer"></api-link> and\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-012" data-member="" data-text="ArcEdgeStyleRenderer" data-type="yfiles.styles.ArcEdgeStyleRenderer"></api-link>, which both inherit from the\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-013" data-member="" data-text="PathBasedEdgeStyleRenderer&lt;TStyle&gt;" data-type="yfiles.styles.PathBasedEdgeStyleRenderer"></api-link> class.'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-009",content:'The default implementation of the rendering process for edges in yFiles for HTML\nuses the source and target ports and the list of bends\nto <strong id="custom-styles_customize-predefined-styles-502-emphasis-004" class="bold" role="bold">create the edge path</strong> (represented in yFiles for HTML by the\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-014" data-member="" data-text="GeneralPath" data-type="yfiles.geometry.GeneralPath"></api-link> class), which is then drawn onto the canvas.\nThe renderers are responsible for creating this path and this process can\nbe easily customized.'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-010",content:'For example, the <api-link id="custom-styles_customize-predefined-styles-502-api-link-015" data-member="" data-text="PolylineEdgeStyleRenderer" data-type="yfiles.styles.PolylineEdgeStyleRenderer"></api-link>\ninterprets the edge path as a straight line for each edge segment, while the\n<api-link id="custom-styles_customize-predefined-styles-502-api-link-016" data-member="" data-text="ArcEdgeStyleRenderer" data-type="yfiles.styles.ArcEdgeStyleRenderer"></api-link> interprets the\nedge segment as a curved line between the start and end point of the edge\nand disregards bends completely.'},{tagname:"para","class":"dguide-para tip",id:"custom-styles_customize-predefined-styles-502-tip-001",content:'<p id="custom-styles_customize-predefined-styles-502-simpara-011">While the renderer instances of both styles are quite different in\nimplementation and resulting visualization, the styles themselves\ndiffer only in a few properties. This is an example for the separation\nof state and logic in style and renderer classes.</p>'},{tagname:"para","class":"dguide-para",id:"custom-styles_customize-predefined-styles-502-simpara-012",content:'You can override the following methods in <api-link id="custom-styles_customize-predefined-styles-502-api-link-017" data-member="" data-text="PathBasedEdgeStyleRenderer&lt;TStyle&gt;" data-type="yfiles.styles.PathBasedEdgeStyleRenderer"></api-link>\nin order to manipulate the <span class="api">GeneralPath</span>\nthat is ultimately drawn.'},{tagname:"para",content:'<dl id="custom-styles_customize-predefined-styles-502-variablelist-001"><dt id="custom-styles_customize-predefined-styles-502-term-001"><api-link id="custom-styles_customize-predefined-styles-502-api-link-018" data-member="createPath()" data-text="createPath()" data-type="yfiles.styles.PathBasedEdgeStyleRenderer"></api-link></dt><dd id="custom-styles_customize-predefined-styles-502-listitem-001"><p id="custom-styles_customize-predefined-styles-502-simpara-013">The method that interprets <a href="#/dguide/view_item-layout_edges">the edge path</a> and\ncreates the <span class="api">GeneralPath</span> that is then drawn\nonto the canvas.</p></dd><dt id="custom-styles_customize-predefined-styles-502-term-002"><api-link id="custom-styles_customize-predefined-styles-502-api-link-019" data-member="cropPath(yfiles.geometry.GeneralPath)" data-text="cropPath(GeneralPath)" data-type="yfiles.styles.PathBasedEdgeStyleRenderer"></api-link></dt><dd id="custom-styles_customize-predefined-styles-502-listitem-002"><p id="custom-styles_customize-predefined-styles-502-simpara-014">Trims the ends of the edge path to the points where the edge should visually end, which is\nthe border of the node in most cases. The default implementation queries\n<a href="#/dguide/customizing_concepts_lookup_interfaces">the lookup</a> of the edge’s source and target port for\nan instance of <api-link id="custom-styles_customize-predefined-styles-502-api-link-020" data-member="" data-text="IEdgePathCropper" data-type="yfiles.styles.IEdgePathCropper"></api-link>.</p></dd><dt id="custom-styles_customize-predefined-styles-502-term-003"><api-link id="custom-styles_customize-predefined-styles-502-api-link-021" data-member="createSelfLoopPath(boolean)" data-text="createSelfLoopPath(boolean)" data-type="yfiles.styles.PathBasedEdgeStyleRenderer"></api-link></dt><dd id="custom-styles_customize-predefined-styles-502-listitem-003"><p id="custom-styles_customize-predefined-styles-502-simpara-015">Defines how self-loops should look like. Self-loops are edges where\nthe source and target ports belong to the same owner. Common implementations\neither use a rectangular or circular path. By overriding this method\nyou can change how the self-loops look like. Note that this method is not called\nfor edges with two or more bends since two bends are sufficient to define\na proper self-loop path on their own.</p></dd></dl>'}]},{tagname:"section",id:"custom-styles_label-preferred-size",title:"The Preferred Label Size",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-001",content:'As already described in the section <a href="#/dguide/view_item-layout_labels">Labels</a>,\nthe preferred size of a label is a weak suggestion of what size\nthe label should have, given no context.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-002",content:'Setting the preferred size on the label directly (via\n<api-link id="custom-styles_label-preferred-size-503-api-link-001" data-member="setLabelPreferredSize(yfiles.graph.ILabel,yfiles.geometry.Size)" data-text="setLabelPreferredSize" data-type="yfiles.graph.IGraph"></api-link>)\nis a rare use-case. You should rather implement the\n<api-link id="custom-styles_label-preferred-size-503-api-link-002" data-member="getPreferredSize(yfiles.graph.ILabel,yfiles.styles.ILabelStyle)" data-text="getPreferredSize" data-type="yfiles.styles.ILabelStyleRenderer"></api-link> interface method on the renderer accordingly, since\nit should be up to the visualization to determine the space needed\nto display the label.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-003",content:'The final layout (position, size, and rotation) of a label is determined by\n<api-link id="custom-styles_label-preferred-size-503-api-link-003" data-member="" data-text="ILabelModel" data-type="yfiles.graph.ILabelModel"></api-link>s and their\n<api-link id="custom-styles_label-preferred-size-503-api-link-004" data-member="" data-text="ILabelModelParameter" data-type="yfiles.graph.ILabelModelParameter"></api-link>s, which\nusually take the suggested preferred size\nof the renderer into consideration. For example, the\n<span class="api">ILabelModelParameter</span> might specify\nthe label as “centered in the node.” To calculate the exact location\nof the label, the\n<span class="api">ILabelModel</span> needs to know\nthe exact width and height of the label’s visualization\nwhich is determined by the renderer.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-004",content:'Because of this, the <api-link id="custom-styles_label-preferred-size-503-api-link-005" data-member="" data-text="ILabelStyleRenderer" data-type="yfiles.styles.ILabelStyleRenderer"></api-link>\ninterface requires an implementation of the\n<api-link id="custom-styles_label-preferred-size-503-api-link-006" data-member="getPreferredSize(yfiles.graph.ILabel,yfiles.styles.ILabelStyle)" data-text="getPreferredSize" data-type="yfiles.styles.ILabelStyleRenderer"></api-link> method. If you implement a custom label visualization,\nmake sure that this method returns a good approximation of the\nfinal visualization.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-005",content:"Typical properties to take into consideration are:"},{tagname:"para",content:'<ol id="custom-styles_label-preferred-size-503-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="custom-styles_label-preferred-size-503-listitem-001"><p id="custom-styles_label-preferred-size-503-simpara-006">The label’s text</p></li><li id="custom-styles_label-preferred-size-503-listitem-002"><p id="custom-styles_label-preferred-size-503-simpara-007">Font and font size</p></li><li id="custom-styles_label-preferred-size-503-listitem-003"><p id="custom-styles_label-preferred-size-503-simpara-008">Character and line spacing</p></li><li id="custom-styles_label-preferred-size-503-listitem-004"><p id="custom-styles_label-preferred-size-503-simpara-009">Rendering settings</p></li><li id="custom-styles_label-preferred-size-503-listitem-005"><p id="custom-styles_label-preferred-size-503-simpara-010">Visual features, e.g. an added icon</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-011",content:'The predefined label visualizations in yFiles for HTML\n(for example, <api-link id="custom-styles_label-preferred-size-503-api-link-007" data-member="" data-text="DefaultLabelStyleRenderer" data-type="yfiles.styles.DefaultLabelStyleRenderer"></api-link>)\nhave an efficient implementation for measuring the label size considering\nthe first 4 points.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-012",content:'Since in most cases you probably want to add visual features to\nthe bare text, you can simply wrap the existing implementation of\n<api-link id="custom-styles_label-preferred-size-503-api-link-008" data-member="getPreferredSize(yfiles.graph.ILabel,yfiles.styles.ILabelStyle)" data-text="getPreferredSize" data-type="yfiles.styles.ILabelStyleRenderer"></api-link>\nand add an estimation for the space needed by your visualization\nand you are done.'},{tagname:"para","class":"dguide-para",id:"custom-styles_label-preferred-size-503-simpara-013",content:'An example for this is the <api-link id="custom-styles_label-preferred-size-503-api-link-009" data-member="" data-text="IconLabelStyle" data-type="yfiles.styles.IconLabelStyle"></api-link> which decorates the label text with\nan icon. The <api-link id="custom-styles_label-preferred-size-503-api-link-010" data-member="" data-text="IconLabelStyleRenderer" data-type="yfiles.styles.IconLabelStyleRenderer"></api-link> includes the icon for the size measurements:'},{tagname:"example",id:"custom-styles_label-preferred-size-503-example-001",title:"Example getPreferredSize decorator which measures the size of a text decorated with an icon",content:'<pre class="programlisting javascript" id="custom-styles_label-preferred-size-503-programlisting-001" language="javascript" format="linespecific"><code>getPreferredSize(label, labelStyle) {\r\n  // measure the text\r\n  const textSize = this.measureMyText(label.text)\r\n  const iconSize = this.getIconSize()\r\n  // add the icon size for an icon placed at the side of the text:\r\n  // add the width and use the max of the text and icon height\r\n  return new yfiles.geometry.Size(\r\n    textSize.width + iconSize.width,\r\n    Math.max(textSize.height, iconSize.height))\r\n}\n</code></pre>'}]},{tagname:"section",id:"custom-styles_template-styles",title:"Using SVG Templates in Styles",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-504-simpara-001",content:"If you want to use native SVG templates as part of your\nvisualization, yFiles for HTML ships with predefined style implementations\nfor nodes, labels, and ports that support this:"},{tagname:"para",content:'<ul id="custom-styles_template-styles-504-itemizedlist-001"><li id="custom-styles_template-styles-504-listitem-001"><p id="custom-styles_template-styles-504-simpara-002"><api-link id="custom-styles_template-styles-504-api-link-001" data-member="" data-text="TemplateNodeStyle" data-type="yfiles.styles.TemplateNodeStyle"></api-link></p></li><li id="custom-styles_template-styles-504-listitem-002"><p id="custom-styles_template-styles-504-simpara-003"><api-link id="custom-styles_template-styles-504-api-link-002" data-member="" data-text="TemplateLabelStyle" data-type="yfiles.styles.TemplateLabelStyle"></api-link></p></li><li id="custom-styles_template-styles-504-listitem-003"><p id="custom-styles_template-styles-504-simpara-004"><api-link id="custom-styles_template-styles-504-api-link-003" data-member="" data-text="TemplatePortStyle" data-type="yfiles.styles.TemplatePortStyle"></api-link></p></li><li id="custom-styles_template-styles-504-listitem-004"><p id="custom-styles_template-styles-504-simpara-005"><api-link id="custom-styles_template-styles-504-api-link-004" data-member="" data-text="TemplateStripeStyle" data-type="yfiles.styles.TemplateStripeStyle"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-504-simpara-006",content:'Each of these styles has an property to provide the id of the render template element that should\nbe used for visualization, for example\n<api-link id="custom-styles_template-styles-504-api-link-005" data-member="styleResourceKey" data-text="styleResourceKey" data-type="yfiles.styles.TemplateNodeStyle"></api-link>. Note that the id key\ncan also be passed as constructor parameter.'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-504-simpara-007",content:"Render templates are pre-defined SVG snippets that are defined in one or more\nscript elements that act as a container to provide the snippets.\nA <code>&lt;script></code> element containing templates needs to be included in an application’s\nmain HTML file and is identified by the value \"text/yfiles-template\"\nin its <code>type</code> attribute.\nDuring runtime, the child elements of the template scripts are parsed and made available\nfor the template styles. All top-level child elements with an 'id' attribute can be\nreferenced by their id.\nThe contents of top-level <code>&lt;defs></code> elements in the template script can be referenced by all\ntemplates that are defined within the same script. This way, resources can be shared among multiple\ntemplates."},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-504-simpara-008",content:"The following example shows a template SVG with a simple render template for nodes:"},{tagname:"example",id:"custom-styles_template-styles-504-informalexample-001",content:'<pre class="programlisting html" id="custom-styles_template-styles-504-programlisting-001" language="html" linenumbering="unnumbered" format="linespecific"><code>&lt;script type="text/yfiles-template">\n&lt;g id="myNodeStyleTemplate">\n  &lt;rect fill="blue" stroke="black" stroke-width="3"\n        rx="8" ry="8" width="250" height="100"/>\n  &lt;rect fill="red" stroke="black" stroke-width="3"\n        rx="4" ry="4" width="150" height="50"\n        transform="translate(50 25)"/>\n&lt;/g>\n&lt;/script></code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-504-simpara-009",content:"With this template script included in an application’s main HTML file, the unique ID\nof the enclosing &lt;g> element can be used as the key when creating a new TemplateNodeStyle\ninstance:"},{tagname:"example",id:"custom-styles_template-styles-504-informalexample-002",content:'<pre class="programlisting javascript" id="custom-styles_template-styles-504-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>graph.nodeDefaults.style = new yfiles.drawing.TemplateNodeStyle("myNodeStyleTemplate");</code></pre>'},{tagname:"section",id:"_using_data_binding",title:"Using Data Binding",children:[{tagname:"para","class":"dguide-para",id:"_using_data_binding-505-simpara-001",content:'Template styles also provide a mechanism for data binding.\nSVG attribute values can be bound to any property available in the graph element’s\n<api-link id="_using_data_binding-505-api-link-001" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link> property as well as certain standard template properties such as <code>itemSelected</code>\nand <code>itemFocused</code> available in the template context.'},{tagname:"para","class":"dguide-para",id:"_using_data_binding-505-simpara-002",content:'If the bound object implements the <api-link id="_using_data_binding-505-api-link-002" data-member="" data-text="IPropertyObservable" data-type="yfiles.lang.IPropertyObservable"></api-link>\ninterface and fires the respective events, changes to the bound property are immediately\nreflected in the visualization.\nBinding also provides support for <a href="#/dguide/custom-styles_template-styles-converters">converters and converter parameters</a>\nas well as binding <a href="#/dguide/custom-styles_template-styles-property_paths">property paths</a>.'},{tagname:"para","class":"dguide-para",id:"_using_data_binding-505-simpara-003",content:'Bindings are dynamically replaced with the bound values by the binding engine at runtime.\n"Normal" bindings are resolved on the graph element’s tag property.\nFor example, if there is an object stored in the element’s tag that has the property\n<code>width</code>, you can bind to the value of this property with the string "{Binding width}":'},{tagname:"example",id:"_using_data_binding-505-informalexample-001",content:'<pre class="programlisting xml" id="_using_data_binding-505-programlisting-001" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;rect fill="blue" width="{Binding width}" height="100"/></code></pre>'},{tagname:"para","class":"dguide-para",id:"_using_data_binding-505-simpara-004",content:"Bindings work on all standard SVG attributes."},{tagname:"example",id:"_using_data_binding-505-informalexample-002",content:'<pre class="programlisting xml" id="_using_data_binding-505-programlisting-002" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;use xlink:href="{Binding uri}"/></code></pre>'},{tagname:"para","class":"dguide-para",id:"_using_data_binding-505-simpara-005",content:"Adding a binding using the custom attribute <code>data-content</code> sets the content of the\nelement to the bound value.\nThe following example sets the content of the &lt;text> element to the value of\nthe property <code>name</code> (of an object stored in the element’s tag)."},{tagname:"example",id:"_using_data_binding-505-informalexample-003",content:'<pre class="programlisting xml" id="_using_data_binding-505-programlisting-003" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;text data-content="{Binding name}">&lt;/text></code></pre>'}]},{tagname:"section",id:"_template_binding",title:"Template Binding",children:[{tagname:"para","class":"dguide-para",id:"_template_binding-506-simpara-001",content:'Template bindings are resolved on a graph element’s template context.\nThis can be used to modify the element based on its selection state, for example.\nAlso, custom data can be stored in the template style’s\n<api-link id="_template_binding-506-api-link-001" data-member="styleTag" data-text="styleTag" data-type="yfiles.styles.TemplateNodeStyleBase"></api-link>\nproperty, which you can also bind to using a template binding.'},{tagname:"table","class":"",id:"_template_binding-506-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Supported TemplateBinding properties</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="_template_binding-506-thead-001"><tr id="_template_binding-506-row-001"><th id="_template_binding-506-entry-001" align="left" valign="top">\nProperty\n</th><th id="_template_binding-506-entry-002" align="left" valign="top">\nPurpose\n</th></tr></thead><tbody id="_template_binding-506-tbody-001"><tr id="_template_binding-506-row-002"><td id="_template_binding-506-entry-003" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-002">width</para></td><td id="_template_binding-506-entry-004" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-003">The width of the graph element</para></td></tr><tr id="_template_binding-506-row-003"><td id="_template_binding-506-entry-005" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-004">height</para></td><td id="_template_binding-506-entry-006" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-005">The height of the graph element</para></td></tr><tr id="_template_binding-506-row-004"><td id="_template_binding-506-entry-007" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-006">bounds</para></td><td id="_template_binding-506-entry-008" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-007">The bounding rectangle of the graph element</para></td></tr><tr id="_template_binding-506-row-005"><td id="_template_binding-506-entry-009" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-008">canvas</para></td><td id="_template_binding-506-entry-010" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-009">The <span class="api">GraphComponent</span> the element is rendered in</para></td></tr><tr id="_template_binding-506-row-006"><td id="_template_binding-506-entry-011" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-010">zoom</para></td><td id="_template_binding-506-entry-012" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-011">The current zoom level of the <span class="api">GraphComponent</span></para></td></tr><tr id="_template_binding-506-row-007"><td id="_template_binding-506-entry-013" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-012">styleTag</para></td><td id="_template_binding-506-entry-014" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-013">The <api-link id="_template_binding-506-api-link-002" data-member="styleTag" data-text="tag" data-type="yfiles.styles.TemplateNodeStyleBase"></api-link> associated with the element’s style instance</para></td></tr><tr id="_template_binding-506-row-008"><td id="_template_binding-506-entry-015" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-014">itemSelected</para></td><td id="_template_binding-506-entry-016" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-015">Whether the element is selected</para></td></tr><tr id="_template_binding-506-row-009"><td id="_template_binding-506-entry-017" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-016">itemFocused</para></td><td id="_template_binding-506-entry-018" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-017">Whether the element has the focus</para></td></tr><tr id="_template_binding-506-row-010"><td id="_template_binding-506-entry-019" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-018">itemHighlighted</para></td><td id="_template_binding-506-entry-020" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-019">Whether the element is highlighted</para></td></tr><tr id="_template_binding-506-row-011"><td id="_template_binding-506-entry-021" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-020">visible</para></td><td id="_template_binding-506-entry-022" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-021">Whether the element is currently in the visible area of the canvas</para></td></tr><tr id="_template_binding-506-row-012"><td id="_template_binding-506-entry-023" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-022">labelText</para></td><td id="_template_binding-506-entry-024" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-023">The label’s text (only available for <api-link id="_template_binding-506-api-link-003" data-member="" data-text="TemplateLabelStyle" data-type="yfiles.styles.TemplateLabelStyle"></api-link> and <api-link id="_template_binding-506-api-link-004" data-member="" data-text="StringTemplateLabelStyle" data-type="yfiles.styles.StringTemplateLabelStyle"></api-link>)</para></td></tr><tr id="_template_binding-506-row-013"><td id="_template_binding-506-entry-025" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-024">isFlipped</para></td><td id="_template_binding-506-entry-026" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-025">Whether the label is flipped (only available for <api-link id="_template_binding-506-api-link-005" data-member="" data-text="TemplateLabelStyle" data-type="yfiles.styles.TemplateLabelStyle"></api-link> and <api-link id="_template_binding-506-api-link-006" data-member="" data-text="StringTemplateLabelStyle" data-type="yfiles.styles.StringTemplateLabelStyle"></api-link>)</para></td></tr><tr id="_template_binding-506-row-014"><td id="_template_binding-506-entry-027" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-026">isUpsideDown</para></td><td id="_template_binding-506-entry-028" align="left" valign="top"><para class="dguide-para" id="_template_binding-506-simpara-027">Whether the label is currently rendered upside down (only available for <api-link id="_template_binding-506-api-link-007" data-member="" data-text="TemplateLabelStyle" data-type="yfiles.styles.TemplateLabelStyle"></api-link> and <api-link id="_template_binding-506-api-link-008" data-member="" data-text="StringTemplateLabelStyle" data-type="yfiles.styles.StringTemplateLabelStyle"></api-link>)</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_template_binding-506-simpara-028",content:"The following template binding sets the <code>fill</code> to the value stored in the style’s\nstyleTag property:"},{tagname:"example",id:"_template_binding-506-informalexample-001",content:'<pre class="programlisting xml" id="_template_binding-506-programlisting-001" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;rect fill="{TemplateBinding styleTag}"/></code></pre>'},{tagname:"para","class":"dguide-para",id:"_template_binding-506-simpara-029",content:'The template binding in the <code>data-content</code> attribute sets the content of the SVG\ngroup to the value stored in the template style’s <span class="api">styleTag</span>\nproperty (this can be an SVG element!):'},{tagname:"example",id:"_template_binding-506-informalexample-002",content:'<pre class="programlisting xml" id="_template_binding-506-programlisting-002" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;g data-content="{TemplateBinding styleTag}"/></code></pre>'}]},{tagname:"section",id:"custom-styles_template-styles-property_paths",title:"Property Paths",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-property_paths-507-simpara-001",content:"The binding engine supports property paths.\nThis means, bindings can not only be resolved directly on the properties of the\nbound objects, but on properties of objects stored in properties of the bound objects,\netc., also."},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-property_paths-507-simpara-002",content:"The following example binds the property <code>color</code> of the object that is stored in\nthe styleTag property."},{tagname:"example",id:"custom-styles_template-styles-property_paths-507-informalexample-001",content:'<pre class="programlisting xml" id="custom-styles_template-styles-property_paths-507-programlisting-001" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;rect fill="{TemplateBinding styleTag.color}"/></code></pre>'}]},{tagname:"section",id:"custom-styles_template-styles-converters",title:"Converters",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-001",content:"Bindings can specify converters and converter parameters.\nConverters are simple functions with the signature <code>function(value:Object, parameter:Object):Object</code>."},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-002",content:'A converter has to be registered under its name either in the converter store or with the\n<code>window</code> object before it can be used. The converter store is shared among all TemplateStyles.\nIt can be accessed by the static property <api-link id="custom-styles_template-styles-converters-508-api-link-001" data-member="CONVERTERS" data-text="CONVERTERS" data-type="yfiles.styles.TemplateNodeStyle"></api-link>\non the respective TemplateStyle class.\nAt runtime, the converter method is located by name in the converter store - if it is not found\nthere the function is located on the <code>window</code> object.\nThe converter is called with the resolved binding value an optionally the\nconverter parameter. The converter is in charge of returning an object that is used as the value of the\nattribute containing the binding.'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-003",content:"Note that, if the binding was specified in a <code>data-content</code> attribute, the converter\nmay also return an SVG element that is set as a child node to the element in the\nDOM containing the data binding."},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-004",content:"Using a simple conversion function and registering it with the converter store:"},{tagname:"example",id:"custom-styles_template-styles-converters-508-informalexample-001",content:'<pre class="programlisting javascript" id="custom-styles_template-styles-converters-508-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.styles.TemplateNodeStyle.CONVERTERS.colorConverter = (value, parameter) => {\n  // converts a bool into a color\n  if (typeof value === "boolean") {\n    return value ? "#00FF00" : "#FF0000";\n  }\n  return "#000000";\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-005",content:"Using the converter in a binding within a render template:"},{tagname:"example",id:"custom-styles_template-styles-converters-508-informalexample-002",content:'<pre class="programlisting javascript" id="custom-styles_template-styles-converters-508-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>&lt;rect fill="{Binding isPresent, Converter=colorConverter}"/></code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-006",content:'Using a converter with a converter parameter to prefix the bound value with the\nstring "http://":'},{tagname:"example",id:"custom-styles_template-styles-converters-508-informalexample-003",content:'<pre class="programlisting xml" id="custom-styles_template-styles-converters-508-programlisting-003" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;text data-content="{Binding url, Converter=prefixConverter, Parameter=http://}"/></code></pre>'},{tagname:"para","class":"dguide-para",id:"custom-styles_template-styles-converters-508-simpara-007",content:"The definition of the converter shows how the converter parameter is used in the\nconvert method:"},{tagname:"example",id:"custom-styles_template-styles-converters-508-informalexample-004",content:'<pre class="programlisting javascript" id="custom-styles_template-styles-converters-508-programlisting-004" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.styles.TemplateNodeStyle.CONVERTERS.prefixConverter = (value, parameter) => {\n      if (typeof value === "string" && typeof parameter === "string") {\n        return parameter + value;\n      }\n      return value;\n    };</code></pre>'}]},{tagname:"section",id:"_notifying_of_property_changes",title:"Notifying of Property Changes",children:[{tagname:"para","class":"dguide-para",id:"_notifying_of_property_changes-509-simpara-001",content:'If the bound object implements the <api-link id="_notifying_of_property_changes-509-api-link-001" data-member="" data-text="IPropertyObservable" data-type="yfiles.lang.IPropertyObservable"></api-link> interface, it can raise\nan event when a property value has changed.\nThe binding mechanism registers to this event and updates the template instance\nif the name in the <api-link id="_notifying_of_property_changes-509-api-link-002" data-member="" data-text="PropertyChangedEventArgs" data-type="yfiles.lang.PropertyChangedEventArgs"></api-link>\nobject matches the property’s name.'}]},{tagname:"section",id:"_using_strings_as_templates",title:"Using Strings as Templates",children:[{tagname:"para","class":"dguide-para",id:"_using_strings_as_templates-510-simpara-001",content:"Besides the template styles introduced above, yFiles for HTML ships with style implementations\nwhich support SVG snippets provided as as string:"},{tagname:"para",content:'<ul id="_using_strings_as_templates-510-itemizedlist-001"><li id="_using_strings_as_templates-510-listitem-001"><p id="_using_strings_as_templates-510-simpara-002"><api-link id="_using_strings_as_templates-510-api-link-001" data-member="" data-text="StringTemplateNodeStyle" data-type="yfiles.styles.StringTemplateNodeStyle"></api-link></p></li><li id="_using_strings_as_templates-510-listitem-002"><p id="_using_strings_as_templates-510-simpara-003"><api-link id="_using_strings_as_templates-510-api-link-002" data-member="" data-text="StringTemplateLabelStyle" data-type="yfiles.styles.StringTemplateLabelStyle"></api-link></p></li><li id="_using_strings_as_templates-510-listitem-003"><p id="_using_strings_as_templates-510-simpara-004"><api-link id="_using_strings_as_templates-510-api-link-003" data-member="" data-text="StringTemplatePortStyle" data-type="yfiles.styles.StringTemplatePortStyle"></api-link></p></li><li id="_using_strings_as_templates-510-listitem-004"><p id="_using_strings_as_templates-510-simpara-005"><api-link id="_using_strings_as_templates-510-api-link-004" data-member="" data-text="StringTemplateStripeStyle" data-type="yfiles.styles.StringTemplateStripeStyle"></api-link></p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_using_strings_as_templates-510-simpara-006",content:'The string has to be set to the <api-link id="_using_strings_as_templates-510-api-link-005" data-member="svgContent" data-text="svgContent" data-type="yfiles.styles.StringTemplateNodeStyle"></api-link> property\nor passed to the constructor.'},{tagname:"example",id:"_using_strings_as_templates-510-informalexample-001",content:'<pre class="programlisting javascript" id="_using_strings_as_templates-510-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>const svgTemplate = "&lt;rect fill=\'#A6CBF0\' stroke=\'#2C4E86\' stroke-width=\'2\' " +\n                          "width=\'{TemplateBinding width}\' height=\'{TemplateBinding height}\'>" +\n                          "&lt;/rect>" +\n                          "&lt;text transform=\'translate(10 20)\' data-content=\'{Binding name}\' " +\n                          "style=\'font-size:18px;\'>&lt;/text>"\nconst style = new yfiles.styles.StringTemplateNodeStyle(svgTemplate);</code></pre>'},{tagname:"para","class":"dguide-para",id:"_using_strings_as_templates-510-simpara-007",content:"Note that the SVG snippet does not declare the SVG namespace itself.\nAfter parsing the resulting SVG elements are automatically created\nin the SVG namespace before they are added to the DOM."}]},{tagname:"section",id:"_state_dependent_css_classes",title:"State Dependent CSS classes",children:[{tagname:"para","class":"dguide-para",id:"_state_dependent_css_classes-511-simpara-001",content:"Depending on the state of the item, the following CSS classes are added to the\nroot element of the template:"},{tagname:"para",content:'<ul id="_state_dependent_css_classes-511-itemizedlist-001"><li id="_state_dependent_css_classes-511-listitem-001"><p id="_state_dependent_css_classes-511-simpara-002"><code>yfiles-selected</code></p></li><li id="_state_dependent_css_classes-511-listitem-002"><p id="_state_dependent_css_classes-511-simpara-003"><code>yfiles-focused</code></p></li><li id="_state_dependent_css_classes-511-listitem-003"><p id="_state_dependent_css_classes-511-simpara-004"><code>yfiles-highlighted</code></p></li></ul>'}]},{tagname:"section",id:"_text_wrapping_in_a_template_style",title:"Text Wrapping in a Template Style",children:[{tagname:"para","class":"dguide-para",id:"_text_wrapping_in_a_template_style-512-simpara-001",content:"<code>TextWrapConverter</code> is a built-in converter function which emits wrapped text as svg elements.\nIt can be used to display wrapped text in a template style."},{tagname:"para","class":"dguide-para",id:"_text_wrapping_in_a_template_style-512-simpara-002",content:"To use the <code>TextWrapConverter</code> the template style must include a <code>&lt;g></code> element that binds a\nproperty containing the text to be wrapped to <code>data-content</code>. As Converter function\n<code>TextWrapConverter</code> must be specified. The converter’s parameters are passed using a shorthand notation\nfor width, height, font, trimming and color."},{tagname:"para","class":"dguide-para",id:"_text_wrapping_in_a_template_style-512-simpara-003",content:"The shorthand syntax must satisfy the following expression:"},{tagname:"para",content:'<pre class="programlisting JavaScript" id="_text_wrapping_in_a_template_style-512-programlisting-001" language="JavaScript" linenumbering="unnumbered" format="linespecific"><code>width height [;font[;trimming[;color]?]?]?\n\nwhere:\n"width" is an integer\n"height" is an integer\n"font" is a css-like font shorthand\n"trimming" is "none"|"word"|"character"|"character-ellipsis"|"word-ellipsis"\n"color" is a css color shorthand</code></pre>'},{tagname:"para","class":"dguide-para",id:"_text_wrapping_in_a_template_style-512-simpara-004",content:"A full template might look like this:"},{tagname:"example",id:"_text_wrapping_in_a_template_style-512-informalexample-001",content:'<pre class="programlisting xml" id="_text_wrapping_in_a_template_style-512-programlisting-002" language="xml" linenumbering="unnumbered" format="linespecific"><code>&lt;g id="NodeTemplate">\n  &lt;rect stroke="none" fill="lightblue" rx="4" ry="4" width="{TemplateBinding width}" height="{TemplateBinding height}">&lt;/rect>\n  &lt;g data-content="{Binding text, Converter=TextWrapConverter, Parameter=100 50; 20px sans-serif; character-ellipsis; red}">&lt;/g>\n&lt;/g></code></pre>'},{tagname:"heading",id:"_tutorial_demo_code_4",renderas:"sect3",content:"Tutorial Demo Code"},{tagname:"para","class":"dguide-para",id:"_text_wrapping_in_a_template_style-512-simpara-005",content:'The <a href="..\\..\\demos\\complete\\orgchart\\index.html" target="blank" class="demo-link" title="An interactive viewer for organization charts with automatic layout updates.">Organization Chart</a> demo\nshows how to use a <span class="api">TemplateNodeStyle</span> for a complex\nnode visualization. It also demonstrates the aspects of data binding and converters.'}]}]},{tagname:"section",id:"custom-styles_nodestyle-adapter",title:"Using Node Styles for Labels and Ports",children:[{tagname:"para","class":"dguide-para",id:"custom-styles_nodestyle-adapter-513-simpara-001",content:"Although all styles are for a specific type of item, yFiles for HTML\noffers convenience style adapter classes for node styles to\nlabel styles and to port styles."},{tagname:"para","class":"dguide-para",id:"custom-styles_nodestyle-adapter-513-simpara-002",content:"The two adapter classes are:"},{tagname:"para",content:'<dl id="custom-styles_nodestyle-adapter-513-variablelist-001"><dt id="custom-styles_nodestyle-adapter-513-term-001"><api-link id="custom-styles_nodestyle-adapter-513-api-link-001" data-member="" data-text="NodeStyleLabelStyleAdapter" data-type="yfiles.styles.NodeStyleLabelStyleAdapter"></api-link></dt><dd id="custom-styles_nodestyle-adapter-513-listitem-001"><p id="custom-styles_nodestyle-adapter-513-simpara-003">Uses an <span class="api">INodeStyle</span> as well as an <api-link id="custom-styles_nodestyle-adapter-513-api-link-002" data-member="" data-text="ILabelStyle" data-type="yfiles.styles.ILabelStyle"></api-link>\nand delegates to the former to render the background of the label and to the latter to\nrender the text (or the foreground, respectively).</p></dd><dt id="custom-styles_nodestyle-adapter-513-term-002"><api-link id="custom-styles_nodestyle-adapter-513-api-link-003" data-member="" data-text="NodeStylePortStyleAdapter" data-type="yfiles.styles.NodeStylePortStyleAdapter"></api-link></dt><dd id="custom-styles_nodestyle-adapter-513-listitem-002"><p id="custom-styles_nodestyle-adapter-513-simpara-004">Uses an <span class="api">INodeStyle</span> to render the port visualization.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"custom-styles_nodestyle-adapter-513-simpara-005",content:'Nodes are most frequently styled differently, simply because they are very prominent\ngraph items. Thus oftentimes there are <span class="api">INodeStyle</span>s that are more flexible to use,\nor provide more features than <span class="api">ILabelStyle</span>s or\n<span class="api">IPortStyle</span>s. These adapter classes then allow to\nquickly create custom visualizations for labels or ports by re-using styles\nthat were originally intended for nodes.'},{tagname:"para","class":"dguide-para",id:"custom-styles_nodestyle-adapter-513-simpara-006",content:"The following example shows the usage of those adapter classes to show ports as\nstars, and draw a border around labels:"},{tagname:"example",id:"custom-styles_nodestyle-adapter-513-example-001",title:"Example usage of NodeStyleLabelStyleAdapter and NodeStylePortStyleAdapter",content:'<pre class="programlisting javascript" id="custom-styles_nodestyle-adapter-513-programlisting-001" language="javascript" format="linespecific"><code>const portShape = new yfiles.styles.ShapeNodeStyle()\r\nportShape.shape = yfiles.styles.ShapeNodeShape.STAR6\r\nconst portStyle = new yfiles.styles.NodeStylePortStyleAdapter(portShape)\r\n\r\nconst labelStyle = new yfiles.styles.NodeStyleLabelStyleAdapter(new yfiles.styles.ShapeNodeStyle(),\r\n  new yfiles.styles.SimpleLabelStyle())\n</code></pre>'}]},{tagname:"section",id:"bridges-customizations",title:"Customizing Bridges",children:[{tagname:"section",id:"_crossing_styles",title:"Crossing Styles",children:[{tagname:"para","class":"dguide-para",id:"_crossing_styles-515-simpara-001",content:'Different rendering styles can be set using <span class="api">BridgeManager</span>’s property\n<api-link id="_crossing_styles-515-api-link-001" data-member="defaultBridgeCrossingStyle" data-text="defaultBridgeCrossingStyle" data-type="yfiles.view.BridgeManager"></api-link>.\nThe following table shows some of the styles defined by\n<api-link id="_crossing_styles-515-api-link-002" data-member="" data-text="BridgeCrossingStyle" data-type="yfiles.view.BridgeCrossingStyle"></api-link>:'},{tagname:"table","class":"",id:"_crossing_styles-515-table-001",colsep:1,frame:"all",rowsep:1,content:'<caption>Some bridge rendering styles</caption><colgroup><col style="width:33%;"><col style="width:33%;"><col style="width:33%;"></colgroup><thead id="_crossing_styles-515-thead-001"><tr id="_crossing_styles-515-row-001"><th id="_crossing_styles-515-entry-001" align="left" valign="top">\nName\n</th><th id="_crossing_styles-515-entry-002" align="center" valign="top">\nBridge Style\n</th><th id="_crossing_styles-515-entry-003" align="center" valign="top">\nScaled Variant\n</th></tr></thead><tbody id="_crossing_styles-515-tbody-001"><tr id="_crossing_styles-515-row-002"><td id="_crossing_styles-515-entry-004" align="left" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-002"><span class="api">GAP</span></para></td><td id="_crossing_styles-515-entry-005" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-003"><img src="assets/bridge_gap.47f9b166.png"></para></td><td id="_crossing_styles-515-entry-006" align="center" valign="top"></td></tr><tr id="_crossing_styles-515-row-003"><td id="_crossing_styles-515-entry-007" align="left" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-004"><span class="api">ARC</span></para></td><td id="_crossing_styles-515-entry-008" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-005"><img src="assets/bridge_arc.3aa3bf41.png"></para></td><td id="_crossing_styles-515-entry-009" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-006"><img src="assets/bridge_arc_scaled.aee4e497.png"></para></td></tr><tr id="_crossing_styles-515-row-004"><td id="_crossing_styles-515-entry-010" align="left" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-007"><span class="api">RECTANGLE</span></para></td><td id="_crossing_styles-515-entry-011" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-008"><img src="assets/bridge_rect.718b2fb9.png"></para></td><td id="_crossing_styles-515-entry-012" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-009"><img src="assets/bridge_rect_scaled.88a7253f.png"></para></td></tr><tr id="_crossing_styles-515-row-005"><td id="_crossing_styles-515-entry-013" align="left" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-010"><span class="api">TWO_SIDES</span></para></td><td id="_crossing_styles-515-entry-014" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-011"><img src="assets/bridge_two_sides.f73bae05.png"></para></td><td id="_crossing_styles-515-entry-015" align="center" valign="top"><para class="dguide-para" id="_crossing_styles-515-simpara-012"><img src="assets/bridge_two_sides_scaled.e84e192e.png"></para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"_crossing_styles-515-simpara-013",content:"The scaled variants of these styles scale their height according to their width."}]},{tagname:"section",id:"_crossing_determination",title:"Crossing Determination",children:[{tagname:"para","class":"dguide-para",id:"_crossing_determination-516-simpara-001",content:'The <span class="api">BridgeManager</span> class knows several policies for determining crossings between\nobstacles.\nFor example, edge segments that have either predominant horizontal or vertical\norientation can be chosen to always lie atop of edge segments having contrary\norientation.\nYou can use the <api-link id="_crossing_determination-516-api-link-001" data-member="bridgeCrossingPolicy" data-text="bridgeCrossingPolicy" data-type="yfiles.view.BridgeManager"></api-link> property\nto specify a determination policy from the\n<api-link id="_crossing_determination-516-api-link-002" data-member="" data-text="BridgeCrossingPolicy" data-type="yfiles.view.BridgeCrossingPolicy"></api-link> enumeration.'},{tagname:"figure","class":"image",title:"Policies for determining crossings",id:"_crossing_determination-516-figure-001","float":0,children:[{tagname:"img",src:"assets/bridge_crossing_H_B_V.2c8b20aa.png",alt:"",title:'<para class="dguide-para"><api-link id="_crossing_determination-516-api-link-003" data-member="HORIZONTAL_BRIDGES_VERTICAL" data-text="HORIZONTAL_BRIDGES_VERTICAL" data-type="yfiles.view.BridgeCrossingPolicy"></api-link></para>'},{tagname:"img",src:"assets/bridge_crossing_V_B_H.6b1fc633.png",alt:"",title:'<para class="dguide-para"><api-link id="_crossing_determination-516-api-link-004" data-member="VERTICAL_BRIDGES_HORIZONTAL" data-text="VERTICAL_BRIDGES_HORIZONTAL" data-type="yfiles.view.BridgeCrossingPolicy"></api-link></para>'},{tagname:"img",src:"assets/bridge_crossing_MH_B_LH.dd935fd0.png",alt:"",title:'<para class="dguide-para"><api-link id="_crossing_determination-516-api-link-005" data-member="MORE_HORIZONTAL_BRIDGES_LESS_HORIZONTAL" data-text="MORE_HORIZONTAL_BRIDGES_LESS_HORIZONTAL" data-type="yfiles.view.BridgeCrossingPolicy"></api-link></para>'},{tagname:"img",src:"assets/bridge_crossing_MV_B_LV.7d526f5a.png",alt:"",title:'<para class="dguide-para"><api-link id="_crossing_determination-516-api-link-006" data-member="MORE_VERTICAL_BRIDGES_LESS_VERTICAL" data-text="MORE_VERTICAL_BRIDGES_LESS_VERTICAL" data-type="yfiles.view.BridgeCrossingPolicy"></api-link></para>'}]}]},{tagname:"section",id:"_custom_obstacle_provider",title:"Custom Obstacle Provider",children:[{tagname:"para","class":"dguide-para",id:"_custom_obstacle_provider-517-simpara-001",content:'Note that obstacles are not restricted to describe edge segments alone.\nA custom <span class="api">IObstacleProvider</span> implementation, for example,\ncan define the border of group nodes as obstacles as well.'},{tagname:"example",id:"_custom_obstacle_provider-517-example-001",title:"A custom obstacle provider for nodes",content:'<pre class="programlisting javascript" id="_custom_obstacle_provider-517-programlisting-001" language="javascript" format="linespecific"><code>// Custom obstacle provider which provides a node\'s outline\r\nlet MyNodeObstacleProvider = new yfiles.ClassDefinition(\'NodeObstacleProvider\', {\r\n  $with: [yfiles.view.IObstacleProvider],\r\n\r\n  // Create a specific instance for a node\r\n  constructor: function(node) {\r\n    this.node = node\r\n  },\r\n\r\n  node: null,\r\n\r\n  /** IObstacleProvider implementation */\r\n  getObstacles: function(context) {\r\n    const style = this.node.style\r\n    if (style.renderer.getVisibilityTestable(node, style).isVisible(context, context.clip)) {\r\n      // only for nodes which are currently visible:\r\n      // let the IShapeGeometry return the outline as GeneralPath\r\n      const geometry = style.renderer.getShapeGeometry(node, style)\r\n      const obstaclePath = geometry.getOutline()\r\n      return obstaclePath\r\n    }\r\n    // not visible: return null\r\n    return null\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_custom_obstacle_provider-517-simpara-002",content:'Note that querying nodes for obstacle providers has to be enabled on\n<span class="api">GraphObstacleProvider</span> first,\nby setting <api-link id="_custom_obstacle_provider-517-api-link-001" data-member="queryNodes" data-text="queryNodes" data-type="yfiles.view.GraphObstacleProvider"></api-link>\nto <code>true</code>.'},{tagname:"example",id:"_custom_obstacle_provider-517-example-002",title:"Enabling the custom obstacle provider for group nodes",content:'<pre class="programlisting javascript" id="_custom_obstacle_provider-517-programlisting-002" language="javascript" format="linespecific"><code>// enable querying nodes on the obstacle provider\r\nconst provider = new yfiles.view.GraphObstacleProvider()\r\nprovider.queryNodes = true\r\nbridgeManager.addObstacleProvider(provider)\r\n\r\n// add the custom obstacle provider\r\ngraph.decorator.nodeDecorator.obstacleProviderDecorator.setFactory(\r\n  // if the current node is a group node ...\r\n  n => graph.isGroupNode(n),\r\n  // ... then return our custom obstacle provider\r\n  () => new MyNodeObstacleProvider()\r\n)\n</code></pre>'},{tagname:"figure","class":"image",title:"Custom obstacle provider for group nodes",id:"_custom_obstacle_provider-517-figure-001","float":0,children:[{tagname:"img",src:"assets/bridge_custom_obstacle_provider_1.a52020a0.png",alt:"",title:'<para class="dguide-para">Default bridge behavior</para>'},{tagname:"img",src:"assets/bridge_custom_obstacle_provider_2.44f1ba06.png",alt:"",title:'<para class="dguide-para">Border of group nodes as obstacles</para>'}]}]},{tagname:"section",id:"_bridges_for_custom_edge_styles",title:"Bridges for Custom Edge Styles",children:[{tagname:"para","class":"dguide-para",id:"_bridges_for_custom_edge_styles-518-simpara-001",content:'The <a href="..\\..\\demos\\02-tutorial-custom-styles\\28-bridge-support\\index.html" target="blank" class="demo-link" title="This step shows how to enable bridges for a custom edge style">Bridge Support</a> sample of the\nCustom Styles tutorial shows in detail what to do if your <a href="#/dguide/customizing_styles">own edge style</a> should support bridges.'}]}]}]},{tagname:"section",id:"customizing_io",title:"Customizing Graph I/O",children:[{tagname:"para","class":"dguide-para",id:"customizing_io-017-simpara-001",content:"This chapter describes how you can customize the serialization mechanism in yFiles for HTML to serialize and deserialize your own data that is bound to graphs and graph elements."},{tagname:"section",id:"customizing_io_graphml",title:"The GraphML File Format",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_graphml-519-simpara-001",content:'yFiles for HTML uses an extension of the <a href="http://graphml.graphdrawing.org" target="_blank">GraphML</a> format to serialize the\ncontents of a <span class="api">GraphComponent</span>. The format is XML based and describes the graph via XML elements such as\n<code>&lt;graph></code>, <code>&lt;node></code>, <code>&lt;edge></code>, and so on. Properties of the elements are described in <code>&lt;data></code> elements\nthat use a certain <code>key</code> value to correlate them with a property.'},{tagname:"para","class":"dguide-para tip",id:"customizing_io_graphml-519-tip-001",content:'<p id="customizing_io_graphml-519-simpara-002">While using the yFiles for HTML serialization mechanism provides many advantages and functionality\nout-of-the-box, it is <strong id="customizing_io_graphml-519-emphasis-001" class="bold" role="bold">not mandatory</strong> to use the GraphML file format for serialization.</p>'}]},{tagname:"section",id:"customizing_io_gmlioh",title:"The GraphMLIOHandler",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_gmlioh-520-simpara-001",content:'The central class for reading and writing GraphML is the <api-link id="customizing_io_gmlioh-520-api-link-001" data-member="" data-text="GraphMLIOHandler" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>. Besides its methods for reading and\nwriting graphs it offers a number of customization hooks.'},{tagname:"para",content:'<dl id="customizing_io_gmlioh-520-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_io_gmlioh-520-term-001"><api-link id="customizing_io_gmlioh-520-api-link-002" data-member="readFromDocument(yfiles.graph.IGraph,Document)" data-text="readFromDocument(graph:&#xA0;IGraph, document:&#xA0;Document):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dt id="customizing_io_gmlioh-520-term-002"><api-link id="customizing_io_gmlioh-520-api-link-003" data-member="readFromGraphMLText(yfiles.graph.IGraph,string)" data-text="readFromGraphMLText(graph:&#xA0;IGraph, data:&#xA0;string):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dt id="customizing_io_gmlioh-520-term-003"><api-link id="customizing_io_gmlioh-520-api-link-004" data-member="readFromURL(yfiles.graph.IGraph,string)" data-text="readFromURL(graph:&#xA0;IGraph, url:&#xA0;string):&#xA0;Promise&lt;IGraph&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-001">\n<p id="customizing_io_gmlioh-520-simpara-002">Parses GraphML from different sources and populates the given graph.</p>\n</dd>\n<dt id="customizing_io_gmlioh-520-term-004"><api-link id="customizing_io_gmlioh-520-api-link-005" data-member="write(yfiles.graph.IGraph)" data-text="write(graph:&#xA0;IGraph):&#xA0;Promise&lt;string&gt;" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-002">\n<p id="customizing_io_gmlioh-520-simpara-003">Returns a promise with the given graph as GraphML string.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_io_gmlioh-520-simpara-004",content:'By default the <span class="api">GraphMLIOHandler</span> reads and writes GraphML which encodes all structural, visual, and geometric information\nof a graph. You can easily configure the <span class="api">GraphMLIOHandler</span> to write additional business data which\nis associated with graph elements or the graph itself. These data can be of simple type like string, e.g. encoding\na tooltip or a link. It is also possible, though, to encode complex data like objects which model the entire\nbusiness data behind a graph item.'},{tagname:"heading",id:"_customizing_api_name_text_graphmliohandler",renderas:"sect3",content:'Customizing <span class="api">GraphMLIOHandler</span>'},{tagname:"para","class":"dguide-para",id:"customizing_io_gmlioh-520-simpara-005",content:'To use a customized <span class="api">GraphMLIOHandler</span> with a <span class="api">GraphComponent</span>, you can set its property\n <api-link id="customizing_io_gmlioh-520-api-link-006" data-member="graphMLIOHandler" data-text="GraphMLSupport.graphMLIOHandler" data-type="yfiles.graphml.GraphMLSupport"></api-link>:'},{tagname:"example",id:"ex_useCustomGMLIOH",title:"Setting a custom GraphMLIOHandler",content:'<pre class="programlisting javascript" id="customizing_io_gmlioh-520-programlisting-001" language="javascript" format="linespecific"><code>const graphMLIOHandler = new yfiles.graphml.GraphMLIOHandler()\r\n\r\n// configure the handler to your needs ...\r\n\r\n// use the graphml support class to attach some predefined commands that use\r\n// our newly defined graphml handler\r\nconst support = new yfiles.graphml.GraphMLSupport({\r\n  graphComponent: graphComponent,\r\n  storageLocation: yfiles.graphml.StorageLocation.FILE_SYSTEM,\r\n  graphMLIOHandler: graphMLIOHandler\r\n})\n</code></pre>'},{tagname:"heading",id:"_events_for_reading_and_writing",renderas:"sect3",content:"Events for Reading and Writing"},{tagname:"para","class":"dguide-para",id:"customizing_io_gmlioh-520-simpara-006",content:'<span class="api">GraphMLIOHandler</span> facilitates events that are fired at different stages of reading or writing.\nThe most common use case is to perform an action after a graph is\n<api-link id="customizing_io_gmlioh-520-api-link-007" data-member="Parsed" data-text="loaded" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>, for example\n<a href="#/dguide/layout-applying_a_layout">to apply a layout algorithm</a> to the loaded graph.'},{tagname:"para",content:'<dl class="techn_templ" role="techn_templ" id="tab_gmlioh_notifications">\n<dt id="customizing_io_gmlioh-520-term-005"><api-link id="customizing_io_gmlioh-520-api-link-008" data-member="Writing" data-text="Writing" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-003">\n<p id="customizing_io_gmlioh-520-simpara-007">Fired when the writing of a document is about to start.</p>\n</dd>\n<dt id="customizing_io_gmlioh-520-term-006"><api-link id="customizing_io_gmlioh-520-api-link-009" data-member="Written" data-text="Written" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-004">\n<p id="customizing_io_gmlioh-520-simpara-008">Fired when the document has been written successfully.</p>\n</dd>\n<dt id="customizing_io_gmlioh-520-term-007"><api-link id="customizing_io_gmlioh-520-api-link-010" data-member="Parsing" data-text="Parsing" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-005">\n<p id="customizing_io_gmlioh-520-simpara-009">Fired when the parsing of the document is about to start.</p>\n</dd>\n<dt id="customizing_io_gmlioh-520-term-008"><api-link id="customizing_io_gmlioh-520-api-link-011" data-member="Parsed" data-text="Parsed" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_gmlioh-520-listitem-006">\n<p id="customizing_io_gmlioh-520-simpara-010">Fired when the document has be parsed successfully.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_io_serialization-basics",title:"Adding Custom Data for Serialization",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization-basics-521-simpara-001",content:'There are no strict limitations on <strong id="customizing_io_serialization-basics-521-emphasis-001" class="bold" role="bold">what</strong> can be serialized, as long as the object to\nserialize can be converted to a string or better XML element and back.\nThe GraphML serialization mechanism in yFiles for HTML handles the serialization of an <span class="api">IGraph</span>.\nThis means that everything that is <a href="#/dguide/graph">related to the graph structure</a> gets serialized.\nIf you want to serialize your own objects, the first thing you need to make sure is that\nthey are somehow connected to the graph model. This can be done using\n<api-link id="customizing_io_serialization-basics-521-api-link-001" data-member="tag" data-text="tags" data-type="yfiles.graph.ITagOwner"></api-link> or <api-link id="customizing_io_serialization-basics-521-api-link-002" data-member="" data-text="IMapper&lt;K,V&gt;" data-type="yfiles.collections.IMapper"></api-link> as\ndescribed in the section <a href="#/dguide/customizing_graph-binding_data">Associating Data with Graph Elements</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization-basics-521-simpara-002",content:'In the case of using <span class="api">IMapper&lt;K,V></span>, you have to specify which mapper should be serialized or should be filled\nwhen deserializing.\nThe following methods of <span class="api">GraphMLIOHandler</span> enable registering <span class="api">IMapper&lt;K,V></span> instances as input data targets\nand as output data sources:'},{tagname:"para",content:'<dl id="customizing_io_serialization-basics-521-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_io_serialization-basics-521-term-001"><api-link id="customizing_io_serialization-basics-521-api-link-003" data-member="addInputMapper(yfiles.lang.Class,yfiles.lang.Class,string,yfiles.collections.IMapper)" data-text="addInputMapper&lt;TKey,TData&gt;(keyType:&#xA0;Class, dataType:&#xA0;Class, name:&#xA0;string, mapper:&#xA0;IMapper&lt;TKey,&#xA0;TData&gt;):&#xA0;void" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_serialization-basics-521-listitem-001">\n<p id="customizing_io_serialization-basics-521-simpara-003">Register an <span class="api">IMapper&lt;K,V></span> instance for use as an input data target.</p>\n</dd>\n<dt id="customizing_io_serialization-basics-521-term-002"><api-link id="customizing_io_serialization-basics-521-api-link-004" data-member="addOutputMapper(yfiles.lang.Class,yfiles.lang.Class,string,yfiles.collections.IMapper)" data-text="addOutputMapper&lt;TModelItem,TValue&gt;(modelItemType:&#xA0;Class, dataType:&#xA0;Class, name:&#xA0;string, mapper:&#xA0;IMapper&lt;TModelItem,&#xA0;TValue&gt;):&#xA0;void" data-type="yfiles.graphml.GraphMLIOHandler"></api-link></dt><dd id="customizing_io_serialization-basics-521-listitem-002">\n<p id="customizing_io_serialization-basics-521-simpara-004">Register an <span class="api">IMapper&lt;K,V></span> instance for use as an output data source.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization-basics-521-simpara-005",content:'The <api-link id="customizing_io_serialization-basics-521-api-link-005" data-member="" data-text="IMapper&lt;K,V&gt;" data-type="yfiles.collections.IMapper"></api-link> instances bind the data stored in GraphML attributes to their corresponding graph elements.\nThe specified <code>name</code> must correspond to the <code>attr.name</code> of the GraphML attribute’s key definition.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization-basics-521-simpara-006",content:"The following fragment shows how to register a mapper as input target for a GraphML attribute with node scope\nthat stores <code>number</code> values."},{tagname:"example",id:"customizing_io_serialization-basics-521-example-001",title:"Adding a GraphML input attribute to GraphMLIOHandler",content:'<pre class="programlisting javascript" id="customizing_io_serialization-basics-521-programlisting-001" language="javascript" format="linespecific"><code>// Create a mapper.\r\nconst nodeMapper = new yfiles.collections.Mapper()\r\n\r\n// Register the mapper with the GraphML I/O handler.\r\n// The deserializer will be looking for data that has attr.name "nodeAttr".\r\ngraphMLIOHandler.addInputMapper(yfiles.graph.INode.$class, yfiles.lang.Number.$class, "nodeAttr", nodeMapper)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization-basics-521-simpara-007",content:'Also keep in mind that all types you define yourself for customizations in yFiles for HTML\nsuch as <a href="#/dguide/customizing_styles">custom styles</a>, custom label models, and so on\nneed to be serialized manually.'}]},{tagname:"section",id:"customizing_io_automatic-serialization",title:"Automatically Serialized Types",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_automatic-serialization-522-simpara-001",content:"The I/O mechanism in yFiles for HTML is designed to serialize objects where possible\nwithout the need of custom serialization code. Here’s a list of types that can be (de)serialized\nautomatically:"},{tagname:"para",content:'<ul id="customizing_io_automatic-serialization-522-itemizedlist-001"><li id="customizing_io_automatic-serialization-522-listitem-001"><p id="customizing_io_automatic-serialization-522-simpara-002">Primitive data types (<code>boolean</code>, <code>string</code>, <code>number</code>)</p></li><li id="customizing_io_automatic-serialization-522-listitem-002"><p id="customizing_io_automatic-serialization-522-simpara-003">Enums</p></li><li id="customizing_io_automatic-serialization-522-listitem-003"><p id="customizing_io_automatic-serialization-522-simpara-004">Classes that follow <strong id="customizing_io_automatic-serialization-522-emphasis-001" class="bold" role="bold">these rules</strong>:</p><para><ul id="customizing_io_automatic-serialization-522-itemizedlist-002"><li id="customizing_io_automatic-serialization-522-listitem-004"><p id="customizing_io_automatic-serialization-522-simpara-005">They provide a <strong id="customizing_io_automatic-serialization-522-emphasis-002" class="bold" role="bold">public default constructor</strong> (without arguments)</p></li><li id="customizing_io_automatic-serialization-522-listitem-005"><p id="customizing_io_automatic-serialization-522-simpara-006">All their relevant properties are <strong id="customizing_io_automatic-serialization-522-emphasis-003" class="bold" role="bold">readable and writable</strong>.</p></li><li id="customizing_io_automatic-serialization-522-listitem-006"><p id="customizing_io_automatic-serialization-522-simpara-007">They are yFiles for HTML classes, i.e. they are created using <api-link id="customizing_io_automatic-serialization-522-api-link-001" data-member="" data-text="Class" data-type="yfiles.lang.Class"></api-link> or <api-link id="customizing_io_automatic-serialization-522-api-link-002" data-member="" data-text="ClassDefinition" data-type="yfiles.lang.ClassDefinition"></api-link> or extend one of them.</p></li><li id="customizing_io_automatic-serialization-522-listitem-007"><p id="customizing_io_automatic-serialization-522-simpara-008">There must exist a <a href="#/dguide/customizing_io_best-practices_namespace-mapping">mapping</a> between the type and the fully qualified element name.</p></li></ul></para></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_io_automatic-serialization-522-simpara-009",content:"So you don’t need to worry about serializing them.\nThe graph I/O mechanism is able to build Objects that follow the above mentioned rules via reflection automatically."},{tagname:"para","class":"dguide-para tip",id:"customizing_io_automatic-serialization-522-tip-001",content:'<p id="customizing_io_automatic-serialization-522-simpara-010">Design your custom data with automatic serializability in mind.</p>'},{tagname:"section",id:"customizing_io_best-practices_namespace-mapping",title:"Map the Namespace of Your Custom Types",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_best-practices_namespace-mapping-523-simpara-001",content:'Custom data consisting of structured types that is serialized by the default XML serialization support of yFiles for HTML\nmust be given a custom XML namespace by means of a namespace mapping.\nThe mapping for a type’s namespace name to an XML namespace\nis defined by registering a namespace mapping to <span class="api">GraphMLIOHandler</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_io_best-practices_namespace-mapping-523-simpara-002",content:"The following example shows how to define an XML namespace mapping:"},{tagname:"example",id:"customizing_io_best-practices_namespace-mapping-523-informalexample-001",content:'<pre class="programlisting javascript" id="customizing_io_best-practices_namespace-mapping-523-programlisting-001" language="javascript" format="linespecific"><code>graphMLIOHandler.addXamlNamespaceMapping(\r\n  "http://www.yworks.com/yfiles-for-java/demos/OrgChartEditor/1.0", "Employee",\r\n  Employee.$class)\n</code></pre>'}]}]},{tagname:"section",id:"customizing_io_serialization_complex-types",title:"Serializing Complex Types",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types-524-simpara-001",content:'If you want to serialize and deserialize your own types that can’t be serialized out of the box\n(as mentioned in <a href="#/dguide/customizing_io_automatic-serialization">Automatically Serialized Types</a>), for example your business model or just your\n<a href="#/dguide/customizing_styles">custom styles</a> implementation, you need to explicitly provide means to serialize\nand deserialize them.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types-524-simpara-002",content:"There are three different ways to provide serialization support for your classes."},{tagname:"section",id:"customizing_io_serialization_complex-types_markup",title:"Markup Extension",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_markup-525-simpara-001",content:"Markup extensions use the fact that the (de)serialization mechanism in yFiles for HTML uses reflection to\ndiscover readable and writable properties of classes and set their values."},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_markup-525-simpara-002",content:"A markup extension can be used to support (de)serialization for types which do not fulfill all prerequisites to be\n(de)serialized themselves. It does so by adapting the class it handles to expose\nall values to be serialized as read/write properties."},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_markup-525-simpara-003",content:'A markup extension is a class that derives from the abstract base class <api-link id="customizing_io_serialization_complex-types_markup-525-api-link-001" data-member="" data-text="MarkupExtension" data-type="yfiles.graphml.MarkupExtension"></api-link>.\nCreating one enables both the serialization and deserialization of its adapted class.\nWhen encountering an XML element of a class that is represented by a markup extension, the framework\nfills the properties of the markup extension with the values of the XML element. Afterwards it calls\nthe abstract method <api-link id="customizing_io_serialization_complex-types_markup-525-api-link-002" data-member="provideValue(yfiles.graph.ILookup)" data-text="provideValue" data-type="yfiles.graphml.MarkupExtension"></api-link>\nand expects the markup extension to return an object of the desired class, given the values\nthat are set in the properties.'},{tagname:"section",id:"_registering_a_markup_extension",title:"Registering a Markup Extension",children:[{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-001",content:'Of course it is not enough to just define the markup extension, you need to tell the framework that your\nparticular class is represented by your markup extension for serialization. For this, you need\nto provide a way to acquire a markup extension from your custom type. This is accomplished by\nimplementing the <api-link id="_registering_a_markup_extension-526-api-link-001" data-member="" data-text="IMarkupExtensionConverter" data-type="yfiles.graphml.IMarkupExtensionConverter"></api-link> interface.'},{tagname:"para",content:'<ul id="_registering_a_markup_extension-526-itemizedlist-001"><li id="_registering_a_markup_extension-526-listitem-001"><p id="_registering_a_markup_extension-526-simpara-002">In its <api-link id="_registering_a_markup_extension-526-api-link-002" data-member="canConvert(yfiles.graphml.IWriteContext,Object)" data-text="canConvert" data-type="yfiles.graphml.IMarkupExtensionConverter"></api-link>\nmethod return <code>true</code> for objects that the markup extension can handle.</p></li><li id="_registering_a_markup_extension-526-listitem-002"><p id="_registering_a_markup_extension-526-simpara-003">In the <api-link id="_registering_a_markup_extension-526-api-link-003" data-member="convert(yfiles.graphml.IWriteContext,Object)" data-text="convert" data-type="yfiles.graphml.IMarkupExtensionConverter"></api-link> method\ncreate and return your markup extension properly configured for the given object.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-004",content:'Finally you need to provide your <span class="api">IMarkupExtensionConverter</span> for your object:'},{tagname:"para",content:'<ul id="_registering_a_markup_extension-526-itemizedlist-002"><li id="_registering_a_markup_extension-526-listitem-003"><p id="_registering_a_markup_extension-526-simpara-005">You can either annotate your custom class with the <api-link id="_registering_a_markup_extension-526-api-link-004" data-member="" data-text="GraphMLAttribute" data-type="yfiles.graphml.GraphMLAttribute"></api-link>\nannotation and set its <api-link id="_registering_a_markup_extension-526-api-link-005" data-member="markupExtensionConverter" data-text="GraphMLAttribute.markupExtensionConverter" data-type="yfiles.graphml.GraphMLAttribute"></api-link> property to the class of the <span class="api">IMarkupExtensionConverter</span> implementation,</p></li><li id="_registering_a_markup_extension-526-listitem-004"><p id="_registering_a_markup_extension-526-simpara-006">if your object implements <api-link id="_registering_a_markup_extension-526-api-link-006" data-member="" data-text="ILookup" data-type="yfiles.graph.ILookup"></api-link> return the\n<span class="api">IMarkupExtensionConverter</span> in the lookup method as described in\nthe <a href="#/dguide/customizing_concepts_lookup">Service Locator Pattern: Lookup</a> section,</p></li><li id="_registering_a_markup_extension-526-listitem-005"><p id="_registering_a_markup_extension-526-simpara-007">or implement the <span class="api">IMarkupExtensionConverter</span> interface directly on your object.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-008",content:'The <a href="#/dguide/ex_MarkupExtension">A sample class definition with a read-only property and a markup extension that adapts this class</a> example shows a sample class definition for objects that we want to write to and read from GraphML\nalong with the graph structure. The class has only one property, which is read-only and can only be set by\nthe constructor. Thus objects of the class cannot be handled directly by XML serialization/deserialization\nwhich needs writable properties. As a consequence, we have implemented a markup extension which will be used\nfor the serialization process instead.\nThe markup extension overcomes the class’s limitations by exposing the property as read/write property\nand by providing a default constructor.'},{tagname:"example",id:"ex_MarkupExtension",title:"A sample class definition with a read-only property and a markup extension that adapts this class",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-001" language="javascript" format="linespecific"><code>const MyClass = yfiles.lang.Class(\'MyClass\', {\r\n  // non-default constructor prevents deserialization\r\n  \'constructor\': function(myValue) {\r\n    this.$myProperty = myValue\r\n  },\r\n\r\n  // read-only property which is not (de)serializable\r\n  \'$myProperty\': null,\r\n  \'myProperty\': {\r\n    \'get\': function() {\r\n      return this.$myProperty\r\n    }\r\n  }\n</code></pre><pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-002" language="javascript" format="linespecific"><code>// MarkupExtension for MyClass that exposes MyProperty as serializable read/write property\r\nclass MyClassExtension extends yfiles.graphml.MarkupExtension {\r\n  get myProperty() {\r\n    return this.$myProperty\r\n  }\r\n\r\n  set MyProperty(value) {\r\n    this.$myProperty = value\r\n  }\r\n\r\n  // creates an instance of MyClass after deserialization\r\n  provideValue(/**yfiles.graph.ILookup*/ serviceProvider) {\r\n    return new MyClass(this.myProperty)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-009",content:'How an implementation of <span class="api">IMarkupExtensionConverter</span> for the sample class\nand markup extension might look like is shown in the example <a href="#/dguide/ex_MarkupExtension_converter">An implementation of IMarkupExtensionConverter for the sample class</a>.'},{tagname:"example",id:"ex_MarkupExtension_converter",title:"An implementation of IMarkupExtensionConverter for the sample class",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-003" language="javascript" format="linespecific"><code>// markup extension converter converts MyClass into its markup extension\r\nclass MyClassMarkupExtensionConverter extends yfiles.lang.Class(yfiles.graphml.IMarkupExtensionConverter) {\r\n  // returns true if the converter can handle the given value\r\n  canConvert(context, value) {\r\n    // for the sake of demonstration, we simply check if the value is of type MyClass\r\n    return value instanceof MyClass\r\n  }\r\n\r\n  // converts an object of type MyClass into its markup extension\r\n  convert(context, value) {\r\n    // create a new instance and set the MyProperty\r\n    const extension = new MyClassExtension()\r\n    extension.myProperty = value.myProperty\r\n    return extension\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-010",content:'As previously mentioned, if you have the source code of the class you want to serialize,\nthere are different ways to let the framework use the markup extension. The easiest way\nis to annotate the sample class directly and passing the <span class="api">IMarkupExtensionConverter</span>\nimplementation in the annotation as shown in the example <a href="#/dguide/ex_MarkupExtension_Annotation">Inserting the IMarkupExtensionConverter by annotating the sample class</a>. Note, that\nthis kind of annotation only works with classes that are created like the one in the sample. For ES6 classes,\nthis is currently not supported.'},{tagname:"example",id:"ex_MarkupExtension_Annotation",title:"Inserting the IMarkupExtensionConverter by annotating the sample class",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-004" language="javascript" format="linespecific"><code>// Annotate the class to provide a converter for writing\r\n  const MyClass = yfiles.lang.Class(\'MyClass\', {\r\n    \'$meta\': [yfiles.graphml.GraphMLAttribute()\r\n      .init({ \'markupExtensionConverter\': MyClassMarkupExtensionConverter.$class })],\r\n\r\n    ...\r\n  })\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-011",content:'Another way is to implement <span class="api">ILookup</span> on the sample class and return the\n<span class="api">IMarkupExtensionConverter</span> implementation in the lookup method as shown\nin example <a href="#/dguide/ex_MarkupExtension_Lookup">Inserting the IMarkupExtensionConverter by implementing ILookup</a>.'},{tagname:"example",id:"ex_MarkupExtension_Lookup",title:"Inserting the IMarkupExtensionConverter by implementing ILookup",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-005" language="javascript" format="linespecific"><code>// the same class, now implementing the lookup mechanism\r\nclass MyClass extends yfiles.lang.Class(yfiles.graph.ILookup) {\r\n\r\n  ...\r\n\r\n  lookup(requestedType) {\r\n    if (yfiles.graphml.IMarkupExtensionConverter.$class === requestedType) {\r\n      // if the framework is looking for an IMarkupExtensionConverter, return our converter.\r\n      return new MyClassMarkupExtensionConverter();\r\n    }\r\n    return null;\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-012",content:'You can as well let the class itself return the markup extension by\n<a href="#/dguide/ex_MarkupExtension_Converter">implementing the  IMarkupExtensionConverter  interface directly</a>.'},{tagname:"example",id:"ex_MarkupExtension_Converter",title:"Inserting the IMarkupExtensionConverter by implementing IMarkupExtensionConverter directly",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-006" language="javascript" format="linespecific"><code>// The class itself provides the markup extension\r\nclass MyClass extends yfiles.lang.Class(yfiles.graphml.IMarkupExtensionConverter) {\r\n\r\n  ...\r\n\r\n  canConvert(context, value) { ... }\r\n\r\n  convert(context, value) { ... }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-013",content:'In cases where you can’t alter the source code of the class to serialize, you have to\ninsert the <span class="api">MarkupExtension</span> in the serialization process yourself.\nThis can be done by registering an event handler to the\n<api-link id="_registering_a_markup_extension-526-api-link-007" data-member="HandleSerialization" data-text="GraphMLIOHandler.HandleSerialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> event.\nThe crucial part here is to call the <api-link id="_registering_a_markup_extension-526-api-link-008" data-member="serializeReplacement(yfiles.lang.Class,Object,T)" data-text="IWriteContext.serializeReplacement&lt;T&gt;" data-type="yfiles.graphml.IWriteContext"></api-link> method\nwithin the listener and replace the object to serialize with a markup extension for the object.\nThe example <a href="#/dguide/ex_markupextension_gmlioh_handleserialization">Manually inserting the MarkupExtension in the serialization process</a> shows how this can be implemented.'},{tagname:"example",id:"ex_markupextension_gmlioh_handleserialization",title:"Manually inserting the MarkupExtension in the serialization process",content:'<pre class="programlisting javascript" id="_registering_a_markup_extension-526-programlisting-007" language="javascript" format="linespecific"><code>graphMLIOHandler.addHandleSerializationListener((source, args) => {\r\n  const item = args.getItem()\r\n  if (item instanceof MyClass) {\r\n    const myClassObject = item\r\n    const myClassMarkupExtension = new MyClassExtension()\r\n    myClassMarkupExtension.myProperty = myClassObject.myProperty\r\n    try {\r\n      const context = args.context\r\n      context.serializeReplacement(MyClassExtension.$class, myClassObject, myClassMarkupExtension)\r\n    } catch (e) {\r\n      console.error(e.message)\r\n    }\r\n    args.handled = true\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"_registering_a_markup_extension-526-simpara-014",content:'The <api-link id="_registering_a_markup_extension-526-api-link-009" data-member="HandleSerialization" data-text="GraphMLIOHandler.HandleSerialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> event enables customization\nof the entire serialization process. This event, along with its counterpart for deserialization and\nthe possibilities for customizations using these events are described in detail in the section\n<a href="#/dguide/customizing_io_serialization_complex-types_serialization-handler">Serialization Event Listeners</a>.'}]}]},{tagname:"section",id:"customizing_io_serialization_complex-types_serialization-handler",title:"Serialization Event Listeners",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-001",content:'The <api-link id="customizing_io_serialization_complex-types_serialization-handler-527-api-link-001" data-member="HandleSerialization" data-text="GraphMLIOHandler.HandleSerialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> and\n<api-link id="customizing_io_serialization_complex-types_serialization-handler-527-api-link-002" data-member="HandleDeserialization" data-text="GraphMLIOHandler.HandleDeserialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> events provide low-level hooks\nfor customizing the (de)serialization process. They are dispatched each time the GraphML\nwriting mechanism encounters an object to serialize or an XML element to deserialize.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-002",content:'They can be used in cases where objects need to be serialized that cannot be altered\n(as mentioned in the section <a href="#/dguide/customizing_io_serialization_complex-types_markup">Markup Extension</a>) or\nwhere developers want to have full control over the resulting output.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-003",content:"A serialization handler is an event handler registered on the\naforementioned events. If the object to be serialized can be handled, the provided XML writer has to be used\nto write XML representing the object. Afterwards, the handled flag has to be set to <code>true</code> so no other\nhandler will be queried."},{tagname:"example",id:"customizing_io_serialization_complex-types_serialization-handler-527-example-001",title:"A simple serialization handler",content:'<pre class="programlisting javascript" id="customizing_io_serialization_complex-types_serialization-handler-527-programlisting-001" language="javascript" format="linespecific"><code>function serializationHandler(source, /*yfiles.graphml.HandleSerializationEventArgs*/args) {\r\n  // only serialize items that are of the specific type\r\n  if (args.item instanceof MyTextHolder) {\r\n    const myItem = args.item\r\n    const writer = args.writer\r\n    writer.writeStartElement("MyTextHolder", "MyNamespace")\r\n    writer.writeCData(myItem.text)\r\n    writer.writeEndElement()\r\n    // Signal that this item is serialized.\r\n    args.handled = true\r\n  }\r\n}\r\n\r\n// register the custom serialization handler\r\ngraphMLIOHandler.addHandleSerializationListener(serializationHandler)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-004",content:'You need to register your custom serialization handlers using <api-link id="customizing_io_serialization_complex-types_serialization-handler-527-api-link-003" data-member="HandleSerialization" data-text="HandleSerialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-005",content:"A deserialization handler is an event handler for events which are dispatched each time the GraphML parsing mechanism\nretrieves an XML element that is about to be deserialized. If the handler recognizes the XML element\nas XML it can handle (usually if both the element’s name and namespace are matching), it has to create an instance\nof the class it handles based on the XML element. The created object has to be set as result\nwhich automatically sets the event as handled, preventing any subsequent handler from being invoked."},{tagname:"example",id:"customizing_io_serialization_complex-types_serialization-handler-527-example-002",title:"A simple deserialization handler",content:'<pre class="programlisting javascript" id="customizing_io_serialization_complex-types_serialization-handler-527-programlisting-002" language="javascript" format="linespecific"><code>const deserializationHandler = (source, /*yfiles.graphml.HandleDeserializationEventArgs*/args) => {\r\n  if (args.xmlNode instanceof Element) {\r\n    const element = args.xmlNode\r\n    if ("MyTextHolder" === element.localName\r\n      && "MyNamespace" === element.namespaceURI) {\r\n      const text = element.textContent\r\n      // setting the result sets the event arguments to handled\r\n      args.result = new MyTextHolder(text)\r\n    }\r\n  }\r\n}\r\n\r\n// register the custom deserialization handler\r\ngraphMLIOHandler.addHandleDeserializationListener(deserializationHandler)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_serialization-handler-527-simpara-006",content:'You need to register your custom deserialization handlers using <api-link id="customizing_io_serialization_complex-types_serialization-handler-527-api-link-004" data-member="HandleDeserialization" data-text="HandleDeserialization" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>.'}]},{tagname:"section",id:"customizing_io_serialization_complex-types_symbolic-names",title:"Serialization with Symbolic Names",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_symbolic-names-528-simpara-001",content:'It is possible to use symbolic names for the output file format instead of XML elements that encode\nthe information of an object. Using this approach, you shift the responsibility to encode the\ninformation from the file format to the application.\nThese so-called external references are specified by symbolic names. To this end, event handlers\nthat provide the symbolic\nnames may be registered using method <api-link id="customizing_io_serialization_complex-types_symbolic-names-528-api-link-001" data-member="QueryReferenceId" data-text="QueryReferenceId" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> as shown below:'},{tagname:"example",id:"customizing_io_serialization_complex-types_symbolic-names-528-example-001",title:"Writing an external reference using a symbolic name",content:'<pre class="programlisting javascript" id="customizing_io_serialization_complex-types_symbolic-names-528-programlisting-001" language="javascript" format="linespecific"><code>graphMLIOHandler.addQueryReferenceIdListener((sender, /*yfiles.graphml.QueryReferenceIdEventArgs*/ args) => {\r\n  // If the current object is the same as the default node style, then write\r\n  // "DefaultNodeStyle" instead.\r\n  if (args.value == args.context.graph.nodeDefaults.style) {\r\n    args.referenceId = "DefaultNodeStyle"\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_symbolic-names-528-simpara-002",content:'The symbolic name is specified using the <api-link id="customizing_io_serialization_complex-types_symbolic-names-528-api-link-002" data-member="referenceId" data-text="referenceId" data-type="yfiles.graphml.QueryReferenceIdEventArgs"></api-link>\nproperty provided by the event argument’s type that is handed over to the event handler.\nIt is then used in GraphML in the <code>&lt;data></code> element as shown below:'},{tagname:"example",id:"customizing_io_serialization_complex-types_symbolic-names-528-example-002",title:"External reference in the &lt;data> element",content:'<pre class="programlisting xml" id="customizing_io_serialization_complex-types_symbolic-names-528-programlisting-002" language="xml" format="linespecific"><code>&lt;node id="n1">\r\n  &lt;data key="d2">\r\n&lt;!-- An external reference. The value of the \'ResourceKey\' attribute is a -->\r\n&lt;!-- user-defined symbolic name. -->\r\n    &lt;y:GraphMLReference ResourceKey="DefaultNodeStyle" />\r\n  &lt;/data>\r\n  ...\r\n&lt;/node>\n</code></pre>'
},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_complex-types_symbolic-names-528-simpara-003",content:'When reading in the GraphML representation of a graph, an application can be notified of external references\nby registering event handlers using method <api-link id="customizing_io_serialization_complex-types_symbolic-names-528-api-link-003" data-member="ResolveReference" data-text="ResolveReference" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>.\nCorresponding events are triggered for references that cannot be resolved, which is especially\ntrue for external references.'},{tagname:"example",id:"customizing_io_serialization_complex-types_symbolic-names-528-example-003",title:"Resolving an external reference using a symbolic name",content:'<pre class="programlisting javascript" id="customizing_io_serialization_complex-types_symbolic-names-528-programlisting-003" language="javascript" format="linespecific"><code>graphMLIOHandler.addResolveReferenceListener((sender, /*yfiles.graphml.ResolveReferenceEventArgs*/ args) => {\r\n  if (args.referenceId === "DefaultNodeStyle") {\r\n    // If we encounter a "DefaultNodeStyle" reference, retrieve an instance\r\n    // from the graph\'s NodeDefaults.\r\n    args.value = args.context.graph.nodeDefaults.getStyleInstance()\r\n  }\r\n})\n</code></pre>'}]}]},{tagname:"section",id:"customizing_io_serialization_handlers",title:"Low-level Customizations",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers-529-simpara-001",content:'Internally, reading and writing the data in the <code>&lt;data></code> elements is handled by so-called input and output handlers.\nImplementing the interfaces <api-link id="customizing_io_serialization_handlers-529-api-link-001" data-member="" data-text="IInputHandler" data-type="yfiles.graphml.IInputHandler"></api-link> and <api-link id="customizing_io_serialization_handlers-529-api-link-002" data-member="" data-text="IOutputHandler" data-type="yfiles.graphml.IOutputHandler"></api-link> will\nprovide the maximum flexibility for handling additional data.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers-529-simpara-002",content:'Very roughly spoken, the\n<api-link id="customizing_io_serialization_handlers-529-api-link-003" data-member="parseData(yfiles.graphml.IParseContext,Node)" data-text="IInputHandler.parseData" data-type="yfiles.graphml.IInputHandler"></api-link>\nmethod will be invoked for each <code>&lt;data></code> element which is associated with a <code>&lt;key></code> the handler is supposed to handle.\nThe usual procedure is to get the <api-link id="customizing_io_serialization_handlers-529-api-link-004" data-member="getCurrent(yfiles.lang.Class)" data-text="current" data-type="yfiles.graphml.IParseContext"></api-link> element,\ni.e. the graph element which is encoded by <code>&lt;data></code>’s parent element, parse the passed XML node\n(<code>&lt;data></code>’s child node), and associate the object created according to the node with the graph item.\nHowever, it is totally up to the developer whether and how to do this.'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers-529-simpara-003",content:'The other way around:\nThe <api-link id="customizing_io_serialization_handlers-529-api-link-005" data-member="writeValue(yfiles.graphml.IWriteContext)" data-text="IOutputHandler.writeValue" data-type="yfiles.graphml.IOutputHandler"></api-link>\nmethod will be invoked for each graph item the handler is supposed to handle. It should write the content for\na <code>&lt;data></code> element which is associated with a <code>&lt;key></code> the handler is supposed to handle. The\n<api-link id="customizing_io_serialization_handlers-529-api-link-006" data-member="getCurrent(yfiles.lang.Class)" data-text="current" data-type="yfiles.graphml.IWriteContext"></api-link> graph item can be retrieved from the\n<api-link id="customizing_io_serialization_handlers-529-api-link-007" data-member="" data-text="IWriteContext" data-type="yfiles.graphml.IWriteContext"></api-link> as well as the <api-link id="customizing_io_serialization_handlers-529-api-link-008" data-member="" data-text="IXmlWriter" data-type="yfiles.graphml.IXmlWriter"></api-link> which should be used\nto write XML as child node of the <code>&lt;data></code> element.\nAgain, it is totally up to the developer whether and how to do this.'},{tagname:"section",id:"customizing_io_serialization_handlers_implementation",title:"Implementing Custom I/O Handlers",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers_implementation-530-simpara-001",content:'Implementing a custom output handler is widely facilitated by extending the abstract base class\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-001" data-member="" data-text="OutputHandlerBase&lt;TKey,TData&gt;" data-type="yfiles.graphml.OutputHandlerBase"></api-link>:'},{tagname:"para",content:'<ul id="customizing_io_serialization_handlers_implementation-530-itemizedlist-001"><li id="customizing_io_serialization_handlers_implementation-530-listitem-001"><p id="customizing_io_serialization_handlers_implementation-530-simpara-002">In the constructor: invoke the super constructor to provide the name and scope for the <code>&lt;key></code> definition</p></li><li id="customizing_io_serialization_handlers_implementation-530-listitem-002"><p id="customizing_io_serialization_handlers_implementation-530-simpara-003">implement abstract method\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-002" data-member="getValue(yfiles.graphml.IWriteContext,TKey)" data-text="getValue" data-type="yfiles.graphml.OutputHandlerBase"></api-link>\nto retrieve the object which should be written for the given graph item</p></li><li id="customizing_io_serialization_handlers_implementation-530-listitem-003"><p id="customizing_io_serialization_handlers_implementation-530-simpara-004">implement abstract method\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-003" data-member="writeValueCore(yfiles.graphml.IWriteContext,TData)" data-text="writeValueCore" data-type="yfiles.graphml.OutputHandlerBase"></api-link>\nto write the given data.</p></li></ul>'},{tagname:"example",id:"customizing_io_serialization_handlers_implementation-530-example-001",title:"A custom output handler",content:'<pre class="programlisting javascript" id="customizing_io_serialization_handlers_implementation-530-programlisting-001" language="javascript" format="linespecific"><code>class MyOutputHandler extends yfiles.graphml.OutputHandlerBase {\r\n  constructor() {\r\n    super(yfiles.graph.IEdge.$class, MyTextHolder.$class, yfiles.graphml.KeyScope.EDGE, "my-custom-edge-data",\r\n      yfiles.graphml.KeyType.COMPLEX)\r\n  }\r\n\r\n  writeValueCore(/**yfiles.graphml.IWriteContext*/ context, /**MyTextHolder*/ data) {\r\n    // serialize the data as XML\r\n    const writer = context.writer\r\n    writer.writeStartElement("MyTextHolder", "MyNamespace")\r\n    writer.writeCData(data.text)\r\n    writer.writeEndElement()\r\n  }\r\n\r\n  getValue(/**yfiles.graphml.IWriteContext*/ context, /**yfiles.graph.IEdge*/ key) {\r\n    // get the data which is associated with the current graph item (the key)\r\n    return MyDataStore.getTextHolderForEdge(key)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"customizing_io_serialization_handlers_implementation-530-tip-001",content:'<p id="customizing_io_serialization_handlers_implementation-530-simpara-005">Data which can be serialized by the <span class="api">GraphMLIOHandler</span> can be written using\n  <span class="api">IWriteContext</span>’s <api-link id="customizing_io_serialization_handlers_implementation-530-api-link-004" data-member="serialize(yfiles.lang.Class,T)" data-text="serialize&lt;T&gt;" data-type="yfiles.graphml.IWriteContext"></api-link> method.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers_implementation-530-simpara-006",content:'Implementing a custom input handler is widely facilitated by extending the abstract base class\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-005" data-member="" data-text="InputHandlerBase&lt;TKey,TData&gt;" data-type="yfiles.graphml.InputHandlerBase"></api-link>:'},{tagname:"para",content:'<ul id="customizing_io_serialization_handlers_implementation-530-itemizedlist-002"><li id="customizing_io_serialization_handlers_implementation-530-listitem-004"><p id="customizing_io_serialization_handlers_implementation-530-simpara-007">implement method\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-006" data-member="parseDataCore(yfiles.graphml.IParseContext,Node)" data-text="parseDataCore" data-type="yfiles.graphml.InputHandlerBase"></api-link>\nto return the object deserialized from the given XML node</p></li><li id="customizing_io_serialization_handlers_implementation-530-listitem-005"><p id="customizing_io_serialization_handlers_implementation-530-simpara-008">implement method\n<api-link id="customizing_io_serialization_handlers_implementation-530-api-link-007" data-member="setValue(yfiles.graphml.IParseContext,TKey,TData)" data-text="setValue" data-type="yfiles.graphml.InputHandlerBase"></api-link>\nto associate the given data with the given graph item (key)</p></li></ul>'},{tagname:"example",id:"customizing_io_serialization_handlers_implementation-530-example-002",title:"A custom input handler",content:'<pre class="programlisting javascript" id="customizing_io_serialization_handlers_implementation-530-programlisting-002" language="javascript" format="linespecific"><code>class MyInputHandler extends yfiles.graphml.InputHandlerBase {\r\n  constructor() {\r\n    super(yfiles.graph.IEdge.$class, MyTextHolder.$class, yfiles.graphml.ParsePrecedence.DEFAULT)\r\n  }\r\n\r\n  parseDataCore(/**yfiles.graphml.IParseContext*/ context, /**yfiles.graph.INode*/ node) {\r\n    // gets the child of the &lt;data> element to parse\r\n    if (node instanceof Element) {\r\n      const element = node\r\n      if ("MyTextHolder" === element.localName\r\n        && "MyNamespace" === element.namespaceURI) {\r\n        const text = element.textContent\r\n        return new MyTextHolder(text)\r\n      }\r\n    }\r\n    throw new Error("Invalid XML")\r\n  }\r\n\r\n  setValue(/**yfiles.graphml.IParseContext*/ context, /**yfiles.graph.IEdge*/ key, /**MyTextHolder*/ data) {\r\n    // after the data has been deserialized associate it with the current graph item (key)\r\n    MyDataStore.storeTextHolderForEdge(key, data)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"customizing_io_serialization_handlers_implementation-530-tip-002",content:'<p id="customizing_io_serialization_handlers_implementation-530-simpara-009">Data which can be deserialized by the <span class="api">GraphMLIOHandler</span> can be parsed using\n  <span class="api">IWriteContext</span>’s\n  <api-link id="customizing_io_serialization_handlers_implementation-530-api-link-008" data-member="deserialize(yfiles.lang.Class,Node)" data-text="deserialize&lt;T&gt;" data-type="yfiles.graphml.IParseContext"></api-link> method.</p>'}]},{tagname:"section",id:"customizing_io_serialization_handlers_adding",title:"Registering Custom I/O Handlers",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers_adding-531-simpara-001",content:'Input and output handlers are registered at a <span class="api">GraphMLIOHandler</span> during initialization by means of event\nhandlers. Event handlers for both output handlers and input handlers may be registered using methods\n<api-link id="customizing_io_serialization_handlers_adding-531-api-link-001" data-member="QueryOutputHandlers" data-text="QueryOutputHandlers" data-type="yfiles.graphml.GraphMLIOHandler"></api-link> and <api-link id="customizing_io_serialization_handlers_adding-531-api-link-002" data-member="QueryInputHandlers" data-text="QueryInputHandlers" data-type="yfiles.graphml.GraphMLIOHandler"></api-link>, respectively.\nThe events are invoked by <span class="api">GraphMLIOHandler</span> dynamically, i.e., at the time of writing or reading.'},{tagname:"example",id:"customizing_io_serialization_handlers_adding-531-example-001",title:"Attaching output handlers to a GraphMLIOHandler instance",content:'<pre class="programlisting javascript" id="customizing_io_serialization_handlers_adding-531-programlisting-001" language="javascript" format="linespecific"><code>graphMLIOHandler.addQueryOutputHandlersListener((sender, args) => {\r\n  if (args.scope == yfiles.graphml.KeyScope.EDGE) {\r\n    // register the handler only for the matching scope\r\n    args.addOutputHandler(myGetCustomEdgeOutputHandler())\r\n  }\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers_adding-531-simpara-002",content:'The event is dispatched for each <api-link id="customizing_io_serialization_handlers_adding-531-api-link-003" data-member="" data-text="scope" data-type="yfiles.graphml.KeyScope"></api-link> before writing. Implementations should check\nthe <api-link id="customizing_io_serialization_handlers_adding-531-api-link-004" data-member="scope" data-text="scope" data-type="yfiles.graphml.QueryOutputHandlersEventArgs"></api-link> before\n<api-link id="customizing_io_serialization_handlers_adding-531-api-link-005" data-member="addOutputHandler(yfiles.graphml.IOutputHandler)" data-text="adding" data-type="yfiles.graphml.QueryOutputHandlersEventArgs"></api-link>\nthe output handler. Note that the output handler itself is responsible for providing the correct\nattributes for the key element. <api-link id="customizing_io_serialization_handlers_adding-531-api-link-006" data-member="" data-text="OutputHandlerBase&lt;TKey,TData&gt;" data-type="yfiles.graphml.OutputHandlerBase"></api-link>’s constructors therefore require\nat least the name as parameter.'},{tagname:"example",id:"customizing_io_serialization_handlers_adding-531-example-002",title:"Attaching input handlers to a GraphMLIOHandler instance",content:'<pre class="programlisting javascript" id="customizing_io_serialization_handlers_adding-531-programlisting-002" language="javascript" format="linespecific"><code>graphMLIOHandler.addQueryInputHandlersListener((sender, args) => {\r\n  if (args.handled\r\n    || !yfiles.graphml.GraphMLIOHandler.matchesName(args.keyDefinition, "my-custom-edge-data")\r\n    || !yfiles.graphml.GraphMLIOHandler.matchesScope(args.keyDefinition, yfiles.graphml.KeyScope.EDGE)) {\r\n    // do nothing if\r\n    //   args are already handled or\r\n    //   \'attr.name\' is not "my-custom-edge-data"\r\n    //   or scope is not edge\r\n    return\r\n  }\r\n  args.addInputHandler(myGetCustomEdgeInputHandler())\r\n  args.handled = true\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_io_serialization_handlers_adding-531-simpara-003",content:'The event is dispatched for each <code>&lt;key></code> element during parsing. Implementations should check\nwhether the event is already <api-link id="customizing_io_serialization_handlers_adding-531-api-link-007" data-member="handled" data-text="handled" data-type="yfiles.graphml.QueryInputHandlersEventArgs"></api-link>\nby another input handler. Also, they have to check whether the <code>&lt;key></code> element’s name and scope attributes\nare matching before\n<api-link id="customizing_io_serialization_handlers_adding-531-api-link-008" data-member="addInputHandler(yfiles.graphml.IInputHandler)" data-text="adding" data-type="yfiles.graphml.QueryInputHandlersEventArgs"></api-link>\nthe input handler. After the handler has been added\n<span class="api">handled</span> should be set to <code>true</code>.'}]}]},{tagname:"section",id:"customizing_io_best-practices",title:"Best Practices for Customizing Serialization",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_best-practices-532-simpara-001",content:"There are some things that are not necessary to implement, however, might be beneficial when\nyou design your own types or customize the serialization process. Especially when you want to reduce the complexity\nof the resulting output file and the necessary customizations to serialize your own types."},{tagname:"section",id:"customizing_io_best-practices_default-value",title:"Provide Default Values for Your Properties",children:[{tagname:"para","class":"dguide-para",id:"customizing_io_best-practices_default-value-533-simpara-001",content:'A default value may be provided with <span class="api">GraphMLAttribute</span>\'s <api-link id="customizing_io_best-practices_default-value-533-api-link-001" data-member="defaultValue" data-text="defaultValue" data-type="yfiles.graphml.GraphMLAttribute"></api-link> property\nto expose their default value to reflection. The XML serializer evaluates this property and\nprevents writing properties which have their default value. This significantly reduces the size of the output\nfile and also slightly improves the (de)serialization performance.\nThe following examples show how to annotate different types of properties:'},{tagname:"example",id:"customizing_io_best-practices_default-value-533-informalexample-001",content:"<pre class=\"programlisting javascript\" id=\"customizing_io_best-practices_default-value-533-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// The default value for this int property is 0\r\n'$intValue': 0,\r\n'intValue': {\r\n  '$meta': [yfiles.graphml.GraphMLAttribute().init({ 'defaultValue': 0 })],\r\n  'get': function() {\r\n    return this.$intValue\r\n  },\r\n  'set': function(value) {\r\n    this.$intValue = value\r\n  }\r\n},\r\n\r\n// The default value for this property is of type Color and can be converted to the string \"Black\"\r\n'$color': yfiles.view.Color.BLACK,\r\n'color': {\r\n  '$meta': [yfiles.graphml.GraphMLAttribute().init({ 'defaultValue': yfiles.view.Color.BLACK })],\r\n  'get': function() {\r\n    return this.$color\r\n  },\r\n  'set': function(color) {\r\n    this.$color = color\r\n  }\r\n}\n</code></pre>"}]}]}]},{tagname:"section",id:"customizing_layout",title:"Customizing Automatic Layout",children:[{tagname:"para","class":"dguide-para",id:"customizing_layout-018-simpara-001",content:"Optimization criteria for graph layout algorithms are numerous. They vary from minimizing the length\nof edge paths to minimizing the number of bends, from placing highly connected components tightly\ntogether to placing nodes in a hierarchical top-to-bottom manner. Besides the rather unemotional\nnature of such optimization, a graph layout algorithm at the same time also aims at making its\noutcome an aesthetically pleasing experience for a user."},{tagname:"para","class":"dguide-para",id:"customizing_layout-018-simpara-002",content:"The yFiles graph layout algorithms support a number of sophisticated features when calculating a\ngraph’s layout. Most notably, grouped graphs and arranging their grouped nodes is supported.\nBus-like edge paths can be generated for edges connecting to a common node, and both starting point\nand end point of an edge path can be constrained to a specific side of a node or even explicit\ncoordinates. Additionally, some algorithms provide labeling as an integrated part of layout\ngeneration."},{tagname:"para","class":"dguide-para",id:"customizing_layout-018-simpara-003",content:"Using the concept of layout stages it is possible to chain different layout algorithms and add\nadditional features."},{tagname:"section",id:"layout_graph_model",title:"The Layout Graph Model",children:[{tagname:"para","class":"dguide-para important",id:"layout_graph_model-534-important-001",content:'<p id="layout_graph_model-534-simpara-001">This section describes the graph model of the layout part of yFiles.\nYou’ll have to work with this model only if you implement your own <span class="api">ILayoutAlgorithm</span>, <span class="api">ILayoutStage</span>, or\nanother type from the layout part.\nThe section <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a> describes how to apply an automatic layout to an <span class="api">IGraph</span>\nor <span class="api">GraphComponent</span>.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_model-534-simpara-002",content:'The layout and analysis part of the yFiles library uses a different graph API than the\n<span class="api">IGraph</span>-based viewer part. Its main classes are the graph types <span class="api">Graph</span> and <span class="api">LayoutGraph</span> and\nthe associated graph element types <span class="api">Node</span> and <span class="api">Edge</span>. These do not implement the corresponding\ninterfaces <span class="api">IGraph</span>, <span class="api">INode</span>, <span class="api">IEdge</span>, etc.'},{tagname:"para","class":"dguide-para",id:"layout_graph_model-534-simpara-003",content:'The type <span class="api">Graph</span> implements a directed graph model. Its main entities are of type <span class="api">Node</span>. The nodes\nare connected by directed edges of type <span class="api">Edge</span>, that is, an edge has a distinct source node and a\ndistinct target node. This graph type is used by the <a href="#/dguide/analysis">analysis algorithms</a> of yFiles.'},{tagname:"para","class":"dguide-para",id:"layout_graph_model-534-simpara-004",content:'The type <span class="api">LayoutGraph</span> extends <span class="api">Graph</span> and adds positional and dimensional information to the graph\nmodel. In particular, this means the location and size of a node, specified by the type\n<span class="api">INodeLayout</span>, and the location of the source port, target port, and the control points of the path\nof an edge, specified by type <span class="api">IEdgeLayout</span>. This extended graph type is used by the\n<a href="#/dguide/layout">automatic layouts</a> of yFiles.'},{tagname:"para","class":"dguide-para",id:"layout_graph_model-534-simpara-005",content:'<a href="#/dguide/fig_layout_graph_model_classes">Types of the layout graph model</a> recaps the hierarchy and interplay of these types.'},{tagname:"figure","class":"image",title:"Types of the layout graph model",id:"fig_layout_graph_model_classes","float":0,children:[{tagname:"img",src:"assets/layout_graph_model_classes.14a88afb.jpg",alt:"layout graph model classes",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"layout_graph_model-534-simpara-006",content:'Compared to <span class="api">IGraph</span>, the most important similarities and differences of the layout graph are:'},{tagname:"para",content:'<ul id="layout_graph_model-534-itemizedlist-001"><li id="layout_graph_model-534-listitem-001"><p id="layout_graph_model-534-simpara-007">Both implement a directed graph with nodes and directed edges. Edges can be self-loops (the source\nand target is the same) and there is no restriction on the number of edges connecting the same two\nnodes from a graph.</p></li><li id="layout_graph_model-534-listitem-002"><p id="layout_graph_model-534-simpara-008">Both provide similar methods to work with the graph structure, for example to created and delete\nnodes and edges, and to iterate the incoming and outgoing edges of a node.</p></li><li id="layout_graph_model-534-listitem-003"><p id="layout_graph_model-534-simpara-009">Both support grouped nodes but the realization is quite different.</p></li><li id="layout_graph_model-534-listitem-004"><p id="layout_graph_model-534-simpara-010">In <span class="api">Graph</span> and <span class="api">LayoutGraph</span>, ports are not distinct graph elements. Instead, the location of ports\nare part of the path of an edge and the desired placement can be specified with\n<a href="#/dguide/layout-port_locations">Port Candidates</a>.</p></li></ul>'},{tagname:"section",id:"layout_graph_class",title:"Class LayoutGraph",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-001",content:"The yFiles graph structure implementation adheres to the idea that the graph should be the only\ninstance in charge of all structural changes. (Structural changes most notably means node and\nedge creation and removal.) This paradigm has some important implications:"},{tagname:"para",content:'<ul id="layout_graph_class-535-itemizedlist-001"><li id="layout_graph_class-535-listitem-001"><p id="layout_graph_class-535-simpara-002">There must exist a valid instance of type Graph to create any graph elements (“inside” this\ngraph instance) at all.</p></li><li id="layout_graph_class-535-listitem-002"><p id="layout_graph_class-535-simpara-003">There is no way to create a node or an edge “outside” a graph.</p></li><li id="layout_graph_class-535-listitem-003"><p id="layout_graph_class-535-simpara-004">All created graph elements instantly belong to a distinct graph.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-005",content:"Additionally, there is a clear cascade of responsibilities for providing access to certain graph\nelement information:"},{tagname:"para",content:'<ul id="layout_graph_class-535-itemizedlist-002"><li id="layout_graph_class-535-listitem-004"><p id="layout_graph_class-535-simpara-006">A graph provides access to its nodes and edges.</p></li><li id="layout_graph_class-535-listitem-005"><p id="layout_graph_class-535-simpara-007">A node provides access to its edges; this can be all edges, or all incoming and outgoing edges,\nrespectively.</p></li><li id="layout_graph_class-535-listitem-006"><p id="layout_graph_class-535-simpara-008">An edge provides access to its source and target node.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-009",content:"A graph can have an arbitrary number of nodes and edges, every node and edge, though, has exactly\none graph. A node can have an arbitrary number of edges, but an edge always has two nodes (its\nsource node and its target node)."},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-010",content:'Every instance of type <api-link id="layout_graph_class-535-api-link-001" data-member="" data-text="Node" data-type="yfiles.algorithms.Node"></api-link> and type <api-link id="layout_graph_class-535-api-link-002" data-member="" data-text="Edge" data-type="yfiles.algorithms.Edge"></api-link> holds a\nreference to the graph instance it belongs to.\nThis reference is cleared when the graph element has been removed or hidden from its graph.'},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-011",content:'Furthermore, every graph element knows the position it has in the respective set of elements within\nits graph.\nMore precisely, when an instance of type <span class="api">Graph</span> is asked for an array of\nits nodes, for example, this array reflects the node iteration sequence exactly,\ni.e., a node at position 6 in the array will return the value 6 when asked for its position.'},{tagname:"para","class":"dguide-para important",id:"layout_graph_class-535-important-001",content:'<p id="layout_graph_class-535-simpara-012">The position of a removed graph element is undefined.\nThe same holds for a hidden graph element.</p>'},{tagname:"example",id:"layout_graph_class-535-example-001",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_class-535-programlisting-001" language="javascript" format="linespecific"><code>const node = getMyNode()\r\n\r\n// get the graph the node belongs to.\r\nconst graph = node.graph\r\n\r\n// get the node\'s position.\r\nconst index = node.index\r\n\r\n// get an array of all nodes from the graph.\r\nconst nodes = graph.getNodeArray()\r\n// Check the positions of all nodes.\r\nfor (let i = 0; i &lt; graph.n; i++) {\r\n  if (nodes[i].index != i) {\r\n    throw new Error("Mismatch at position " + i + ".")\r\n  }\r\n  else {\r\n    console.log("All is well at position " + i + ".")\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-013",content:'Class <span class="api">Graph</span> offers access to its graph elements in several different ways.\nIt returns enumerators and cursors to iterate over the respective sets of graph\nelements, or creates arrays containing references to all nodes or all edges\nfrom the graph.\nAs an additional convenience, there are properties to get the first,\nrespectively last element of any of the two sets.'},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-014",content:"While the returned cursors by definition have read-only behavior on the\nunderlying container, the returned arrays actually are copies of the respective\nsets of elements from the graph at a certain point in time.\nIn effect, this means that, for example, a returned node array can be modified\nin any way, i.e., nodes might be removed from the array or the sequence of\nnodes might be changed, without affecting the node set from the graph."},{tagname:"para","class":"dguide-para",id:"layout_graph_class-535-simpara-015",content:'To change the sequence of any of the graph element sets class <span class="api">Graph</span>\nhas methods to move an element to the first or last position, respectively.'},{tagname:"example",id:"layout_graph_class-535-example-002",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_class-535-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// get the first and last node of the node set from the graph.\r\nconst firstNode = graph.firstNode\r\nconst lastNode = graph.lastNode\r\n\r\n// Exchange first and last node of the node set.\r\ngraph.moveToLast(firstNode)\r\ngraph.moveToFirst(lastNode)\r\n\r\n// get the first and last edge of the edge set from the graph.\r\nconst firstEdge = graph.firstEdge\r\nconst lastEdge = graph.lastEdge\r\n\r\n// Exchange first and last edge of the edge set.\r\ngraph.moveToLast(firstEdge)\r\ngraph.moveToFirst(lastEdge)\r\n\r\n// get an enumerator of all nodes from the graph.\r\nconst ne = graph.nodes\r\n\r\n// get an enumerator of all edges from the graph.\r\nconst ee = graph.edges\r\n\r\n// get a cursor of all nodes from the graph.\r\nconst nc = graph.getNodeCursor()\r\n\r\n// get a cursor of all edges from the graph.\r\nconst ec = graph.getEdgeCursor()\r\n\r\n// get an array of all nodes from the graph.\r\nconst nodes = graph.getNodeArray()\r\n\r\n// get an array of all edges from the graph.\r\nconst edges = graph.getEdgeArray()\n</code></pre>'}]},{tagname:"section",id:"layout_graph_creation",title:"Creating and Removing Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-001",content:"When populating an existing graph with graph elements, it is important to\nobserve certain preconditions:"},{tagname:"para",content:'<ul id="layout_graph_creation-536-itemizedlist-001"><li id="layout_graph_creation-536-listitem-001"><p id="layout_graph_creation-536-simpara-002">Only class Graph provides methods to create nodes and edges.</p></li><li id="layout_graph_creation-536-listitem-002"><p id="layout_graph_creation-536-simpara-003">To create an edge in a graph G it is necessary that both its source node and\nits target node already exist in G.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-004",content:"\n\n\n\n\n\n\n"},{tagname:"example",id:"layout_graph_creation-536-example-001",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_creation-536-programlisting-001" language="javascript" format="linespecific"><code>const graph = new yfiles.algorithms.Graph()\r\n\r\n// create 2 nodes\r\nconst n1 = graph.createNode()\r\nconst n2 = graph.createNode()\r\n// create an edge between the 2 nodes\r\nconst e = graph.createEdge(n1, n2)\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"layout_graph_creation-536-important-001",content:'<p id="layout_graph_creation-536-simpara-005">Note that the code snippets presented in the course of this document serve as\nexamples to demonstrate how to use the functionality yFiles provides.\nAlthough they are all correct, they are not complete and will most likely not\ncompile when copied directly.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-006",content:"In addition to the most frequently used simple edge creation, it\nis also possible to specify the exact place where a newly created edge should\nbe inserted into both the sequence of outgoing edges at its source node and the\nsequence of incoming edges at its target node.\nFurthermore, an already existing edge can be completely remodeled, i.e., both\nits end nodes as well as the insertion places at either end node can be\nchanged.\nReversing an edge, as another variant of changing an edge, is also supported."},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-007",content:'<a href="#/dguide/layout_graph_edge_insertion">Exact edge insertion</a> shows the respective line of code for\nspecifying the exact place of edge insertion.'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-008",content:"\n\n\n\n"},{tagname:"example",id:"layout_graph_edge_insertion",title:"Exact edge insertion",content:'<pre class="programlisting javascript" id="layout_graph_creation-536-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst source = getMySourceNode()\r\nconst target = getMyTargetNode()\r\n\r\n// Create a new edge at the second position of all incoming edges at the target\r\n// node.\r\ngraph.createEdge(source, source.firstOutEdge, target, target.firstInEdge,\r\n  yfiles.algorithms.GraphElementInsertion.AFTER, yfiles.algorithms.GraphElementInsertion.AFTER)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-009",content:'<a href="#/dguide/fig_layout_graph_edge_insertion">Exact edge insertion</a> shows the resulting graph.\nThe newly created edge is inserted after the first incoming edge at the target\nnode.\nObserve how the sequence of incoming edges (indicated by the numbers near the\narrowheads) changes with the insertion.'},{tagname:"figure","class":"image",title:"Exact edge insertion",id:"fig_layout_graph_edge_insertion","float":0,children:[{tagname:"img",src:"assets/layout_graph_edge_order_7.8552d69c.jpg",alt:"layout graph edge order 7",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"layout_graph_removing_graph_elements",content:'The analogous operation to graph element creation is their removal.\nClass <api-link id="layout_graph_creation-536-api-link-001" data-member="" data-text="Graph" data-type="yfiles.algorithms.Graph"></api-link> offers methods to remove all\ngraph elements at once, or to remove only a single node or a single edge.\nWhen removing either an instance of type Node or an instance of type Edge their\nreference to the containing graph is cleared.\n\n'},{tagname:"example",id:"layout_graph_creation-536-example-003",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_creation-536-programlisting-003" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Remove single graph elements from the graph.\r\n// Note that all edges adjacent to the given node are removed prior to the node\r\n// itself.\r\ngraph.removeNode(graph.firstNode)\r\ngraph.removeEdge(graph.lastEdge)\r\n\r\n// Remove all graph elements from the graph at once.\r\ngraph.clear()\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"layout_graph_creation-536-note-001",content:'<p id="layout_graph_creation-536-simpara-011">When removing a single node from a graph, all its connecting edges are also\nremoved.\nTechnically, they are even removed before the node is, since an edge requires\nboth its source node and target node to reside in the same graph.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-012",content:'An alternative to removing graph elements is to hide them.\nHiding is a technique to only <strong id="layout_graph_creation-536-emphasis-001" class="bold" role="bold">temporarily</strong> remove graph\nelements, i.e., taking them away from the graph structure to perform some task\non the remaining graph, and thereafter putting them back into again, un-hiding\nthem.\nNote that both removing and hiding a graph element only takes them away from\nthe graph, the objects themselves still exist.\n\n'},{tagname:"example",id:"layout_graph_creation-536-example-004",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_creation-536-programlisting-004" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Hide single graph elements from the graph.\r\n// Note that all edges adjacent to \'exampleNode\' are hidden prior to the node\r\n// itself.\r\nconst exampleNode = graph.firstNode\r\ngraph.hide(exampleNode)\r\n\r\n// Unhide single graph elements from the graph.\r\n// Note that *only* \'exampleNode\' is unhidden, while its formerly adjacent edges\r\n// are not.\r\ngraph.unhide(exampleNode)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-013",content:'In order to be able to unhide previously hidden graph elements, it is necessary\nto retain them, for example, in a data structure.\nHiding of graph elements can also be performed utilizing specialized classes\nwhich automatically keep track of all hidden elements.\nThese classes are described in <a href="#/dguide/layout_graph_hiding_graph_elements">Hiding Graph Elements</a>.'},{tagname:"para","class":"dguide-para important",id:"layout_graph_creation-536-important-002",content:'<p id="layout_graph_creation-536-simpara-014">Hiding a graph element only differs from removing a graph element in that there\nis no graph event fired that signals the structural change.\nAs a consequence, any listeners to such graph events won’t be notified when\neither node or edge is hidden, which can easily result in data structures\ngetting out of sync with the actual structure of the graph.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-015",content:'In addition to the number of nodes and the number of edges an instance of type\n<span class="api">Graph</span> also knows whether a single graph element belongs to it or if there is\nan edge connecting two nodes.\nThe latter feature is especially useful if there is no reference of an edge at\nhand, for instance.'},{tagname:"example",id:"layout_graph_creation-536-example-005",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_creation-536-programlisting-005" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// get the number of nodes in the graph.\r\n// (Both methods are equivalent.)\r\nconst nodeCount = graph.nodeCount\r\nconst N = graph.n\r\n\r\n// get the number of edges in the graph.\r\n// (Both methods are equivalent.)\r\nconst edgeCount = graph.edgeCount\r\nconst E = graph.e\r\n\r\n// Check if the graph is empty.\r\nconst isEmpty = graph.empty\r\n\r\n// Check if the first node belongs to the graph.\r\nconst containsNode = graph.contains(graph.firstNode)\r\n\r\n// Check if there is an edge between first and last node of the graph.\r\nconst containsEdge = graph.containsEdge(graph.firstNode, graph.lastNode)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_creation-536-simpara-016",content:"A graph element which has been hidden does not belong to any graph until it is unhidden again."}]},{tagname:"section",id:"layout_graph_node",title:"Class Node",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_node-537-simpara-001",content:'Class <api-link id="layout_graph_node-537-api-link-001" data-member="" data-text="Node" data-type="yfiles.algorithms.Node"></api-link> is responsible for everything that is related to its connecting edges.'},{tagname:"para","class":"dguide-para",id:"layout_graph_node-537-simpara-002",content:"More specifically, an instance of type Node knows the overall number of\nconnecting edges (the so-called degree of the node) as well as the division\ninto the number of incoming edges (in-degree) and the number outgoing edges\n(out-degree).\n\n\n\n\n"},{tagname:"example",id:"layout_graph_node-537-example-001",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_node-537-programlisting-001" language="javascript" format="linespecific"><code>const node = getMyNode()\r\n\r\n// get the number of edges at a node.\r\nconst degree = node.degree\r\n\r\n// get the number of incoming edges at a node.\r\nconst inDegree = node.inDegree\r\n\r\n// get the number of outgoing edges at a node.\r\nconst outDegree = node.outDegree\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_node-537-simpara-003",content:"A node also provides methods to easily test whether there is a connecting edge\nto another node."},{tagname:"example",id:"layout_graph_node-537-example-002",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_node-537-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\nconst firstNode = graph.firstNode\r\nconst lastNode = graph.lastNode\r\n\r\n// Check whether there is an edge between first and last node of the graph.\r\n// First check if there is a connecting edge outgoing to \'lastNode\'.\r\nlet e = firstNode.getEdgeTo(lastNode)\r\n// If not, then check if there is a connecting edge incoming from \'lastNode\'.\r\nif (e === null) {\r\n  e = firstNode.getEdgeFrom(lastNode)\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_node-537-simpara-004",content:"Furthermore, it can give enumerators and cursors to iterate over all connecting\nedges, iterate over all incoming edges, and iterate over all outgoing edges.\nWhen iterating over all edges incoming edges appear first, outgoing edges\nlast."},{tagname:"example",id:"layout_graph_node-537-example-003",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_node-537-programlisting-003" language="javascript" format="linespecific"><code>const node = getMyNode()\r\n\r\n// get an enumerator to iterate over all edges at a node.\r\nconst edges = node.edges\r\n// enumerate all edges using es-5 syntax\r\nedges.forEach(console.log, console)\r\n\r\n// get an enumerator to iterate over all incoming edges at a node.\r\nconst inEdges = node.inEdges\r\n// enumerate all edges using es-6 for-of\r\nfor (const inEdge of inEdges) {\r\n  console.log(inEdge)\r\n}\r\n\r\n// get an enumerator to iterate over all outgoing edges at a node.\r\nconst outEdges = node.outEdges\r\n\r\n// get a cursor to iterate over all edges at a node.\r\nconst edgeCursor = node.getEdgeCursor()\r\n\r\n// get a cursor to iterate over all incoming edges at a node.\r\nconst inEdgeCursor = node.getInEdgeCursor()\r\n\r\n// get a cursor to iterate over all outgoing edges at a node.\r\nconst outEdgeCursor = node.getOutEdgeCursor()\n</code></pre>'},{tagname:"para","class":"dguide-para important",id:"self_loop_specifics",content:'<p id="layout_graph_node-537-simpara-005">Since a self-loop is both an incoming and an outgoing edge at its node, it\nappears twice when iterating over all edges of the node.\nAlso, a self-loop counts twice when asking for the degree of a node.\n</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_node-537-simpara-006",content:"As a convenience, class Node furthermore provides enumerators and cursors to\niterate over all its neighbors, to iterate over all its predecessors, or to\niterate over all its successors.\nPredecessors and successors mean the nodes at the opposite of an incoming edge,\nand an outgoing edge, respectively."},{tagname:"example",id:"layout_graph_node-537-example-004",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_node-537-programlisting-004" language="javascript" format="linespecific"><code>const node = getMyNode()\r\n\r\n// get an enumerator to iterate over all neighbor nodes.\r\nconst neighbors = node.neighbors\r\n\r\n// get an enumerator to iterate over the source nodes of all incoming edges.\r\n// These nodes are called predecessors.\r\nconst predecessors = node.predecessors\r\n\r\n// get an enumerator to iterate over the target nodes of all outgoing edges.\r\n// These nodes are called successors.\r\nconst successors = node.successors\r\n\r\n// get a cursor to iterate over all neighbor nodes.\r\nconst neighborCursor = node.getNeighborCursor()\r\n\r\n// get a cursor to iterate over the source nodes of all incoming edges.\r\n// These nodes are called predecessors.\r\nconst predecessorCursor = node.getPredecessorCursor()\r\n\r\n// get a cursor to iterate over the target nodes of all outgoing edges.\r\n// These nodes are called successors.\r\nconst successorCursor = node.getSuccessorCursor()\n</code></pre>'}]},{tagname:"section",id:"layout_graph_edge",title:"Class Edge",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_edge-538-simpara-001",content:'The most important information an instance of type\n<api-link id="layout_graph_edge-538-api-link-001" data-member="" data-text="Edge" data-type="yfiles.algorithms.Edge"></api-link> provides is its source node and its\ntarget node.\nClosely related is the method to get the opposite when holding one of the\nedge’s end nodes.\n\n\n\n'},{tagname:"example",id:"layout_graph_edge-538-example-001",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_edge-538-programlisting-001" language="javascript" format="linespecific"><code>const edge = getMyEdge()\r\n\r\n// get the two end nodes of an edge.\r\nconst source = edge.source\r\nconst target = edge.target\r\n\r\n// getting the opposite when holding one of either source or target node.\r\nconst opposite = edge.opposite(source)\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"layout_graph_edge-538-note-001",content:'<p id="layout_graph_edge-538-simpara-002">Although a hidden edge holds no reference to a graph, it can still provide\naccess to its source and target node, independent of their status.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_edge-538-simpara-003",content:"As a convenience, class Edge additionally offers information whether it is a\nself-loop."},{tagname:"example",id:"layout_graph_edge-538-example-002",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_edge-538-programlisting-002" language="javascript" format="linespecific"><code>const edge = getMyEdge()\r\n\r\n// Ask the edge whether it is a self-loop.\r\nconst isSelfLoop = edge.selfLoop\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"layout_graph_edge-538-note-002",content:'<p id="layout_graph_edge-538-simpara-004">Ignoring the directedness of the yFiles algorithms graph structure\nimplementation and instead interpreting it undirected would be done using the\n<api-link id="layout_graph_edge-538-api-link-002" data-member="neighbors" data-text="neighbors" data-type="yfiles.algorithms.Node"></api-link> property,\nrespectively method <api-link id="layout_graph_edge-538-api-link-003" data-member="getNeighborCursor()" data-text="getNeighborCursor" data-type="yfiles.algorithms.Node"></api-link> of\nclass Node, or a combination of property\n<api-link id="layout_graph_edge-538-api-link-004" data-member="edges" data-text="edges" data-type="yfiles.algorithms.Node"></api-link>, respectively\nmethod <api-link id="layout_graph_edge-538-api-link-005" data-member="getEdgeCursor()" data-text="getEdgeCursor" data-type="yfiles.algorithms.Node"></api-link> of class Node and\nmethod <api-link id="layout_graph_edge-538-api-link-006" data-member="opposite(yfiles.algorithms.Node)" data-text="opposite" data-type="yfiles.algorithms.Edge"></api-link> of\nclass Edge.</p>'}]},{tagname:"section",id:"layout_graph_node_layout_edge_layout",title:"Classes INodeLayout and IEdgeLayout",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-001",content:'Interface <api-link id="layout_graph_node_layout_edge_layout-539-api-link-001" data-member="" data-text="INodeLayout" data-type="yfiles.layout.INodeLayout"></api-link> is used to add the layout information to a node.'},{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-002",content:"This information consists of the coordinates for the upper left corner of the\nnode, and its width and height."},{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-003",content:'The following convenience methods defined by abstract class <span class="api">LayoutGraph</span> can\nbe used to control the layout information for nodes:'},{tagname:"para",content:'<dl id="layout_graph_node_layout_edge_layout-539-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout_graph_node_layout_edge_layout-539-term-001"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-002" data-member="getCenter(yfiles.algorithms.Node)" data-text="getCenter(node:&#xA0;Node):&#xA0;YPoint" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-002"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-003" data-member="getLocation(yfiles.algorithms.Node)" data-text="getLocation(node:&#xA0;Node):&#xA0;YPoint" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-003"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-004" data-member="getHeight(yfiles.algorithms.Node)" data-text="getHeight(node:&#xA0;Node):&#xA0;number" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-004"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-005" data-member="getWidth(yfiles.algorithms.Node)" data-text="getWidth(node:&#xA0;Node):&#xA0;number" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dd id="layout_graph_node_layout_edge_layout-539-listitem-001">\n<p id="layout_graph_node_layout_edge_layout-539-simpara-004">Getter methods for nodes.</p>\n</dd>\n<dt id="layout_graph_node_layout_edge_layout-539-term-005"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-006" data-member="setCenter(yfiles.algorithms.Node,yfiles.algorithms.YPoint)" data-text="setCenter(node:&#xA0;Node, position:&#xA0;YPoint):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-006"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-007" data-member="setLocation(yfiles.algorithms.Node,yfiles.algorithms.YPoint)" data-text="setLocation(node:&#xA0;Node, position:&#xA0;YPoint):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-007"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-008" data-member="setSize(yfiles.algorithms.Node,number,number)" data-text="setSize(node:&#xA0;Node, width:&#xA0;number, height:&#xA0;number):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dd id="layout_graph_node_layout_edge_layout-539-listitem-002">\n<p id="layout_graph_node_layout_edge_layout-539-simpara-005">Setter methods for nodes.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-006",content:'Interface <api-link id="layout_graph_node_layout_edge_layout-539-api-link-009" data-member="" data-text="IEdgeLayout" data-type="yfiles.layout.IEdgeLayout"></api-link> is used to add the layout information to an edge.'},{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-007",content:"This information consists of the coordinates for both starting point and end\npoint of the edge path, as well as the coordinates for the control points\nin-between these two."},{tagname:"para","class":"dguide-para tip",id:"layout_graph_node_layout_edge_layout-539-tip-001",content:'<p id="layout_graph_node_layout_edge_layout-539-simpara-008">The coordinates for the edge’s end points are relative to the center\ncoordinates of the edge’s source node and target node, respectively.\nThe coordinates for the control points, in contrast, are absolute.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_node_layout_edge_layout-539-simpara-009",content:'The following convenience methods defined by abstract class <span class="api">LayoutGraph</span> can\nbe used to control the layout information for edges.\nNote that the path list for an edge includes its source port, all control points,\nand also its target port.\nThe point list, though, holds only the edge’s control points.'},{tagname:"para","class":"dguide-para note",id:"layout_graph_node_layout_edge_layout-539-note-001",content:'<p id="layout_graph_node_layout_edge_layout-539-simpara-010">Control points are also known as <span class="def">bends</span>.</p>'},{tagname:"para",content:'<dl id="layout_graph_node_layout_edge_layout-539-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="layout_graph_node_layout_edge_layout-539-term-008"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-010" data-member="getPathList(yfiles.algorithms.Edge)" data-text="getPathList(edge:&#xA0;Edge):&#xA0;YList" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-009"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-011" data-member="getPointList(yfiles.algorithms.Edge)" data-text="getPointList(edge:&#xA0;Edge):&#xA0;YList" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-010"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-012" data-member="getSourcePointAbs(yfiles.algorithms.Edge)" data-text="getSourcePointAbs(edge:&#xA0;Edge):&#xA0;YPoint" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-011"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-013" data-member="getTargetPointAbs(yfiles.algorithms.Edge)" data-text="getTargetPointAbs(edge:&#xA0;Edge):&#xA0;YPoint" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dd id="layout_graph_node_layout_edge_layout-539-listitem-003">\n<p id="layout_graph_node_layout_edge_layout-539-simpara-011">Getter methods for edges.</p>\n</dd>\n<dt id="layout_graph_node_layout_edge_layout-539-term-012"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-014" data-member="setPath(yfiles.algorithms.Edge,yfiles.algorithms.YList)" data-text="setPath(edge:&#xA0;Edge, path:&#xA0;YList):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-013"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-015" data-member="setPoints(yfiles.algorithms.Edge,yfiles.algorithms.YList)" data-text="setPoints(edge:&#xA0;Edge, points:&#xA0;YList):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt>\n<dt id="layout_graph_node_layout_edge_layout-539-term-014"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-016" data-member="setSourcePointAbs(yfiles.algorithms.Edge,yfiles.algorithms.YPoint)" data-text="setSourcePointAbs(edge:&#xA0;Edge, point:&#xA0;YPoint):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dt id="layout_graph_node_layout_edge_layout-539-term-015"><api-link id="layout_graph_node_layout_edge_layout-539-api-link-017" data-member="setTargetPointAbs(yfiles.algorithms.Edge,yfiles.algorithms.YPoint)" data-text="setTargetPointAbs(edge:&#xA0;Edge, point:&#xA0;YPoint):&#xA0;void" data-type="yfiles.layout.LayoutGraph"></api-link></dt><dd id="layout_graph_node_layout_edge_layout-539-listitem-004">\n<p id="layout_graph_node_layout_edge_layout-539-simpara-012">Setter methods for edges.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"layout_graph_group_nodes",title:"Group Nodes",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-001",content:'<span class="api">LayoutGraph</span> and <span class="api">Graph</span> have no intrinsic support for group nodes. Instead, a couple of dedicated\ndata provider keys defined in class <api-link id="layout_graph_group_nodes-540-api-link-001" data-member="" data-text="GroupingKeys" data-type="yfiles.layout.GroupingKeys"></api-link> must be registered\nwith the graph to specify the information about the grouped graph’s hierarchy of nodes for\nautomatic layout and graph analysis.'},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-002",content:'<a href="#/dguide/ex_layout_graph_group_nodes_preparation">Layout preparation</a> demonstrates how to set up a grouped graph by filling\nthe corresponding data providers and registering them with the graph using the data provider\nlook-up keys defined in class <api-link id="layout_graph_group_nodes-540-api-link-002" data-member="" data-text="GroupingKeys" data-type="yfiles.layout.GroupingKeys"></api-link>.'},{tagname:"example",id:"ex_layout_graph_group_nodes_preparation",title:"Layout preparation",content:'<pre class="programlisting javascript" id="layout_graph_group_nodes-540-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyLayoutGraph()\r\n\r\n// Create the node maps that are to be used as data providers later on.\r\nconst groupKey = graph.createNodeMap()\r\nconst nodeID = graph.createNodeMap()\r\nconst parentNodeID = graph.createNodeMap()\r\n\r\n// Register the node maps as data providers with the graph.\r\n// Use the "well-known" look-up keys defined in class GroupingKeys.\r\ngraph.addDataProvider(yfiles.layout.GroupingKeys.GROUP_DP_KEY, groupKey)\r\ngraph.addDataProvider(yfiles.layout.GroupingKeys.NODE_ID_DP_KEY, nodeID)\r\ngraph.addDataProvider(yfiles.layout.GroupingKeys.PARENT_NODE_ID_DP_KEY, parentNodeID)\r\n\r\n// Now, set up the hierarchy of nodes of the grouped graph, i.e., define some\r\n// of the nodes to be group nodes and others to be their content.\r\nmySetupNodeHierarchy(graph, groupKey, nodeID, parentNodeID)\r\n\r\n// Invoke the layout algorithm.\r\ninvokeLayout(graph, new yfiles.hierarchic.HierarchicLayout(), false)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-003",content:"The information for the node IDs and the parent node IDs is of symbolic nature\nthat is used in the process of layout calculation to identify the proper parent\nfor a given child, but also to find all children that belong to the same\nparent.\nHence, it is important for the symbolic IDs to properly match between these two\ndata providers, so that the grouped graph’s hierarchy of nodes is correctly\nexpressed."},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-004",content:'<a href="#/dguide/ex_layout_graph_group_nodes_setup">Encoding a grouped graph’s hierarchy of nodes in data providers</a> demonstrates possible content for the data providers.\nHere, the nodes themselves are used to denote symbolic IDs for both “ordinary”\nnodes and group nodes.\nCarefully observe the usage of the indirection scheme in this example for\nsetting up the parent-child relation.'},{tagname:"example",id:"ex_layout_graph_group_nodes_setup",title:"Encoding a grouped graph’s hierarchy of nodes in data providers",content:'<pre class="programlisting javascript" id="layout_graph_group_nodes-540-programlisting-002" language="javascript" format="linespecific"><code>// First, define node IDs for all nodes\r\n    for (let i = 0; i &lt; n.length; i++) {\r\n      // Set a symbolic ID for the node that is used for look-up purposes.\r\n      nodeID.set(n[i], n[i])\r\n    }\r\n\r\n// Now, set up the hierarchy of nodes of the grouped graph, i.e., define some\r\n// of the nodes to be group nodes and others to be their content.\r\n\r\n// First, define nodes 1, 5, and 9 to be group nodes\r\n    groupKey.setBoolean(n[1], true)\r\n    groupKey.setBoolean(n[5], true)\r\n    groupKey.setBoolean(n[9], true)\r\n\r\n// Node 2 and 3 are defined child of node 1;\r\n    parentNodeID.set(n[2], n[1])\r\n    parentNodeID.set(n[3], n[1])\r\n// Node 6 and 7 are defined child of node 5.\r\n    parentNodeID.set(n[6], n[5])\r\n    parentNodeID.set(n[7], n[5])\r\n\r\n// Nodes 0, 4, and 8 remain "ordinary" nodes...\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-005",content:'A group node’s size is determined by the bounding box that encloses its\nchildren and additional insets that are added to each of the box’s side.\nTo specify insets individually, a data provider can be used to hold an Insets\nobject for each group node.\nThis data provider is then registered with the graph using the look-up key\n<api-link id="layout_graph_group_nodes-540-api-link-003" data-member="GROUP_NODE_INSETS_DP_KEY" data-text="GROUP_NODE_INSETS_DP_KEY" data-type="yfiles.layout.GroupingKeys"></api-link> defined in class GroupingKeys.'},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-006",content:'<a href="#/dguide/ex_layout_graph_group_bounds">Defining a group node’s insets</a> shows how to add individual Insets objects for\ngroup nodes to a node map, and how the node map is registered as a data provider\nwith the graph.'},{tagname:"example",id:"ex_layout_graph_group_bounds",title:"Defining a group node’s insets",content:'<pre class="programlisting javascript" id="layout_graph_group_nodes-540-programlisting-003" language="javascript" format="linespecific"><code>const graph = getMyLayoutGraph()\r\n\r\n// Create the node map that is to be used as a data provider later on.\r\nconst groupNodeInsets = graph.createNodeMap()\r\n\r\n// Predefine some Insets objects.\r\nconst insets = new Array(3)\r\ninsets[0] = new yfiles.algorithms.Insets(10, 20, 30, 40)\r\ninsets[1] = new yfiles.algorithms.Insets(20, 20, 20, 20)\r\ninsets[2] = new yfiles.algorithms.Insets(40, 30, 20, 10)\r\n\r\nconst gnl = getListOfAllGroupNodes(graph)\r\ngnl.forEach(n => groupNodeInsets.set(n, insets[getGroupType(n)]))\r\n  }\r\n\r\n// Register the node map as a data provider with the graph.\r\n// Use the "well-known" look-up keys defined in class GroupingKeys.\r\n  graph.addDataProvider(yfiles.layout.GroupingKeys.GROUP_NODE_INSETS_DP_KEY, groupNodeInsets)\r\n\r\n// Invoke the layout algorithm.\r\n  invokeLayout(graph, new yfiles.hierarchic.HierarchicLayout(), false)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_group_nodes-540-simpara-007",content:'Class <api-link id="layout_graph_group_nodes-540-api-link-004" data-member="" data-text="FixGroupLayoutStage" data-type="yfiles.layout.FixGroupLayoutStage"></api-link> adds support for the fixed group\nnode policy to both hierarchical layout and orthogonal layout.\n<a href="#/dguide/ex_layout_graph_group_nodes_fixed">Setup for fixed group node content</a> shows how the fixed group node policy is realized as a layout\nstage that is prepended to the actual layout algorithm’s invocation.'},{tagname:"example",id:"ex_layout_graph_group_nodes_fixed",title:"Setup for fixed group node content",content:'<pre class="programlisting javascript" id="layout_graph_group_nodes-540-programlisting-004" language="javascript" format="linespecific"><code>function invokeLayout(graph, layout, orthogonal) {\r\n  // Create a specialized layout stage that fixes the contents of the group\r\n  // nodes.\r\n  const fixedGroupLayoutStage = new yfiles.layout.FixGroupLayoutStage()\r\n  if (orthogonal) {\r\n    fixedGroupLayoutStage.interEdgeRoutingStyle = yfiles.layout.InterEdgeRoutingStyle.ORTHOGONAL\r\n  }\r\n\r\n  // Prepend the stage to the given layout algorithm.\r\n  layout.prependStage(fixedGroupLayoutStage)\r\n\r\n  // Invoke buffered layout for the given layout algorithm.\r\n  new yfiles.layout.BufferedLayout(layout).applyLayout(graph)\r\n\r\n  // Remove the prepended layout stage.\r\n  layout.removeStage(fixedGroupLayoutStage)\r\n}\n</code></pre>'}]},{tagname:"section",id:"layout_graph_time_complexity",title:"Time Complexity",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_time_complexity-541-simpara-001",content:'<a href="#/dguide/tab_layout_graph_time_complexity">Time complexities</a> shows time complexities for several of the\nmost frequent tasks when working with the yFiles graph structure implementation.'},{tagname:"para","class":"dguide-para",id:"layout_graph_time_complexity-541-simpara-002",content:"\n\nCreation of graph elements takes constant time as does the removal of an edge.\nRemoving a node, though, implies the removal of all its connecting edges first,\nso this task takes linear time, i.e., time proportional to the number of\nconnecting edges. Also, all iteration is done in linear time.\nChecking whether a given node or edge belong to a graph is done in constant\ntime, while testing if there is an edge connecting two nodes takes linear time."},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_graph_time_complexity",rowsep:1,content:'<caption>Time complexities</caption><colgroup><col style="width:33%;"><col style="width:33%;"><col style="width:33%;"></colgroup><thead id="layout_graph_time_complexity-541-thead-001"><tr id="layout_graph_time_complexity-541-row-001"><th id="layout_graph_time_complexity-541-entry-001" align="left" valign="top">\nTask\n</th><th id="layout_graph_time_complexity-541-entry-002" align="left" valign="top">\nInvolved Type(s)\n</th><th id="layout_graph_time_complexity-541-entry-003" align="left" valign="top">\nComplexity\n</th></tr></thead><tbody id="layout_graph_time_complexity-541-tbody-001"><tr id="layout_graph_time_complexity-541-row-002"><td id="layout_graph_time_complexity-541-entry-004" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-003">Creating a node</para></td><td id="layout_graph_time_complexity-541-entry-005" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-004">Graph</para></td><td id="layout_graph_time_complexity-541-entry-006" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-005">O(1)</para></td></tr><tr id="layout_graph_time_complexity-541-row-003"><td id="layout_graph_time_complexity-541-entry-007" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-006">Creating an edge</para></td><td id="layout_graph_time_complexity-541-entry-008" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-007">Graph</para></td><td id="layout_graph_time_complexity-541-entry-009" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-008">O(1)</para></td></tr><tr id="layout_graph_time_complexity-541-row-004"><td id="layout_graph_time_complexity-541-entry-010" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-009">Removing/hiding a node</para></td><td id="layout_graph_time_complexity-541-entry-011" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-010">Graph</para></td><td id="layout_graph_time_complexity-541-entry-012" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-011">O(Node.Degree)</para></td></tr><tr id="layout_graph_time_complexity-541-row-005"><td id="layout_graph_time_complexity-541-entry-013" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-012">Removing/hiding an edge</para></td><td id="layout_graph_time_complexity-541-entry-014" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-013">Graph</para></td><td id="layout_graph_time_complexity-541-entry-015" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-014">O(1)</para></td></tr><tr id="layout_graph_time_complexity-541-row-006"><td id="layout_graph_time_complexity-541-entry-016" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-015">Clearing the graph</para></td><td id="layout_graph_time_complexity-541-entry-017" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-016">Graph</para></td><td id="layout_graph_time_complexity-541-entry-018" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-017">O(Graph.N + Graph.E)</para></td></tr><tr id="layout_graph_time_complexity-541-row-007"><td id="layout_graph_time_complexity-541-entry-019" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-018">Iterating over the node set</para></td><td id="layout_graph_time_complexity-541-entry-020" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-019">Graph, <span class="api">INodeCursor</span>/IEnumerator</para></td><td id="layout_graph_time_complexity-541-entry-021" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-020">O(Graph.N)</para></td></tr><tr id="layout_graph_time_complexity-541-row-008"><td id="layout_graph_time_complexity-541-entry-022" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-021">Iterating over the edge set</para></td><td id="layout_graph_time_complexity-541-entry-023" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-022">Graph, IEdgeCursor/IEnumerator</para></td><td id="layout_graph_time_complexity-541-entry-024" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-023">O(Graph.E)</para></td></tr><tr id="layout_graph_time_complexity-541-row-009"><td id="layout_graph_time_complexity-541-entry-025" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-024">Iterating over all edges connecting to a node</para></td><td id="layout_graph_time_complexity-541-entry-026" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-025">Node, <span class="api">IEdgeCursor</span>/IEnumerator</para></td><td id="layout_graph_time_complexity-541-entry-027" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-026">O(Node.Degree)</para></td></tr><tr id="layout_graph_time_complexity-541-row-010"><td id="layout_graph_time_complexity-541-entry-028" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-027">Iterating over all incoming edges</para></td><td id="layout_graph_time_complexity-541-entry-029" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-028">Node, <span class="api">IEdgeCursor</span>/IEnumerator</para></td><td id="layout_graph_time_complexity-541-entry-030" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-029">O(Node.InDegree)</para></td></tr><tr id="layout_graph_time_complexity-541-row-011"><td id="layout_graph_time_complexity-541-entry-031" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-030">Iterating over all outgoing edges</para></td><td id="layout_graph_time_complexity-541-entry-032" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-031">Node, <span class="api">IEdgeCursor</span>/IEnumerator</para></td><td id="layout_graph_time_complexity-541-entry-033" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-032">O(Node.OutDegree)</para></td></tr><tr id="layout_graph_time_complexity-541-row-012"><td id="layout_graph_time_complexity-541-entry-034" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-033">Checking if a node belongs to a graph</para></td><td id="layout_graph_time_complexity-541-entry-035" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-034">Graph</para></td><td id="layout_graph_time_complexity-541-entry-036" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-035">O(1)</para></td></tr><tr id="layout_graph_time_complexity-541-row-013"><td id="layout_graph_time_complexity-541-entry-037" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-036">Checking if an edge belongs to a graph</para></td><td id="layout_graph_time_complexity-541-entry-038" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-037">Graph</para></td><td id="layout_graph_time_complexity-541-entry-039" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-038">O(1)</para></td></tr><tr id="layout_graph_time_complexity-541-row-014"><td id="layout_graph_time_complexity-541-entry-040" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-039">Checking if there is an edge connecting two nodes</para></td><td id="layout_graph_time_complexity-541-entry-041" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-040">Graph</para></td><td id="layout_graph_time_complexity-541-entry-042" align="left" valign="top"><para class="dguide-para" id="layout_graph_time_complexity-541-simpara-041">O(min(source.OutDegree, target.InDegree))</para></td></tr></tbody>'}]},{tagname:"section",id:"layout_graph_hiding_graph_elements",title:"Hiding Graph Elements",children:[{tagname:"para","class":"dguide-para important",id:"layout_graph_hiding_graph_elements-542-important-001",content:'<p id="layout_graph_hiding_graph_elements-542-simpara-001">This section describes features of the graph model of the layout part of yFiles.\nYou’ll have to work with this model only if you implement your own <span class="api">ILayoutAlgorithm</span>, <span class="api">ILayoutStage</span>, or\nanother type from the layout part.\nThe section <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a> describes how to apply an automatic layout to an <span class="api">IGraph</span>\nor <span class="api">GraphComponent</span>.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_hiding_graph_elements-542-simpara-002",content:'Support for hiding graph elements is further completed by classes\n<api-link id="layout_graph_hiding_graph_elements-542-api-link-001" data-member="" data-text="LayoutGraphHider" data-type="yfiles.algorithms.LayoutGraphHider"></api-link> and\n<api-link id="layout_graph_hiding_graph_elements-542-api-link-002" data-member="" data-text="GraphPartitionManager" data-type="yfiles.algorithms.GraphPartitionManager"></api-link> from package\n<api-link id="layout_graph_hiding_graph_elements-542-api-link-003" data-member="" data-text="yfiles.algorithms" data-type=""></api-link>.\nIn addition to the methods from class <span class="api">Graph</span>, GraphHider offers various methods\nto hide arbitrary collections of graph elements or even all elements from the\ngraph at once.\nMoreover, it automatically keeps track of all elements hidden as a result of\nsuch method calls.'},{tagname:"para","class":"dguide-para",id:"layout_graph_hiding_graph_elements-542-simpara-003",content:'\n\nTo unhide graph elements, the <api-link id="layout_graph_hiding_graph_elements-542-api-link-004" data-member="" data-text="LayoutGraphHider" data-type="yfiles.algorithms.LayoutGraphHider"></api-link> class provides a small set of methods that\ncollectively employ all-at-once behavior when unhiding, i.e., all elements\npreviously hidden are unhidden at once.'},{tagname:"para","class":"dguide-para",id:"layout_graph_hiding_graph_elements-542-simpara-004",content:'The <api-link id="layout_graph_hiding_graph_elements-542-api-link-005" data-member="" data-text="GraphPartitionManager" data-type="yfiles.algorithms.GraphPartitionManager"></api-link> class extends the idea from <span class="api">LayoutGraphHider</span> in a way so\nthat it is possible to mark parts of the graph as so-called <span class="def">partitions</span> and\nhide/unhide these.'},{tagname:"para","class":"dguide-para important",id:"layout_graph_hiding_graph_elements-542-important-002",content:'<p id="layout_graph_hiding_graph_elements-542-simpara-005">When working with graph hierarchies, graph elements must not be hidden but\ninstead should be removed.</p>'}]},{tagname:"section",id:"layout_graph_iteration",title:"Iteration Mechanisms",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-001",content:'The yFiles cursor hierarchy with interface\n<api-link id="layout_graph_iteration-543-api-link-001" data-member="" data-text="ICursor" data-type="yfiles.algorithms.ICursor"></api-link> and its typed sub-interfaces\n<api-link id="layout_graph_iteration-543-api-link-002" data-member="" data-text="INodeCursor" data-type="yfiles.algorithms.INodeCursor"></api-link> and\n<api-link id="layout_graph_iteration-543-api-link-003" data-member="" data-text="IEdgeCursor" data-type="yfiles.algorithms.IEdgeCursor"></api-link> provides bidirectional\niteration over a sequence of objects in a uniform fashion.'},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-002",content:"\n\n"},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-003",content:"A cursor offers access to the object it currently points to, it tells whether\nthe current position is valid or “out of range,” and finally a cursor gives the\nsize of the sequence it iterates over.\nUpon creation, a cursor by default points to the first object of the underlying\nsequence.\nMoving the cursor position is possible both absolutely, i.e., to the first or\nlast object of the sequence and relatively, i.e., to the next or the previous\nobject.\nNote that the typing of the sub-interfaces takes place at the access methods,\ni.e., these return references of type Node and Edge, respectively."},{tagname:"example",id:"layout_graph_iteration-543-example-001",title:"Code example",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// get a cursor to iterate over all edges from the edge set of the graph.\r\nconst ec = graph.getEdgeCursor()\r\n\r\n// Ask for the size of the underlying sequence of edges.\r\nconst size = ec.size\r\n\r\n// Move the cursor to the last position.\r\nec.toLast()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-004",content:"A cursor cannot change the sequence it iterates over, particularly, it cannot\nremove elements from the underlying container.\nSo effectively, a cursor constitutes a read-only view on the sequence it\niterates over.\nTo actually remove an element from the underlying container, the container\nitself must be accessible."},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-005",content:'The most prominent yFiles types that provide cursors to iterate over object, node, or edge sequences\nare <api-link id="layout_graph_iteration-543-api-link-004" data-member="" data-text="YList" data-type="yfiles.algorithms.YList"></api-link>,\n<api-link id="layout_graph_iteration-543-api-link-005" data-member="" data-text="NodeList" data-type="yfiles.algorithms.NodeList"></api-link>,\n<api-link id="layout_graph_iteration-543-api-link-006" data-member="" data-text="EdgeList" data-type="yfiles.algorithms.EdgeList"></api-link>,\n<api-link id="layout_graph_iteration-543-api-link-007" data-member="" data-text="Graph" data-type="yfiles.algorithms.Graph"></api-link>, and\n<api-link id="layout_graph_iteration-543-api-link-008" data-member="" data-text="Node" data-type="yfiles.algorithms.Node"></api-link>.'},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-006",content:'<a href="#/dguide/ex_layout_graph_forward_iteration">Forward iteration with various cursor types</a> and <a href="#/dguide/ex_layout_graph_backward_iteration">Backward iteration</a> show the usage\nof cursors in conjunction with loops to iterate over a sequence of either typed\nor untyped objects.\nNote the additional cursor movement to the last position of the sequence with\nbackward iteration.'},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-007",content:"\n"},{tagname:"example",id:"ex_layout_graph_forward_iteration",title:"Forward iteration with various cursor types",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst list = getMyYList()\r\n\r\n// Forward iterate over all objects from the list.\r\nfor (const c = list.cursor(); c.ok; c.next()) {\r\n  const obj = c.current\r\n}\r\n\r\n// Forward iterate over all nodes of the node set from the graph.\r\nfor (const nc = graph.getNodeCursor(); nc.ok; nc.next()) {\r\n  const n = nc.node\r\n}\r\n\r\n// Forward iterate over all edges from the edge set of the graph.\r\nfor (const ec = graph.getEdgeCursor(); ec.ok; ec.next()) {\r\n  const e = ec.edge\r\n}\n</code></pre>'},{tagname:"example",id:"ex_layout_graph_backward_iteration",title:"Backward iteration",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-003" language="javascript" format="linespecific"><code>// get a cursor to iterate over the list.\r\n    const c = list.cursor()\r\n\r\n// Move the cursor to the last position of the sequence.\r\n// Backward iterate over all objects.\r\n    for (c.toLast(); c.ok; c.prev()) {\r\n      const obj = c.current\r\n    }\n</code></pre>'},{tagname:"formalpara",id:"layout_graph_iteration-543-formalpara-001",title:"Iteration and Element Removal",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-para-001",content:'Interface <api-link id="layout_graph_iteration-543-api-link-009" data-member="" data-text="ICursor" data-type="yfiles.algorithms.ICursor"></api-link> does not provide a\nmethod to remove an element from an underlying container.\nInstead, any elements must be removed from the container itself.'}]},{tagname:"example",id:"ex_layout_graph_removing_from_container",title:"Removing elements from an underlying container",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-004" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Remove unwanted nodes from the node set of the graph.\r\nfor (const nc = graph.getNodeCursor(); nc.ok; nc.next()) {\r\n  if (isUnwanted(nc.node)) {\r\n    // The graph is asked to remove the specified node.\r\n    graph.removeNode(nc.node)\r\n  }\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-008",content:"\n\n\nHowever, when an element that is pointed to by a cursor gets removed from the\nunderlying container, the cursor does not change state, i.e., it still points\nto the same, now removed, element.\nMoving the cursor thereafter either forward or backward has the same effect as\nif the element was in the container, i.e., the cursor subsequently points to\nthe next, respectively previous element from the foregoing sequence."},{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-simpara-009",content:'Once the cursor has been moved away from the removed element’s position,\nthough, there is no way to return to that position again.\nIn conclusion, a simple call sequence as in <a href="#/dguide/ex_layout_graph_move_cursor">Call sequence to move a cursor</a> does not necessarily\nreturn the cursor to the originating position in the sequence.'},{tagname:"example",id:"ex_layout_graph_move_cursor",title:"Call sequence to move a cursor",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-005" language="javascript" format="linespecific"><code>const nc = graph.getNodeCursor()\r\n\r\n// The cursor points to the first position of the sequence, i.e., to the first\r\n// node of the node set.\r\nlet firstN = nc.node\r\nnc.next()                           // Cursor now points to the second node.\r\nlet nextN = nc.node\r\n// The simple call sequence: move forward and immediately backward.\r\nnc.next()                           // Cursor now points to the third node.\r\nnc.prev()                           // Cursor now points to the second node.\r\n// Test for consistency.\r\nif (nextN !== nc.node) {\r\n  throw new Error("Inconsistent cursor.")\r\n}\r\n\r\n// Move the cursor back to the first node.\r\nnc.toFirst()\r\n\r\nfirstN = nc.node\r\nnc.next()                           // Cursor now points to the second node.\r\nnextN = nc.node\r\n// Now, remove the second node from the node set.\r\ngraph.removeNode(nc.node)\r\n// The simple call sequence: move forward and immediately backward.\r\nnc.next()                           // Cursor now points to the third node.\r\nnc.prev()                           // Cursor now points to the first node.\r\n// Test for consistency.\r\nif (nextN != nc.node) {\r\n  throw new Error("Inconsistent cursor.")\r\n// This time an exception will be thrown that the cursor has become\r\n// inconsistent.\r\n}\n</code></pre>'},{tagname:"formalpara",id:"layout_graph_iteration-543-formalpara-002",title:"Alternative Iteration Techniques",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_iteration-543-para-002",content:'\n\nAdditionally to iteration using cursors, there is another possibility to\nspecifically iterate over the edges adjacent to a node.\n<a href="#/dguide/ex_layout_graph_alternative_edge_iteration">Non-cursor iteration over a node’s edges</a> demonstrates this technique.'}]},{tagname:"example",id:"ex_layout_graph_alternative_edge_iteration",title:"Non-cursor iteration over a node’s edges",content:'<pre class="programlisting javascript" id="layout_graph_iteration-543-programlisting-006" language="javascript" format="linespecific"><code>const node = getMyNode()\r\n\r\n// Retrieve the initial incoming edge from the node.\r\nlet e = node.firstInEdge\r\nwhile (e != null) {\r\n  // Successively retrieve the next incoming edge.\r\n  e = e.nextInEdge\r\n}\r\n\r\n// Retrieve the initial outgoing edge from the node.\r\ne = node.firstOutEdge\r\nwhile (e != null) {\r\n  // Successively retrieve the next outgoing edge.\r\n  e = e.nextOutEdge\r\n}\n</code></pre>'}]},{tagname:"section",id:"layout_graph_collections",title:"Collections",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-001",content:'Classes <api-link id="layout_graph_collections-544-api-link-001" data-member="" data-text="NodeList" data-type="yfiles.algorithms.NodeList"></api-link> and <api-link id="layout_graph_collections-544-api-link-002" data-member="" data-text="EdgeList" data-type="yfiles.algorithms.EdgeList"></api-link>,\nthe typed descendants of class <api-link id="layout_graph_collections-544-api-link-003" data-member="" data-text="YList" data-type="yfiles.algorithms.YList"></api-link>, are\nthe most frequently encountered yFiles data structures to store graph elements.'},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-002",content:'Common to all lists is their support for the methods from interface\n<span class="api">ICollection&lt;T></span> via the implementation in class\n<span class="api">YList</span>.\nBeyond this implementation, class <span class="api">YList</span> provides advanced list access and\nmanipulation services which strongly rely on the possibilities offered by\nclass ListCell.'},{tagname:"formalpara",id:"layout_graph_collections-544-formalpara-001",title:"High-Level Features",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-para-001",content:"In addition to the methods from interface ICollection there are several further methods offered.\nFor instance, it is possible to add elements explicitly to the front or the back of a list.\nAlso, removing elements from the list is possible from both the front and the back.\nNote that the method names for removing elements from either end of the list\nresemble those of abstract data type stack."}]},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-003",content:"Other methods offer list sorting, reversing a list, or the splicing of two lists into one."},{tagname:"example",id:"ex_layout_graph_list",title:"Adding elements to and removing elements from a list",content:'<pre class="programlisting javascript" id="layout_graph_collections-544-programlisting-001" language="javascript" format="linespecific"><code>const list = getMyYList()\r\n\r\n// Add new elements to either end of the list.\r\nlist.addFirst("I am the first node!")\r\nlist.addLast("I am the last node!")\r\n\r\n// Remove elements from either end of the list.\r\nlist.pop()\r\nlist.popLast()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-004",content:'To iterate over the elements of the list it provides an enumerator and an\n<span class="api">ICursor</span> (respectively <span class="api">INodeCursor</span>\nand <span class="api">IEdgeCursor</span> with classes <span class="api">NodeList</span> and\n<span class="api">EdgeList</span>).\nSee also the discussion in <a href="#/dguide/layout_graph_iteration">Iteration Mechanisms</a>.'},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-005",content:'<a href="#/dguide/ex_layout_graph_efficiently_removing">Efficiently removing elements from a list using a cursor</a> shows how to efficiently remove an\nelement from a list using a cursor.\nThe cursor directly points to the element, there is no need to search the list.'},{tagname:"example",id:"ex_layout_graph_efficiently_removing",title:"Efficiently removing elements from a list using a cursor",content:'<pre class="programlisting javascript" id="layout_graph_collections-544-programlisting-002" language="javascript" format="linespecific"><code>const list = getMyList()\r\n\r\n// Remove unwanted objects from the list.\r\nfor (const c = list.cursor(); c.ok; c.next()) {\r\n  if (isUnwanted(c.current)) {\r\n    list.removeAt(c)\r\n  }\r\n}\n</code></pre>'},{tagname:"formalpara",id:"layout_graph_collections-544-formalpara-002",title:"Low-Level Features",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-para-002",content:'Class <api-link id="layout_graph_collections-544-api-link-004" data-member="" data-text="ListCell" data-type="yfiles.algorithms.ListCell"></api-link> is the building block of\nthe doubly linked list structure.\nIt knows both its predecessor and its successor, and provides read/write\nbehavior for the actual data it is holding.'}]},{tagname:"example",id:"ex_layout_graph_list_cell",title:"Using class ListCell",content:'<pre class="programlisting javascript" id="layout_graph_collections-544-programlisting-003" language="javascript" format="linespecific"><code>const list = getMyYList()\r\n\r\n// get the first cell of the list.\r\nconst firstCell = list.firstCell\r\n\r\n// get the actual data the cell is holding.\r\nconst obj = firstCell.info\r\n\r\n// Change the actual data.\r\nfirstCell.info = "Updated Data."\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-006",content:"Using an instance of type ListCell, for example, it is possible to have fast\naccess to the preceding, respectively succeeding cell from the containing\nlist, or to insert new cells relatively to already contained ones.\nBy way of the successors (predecessors) of a ListCell instance, direct\niteration over the elements of a list is possible."},{tagname:"para","class":"dguide-para",id:"layout_graph_collections-544-simpara-007",content:"\n"},{tagname:"example",id:"layout_graph_collections-544-example-004",title:"Directly iterating over the cells of a YList",content:'<pre class="programlisting javascript" id="layout_graph_collections-544-programlisting-004" language="javascript" format="linespecific"><code>const list = getMyYList()\r\n\r\n// Directly (backward) iterate over the list.\r\nfor (let lc = list.lastCell; lc !== null; lc = list.predCell(lc)) {\r\n  if (conditionIsSatisfied(lc.info)) {\r\n    // Insert a new cell with given data relatively to the held reference cell.\r\n    // The newly allocated cell will be returned.\r\n    const newCell = list.insertBefore("Prepended Data.", lc)\r\n  }\r\n}\n</code></pre>'}]},{tagname:"section",id:"layout_graph_data_accessors",title:"Binding Data to Graph Elements",children:[{tagname:"para","class":"dguide-para important",id:"layout_graph_data_accessors-545-important-001",content:'<p id="layout_graph_data_accessors-545-simpara-001">This section describes features of the graph model of the layout part of yFiles.\nYou’ll have to work with this model only if you implement your own <span class="api">ILayoutAlgorithm</span>, <span class="api">ILayoutStage</span>, or\nanother type from the layout part.\nThe section <a href="#/dguide/layout-applying_a_layout">Applying an Automatic Layout</a> describes how to apply an automatic layout to an <span class="api">IGraph</span>\nor <span class="api">GraphComponent</span>.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessors-545-simpara-002",content:'The concept of data accessors comprises two aspects which are commonly used in\ndifferent scenarios.\nTo bind supplemental data to graph elements that should be read-only, an\nimplementation of interface <api-link id="layout_graph_data_accessors-545-api-link-001" data-member="" data-text="IDataProvider" data-type="yfiles.algorithms.IDataProvider"></api-link> suffices.\nWe call these implementations <span class="def">data providers</span>.'},{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessors-545-simpara-003",content:'A data accessor with full read/write behavior, though, additionally implements\ninterface <api-link id="layout_graph_data_accessors-545-api-link-002" data-member="" data-text="IDataAcceptor" data-type="yfiles.algorithms.IDataAcceptor"></api-link>.\nyFiles for HTML knows these implementations as <span class="def">maps</span>, and has two dedicated\ninterfaces already defined, <api-link id="layout_graph_data_accessors-545-api-link-003" data-member="" data-text="INodeMap" data-type="yfiles.algorithms.INodeMap"></api-link> and <api-link id="layout_graph_data_accessors-545-api-link-004" data-member="" data-text="IEdgeMap" data-type="yfiles.algorithms.IEdgeMap"></api-link>.'},{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessors-545-simpara-004",content:'Both extend interface <api-link id="layout_graph_data_accessors-545-api-link-005" data-member="" data-text="IDataMap" data-type="yfiles.algorithms.IDataMap"></api-link> which is a\ncombination of interfaces <span class="api">IDataProvider</span> and <span class="api">IDataAcceptor</span>.\n\n\n\nApplying the two semantics it is, e.g., possible to restrict certain callees to\n“immutable” data, while others are allowed to make changes.'},{tagname:"para","class":"dguide-para note",id:"layout_graph_data_accessors-545-note-001",content:'<p id="layout_graph_data_accessors-545-simpara-005">Observe that both interface INodeMap and IEdgeMap show identical signatures on\ntheir respective methods, using Object instead of either\n<span class="api">Node</span> or <span class="api">Edge</span> as the parameter\ntype for their key.\nActual implementations should nevertheless ensure that the keys provided have\ncorrect type.</p>'},{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessors-545-simpara-006",content:'<a href="#/dguide/fig_layout_graph_data_accessors">The concept of data accessors</a> gives a brief overview of the classes\ninvolved in the basic concepts of maps and data providers.'},{tagname:"figure","class":"image",title:"The concept of data accessors",id:"fig_layout_graph_data_accessors","float":0,children:[{tagname:"img",src:"assets/layout_graph_data_accessors.eb8b0340.jpg",alt:"layout graph data accessors",title:'<para class="dguide-para"></para>'}]},{tagname:"section",id:"layout_graph_maps",title:"Maps and Data Providers",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_maps-546-simpara-001",content:"Common to all data accessor implementations which are offered by the yFiles\nlibrary is that they cover all elements of a set, i.e., a node map provides\nvalues for all nodes from a graph (however, these may all be default values\nwhen there hasn’t been anything stored yet)."},{tagname:"para","class":"dguide-para",id:"layout_graph_maps-546-simpara-002",content:'<a href="#/dguide/ex_layout_graph_storing_and_retrieving">Storing and retrieving data associated with a node</a> shows how node maps are used to\nstore and retrieve arbitrary data.'},{tagname:"para","class":"dguide-para",id:"layout_graph_maps-546-simpara-003",content:""},{tagname:"example",id:"ex_layout_graph_storing_and_retrieving",title:"Storing and retrieving data associated with a node",content:'<pre class="programlisting javascript" id="layout_graph_maps-546-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst labelNodeMap = getMyNodeMap("labelNodeMap")\r\nconst counterNodeMap = getMyNodeMap("counterNodeMap")\r\n\r\n// Bind a label to the first node of the node set.\r\n// The bound data actually is of type string.\r\nlabelNodeMap.set(graph.firstNode, "I am the first node!")\r\n\r\n// Increase the value stored in \'counterNodeMap\' for the last node.\r\n// The bound data is an int.\r\ncounterNodeMap.setInt(graph.lastNode,\r\n  counterNodeMap.getInt(graph.lastNode) + 1)\r\n\r\n// Print out the label of the first node.\r\nconsole.log("The name of the first node is: ")\r\nconsole.log(labelNodeMap.get(graph.firstNode))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_maps-546-simpara-004",content:'<a href="#/dguide/tab_layout_graph_comparing_map">Comparing map implementations</a> lists the differences of some data accessor implementations.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_layout_graph_comparing_map",rowsep:1,content:'<caption>Comparing map implementations</caption><colgroup><col style="width:20%;"><col style="width:20%;"><col style="width:20%;"><col style="width:20%;"><col style="width:20%;"></colgroup><thead id="layout_graph_maps-546-thead-001"><tr id="layout_graph_maps-546-row-001"><th id="layout_graph_maps-546-entry-001" align="left" valign="top"></th><th id="layout_graph_maps-546-entry-002" align="left" valign="top">\nDomain\n</th><th id="layout_graph_maps-546-entry-003" align="left" valign="top">\nMemory\n</th><th id="layout_graph_maps-546-entry-004" align="left" valign="top">\nPerformance\n</th><th id="layout_graph_maps-546-entry-005" align="left" valign="top">\nNote\n</th></tr></thead><tbody id="layout_graph_maps-546-tbody-001"><tr id="layout_graph_maps-546-row-002"><td id="layout_graph_maps-546-entry-006" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-005">Default maps</para></td><td id="layout_graph_maps-546-entry-007" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-006">Multi-purpose</para></td><td id="layout_graph_maps-546-entry-008" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-007">o</para></td><td id="layout_graph_maps-546-entry-009" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-008">+</para></td><td id="layout_graph_maps-546-entry-010" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-009">Need cleanup.</para></td></tr><tr id="layout_graph_maps-546-row-003"><td id="layout_graph_maps-546-entry-011" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-010">Index-based maps</para></td><td id="layout_graph_maps-546-entry-012" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-011">Single-purpose</para></td><td id="layout_graph_maps-546-entry-013" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-012">++</para></td><td id="layout_graph_maps-546-entry-014" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-013">++</para></td><td id="layout_graph_maps-546-entry-015" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-014">Require the underlying container to remain unaltered.</para></td></tr><tr id="layout_graph_maps-546-row-004"><td id="layout_graph_maps-546-entry-016" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-015">HashMap backed maps</para></td><td id="layout_graph_maps-546-entry-017" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-016">Multi-purpose</para></td><td id="layout_graph_maps-546-entry-018" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-017">+</para></td><td id="layout_graph_maps-546-entry-019" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-018">o</para></td><td id="layout_graph_maps-546-entry-020" align="left" valign="top"><para class="dguide-para" id="layout_graph_maps-546-simpara-019">Work well for sparse data.</para></td></tr></tbody>'
}]},{tagname:"section",id:"layout_graph_default_map",title:"Default Map Implementations",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_default_map-547-simpara-001",content:'Although writing customized implementations for interfaces INodeMap or IEdgeMap\nis easy, the most frequently used way to get these is conveniently provided by\nclass <span class="api">Graph</span>.\n<a href="#/dguide/ex_layout_graph_creating_node_map">Creating default node maps</a> shows one of the two methods that both\nreturn default implementations of these interfaces which can be used for most\npurposes and data types.'},{tagname:"para","class":"dguide-para",id:"layout_graph_default_map-547-simpara-002",content:"\n\nThe maps returned by these methods hold exactly one value for a given key,\ni.e., no matter how many calls to any of the setter methods are issued for a\ngiven key, only the last value set will be held.\nAlso, the type of the key given with a setter method is restricted to the\nrespective type of graph elements, i.e., restricted to Node or Edge.\nThe type of the value though, is not restricted to be same over the range of\nall nodes, for example.\nIn fact, it would be perfectly legal to set a double value with one node, and\nboolean values with every other.\nThis, however, is strongly discouraged, since it definitely leads to problems\nwhen the values will be retrieved."},{tagname:"para","class":"dguide-para",id:"layout_graph_default_map-547-simpara-003",content:"Default map implementations can be created at any time, even when the graph is empty.\nFrom the moment of creation on, they will cover all graph elements from the\nrespective set, as well as all respective elements created by the graph\nthereafter.\nHowever, these maps cannot cover elements that are hidden at the time of creation."},{tagname:"para","class":"dguide-para",id:"layout_graph_default_map-547-simpara-004",content:'Note that these default implementations have to be properly disposed of after\nusage to release the allocated resources.\nTo this end, class <span class="api">Graph</span> has appropriate methods for either kind of default\nimplementations.'},{tagname:"example",id:"ex_layout_graph_creating_node_map",title:"Creating default node maps",content:'<pre class="programlisting javascript" id="layout_graph_default_map-547-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Obtain a new INodeMap default implementation from the graph.\r\nconst nodeMap = graph.createNodeMap()\r\n\r\n// Set values for some of the nodes.\r\nnodeMap.setNumber(graph.firstNode, 3.14)\r\nnodeMap.setNumber(graph.lastNode, 42.0)\r\n\r\n// Print the values stored in the node map.\r\ngraph.nodes.forEach((n) => {\r\n  console.log("Node " + n + ": " + nodeMap.getNumber(n))\r\n})\r\n\r\n// Finally release the resources previously allocated by the createNodeMap()\r\n// method.\r\ngraph.disposeNodeMap(nodeMap)\n</code></pre>'}]},{tagname:"section",id:"layout_graph_customized_data_accessors",title:"Creating Customized Data Accessors",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-simpara-001",content:'In addition to using the default map implementations provided by class <span class="api">Graph</span>,\nthere are further ways to create either maps or data providers.\nFor example, data providers can be implemented so that the actual data is only\nimplicitly defined, i.e., it is calculated on the fly when the value is asked\nfor.\nThis way, it is possible to “store” large amounts of data without having any\nmemory be allocated.\n<a href="#/dguide/ex_layout_graph_data_provider_adapter">Using class DataProviderAdapter to create customized data providers</a> demonstrates how to use class\n<api-link id="layout_graph_customized_data_accessors-548-api-link-001" data-member="" data-text="DataProviderAdapter" data-type="yfiles.algorithms.DataProviderAdapter"></api-link> to define a custom\n<span class="api">IDataProvider</span> implementation.\n\n'},{tagname:"example",id:"ex_layout_graph_data_provider_adapter",title:"Using class DataProviderAdapter to create customized data providers",content:'<pre class="programlisting javascript" id="layout_graph_customized_data_accessors-548-programlisting-001" language="javascript" format="linespecific"><code>// Define an IDataProvider implementation that for each node in the graph\r\n// returns an int that is the square of the node\'s index.\r\n  class\r\n  MyDataProvider\r\n  extends\r\n  yfiles\r\n.\r\n  algorithms\r\n.\r\n  DataProviderAdapter {\r\n  getInt(dataHolder) {\r\n    if (!(dataHolder instanceof yfiles.algorithms.Node)) {\r\n      throw new Error("Key has wrong type.")\r\n    }\r\n    const node = dataHolder\r\n    return (node.index * node.index)\r\n  }\r\n}\r\n\r\n// Define an IDataProvider implementation that for each edge in the graph\r\n// returns a distance value that is the difference of the values returned by\r\n// the given IDataProvider for the source and target node.\r\nclass MyOtherDataProvider extends yfiles.algorithms.DataProviderAdapter {\r\n  constructor(squareDp) {\r\n    super()\r\n    this.dp = squareDp\r\n  }\r\n\r\n  getInt(dataHolder) {\r\n    if (!(dataHolder instanceof yfiles.algorithms.Edge)) {\r\n      throw new Error("Key has wrong type.")\r\n    }\r\n    let edge = dataHolder\r\n    return (this.dp.getInt(edge.target) - this.dp.getInt(edge.source))\r\n  }\r\n}\r\n\r\nfunction testDataProviders(graph) {\r\n  const edgeLengthProvider =\r\n    new MyOtherDataProvider(new MyDataProvider())\r\n\r\n  // Display the values "stored" (i.e., calculated on the fly) for each edge.\r\n  graph.edges.forEach((e) => {\r\n    console.log("Edge " + e + ": " + edgeLengthProvider.getInt(e))\r\n  })\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-simpara-002",content:'Class <api-link id="layout_graph_customized_data_accessors-548-api-link-002" data-member="" data-text="DataProviders" data-type="yfiles.algorithms.DataProviders"></api-link> offers a set of\nstatic methods to conveniently create several specialized data provider\nimplementations for either nodes or edges.\nFor instance, there are methods to create data providers from constant values,\nfrom given arrays, or from existing data providers.'},{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-simpara-003",content:'Class <api-link id="layout_graph_customized_data_accessors-548-api-link-003" data-member="" data-text="Maps" data-type="yfiles.algorithms.Maps"></api-link> provides a set of static\nmethods to conveniently create several specialized map implementations:'},{tagname:"para",content:'<ul id="layout_graph_customized_data_accessors-548-itemizedlist-001"><li id="layout_graph_customized_data_accessors-548-listitem-001"><p id="layout_graph_customized_data_accessors-548-simpara-004">The <api-link id="layout_graph_customized_data_accessors-548-api-link-004" data-member="createNodeMap(yfiles.collections.IMap)" data-text="createNodeMap" data-type="yfiles.algorithms.Maps"></api-link> and\n<api-link id="layout_graph_customized_data_accessors-548-api-link-005" data-member="createEdgeMap(yfiles.collections.IMap)" data-text="createEdgeMap" data-type="yfiles.algorithms.Maps"></api-link> methods\nthat take <span class="api">IMap&lt;TKey,TValue></span> implementations and return either\nan INodeMap or an IEdgeMap view of the given instances.\nBasically, this allows for any valid <span class="api">IMap&lt;TKey,TValue></span> implementation, e.g.,\n<span class="api">IMap&lt;TKey,TValue></span>, to be used in conjunction\nwith the yFiles graph implementation.</p></li><li id="layout_graph_customized_data_accessors-548-listitem-002"><p id="layout_graph_customized_data_accessors-548-simpara-005">The various\n<api-link id="layout_graph_customized_data_accessors-548-api-link-006" data-member="createIndexNodeMapForBoolean(Array)" data-text="createIndexNodeMapForBoolean" data-type="yfiles.algorithms.Maps"></api-link> and\n<api-link id="layout_graph_customized_data_accessors-548-api-link-007" data-member="createIndexEdgeMapForBoolean(Array)" data-text="createIndexEdgeMapForBoolean" data-type="yfiles.algorithms.Maps"></api-link>\nmethods return map implementations that are fast and at the same time use\nlittle memory.</p></li></ul>'},{tagname:"formalpara",id:"layout_graph_hash_map_backed",title:"HashMap-Backed Map Implementations",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-para-001",content:'HashMap implementations are true multi-purpose data holders, there is no\nrestriction to the type of the keys nor the type of the values.\nParticularly, the keys are not restricted to graph elements.\nCompared to the default implementations of interface INodeMap and IEdgeMap\nprovided by class <span class="api">Graph</span> they are generally a bit slower.\nHowever, their memory usage is proportional to the amount of the data that is\nactually associated with the entities.'}]},{tagname:"para","class":"dguide-para tip",id:"layout_graph_customized_data_accessors-548-tip-001",content:'<p id="layout_graph_customized_data_accessors-548-simpara-006">Map implementations backed by an instance of type HashMap are especially suited\nfor sparsely distributed data, i.e., only few entities of a domain have\nnon-null data associated with them.</p>'},{tagname:"formalpara",id:"layout_graph_index_based",title:"Index-Based Map Implementations",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-para-002",content:"Index-based map implementations are very fast and use only little memory, their\ndrawback, however, is that once instantiated their values are restricted to the\ntype given at creation time.\nMore important though, all index-based containers require the respective set of\ngraph elements to remain unaltered, i.e., there are no operations allowed that\nchange the sequence of the graph elements in any way."}]},{tagname:"para","class":"dguide-para",id:"layout_graph_customized_data_accessors-548-simpara-007",content:"\n"},{tagname:"example",id:"ex_layout_graph_index_based",title:"Using yFiles convenience classes to create edge maps",content:'<pre class="programlisting javascript" id="layout_graph_customized_data_accessors-548-programlisting-002" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create an edge map that holds a boolean value for each edge from\r\n// the edge set of the graph.\r\nconst map = yfiles.algorithms.Maps.createIndexEdgeMapForBoolean(new Array(graph.e))\r\n\r\n// Store some data into the edge map.\r\n// (For each edge the map will contain the boolean value indicating whether\r\n// the edge points from a node with a lower index to a node with\r\n// a higher index.)\r\ngraph.nodes.forEach((n) => {\r\n  n.edges.forEach((e) => {\r\n    map.setBoolean(e, e.source.index &lt; e.target.index)\r\n  })\r\n})\n</code></pre>'}]},{tagname:"section",id:"layout_graph_data_accessor_notes",title:"Notes",children:[{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessor_notes-549-simpara-001",content:'Successfully using a data accessor requires a kind of “agreement” on the type\nthe data accessor holds.\nMore precisely, storing the value for a key and retrieving the value thereafter\nhas to be done using setter and getter methods of matching type.\nThe result when using setter/getter methods with non-matching types highly\ndepends on the specific data accessor implementation.\n<a href="#/dguide/ex_layout_graph_using_data_accessors">Successfully using data accessors</a> demonstrates the proper usage of a data\naccessor.'},{tagname:"para","class":"dguide-para",id:"layout_graph_data_accessor_notes-549-simpara-002",content:"This rule furthermore implies that a self-made data accessor has to provide the\nproper getter (and/or setter) methods when it is used as a parameter to an\nalgorithm."},{tagname:"example",id:"ex_layout_graph_using_data_accessors",title:"Successfully using data accessors",content:'<pre class="programlisting javascript" id="layout_graph_data_accessor_notes-549-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// get a default INodeMap implementation from the graph.\r\nconst nm = graph.createNodeMap()\r\n\r\n// Store values for some chosen nodes.\r\nnm.setBoolean(graph.firstNode, true)\r\nnm.setBoolean(graph.lastNode, true)\r\n\r\n// Retrieve the stored values.\r\n// WRONG. WRONG. WRONG.\r\n// Boolean values cannot be retrieved as ints.\r\nconst firstValue = nm.getInt(graph.firstNode)\r\nconst lastValue = nm.getInt(graph.lastNode)\r\n\r\n// Retrieve the stored values.\r\n// RIGHT.\r\nconst first = nm.getBoolean(graph.firstNode)\r\nconst last = nm.getBoolean(graph.lastNode)\n</code></pre>'}]}]},{tagname:"section",id:"layout-buffering",title:"Using Buffered Layout",children:[{tagname:"para","class":"dguide-para important",id:"layout-buffering-550-important-001",content:'<p id="layout-buffering-550-simpara-001">This section applies only to yFiles layout packages!</p><p id="layout-buffering-550-simpara-002">The <a href="#/dguide/layout-applying_a_layout">IGraph-based adapter mechanism</a> already creates the layout graph\nas copy of the original <span class="api">IGraph</span> and thus provides the same conceptual benefits as buffered layout.\nTherefore, class <span class="api">BufferedLayout</span> must not be used with that mechanism.</p>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-003",content:'\n\nWith the yFiles for HTML layout algorithms it is possible to have a graph layout\ncalculated using two different approaches, namely <strong id="layout-buffering-550-emphasis-001" class="bold" role="bold">unbuffered</strong> layout or\n<strong id="layout-buffering-550-emphasis-002" class="bold" role="bold">buffered</strong> layout.'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-004",content:'Unbuffered layout means to directly invoke a layout algorithm’s\n<api-link id="layout-buffering-550-api-link-001" data-member="applyLayout(yfiles.layout.LayoutGraph)" data-text="applyLayout" data-type="yfiles.layout.ILayoutAlgorithm"></api-link>\nmethod.\nChoosing this approach, the layout calculation is performed on the given graph,\nand is also immediately assigned.'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-005",content:'Buffered layout, in contrast, utilizes class\n<api-link id="layout-buffering-550-api-link-002" data-member="" data-text="BufferedLayout" data-type="yfiles.layout.BufferedLayout"></api-link>, which creates a copy\nof the original graph that is then used for layout calculation.'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-006",content:"Unbuffered layout has some severe drawbacks that should be observed:"},{tagname:"para",content:'<ul id="layout-buffering-550-itemizedlist-001"><li id="layout-buffering-550-listitem-001"><p id="layout-buffering-550-simpara-007">A layout algorithm might perform badly in terms of memory consumption and\nexecution time, due to the implementation of the graph structure.\nCrucial graph methods might not be optimized for layout tasks.</p></li><li id="layout-buffering-550-listitem-002"><p id="layout-buffering-550-simpara-008">Some layout algorithms need to temporarily add/remove nodes or edges to/from\nthe given graph.\nAny registered graph listeners will be notified about such structural changes,\nwhich subsequently might result in unnecessary or even harmful action on a\nlistener’s behalf.</p></li><li id="layout-buffering-550-listitem-003"><p id="layout-buffering-550-simpara-009">Even though it is guaranteed that a layout algorithm will not change a graph’s\nnode set and edge set, it is not unusual that the ordering of nodes and/or\nedges is modified.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-010",content:"Consequently, it is not safe to rely on the index() feature of nodes or edges."},{tagname:"para",content:'<ul id="layout-buffering-550-itemizedlist-002"><li id="layout-buffering-550-listitem-004"><p id="layout-buffering-550-simpara-011">In rare cases it might happen that a layout algorithm will crash during a\ncalculation (due to a bug, for example).\nIt will then return immediately and generate an exception.\nThe input graph will be left in an intermediate, often broken state and no\nrecovery will be possible for it.</p></li><li id="layout-buffering-550-listitem-005"><p id="layout-buffering-550-simpara-012">Directly invoking a layout algorithm’s <span class="api">applyLayout</span> method will not return the\ncalculated coordinates, but instead assign them right away to the given graph.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-013",content:"Consequently, any other way of coordinate assignment, e.g., in an animated\nfashion using coordinate interpolation, is defeated."},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-014",content:"With these drawbacks in mind, it is almost always a good idea to choose\nbuffered layout instead.\nIt facilitates many sophisticated features, like, e.g., layout morphing, and at\nthe same time increases an application’s robustness."},{tagname:"formalpara",id:"layout-buffering-550-formalpara-001",title:"Class BufferedLayout",children:[{tagname:"para","class":"dguide-para",id:"layout-buffering-550-para-001",content:'\n\nThe main purpose of class <api-link id="layout-buffering-550-api-link-003" data-member="" data-text="BufferedLayout" data-type="yfiles.layout.BufferedLayout"></api-link> is to create a copy of\nthe input graph before calling its core layout algorithm.\nThe graph structure that is used for the copied graph is optimized for layout calculation.'}]},{tagname:"para","class":"dguide-para important",id:"layout-buffering-550-important-002",content:'<p id="layout-buffering-550-simpara-015">Class <span class="api">BufferedLayout</span> must not be used with the\n<a href="#/dguide/layout-applying_a_layout">IGraph-based adapter mechanisms</a>. Due to its nature, this mechanism\nalready creates the layout graph as copy of the original <span class="api">IGraph</span></p>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-016",content:"The core layout algorithm subsequently executes on the copy and calculates a new\nlayout, which is then transferred to the original graph.\nThere are several beneficial aspects of this functionality:"},{tagname:"para",content:'<ul id="layout-buffering-550-itemizedlist-003"><li id="layout-buffering-550-listitem-006"><p id="layout-buffering-550-simpara-017">The structure of the input graph is guaranteed to not change at all.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-018",content:'Usually, layout providers (i.e., <span class="api">ILayoutAlgorithm</span> implementations) make no guarantees\non leaving the sequence of nodes or edges unchanged, which may result in\nunexpected side effects.\nOne such side effect is, for example, that a layout algorithm may assign completely\ndifferent layouts to a graph when being invoked twice on the same graph.'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-019",content:"The reason for such behavior is that a layout provider’s output in general\ndepends on the sequence of elements in the graph, but this sequence has changed\nwith the first layout invocation."},{tagname:"para",content:'<ul id="layout-buffering-550-itemizedlist-004"><li id="layout-buffering-550-listitem-007"><p id="layout-buffering-550-simpara-020">Calculating a layout on a copy instead of the original graph proves to be more\nrobust.\nEven if there should occur an unrecoverable error in the layout process, class\n<span class="api">BufferedLayout</span> guarantees that the structure of the input graph remains\nconsistent.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-buffering-550-simpara-021",content:'Wrapping a layout algorithm with a <span class="api">BufferedLayout</span> layout stage is as easy as\nshown in <a href="#/dguide/ex_layout_buffering">Using buffered layout (LayoutGraph API)</a>.'},{tagname:"example",id:"ex_layout_buffering",title:"Using buffered layout (LayoutGraph API)",content:'<pre class="programlisting javascript" id="layout-buffering-550-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyLayoutGraph()\r\n\r\n// Run organic layout by implicitly wrapping its invocation using the services\r\n// of class BufferedLayout.\r\nnew yfiles.layout.BufferedLayout(new yfiles.organic.OrganicLayout()).applyLayout(graph)\n</code></pre>'}]}]},{tagname:"section",id:"layout-customizing_partition_grid",title:"Customizing Tabular Layout",children:[{tagname:"para","class":"dguide-para note",id:"layout-customizing_partition_grid-551-note-001",content:'<p id="layout-customizing_partition_grid-551-simpara-001">The section <a href="#/dguide/layout-table_layout">Layout of Tables and Swimlanes</a> gives an introduction to tabular and swimlane\nlayout, lists the layout styles that support this layout, and explains common usage. You only need\nto read this section if your use case is not covered by the automatic layout adapter mechanism.</p>'},{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-simpara-002",content:'The <a href="#/dguide/layout_graph_model">layout graph model</a> does not contain a specific node\ntype for tables, swimlanes, or similar tabular groups. Instead, the services of the\nclass <api-link id="layout-customizing_partition_grid-551-api-link-001" data-member="" data-text="PartitionGrid" data-type="yfiles.layout.PartitionGrid"></api-link> can be used to'},{tagname:"para",content:'<ul id="layout-customizing_partition_grid-551-itemizedlist-001"><li id="layout-customizing_partition_grid-551-listitem-001"><p id="layout-customizing_partition_grid-551-simpara-003">define a grid-like partition consisting of rows and columns,</p></li><li id="layout-customizing_partition_grid-551-listitem-002"><p id="layout-customizing_partition_grid-551-simpara-004">create IDs for the cells of a partition which result from the rows and columns, and</p></li><li id="layout-customizing_partition_grid-551-listitem-003"><p id="layout-customizing_partition_grid-551-simpara-005">assign the nodes of a diagram to these partition cells by means of the cell IDs.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-simpara-006",content:'Partitioned layout calculation needs a PartitionGrid object registered via a data\nprovider with the graph using look-up key <api-link id="layout-customizing_partition_grid-551-api-link-002" data-member="PARTITION_GRID_DP_KEY" data-text="PARTITION_GRID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link>\nand the mapping of the nodes to partition cells registered via data provider with\nthe graph using look-up key <api-link id="layout-customizing_partition_grid-551-api-link-003" data-member="PARTITION_CELL_ID_DP_KEY" data-text="PARTITION_CELL_ID_DP_KEY" data-type="yfiles.layout.PartitionGrid"></api-link>.\nDuring layout calculation, an algorithm first retrieves the data providers using\nthe look-up keys, and afterwards retrieves the contained information.'},{tagname:"figure","class":"image",title:"Left-to-right partitioned layout.",id:"fig_layout_partition_grid","float":0,children:[{tagname:"img",src:"assets/partition_grid-example_smaller.793879ce.png",alt:"partition grid example smaller",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-simpara-007",content:"Basically, the partition grid needs to be created, and the data providers that hold\nthe necessary information about the partition grid and the mapping of nodes to cells\nhave to be filled manually, and be registered with the graph using the data provider\nlook-up keys defined in class PartitionGrid."},{tagname:"example",id:"ex_layout_partition_grid_manual_configuration",title:"Configuration of a partitioned layout",content:'<pre class="programlisting javascript" id="layout-customizing_partition_grid-551-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n// Nodes \'n1\' and \'n2\' to \'n6\' (not shown here).\r\nconst n1 = getMyNode()\r\n\r\n// Create a grid having three rows and four columns.\r\nconst grid = new yfiles.layout.PartitionGrid(3, 4)\r\n\r\n// Create an IMapper to store the mapping of nodes to swimlanes, resp. partition\r\n// grid cells.\r\nconst cellMap = new yfiles.collections.Mapper()\r\n\r\n// Assign the nodes to the cells.\r\ncellMap.set(n1, grid.createCellId(1, 0))\r\ncellMap.set(n2, grid.createCellId(0, 1))\r\ncellMap.set(n3, grid.createCellId(2, 2))\r\ncellMap.set(n4, grid.createCellId(1, 3))\r\ncellMap.set(n5, grid.createCellId(0, 3))\r\ncellMap.set(n6, grid.createCellId(0, 3))\r\n\r\n// Create a context mapping that holds the cellMap. This is necessary for the partition grid layout data.\r\nconst cellIdMapping = new yfiles.layout.ContextItemMapping()\r\ncellIdMapping.mapper = cellMap\r\n\r\n// Create the layout data for the partition grid and assign the cellMapping and the grid to it.\r\nconst partitionGridData = new yfiles.layout.PartitionGridData()\r\npartitionGridData.grid = grid\r\npartitionGridData.cellIds = cellIdMapping\r\n\r\n// Create the supplemental layout data for the hierarchic layout ...\r\nconst layoutData = new yfiles.hierarchic.HierarchicLayoutData()\r\n// ... and set the layout data for the partition grid accordingly.\r\nlayoutData.partitionGridData = partitionGridData\r\n\r\n// Create the layout algorithm...\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\nhl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\n// ... and start layout calculation.\r\ngraph.applyLayout(hl, layoutData)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-simpara-008",content:'<a href="#/dguide/ex_layout_partition_grid_manual_configuration">Configuration of a partitioned layout</a> shows the basic\nsetup of the partition grid seen in <a href="#/dguide/fig_layout_partition_grid">Left-to-right partitioned layout.</a>.\nObserve how the layout algorithm respects the specified organization of the nodes\nwithin the partition cells.'},{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-simpara-009",content:"To create IDs for the cells of a partition (single cells and ranges of cells), class\nPartitionGrid provides the methods below.\nThe IDs can be used to assign the nodes of a diagram to partition cells.\nNodes that do not have an ID associated, can be placed in any partition cell by\na layout algorithm."},{tagname:"para",content:'<dl id="layout-customizing_partition_grid-551-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="layout-customizing_partition_grid-551-term-001"><api-link id="layout-customizing_partition_grid-551-api-link-004" data-member="createCellId(number,number)" data-text="createCellId(rowIndex:&#xA0;number, columnIndex:&#xA0;number):&#xA0;PartitionCellId" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="layout-customizing_partition_grid-551-listitem-004">\n<p id="layout-customizing_partition_grid-551-simpara-010">Creates a partition ID for single cells.</p>\n</dd>\n<dt id="layout-customizing_partition_grid-551-term-002"><api-link id="layout-customizing_partition_grid-551-api-link-005" data-member="createCellSpanId(number,number,number,number)" data-text="createCellSpanId(fromRowIndex:&#xA0;number, fromColIndex:&#xA0;number, toRowIndex:&#xA0;number, toColIndex:&#xA0;number):&#xA0;PartitionCellId" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="layout-customizing_partition_grid-551-listitem-005">\n<p id="layout-customizing_partition_grid-551-simpara-011">Creates a partition ID that represent a (two-dimensional) range of cells stretching\nthe specified rows and columns.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para important",id:"layout-customizing_partition_grid-551-important-001",content:'<p id="layout-customizing_partition_grid-551-simpara-012">In the set of all specified cells of a partition (single cells and ranges of cells),\nno two ranges of cells are allowed to overlap with each other, or overlap with a\nsingle cell, i.e., the set needs to be disjoint.\nIn particular, this also means that no partition cell can have more than one partition\nID associated with it.</p>'},{tagname:"formalpara",id:"layout-customizing_partition_grid-551-formalpara-001",title:"Reordering Rows and Columns",children:[{tagname:"para","class":"dguide-para",id:"layout-customizing_partition_grid-551-para-001",content:"Class PartitionGrid enables further optimization of the layout outcome when there\nare no cell spans specified in a partition grid.\nThe following properties can be used to control whether the order of rows and\ncolumns in a swimlane/partitioned layout shall be automatically determined."}]},{tagname:"para",content:'<dl id="layout-customizing_partition_grid-551-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="layout-customizing_partition_grid-551-term-003"><api-link id="layout-customizing_partition_grid-551-api-link-006" data-member="optimizeRowOrder" data-text="optimizeRowOrder:&#xA0;boolean" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="layout-customizing_partition_grid-551-listitem-006">\n<p id="layout-customizing_partition_grid-551-simpara-013">Optimize the order of rows to minimize the diagram’s overall edge lengths.</p>\n</dd>\n<dt id="layout-customizing_partition_grid-551-term-004"><api-link id="layout-customizing_partition_grid-551-api-link-007" data-member="optimizeColumnOrder" data-text="optimizeColumnOrder:&#xA0;boolean" data-type="yfiles.layout.PartitionGrid"></api-link></dt><dd id="layout-customizing_partition_grid-551-listitem-007">\n<p id="layout-customizing_partition_grid-551-simpara-014">Optimize the order of columns to minimize the diagram’s overall edge lengths.</p>\n</dd>\n</dl>'}]}]},{tagname:"section",id:"customizing_concepts",title:"General Concepts for Customization",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts-019-simpara-001",content:"A core strength of yFiles for HTML is the fact that nearly every aspect of the library can\nbe modified and customized in some way."},{tagname:"para","class":"dguide-para",id:"customizing_concepts-019-simpara-002",content:"yFiles for HTML follows a set of principles, conventions, and design patterns for\nextensibility and customization.\nThese help you to quickly find a starting point on how to customize certain\nbehaviors without the need to read long tutorials on how to change things."},{tagname:"section",id:"customizing_concepts_dependency-injection",title:"Configuration Properties",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_dependency-injection-552-simpara-001",content:"Oftentimes, the logic to accomplish certain things in yFiles for HTML is not hard-coded,\nbut encapsulated in (functional) interfaces and configuration\nclasses where possible."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_dependency-injection-552-simpara-002",content:'This, combined with the fact that yFiles for HTML is built extremely modularly makes exchanging\nthese objects on the operating classes one of the most common forms of customization in\nyFiles for HTML. For example, you can completely change the possible user interactions in a\nyFiles for HTML application by simply exchanging the <api-link id="customizing_concepts_dependency-injection-552-api-link-001" data-member="" data-text="IInputMode" data-type="yfiles.input.IInputMode"></api-link> set\non the <api-link id="customizing_concepts_dependency-injection-552-api-link-002" data-member="inputMode" data-text="inputMode" data-type="yfiles.view.CanvasComponent"></api-link> property of the <span class="api">GraphComponent</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_dependency-injection-552-simpara-003",content:'We can configure the user interaction to behave like an\neditor by setting an instance of\n<api-link id="customizing_concepts_dependency-injection-552-api-link-003" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> as the\n<span class="api">IInputMode</span> for the <span class="api">GraphComponent</span>:'},{tagname:"example",id:"customizing_concepts_dependency-injection-552-example-001",title:"Enabling editor functions in the GraphComponent",content:'<pre class="programlisting javascript" id="customizing_concepts_dependency-injection-552-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.inputMode = new yfiles.input.GraphEditorInputMode()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_dependency-injection-552-simpara-004",content:'In the next example however, we change the set of available\nuser interactions on the <span class="api">GraphComponent</span> completely by setting an instance of\n<api-link id="customizing_concepts_dependency-injection-552-api-link-004" data-member="" data-text="GraphViewerInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link> as the <span class="api">GraphComponent</span>’s\n<span class="api">IInputMode</span>.'},{tagname:"example",id:"customizing_concepts_dependency-injection-552-example-002",title:"Enabling viewer functions in the GraphComponent",content:'<pre class="programlisting javascript" id="customizing_concepts_dependency-injection-552-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.inputMode = new yfiles.input.GraphViewerInputMode()\n</code></pre>'},{tagname:"para","class":"dguide-para tip",id:"customizing_concepts_dependency-injection-552-tip-001",content:'<p id="customizing_concepts_dependency-injection-552-simpara-005">When you are looking for a way to change yFiles for HTML’s default behavior, always look for\nproperties that might be related to your needs and use object composition.</p>'}]},{tagname:"section",id:"customizing_concepts_inheritance",title:"Logic Abstraction",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-001",content:"The API of yFiles for HTML is designed to make extensive use of logic encapsulation and\nabstraction. Where you can’t find a property to set for object composition, there is a\ngood chance that you can derive from the class and override a protected method to\nchange behavior of the default implementation."},{tagname:"para","class":"dguide-para note",id:"customizing_concepts_inheritance-553-note-001",content:'<p id="customizing_concepts_inheritance-553-simpara-002">If you find that you want to subclass a certain API member or implement an interface of the API, be sure\n  to read <a href="#/dguide/class_framework">the introduction to the class framework</a>.</p>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-003",content:'An example of this is the use of the factory method pattern in yFiles for HTML.\nIn situations where a property should not be changed at all after construction of the object\noverriding the factory method provides a means of using a different implementation. One\nexample is the <api-link id="customizing_concepts_inheritance-553-api-link-001" data-member="" data-text="UndoEngine" data-type="yfiles.graph.UndoEngine"></api-link> of the <api-link id="customizing_concepts_inheritance-553-api-link-002" data-member="" data-text="DefaultGraph" data-type="yfiles.graph.DefaultGraph"></api-link>\nwhich can only be customized by the <api-link id="customizing_concepts_inheritance-553-api-link-003" data-member="createUndoEngine()" data-text="createUndoEngine" data-type="yfiles.graph.DefaultGraph"></api-link>\nfactory method.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-004",content:"In most cases, however,\nthis pattern is provided in addition to object composition, where changing a property is\nrather uncommon.\nAlso, you might want to initialize the object to the correct value\ninstead of setting the property after construction to avoid irritating behavior when\nchanging the value."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-005",content:"Although setting the property value would be sufficient in most cases\noverriding the factory method has some advantages:"},{tagname:"para",content:'<ul id="customizing_concepts_inheritance-553-itemizedlist-001"><li id="customizing_concepts_inheritance-553-listitem-001"><p id="customizing_concepts_inheritance-553-simpara-006">Lazy initialization of the property’s value: the value is only initialized when it is really needed</p></li><li id="customizing_concepts_inheritance-553-listitem-002"><p id="customizing_concepts_inheritance-553-simpara-007">Proper initialization order (e.g. <span class="api">GraphEditorInputMode</span>’s sub modes\nwhich are not allowed to be changed after <span class="api">GraphEditorInputMode</span> has been installed)</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-008",content:"In these cases, it is beneficial to favor inheritance over object composition and a\nfactory method is provided in addition to the property."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_inheritance-553-simpara-009",content:'An example are the sub input modes of <span class="api">GraphEditorInputMode</span>, e.g. the\n<api-link id="customizing_concepts_inheritance-553-api-link-004" data-member="marqueeSelectionInputMode" data-text="marqueeSelectionInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link> property.\nUpon first access of the property, the\n<api-link id="customizing_concepts_inheritance-553-api-link-005" data-member="createMarqueeSelectionInputMode()" data-text="createMarqueeSelectionInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link>\nfactory method is called, which is implemented in yFiles for HTML as follows:'},{tagname:"example",id:"customizing_concepts_inheritance-553-example-001",title:"Default implementation of ",content:'<pre class="programlisting javascript" id="customizing_concepts_inheritance-553-programlisting-001" language="javascript" format="linespecific"><code>createMarqueeSelectionInputMode() {\r\n  const mode = new yfiles.input.MarqueeSelectionInputMode()\r\n  mode.priority = 50\r\n  return mode\r\n}\n</code></pre>'}]},{tagname:"section",id:"customizing_concepts_lookup",title:"Service Locator Pattern: Lookup",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup-554-simpara-001",content:"yFiles for HTML implements the service locator pattern in many of its core interfaces and elements. The main\nadvantage of this pattern in the context of yFiles for HTML is that it shifts the\nresponsibility of providing the logic to deal with an element from the operating part to\nthe element itself. Main benefits of using this pattern are:"},{tagname:"para",content:'<ul id="customizing_concepts_lookup-554-itemizedlist-001"><li id="customizing_concepts_lookup-554-listitem-001"><p id="customizing_concepts_lookup-554-simpara-002"><strong id="customizing_concepts_lookup-554-emphasis-001" class="bold" role="bold">Flexibility:</strong> Logic to deal with something can be better changed; not one central\npiece that deals with everything but the central piece asks the items to deal with\nfor how to deal with them.</p></li><li id="customizing_concepts_lookup-554-listitem-002"><p id="customizing_concepts_lookup-554-simpara-003"><strong id="customizing_concepts_lookup-554-emphasis-002" class="bold" role="bold">Scalability:</strong> Adding new functionality does not necessarily need changes to existing\ncode.</p></li><li id="customizing_concepts_lookup-554-listitem-003"><p id="customizing_concepts_lookup-554-simpara-004"><strong id="customizing_concepts_lookup-554-emphasis-003" class="bold" role="bold">Simplification:</strong> Each part is smaller, simpler and therefore easier to comprehend and\nmaintain.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup-554-simpara-005",content:'But there are also disadvantages to this pattern: For one, it is not intuitive which\nobjects an item returns in its lookup. Luckily, it is rare that you really need to resort\nto lookup for <strong id="customizing_concepts_lookup-554-emphasis-004" class="bold" role="bold">obtaining</strong> objects. There are almost always other means to get the\ninformation you need. The service locator pattern in yFiles for HTML is primarily meant to be\nan anchor for <strong id="customizing_concepts_lookup-554-emphasis-005" class="bold" role="bold">injecting your own implementations</strong> while keeping the interfaces short and\navoiding the need to derive classes. On the other hand, it is hard to guess what the\nframework expects from an object to return in different situations just by looking at the available\nAPI. Using the service locator mechanism requires careful study of the available\ndocumentation, both in the API documentation and the Developer’s Guide.'},{tagname:"para","class":"dguide-para note",id:"customizing_concepts_lookup-554-note-001",content:'<p id="customizing_concepts_lookup-554-simpara-006">One example where developers need to retrieve an object via lookup\n  is when retrieving information from an <span class="api">IInputModeContext</span>\n   as shown below in the example <a href="#/dguide/ex_concepts_lookup_simple">Example for a lookup</a>.</p>'},{tagname:"para","class":"dguide-para note",id:"customizing_concepts_lookup-554-note-002",content:'<p id="customizing_concepts_lookup-554-simpara-007">One example where the documentation describes the use of the service locator pattern\n  for a kind of interaction is section <a href="#/dguide/customizing_interaction_resizing">Customizing Resizing Nodes</a>\n  in this document, which lists the interfaces that are queried via lookup\n  during resize operations.</p>'},{tagname:"section",id:"customizing_concepts_lookup_interfaces",title:"Using Lookup",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_interfaces-555-simpara-001",content:'The main interface that represents the service locator pattern in yFiles for HTML is\n<api-link id="customizing_concepts_lookup_interfaces-555-api-link-001" data-member="" data-text="ILookup" data-type="yfiles.graph.ILookup"></api-link>. <span class="api">GraphComponent</span>, <span class="api">Graph</span>, <span class="api">INode</span>, <span class="api">IEdge</span> etc. all implement this\ninterface and thereby provide a number of objects that are mainly used by the framework to\nretrieve the information required to deal with the element in question.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_interfaces-555-simpara-002",content:'The <span class="api">ILookup</span> interface defines just a single method:\n<api-link id="customizing_concepts_lookup_interfaces-555-api-link-002" data-member="lookup(yfiles.lang.Class)" data-text="lookup(type:&#xA0;Class):&#xA0;Object" data-type="yfiles.graph.ILookup"></api-link>.\nThis method is called to query the <span class="api">ILookup</span> implementor for an instance of the given type.\nThe <span class="api">ILookup</span> implementor then returns this instance or <code>null</code>\nif there is no such instance.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_interfaces-555-simpara-003",content:'A quite common use case where a developer has to query an <span class="api">ILookup</span> implementor\nis to query an <api-link id="customizing_concepts_lookup_interfaces-555-api-link-003" data-member="" data-text="IInputModeContext" data-type="yfiles.input.IInputModeContext"></api-link>’s lookup\nin a user interaction related method for input mode related types.\n<a href="#/dguide/ex_concepts_lookup_simple">Example for a lookup</a> shows a very common example:\nThe call asks the <span class="api">IInputModeContext</span> for an implementation of the\n<api-link id="customizing_concepts_lookup_interfaces-555-api-link-004" data-member="" data-text="SnapContext" data-type="yfiles.input.SnapContext"></api-link> class. The method returns an object of the\nrequested type, or <code>null</code> if not available.'},{tagname:"example",id:"ex_concepts_lookup_simple",title:"Example for a lookup",content:'<pre class="programlisting javascript" id="customizing_concepts_lookup_interfaces-555-programlisting-001" language="javascript" format="linespecific"><code>const snapContext = inputModeContext.lookup(yfiles.input.SnapContext.$class)\n</code></pre>'}]},{tagname:"section",id:"customizing_concepts_lookup_decoration",title:"The Lookup Chain",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-001",content:'All lookups of classes that implement the <span class="api">ILookup</span> interface can be customized via\n<span class="def">decoration</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-002",content:'The primary lookup decoration mechanism relies on the usage of the\n<api-link id="customizing_concepts_lookup_decoration-556-api-link-001" data-member="" data-text="IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link> interface, which is closely related to <span class="api">ILookup</span>, but\nextends the concept by two aspects:'},{tagname:"para",content:'<ol id="customizing_concepts_lookup_decoration-556-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="customizing_concepts_lookup_decoration-556-listitem-001"><p id="customizing_concepts_lookup_decoration-556-simpara-003">Adds lookup capabilities to <strong id="customizing_concepts_lookup_decoration-556-emphasis-001" class="bold" role="bold">any</strong> item</p></li><li id="customizing_concepts_lookup_decoration-556-listitem-002"><p id="customizing_concepts_lookup_decoration-556-simpara-004">Adds the ability to <strong id="customizing_concepts_lookup_decoration-556-emphasis-002" class="bold" role="bold">chain</strong> lookups, which means that if the first lookup does not satisfy\nthe request, then the next lookup in the chain will be called, until the end of the chain\nis reached.</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-005",content:'The decoration of a lookup is then a simple matter of <strong id="customizing_concepts_lookup_decoration-556-emphasis-003" class="bold" role="bold">adding a chain link to the start\nof the lookup chain</strong>. This can be done using the <api-link id="customizing_concepts_lookup_decoration-556-api-link-002" data-member="" data-text="ILookupDecorator" data-type="yfiles.graph.ILookupDecorator"></api-link> interface, which\nyou can obtain from all items that implement <span class="api">ILookup</span> in yFiles for HTML via lookup.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-006",content:'The most important method defined on this interface is:\n<api-link id="customizing_concepts_lookup_decoration-556-api-link-003" data-member="addLookup(yfiles.lang.Class,yfiles.graph.IContextLookupChainLink)" data-text="addLookup(t:&#xA0;Class, lookup:&#xA0;IContextLookupChainLink)" data-type="yfiles.graph.ILookupDecorator"></api-link>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-007",content:'This method takes an <span class="api">IContextLookupChainLink</span> and adds it to the existing lookup chain\nof the given class. When the lookup mechanism of an object of this class is used to query\nsomething, the last added <span class="api">IContextLookupChainLink</span> is called first.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_lookup_decoration-556-simpara-008",content:'<span class="api">IContextLookupChainLink</span> implementations can be created using factory methods defined\non the interface, there is no need to implement the interface by yourself.'},{tagname:"para",content:'<dl id="customizing_concepts_lookup_decoration-556-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="customizing_concepts_lookup_decoration-556-term-001"><api-link id="customizing_concepts_lookup_decoration-556-api-link-004" data-member="createContextLookupChainLink(yfiles.graph.LookupCallback)" data-text="createContextLookupChainLink(callback:&#xA0;LookupCallback):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dd id="customizing_concepts_lookup_decoration-556-listitem-003">\n<p id="customizing_concepts_lookup_decoration-556-simpara-009">Uses an <api-link id="customizing_concepts_lookup_decoration-556-api-link-005" data-member="" data-text="IContextLookup" data-type="yfiles.graph.IContextLookup"></api-link> as the logic for the lookup call, which additionally\nprovides the item instance on which the lookup call happened as context in the\n<api-link id="customizing_concepts_lookup_decoration-556-api-link-006" data-member="contextLookup(Object,yfiles.lang.Class)" data-text="contextLookup" data-type="yfiles.graph.IContextLookup"></api-link> method.</p>\n</dd>\n<dt id="customizing_concepts_lookup_decoration-556-term-002"><api-link id="customizing_concepts_lookup_decoration-556-api-link-007" data-member="addingLookupChainLink(yfiles.graph.ILookup)" data-text="addingLookupChainLink(lookup:&#xA0;ILookup):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dd id="customizing_concepts_lookup_decoration-556-listitem-004">\n<p id="customizing_concepts_lookup_decoration-556-simpara-010">Queries the given <span class="api">ILookup</span> for an instance of the queried type.\nProceeds in the chain if the lookup returns <code>null</code>.</p>\n</dd>\n<dt id="customizing_concepts_lookup_decoration-556-term-003"><api-link id="customizing_concepts_lookup_decoration-556-api-link-008" data-member="addingLookupChainLink(Object)" data-text="addingLookupChainLink(instance:&#xA0;Object):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dt id="customizing_concepts_lookup_decoration-556-term-004"><api-link id="customizing_concepts_lookup_decoration-556-api-link-009" data-member="addingLookupChainLink(yfiles.lang.Class,Object)" data-text="addingLookupChainLink(type:&#xA0;Class, instance:&#xA0;Object):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dd id="customizing_concepts_lookup_decoration-556-listitem-005">\n<p id="customizing_concepts_lookup_decoration-556-simpara-011">Provides a single element for the lookup call.</p>\n</dd>\n<dt id="customizing_concepts_lookup_decoration-556-term-005"><api-link id="customizing_concepts_lookup_decoration-556-api-link-010" data-member="factoryLookupChainLink(yfiles.lang.Class,yfiles.lang.Class,system.Func2)" data-text="factoryLookupChainLink&lt;TContext,TResult&gt;(contextType:&#xA0;Class, resultType:&#xA0;Class, factory:&#xA0;Func2&lt;TContext,&#xA0;TResult&gt;):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dd id="customizing_concepts_lookup_decoration-556-listitem-006">\n<p id="customizing_concepts_lookup_decoration-556-simpara-012">Answers the lookup call by using the provided factory to create an instance of the\nqueried type.</p>\n</dd>\n<dt id="customizing_concepts_lookup_decoration-556-term-006"><api-link id="customizing_concepts_lookup_decoration-556-api-link-011" data-member="hidingLookupChainLink(yfiles.lang.Class)" data-text="hidingLookupChainLink(type:&#xA0;Class):&#xA0;IContextLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link></dt><dd id="customizing_concepts_lookup_decoration-556-listitem-007">\n<p id="customizing_concepts_lookup_decoration-556-simpara-013">Returns <code>null</code> for the given type and therefore ends the lookup chain at this point\nto hide whatever may have been returned in the remaining lookup chain.</p>\n</dd>\n</dl>'}]},{tagname:"section",id:"customizing_concepts_example",title:"Examples for Lookup Decoration",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-001",content:'To give a clearer picture, we will give some examples for usages of these lookups in\nthe customization process. For a start, we will begin with an\n<api-link id="customizing_concepts_example-557-api-link-001" data-member="" data-text="INodeSizeConstraintProvider" data-type="yfiles.input.INodeSizeConstraintProvider"></api-link>\nfor which an <span class="api">INode</span>’s lookup is queried during\n<a href="#/dguide/customizing_interaction_resizing">interactive node resizing</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-002",content:'Let’s assume that we want to create a custom\n<span class="api">INodeSizeConstraintProvider</span>\nand place it into the lookup of all nodes. In the first example\n<a href="#/dguide/ex_lookupChainLink_ContextLookupChainLink">A regular IContextLookupChainLink that uses an IContextLookup</a>, we use the general approach that uses an\n<api-link id="customizing_concepts_example-557-api-link-002" data-member="" data-text="IContextLookup" data-type="yfiles.graph.IContextLookup"></api-link> as argument.'},{tagname:"example",id:"ex_lookupChainLink_ContextLookupChainLink",title:"A regular IContextLookupChainLink that uses an IContextLookup",content:'<pre class="programlisting javascript" id="customizing_concepts_example-557-programlisting-001" language="javascript" format="linespecific"><code>// first, get the decorator for the graph\'s lookup.\r\nconst /**yfiles.graph.ILookupDecorator*/ decorator = graph.lookup(yfiles.graph.ILookupDecorator.$class)\r\n// add a lookup to the lookup chain for IGraphs that contains an IContextLookup,\r\n// which returns a new INodeSizeConstraintProvider instance when\r\n// the INodeSizeConstraintProvider.class is queried for a node.\r\ndecorator.addLookup(\r\n  yfiles.graph.IGraph.$class,\r\n  yfiles.graph.IContextLookupChainLink.createContextLookupChainLink((item, type) => {\r\n    if (type === yfiles.input.INodeSizeConstraintProvider.$class) {\r\n      const size = item.layout.toSize()\r\n      return new yfiles.input.NodeSizeConstraintProvider(size.multiply(0.5), size.multiply(2))\r\n    }\r\n    return null\r\n  }))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-003",content:'The first step is to obtain the <api-link id="customizing_concepts_example-557-api-link-003" data-member="" data-text="ILookupDecorator" data-type="yfiles.graph.ILookupDecorator"></api-link> from the graph as\nmentioned in section <a href="#/dguide/customizing_concepts_lookup_decoration">The Lookup Chain</a>. Once we have the\ndecorator, we can use the\n<api-link id="customizing_concepts_example-557-api-link-004" data-member="addLookup(yfiles.lang.Class,yfiles.graph.IContextLookupChainLink)" data-text="addLookup(t:&#xA0;Class, lookup:&#xA0;IContextLookupChainLink)" data-type="yfiles.graph.ILookupDecorator"></api-link>\nmethod to add a chain link to the lookup chain. The type we\nwant to decorate is <span class="api">INode</span>, so the first argument is the class object of\n<span class="api">INode</span>. The second argument is our custom <span class="api">IContextLookupChainLink</span> using\nan <span class="api">IContextLookup</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-004",content:'The\n<api-link id="customizing_concepts_example-557-api-link-005" data-member="contextLookup(Object,yfiles.lang.Class)" data-text="contextLookup(item:&#xA0;Object, type:&#xA0;Class)" data-type="yfiles.graph.IContextLookup"></api-link>\nmethod of the <span class="api">IContextLookup</span> interface has an additional <code>item</code> object parameter which\nacts as the <span class="def">context</span> of the lookup.\nIn this example, we want to restrict node resizing to half the node’s original size at minimum\nand twice its orignal size as maximum. For this use case we need the current node\n(which is the <code>item</code> parameter) to retrieve its original size. (Note: since we registered the\ndecorator for <span class="api">INode</span>s we can safely assume that <code>item</code> is of type <span class="api">INode</span>).'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-005",content:'The second parameter is the type that is being queried in the lookup. We want to return\nour new constraint provider when a <span class="api">INodeSizeConstraintProvider</span> is queried,\nso we create and return\nit if the queried type equals the <span class="api">INodeSizeConstraintProvider</span> type.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-006",content:'Since our <span class="api">IContextLookupChainLink</span> has been added last, it will be queried first when looking up the\n<span class="api">INodeSizeConstraintProvider</span> type for a node.\nOur custom provider is returned, then.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-007",content:'Usually, the <span class="api">IContextLookup</span> interface is meant to handle more complex lookup.\nFor instance, we could cover more objects that we might want to return, or we could\nreturn objects dependent on the <code>item</code> context parameter. Decorating the lookup with only\none object for a certain type is actually one of the most simple and common use cases for\ndecorating lookups. For this use case, one of the\n<api-link id="customizing_concepts_example-557-api-link-006" data-member="addingLookupChainLink(yfiles.lang.Class,Object)" data-text="addingLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link> methods\nare more suitable.\nThese implementations of <span class="api">IContextLookupChainLink</span> are meant\nto add a single element to a lookup chain.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-008",content:'Again, let’s assume that we want to insert a custom\n<span class="api">INodeSizeConstraintProvider</span>, stored in a variable <code>constraintProvider</code>\ninto the lookup of nodes. The example\n<a href="#/dguide/ex_lookupChainLink_AddingLookupChainLink">Adding single elements to the lookup chain</a> shows how this can be accomplished with the\naforementioned methods.'},{tagname:"example",id:"ex_lookupChainLink_AddingLookupChainLink",title:"Adding single elements to the lookup chain",content:'<pre class="programlisting javascript" id="customizing_concepts_example-557-programlisting-002" language="javascript" format="linespecific"><code>// read as: add a lookup to the lookup chain for the graph that returns\r\n// the constraintProvider when the INodeSizeConstraintProvider.class is queried.\r\ndecorator.addLookup(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.graph.IContextLookupChainLink.addingLookupChainLink(\r\n    yfiles.input.INodeSizeConstraintProvider.$class,\r\n    constraintProvider))\r\n\r\n// read as: add a lookup to the lookup chain for the graph that returns\r\n// the constraintProvider when the type of the query match the constraintProvider type.\r\ndecorator.addLookup(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.graph.IContextLookupChainLink.addingLookupChainLink(constraintProvider))\r\n\r\n// read as: add a lookup to the lookup chain for the graph that contains another ILookup,\r\n// which returns the constraintProvider when the type of the query match the constraintProvider type.\r\ndecorator.addLookup(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.graph.IContextLookupChainLink.addingLookupChainLink(\r\n    yfiles.graph.ILookup.createDynamicLookup(constraintProvider)))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-009",content:'There are three overloads of\n<api-link id="customizing_concepts_example-557-api-link-007" data-member="addingLookupChainLink(yfiles.lang.Class,Object)" data-text="addingLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link>\nthat have a slightly different usage but the commonality is that the resulting\n<span class="api">IContextLookupChainLink</span> simply returns the given instance if applicable and otherwise\npasses the call to the next chain link in the lookup chain.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-010",content:'Since it is a very common use case to decorate the lookup of an item by adding a single\nelement, there is an even more concise method defined on the\n<api-link id="customizing_concepts_example-557-api-link-008" data-member="" data-text="ILookupDecorator" data-type="yfiles.graph.ILookupDecorator"></api-link> interface:\n<api-link id="customizing_concepts_example-557-api-link-009" data-member="addConstant(yfiles.lang.Class,yfiles.lang.Class,TResult)" data-text="addConstant&lt;TContext,TResult&gt;" data-type="yfiles.graph.ILookupDecorator"></api-link>.\nSee <a href="#/dguide/ex_addConstant">Adding a constant to the lookup chain</a> for how to use it in the context of the previous examples.'},{tagname:"example",id:"ex_addConstant",title:"Adding a constant to the lookup chain",content:'<pre class="programlisting javascript" id="customizing_concepts_example-557-programlisting-003" language="javascript" format="linespecific"><code>decorator.addConstant(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.input.INodeSizeConstraintProvider.$class,\r\n  constraintProvider)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-011",content:'If your lookup decoration is highly dependent on the actual instance of the type that is being\ndecorated, an <span class="api">IContextLookupChainLink</span> that is backed by a factory is the way to go.\nThe <api-link id="customizing_concepts_example-557-api-link-010" data-member="factoryLookupChainLink(yfiles.lang.Class,yfiles.lang.Class,system.Func2)" data-text="factoryLookupChainLink&lt;TContext,TResult&gt;" data-type="yfiles.graph.IContextLookupChainLink"></api-link>\nmethod takes a function as well as the\nexpected and resulting type. The function takes the object that the lookup is being\nperformed on and is expected to create an object of the expected type.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-012",content:'<a href="#/dguide/ex_lookupChainLink_FactoryLookupChainLink">Factory IContextLookupChainLink</a> illustrates an example usage taken\nfrom one of our demos. In the example, the lookup of the graph is being decorated for\n<span class="api">INode</span> which is queried for <api-link id="customizing_concepts_example-557-api-link-011" data-member="" data-text="IPortCandidateProvider" data-type="yfiles.input.IPortCandidateProvider"></api-link>. The\nmechanism of <span class="api">IPortCandidateProvider</span> is explained in the\n<a href="#/dguide/customizing_interaction_port_candidates">Creating Edges</a> section.'},{tagname:"example",id:"ex_lookupChainLink_FactoryLookupChainLink",title:"Factory IContextLookupChainLink",content:'<pre class="programlisting javascript" id="customizing_concepts_example-557-programlisting-004" language="javascript" format="linespecific"><code>const portCandidateProviderFactory = node => {\r\n  // obtain the tag from the node\r\n  const nodeTag = node.tag\r\n\r\n  // see if it is a known tag\r\n  if (yfiles.view.Color.isInstance(nodeTag)) {\r\n    // and decide what implementation to provide\r\n    if (yfiles.view.Color.RED.equals(nodeTag)) {\r\n      return new RedPortCandidateProvider(node)\r\n    } else if (yfiles.view.Color.BLUE.equals(nodeTag)) {\r\n      return new BluePortCandidateProvider(node)\r\n    }\r\n  }\r\n  // otherwise revert to default behavior\r\n  return null\r\n}\r\n\r\n// get the ILookupDecorator for the graph which also\r\n// manages the lookups for the elements of this graph.\r\nconst graphDecorator = graph.lookup(yfiles.graph.ILookupDecorator.$class)\r\n\r\n// read as: add a lookup to the lookup chain for INodes that handles requests\r\n// for IPortCandidateProvider by creating one for the INode on which the provider is queried.\r\ngraphDecorator.addLookup(\r\n  yfiles.graph.INode.$class,\r\n  yfiles.graph.IContextLookupChainLink.factoryLookupChainLink(\r\n    yfiles.graph.INode.$class,\r\n    yfiles.input.IPortCandidateProvider.$class,\r\n    portCandidateProviderFactory))\r\n\r\n// the same call, only shorter\r\ngraphDecorator.add(yfiles.graph.INode.$class, yfiles.input.IPortCandidateProvider.$class,\r\n  portCandidateProviderFactory)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-013",content:'In this example we want to create an\n<span class="api">IPortCandidateProvider</span> for the given node dependent on the\ncolor of the node, which is stored in its <api-link id="customizing_concepts_example-557-api-link-012" data-member="tag" data-text="tag" data-type="yfiles.graph.ITagOwner"></api-link> property.\nThe <code>node</code> parameter of the <code>portCandidateProviderFactory</code> function is the object\ninstance the lookup is called upon. Similar to the mechanism shown in <a href="#/dguide/ex_addConstant">Adding a constant to the lookup chain</a>,\nthe <api-link id="customizing_concepts_example-557-api-link-013" data-member="add(yfiles.lang.Class,yfiles.lang.Class,system.Func2,boolean)" data-text="add&lt;TContext,TResult&gt;" data-type="yfiles.graph.ILookupDecorator"></api-link> convenience method defined on <span class="api">ILookupDecorator</span> can be used to\nachieve the same effect.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-014",content:'Another common use case is removing existing items from the lookup.\nIf you added them yourself you can store a reference to the <span class="api">IContextLookupChainLink</span> and call\n<api-link id="customizing_concepts_example-557-api-link-014" data-member="removeLookup(yfiles.lang.Class,yfiles.graph.IContextLookupChainLink)" data-text="ILookupDecorator.removeLookup" data-type="yfiles.graph.ILookupDecorator"></api-link>\nlater on.\nHowever, most of the time you don’t have the exact lookup chain link at hand\nthat is responsible for returning a specific object when queried.\nIn those cases you can add another <span class="api">IContextLookupChainLink</span> that effectively\n<strong id="customizing_concepts_example-557-emphasis-001" class="bold" role="bold">hides</strong> the rest of the chain by returning <code>null</code>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_example-557-simpara-015",content:'The <a href="#/dguide/ex_lookupChainLink_HidingLookupChainLink">Hiding IContextLookupChainLink</a> example shows the usage of the\n<api-link id="customizing_concepts_example-557-api-link-015" data-member="hidingLookupChainLink(yfiles.lang.Class)" data-text="hidingLookupChainLink" data-type="yfiles.graph.IContextLookupChainLink"></api-link> factory\nmethod to create such an <span class="api">IContextLookupChainLink</span>. In the example, hiding is used to\nremove the visual appearance for selected edges. For information on the visualization of\nselection, focus, and highlighting, have a look at the\n<a href="#/dguide/customizing_indicators-model_manager">Model Manager</a> section.'},{tagname:"example",id:"ex_lookupChainLink_HidingLookupChainLink",title:"Hiding IContextLookupChainLink",content:'<pre class="programlisting javascript" id="customizing_concepts_example-557-programlisting-005" language="javascript" format="linespecific"><code>// read as: add a lookup to the lookup chain for IEdges that returns null\r\n// whenever an ISelectionIndicatorInstaller is queried,\r\n// thus ending the chain and hiding whatever the lookup may return when looking further.\r\ngraphDecorator.addLookup(\r\n  yfiles.graph.IEdge.$class,\r\n  yfiles.graph.IContextLookupChainLink.hidingLookupChainLink(yfiles.view.ISelectionIndicatorInstaller.$class))\n</code></pre>'}]}]},{tagname:"section",id:"customizing_concepts_events",title:"Events",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-001",content:'Events in yFiles for HTML consist of a pair of methods that add or remove an event listener.\nFor example, the <api-link id="customizing_concepts_events-558-api-link-001" data-member="NodeCreated" data-text="NodeCreated" data-type="yfiles.input.GraphEditorInputMode"></api-link> event is\ndefined by the two methods\n<api-link id="customizing_concepts_events-558-api-link-002" data-member="NodeCreated" data-text="addNodeCreatedListener" data-type="yfiles.input.GraphEditorInputMode"></api-link> and\n<api-link id="customizing_concepts_events-558-api-link-003" data-member="NodeCreated" data-text="removeNodeCreatedListener" data-type="yfiles.input.GraphEditorInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-002",content:'Event listeners in yFiles for HTML are functions\nwith two arguments: a generic <code>source</code> which is the\nobject that raised the event, and an <api-link id="customizing_concepts_events-558-api-link-004" data-member="" data-text="EventArgs" data-type="yfiles.lang.EventArgs"></api-link> <code>args</code> object that\ncarries additional information for the event.'},{tagname:"example",id:"ex_IEventListener_def",title:"Definition of event listeners",content:'<pre class="programlisting javascript" id="customizing_concepts_events-558-programlisting-001" language="javascript" format="linespecific"><code>// source is the object which dispatched the event\r\n// args is the EventArgs object which carries the information for the event\r\nconst listener = function(source, args) { }\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-003",content:'In most cases you’ll be interacting with the <span class="api">EventArgs</span> in an event\nhandler, whereas the <code>source</code> argument can be useful in cases where you use a single\nevent handler for events on different event sources.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-004",content:'<a href="#/dguide/ex_events_nodeCreatedListener">Listening for the NodeCreated event</a> shows how to listen for the aforementioned\n<api-link id="customizing_concepts_events-558-api-link-005" data-member="NodeCreated" data-text="NodeCreated" data-type="yfiles.input.GraphEditorInputMode"></api-link> event as an example.'},{tagname:"example",id:"ex_events_nodeCreatedListener",title:"Listening for the NodeCreated event",content:'<pre class="programlisting javascript" id="customizing_concepts_events-558-programlisting-002" language="javascript" format="linespecific"><code>graphEditorInputMode.addNodeCreatedListener((source, args) => {\r\n  /* react to the node creation caused by input events */\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-005",content:"Note that events may be fired in a certain order, or may even be fired multiple times,\ndependent on the event. The API documentation of the event defining methods provide all\ninformation to help you understand the event flow."},{tagname:"heading",id:"_stopping_event_propagation",renderas:"sect3",content:"Stopping Event Propagation"},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-006",content:'Adding a listener to an event means that the listener is added to a list of event\nlisteners. The event is then propagated to each listener in the event list. Some events\noffer the possibility to stop the event propagation. This is the case when the\n<api-link id="customizing_concepts_events-558-api-link-006" data-member="" data-text="EventArgs" data-type="yfiles.lang.EventArgs"></api-link> that the event handler function takes as\nargument defines a <code>Handled</code> property, for example\n<api-link id="customizing_concepts_events-558-api-link-007" data-member="handled" data-text="handled" data-type="yfiles.input.ClickEventArgs"></api-link>. When a listener sets this property\nto <code>true</code>, event propagation stops.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-007",content:"This is used in situations where it is unclear which listener should handle an event. In\nthis case the list of handlers is iterated until a listener marks the event as handled."},{tagname:"example",id:"ex_events_ItemDoubleClicked",title:"Handling a double click event",content:'<pre class="programlisting javascript" id="customizing_concepts_events-558-programlisting-003" language="javascript" format="linespecific"><code>graphEditorInputMode.addItemDoubleClickedListener((source, args) => {\r\n  // only handle double click events on nodes\r\n  if (yfiles.graph.INode.isInstance(args.item)) {\r\n    console.log("The following node has been double clicked: " + args.item)\r\n    console.log("Click occurred at " + args.location)\r\n    args.handled = true\r\n  }\r\n  // don\'t do anything in other cases (especially not setting "handled" to true),\r\n  // because this listener only reacts to nodes\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-008",content:'The <a href="#/dguide/ex_events_ItemDoubleClicked">Handling a double click event</a> example shows an event listener that reacts to double\nclick events on items. It stops the propagation once it recognizes a double clicked\nitem that it can handle.\nThe most visible change of that is that label editing won’t start on\ndouble clicked nodes as it would normally.\nThe presumption here is that when the event was handled, all default actions\nassociated with it should be suppressed.\nEspecially in regard to click events this is further detailed in the section\n<a href="#/dguide/customizing_interaction_click">Customizing Mouse Clicks</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_events-558-simpara-009",content:'Another usage of events is to gather additional information for some\n<span class="api">IInputMode</span>s. For example, to add tooltips for certain items\nin the graph, it is possible to listen to the\n<api-link id="customizing_concepts_events-558-api-link-008" data-member="QueryItemToolTip" data-text="GraphEditorInputMode.QueryItemToolTip" data-type="yfiles.input.GraphEditorInputMode"></api-link> event and set\nthe <api-link id="customizing_concepts_events-558-api-link-009" data-member="toolTip" data-text="ToolTipQueryEventArgs.toolTip" data-type="yfiles.input.ToolTipQueryEventArgs"></api-link> property.\n<a href="#/dguide/ex_events_QueryItemToolTip">Adding tooltips to items via the QueryItemToolTip event</a> shows an example for this. For more information on how to\ncustomize tooltips, have a look at the section <a href="#/dguide/customizing_interaction_tooltips">Customizing Tooltips</a>.'},{tagname:"example",id:"ex_events_QueryItemToolTip",title:"Adding tooltips to items via the QueryItemToolTip event",content:'<pre class="programlisting javascript" id="customizing_concepts_events-558-programlisting-004" language="javascript" format="linespecific"><code>graphEditorInputMode.addQueryItemToolTipListener((source, args) => {\r\n  args.toolTip = "This is a tooltip for " + args.item\r\n  args.handled = true\r\n})\n</code></pre>'}]},{tagname:"section",id:"customizing_concepts_resource-keys",title:"Resource Keys",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_resource-keys-559-simpara-001",content:'Some classes in yFiles for HTML define static "KEY" properties of type\nstring. Those constants are keys for the global client\nproperty map of HTML5 components and change certain aspects of a yFiles for HTML\napplication.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_resource-keys-559-simpara-002",content:'For example, you can change the color of <a href="#/dguide/interaction-snapping">snap lines</a> by simply\nsetting a <api-link id="customizing_concepts_resource-keys-559-api-link-001" data-member="" data-text="Stroke" data-type="yfiles.view.Stroke"></api-link>\nusing the <api-link id="customizing_concepts_resource-keys-559-api-link-002" data-member="SNAP_LINE_STROKE_KEY" data-text="SNAP_LINE_STROKE_KEY" data-type="yfiles.input.SnapLine"></api-link> resource key into the\nresource map of the <span class="api">GraphComponent</span> like shown below:'},{tagname:"example",id:"ex_resourcekeys",title:"Using a resource key",content:'<pre class="programlisting javascript" id="customizing_concepts_resource-keys-559-programlisting-001" language="javascript" format="linespecific"><code>graphComponent.resources.set(yfiles.input.SnapLine.SNAP_LINE_STROKE_KEY, yfiles.view.Stroke.BLUE)\n</code></pre>'},{tagname:"section",id:"customizing_resources",title:"Customizing String Resources",children:[{tagname:"para","class":"dguide-para",id:"customizing_resources-560-simpara-001",content:"Common string resources like command names, keyboard shortcuts, undo unit names and UI labels\ncan be customized. The key and value pairs are stored globally in the variable\n<code>yfiles.resources</code>."},{tagname:"para","class":"dguide-para",id:"customizing_resources-560-simpara-002",content:'The resources are sub-divided into UI cultures. For example, resources for the American English\nlanguage should be stored in <code>yfiles.resources["en-US"]</code>. By default, all resources are\nstored in <code>yfiles.resources["invariant"]</code>. This is also the fallback for all cultures,\nif a certain key is not found.'},{tagname:"para","class":"dguide-para",id:"customizing_resources-560-simpara-003",content:'In order to customize resources, create a variable with the name of the key and the desired value\nin the respective resource object. If the resource object is not initialized, yet, create it first.\nInitialization of the yFiles for HTML resources is non-destructive, i.e. custom values stored in\n<code>yfiles.resources</code> before initializing the <code>yfiles</code> library are not overwritten by\ndefaults. For example, you can customize the key gesture for node grouping by changing the value of\nthe resource key "GroupSelectionKey".'},{tagname:"example",id:"customizing_resources-560-example-001",title:"Customizing a Resource",content:'<pre class="programlisting javascript" id="customizing_resources-560-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.resources["invariant"]["GroupSelectionKey"] = "Shift+G";</code></pre>'},{tagname:"para","class":"dguide-para note",id:"customizing_resources-560-note-001",content:'<p id="customizing_resources-560-simpara-004">The customization of a resource has to be done before the commands are initialized,\ne.g. before the <span class="api">GraphComponent</span> is instantiated.</p>'}]},{tagname:"section",id:"resource_defaults",title:"Resources Defaults",children:[{tagname:"para","class":"dguide-para",id:"resource_defaults-561-simpara-001",content:'The following table lists the resources defaults stored in yfiles.resources["invariant"]\nalphabetically.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_resource_defaults",rowsep:1,content:'<caption>Resources Defaults</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="resource_defaults-561-thead-001"><tr id="resource_defaults-561-row-001"><th id="resource_defaults-561-entry-001" align="left" valign="top">\nKey\n</th><th id="resource_defaults-561-entry-002" align="left" valign="top">\nValue\n</th></tr></thead><tbody id="resource_defaults-561-tbody-001"><tr id="resource_defaults-561-row-002"><td id="resource_defaults-561-entry-003" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-002">AddBend.RedoName</para></td><td id="resource_defaults-561-entry-004" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-003">Add Bend</para></td></tr><tr id="resource_defaults-561-row-003"><td id="resource_defaults-561-entry-005" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-004">AddBend.UndoName</para></td><td id="resource_defaults-561-entry-006" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-005">Remove Bend</para></td></tr><tr id="resource_defaults-561-row-004"><td id="resource_defaults-561-entry-007" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-006">AddLabel.RedoName</para></td><td id="resource_defaults-561-entry-008" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-007">Add Label</para></td></tr><tr id="resource_defaults-561-row-005"><td id="resource_defaults-561-entry-009" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-008">AddLabel.UndoName</para></td><td id="resource_defaults-561-entry-010" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-009">Remove Label</para></td></tr><tr id="resource_defaults-561-row-006"><td id="resource_defaults-561-entry-011" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-010">AddLabel</para></td><td id="resource_defaults-561-entry-012" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-011">Add Label</para></td></tr><tr id="resource_defaults-561-row-007"><td id="resource_defaults-561-entry-013" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-012">AddLabelKey</para></td><td id="resource_defaults-561-entry-014" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-013">Shift+F2</para></td></tr><tr id="resource_defaults-561-row-008"><td id="resource_defaults-561-entry-015" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-014">AddPort.RedoName</para></td><td id="resource_defaults-561-entry-016" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-015">Add Port</para></td></tr><tr id="resource_defaults-561-row-009"><td id="resource_defaults-561-entry-017" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-016">AddPort.UndoName</para></td><td id="resource_defaults-561-entry-018" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-017">Remove Port</para></td></tr><tr id="resource_defaults-561-row-010"><td id="resource_defaults-561-entry-019" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-018">AdjustGroupNodeSize.RedoName</para></td><td id="resource_defaults-561-entry-020" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-019">Adjust Group Node Size</para></td></tr><tr id="resource_defaults-561-row-011"><td id="resource_defaults-561-entry-021" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-020">AdjustGroupNodeSize.UndoName</para></td><td id="resource_defaults-561-entry-022" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-021">Adjust Group Node Size</para></td></tr><tr id="resource_defaults-561-row-012"><td id="resource_defaults-561-entry-023" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-022">AdjustGroupNodeSize</para></td><td id="resource_defaults-561-entry-024" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-023">Adjust Group Node Size</para></td></tr><tr id="resource_defaults-561-row-013"><td id="resource_defaults-561-entry-025" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-024">AdjustGroupNodeSizeKey</para></td><td id="resource_defaults-561-entry-026" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-025">Ctrl+Shift+G</para></td></tr><tr id="resource_defaults-561-row-014"><td id="resource_defaults-561-entry-027" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-026">AdjustToSizeConstraints.RedoName</para></td><td id="resource_defaults-561-entry-028" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-027">Adjust Node Size</para></td></tr><tr id="resource_defaults-561-row-015"><td id="resource_defaults-561-entry-029" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-028">AdjustToSizeConstraints.UndoName</para></td><td id="resource_defaults-561-entry-030" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-029">Adjust Node Size</para></td></tr><tr id="resource_defaults-561-row-016"><td id="resource_defaults-561-entry-031" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-030">BeginEdgeCreation</para></td><td id="resource_defaults-561-entry-032" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-031">Create Edge</para></td></tr><tr id="resource_defaults-561-row-017"><td id="resource_defaults-561-entry-033" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-032">CollapseGroup</para></td><td id="resource_defaults-561-entry-034" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-033">Collapse Group</para></td></tr><tr id="resource_defaults-561-row-018"><td id="resource_defaults-561-entry-035" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-034">CollapseGroupKey</para></td><td id="resource_defaults-561-entry-036" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-035">Ctrl+Subtract</para></td></tr><tr id="resource_defaults-561-row-019"><td id="resource_defaults-561-entry-037" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-036">CollapseNode.RedoName</para></td><td id="resource_defaults-561-entry-038" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-037">Collapse Node</para></td></tr><tr id="resource_defaults-561-row-020"><td id="resource_defaults-561-entry-039" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-038">CollapseNode.UndoName</para></td><td id="resource_defaults-561-entry-040" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-039">Expand Node</para></td></tr><tr id="resource_defaults-561-row-021"><td id="resource_defaults-561-entry-041" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-040">Copy</para></td><td id="resource_defaults-561-entry-042" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-041">Copy</para></td></tr><tr id="resource_defaults-561-row-022"><td id="resource_defaults-561-entry-043" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-042">CopyKey</para></td><td id="resource_defaults-561-entry-044" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-043">Ctrl+C</para></td></tr><tr id="resource_defaults-561-row-023"><td id="resource_defaults-561-entry-045" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-044">CreateEdge.RedoName</para></td><td id="resource_defaults-561-entry-046" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-045">Add Edge</para></td></tr><tr id="resource_defaults-561-row-024"><td id="resource_defaults-561-entry-047" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-046">CreateEdge.UndoName</para></td><td id="resource_defaults-561-entry-048" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-047">Remove Edge</para></td></tr><tr id="resource_defaults-561-row-025"><td id="resource_defaults-561-entry-049" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-048">CreateNode.RedoName</para></td><td id="resource_defaults-561-entry-050" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-049">Add Node</para></td></tr><tr id="resource_defaults-561-row-026"><td id="resource_defaults-561-entry-051" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-050">CreateNode.UndoName</para></td><td id="resource_defaults-561-entry-052" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-051">Remove Node</para></td></tr><tr id="resource_defaults-561-row-027"><td id="resource_defaults-561-entry-053" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-052">CreateStripe.RedoName</para></td><td id="resource_defaults-561-entry-054" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-053">CreateStripe</para></td></tr><tr id="resource_defaults-561-row-028"><td id="resource_defaults-561-entry-055" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-054">CreateStripe.UndoName</para></td><td id="resource_defaults-561-entry-056" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-055">Add Stripe</para></td></tr><tr id="resource_defaults-561-row-029"><td id="resource_defaults-561-entry-057" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-056">Cut.RedoName</para></td><td id="resource_defaults-561-entry-058" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-057">Redo Cut</para></td></tr><tr id="resource_defaults-561-row-030"><td id="resource_defaults-561-entry-059" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-058">Cut.UndoName</para></td><td id="resource_defaults-561-entry-060" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-059">Undo Cut</para></td></tr><tr id="resource_defaults-561-row-031"><td id="resource_defaults-561-entry-061" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-060">Cut</para></td><td id="resource_defaults-561-entry-062" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-061">Cut</para></td></tr><tr id="resource_defaults-561-row-032"><td id="resource_defaults-561-entry-063" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-062">CutKey</para></td><td id="resource_defaults-561-entry-064" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-063">Ctrl+X</para></td></tr><tr id="resource_defaults-561-row-033"><td id="resource_defaults-561-entry-065" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-064">DecreaseZoom</para></td><td id="resource_defaults-561-entry-066" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-065">Zoom Out</para></td></tr><tr id="resource_defaults-561-row-034"><td id="resource_defaults-561-entry-067" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-066">Delete</para></td><td id="resource_defaults-561-entry-068" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-067">Delete</para></td></tr><tr id="resource_defaults-561-row-035"><td id="resource_defaults-561-entry-069" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-068">DeleteKey</para></td><td id="resource_defaults-561-entry-070" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-069">Delete</para></td></tr><tr id="resource_defaults-561-row-036"><td id="resource_defaults-561-entry-071" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-070">DeleteSelection.RedoName</para></td><td id="resource_defaults-561-entry-072" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-071">Redo Delete</para></td></tr><tr id="resource_defaults-561-row-037"><td id="resource_defaults-561-entry-073" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-072">DeleteSelection.UndoName</para></td><td id="resource_defaults-561-entry-074" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-073">Undo Delete</para></td></tr><tr id="resource_defaults-561-row-038"><td id="resource_defaults-561-entry-075" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-074">DeselectAll</para></td><td id="resource_defaults-561-entry-076" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-075">Deselect All</para></td></tr><tr id="resource_defaults-561-row-039"><td id="resource_defaults-561-entry-077" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-076">DeselectAllKey</para></td><td id="resource_defaults-561-entry-078" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-077">Ctrl+D</para></td></tr><tr id="resource_defaults-561-row-040"><td id="resource_defaults-561-entry-079" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-078">DeselectItem</para></td><td id="resource_defaults-561-entry-080" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-079">Deselect Item</para></td></tr><tr id="resource_defaults-561-row-041"><td id="resource_defaults-561-entry-081" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-080">EditLabel</para></td><td id="resource_defaults-561-entry-082" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-081">Edit Label</para></td></tr><tr id="resource_defaults-561-row-042"><td id="resource_defaults-561-entry-083" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-082">EditLabelKey</para></td><td id="resource_defaults-561-entry-084" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-083">F2</para></td></tr><tr id="resource_defaults-561-row-043"><td id="resource_defaults-561-entry-085" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-084">EnterGroup</para></td><td id="resource_defaults-561-entry-086" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-085">Enter Group</para></td></tr><tr id="resource_defaults-561-row-044"><td id="resource_defaults-561-entry-087" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-086">EnterGroupKey</para></td><td id="resource_defaults-561-entry-088" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-087">Ctrl+Enter</para></td></tr><tr id="resource_defaults-561-row-045"><td id="resource_defaults-561-entry-089" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-088">ExitGroup</para></td><td id="resource_defaults-561-entry-090" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-089">Exit Group</para></td></tr><tr id="resource_defaults-561-row-046"><td id="resource_defaults-561-entry-091" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-090">ExitGroupKey</para></td><td id="resource_defaults-561-entry-092" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-091">Ctrl+Backspace</para></td></tr><tr id="resource_defaults-561-row-047"><td id="resource_defaults-561-entry-093" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-092">ExpandGroup</para></td><td id="resource_defaults-561-entry-094" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-093">Expand Group</para></td></tr><tr id="resource_defaults-561-row-048"><td id="resource_defaults-561-entry-095" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-094">ExpandGroupKey</para></td><td id="resource_defaults-561-entry-096" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-095">Ctrl+Add</para></td></tr><tr id="resource_defaults-561-row-049"><td id="resource_defaults-561-entry-097" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-096">ExpandNode.RedoName</para></td><td id="resource_defaults-561-entry-098" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-097">Expand Node</para></td></tr><tr id="resource_defaults-561-row-050"><td id="resource_defaults-561-entry-099" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-098">ExpandNode.UndoName</para></td><td id="resource_defaults-561-entry-100" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-099">Collapse Node</para></td></tr><tr id="resource_defaults-561-row-051"><td id="resource_defaults-561-entry-101" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-100">ExtendSelectionDown</para></td><td id="resource_defaults-561-entry-102" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-101">Extend Selection Down</para></td></tr><tr id="resource_defaults-561-row-052"><td id="resource_defaults-561-entry-103" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-102">ExtendSelectionDownKey</para></td><td id="resource_defaults-561-entry-104" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-103">Shift+Down</para></td></tr><tr id="resource_defaults-561-row-053"><td id="resource_defaults-561-entry-105" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-104">ExtendSelectionLeft</para></td><td id="resource_defaults-561-entry-106" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-105">Extend Selection Left</para></td></tr><tr id="resource_defaults-561-row-054"><td id="resource_defaults-561-entry-107" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-106">ExtendSelectionLeftKey</para></td><td id="resource_defaults-561-entry-108" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-107">Shift+Left</para></td></tr><tr id="resource_defaults-561-row-055"><td id="resource_defaults-561-entry-109" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-108">ExtendSelectionRight</para></td><td id="resource_defaults-561-entry-110" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-109">Extend Selection Right</para></td></tr><tr id="resource_defaults-561-row-056"><td id="resource_defaults-561-entry-111" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-110">ExtendSelectionRightKey</para></td><td id="resource_defaults-561-entry-112" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-111">Shift+Right</para></td></tr><tr id="resource_defaults-561-row-057"><td id="resource_defaults-561-entry-113" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-112">ExtendSelectionUp</para></td><td id="resource_defaults-561-entry-114" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-113">Extend Selection Up</para></td></tr><tr id="resource_defaults-561-row-058"><td id="resource_defaults-561-entry-115" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-114">ExtendSelectionUpKey</para></td><td id="resource_defaults-561-entry-116" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-115">Shift+Up</para></td></tr><tr id="resource_defaults-561-row-059"><td id="resource_defaults-561-entry-117" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-116">FitContent</para></td><td id="resource_defaults-561-entry-118" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-117">Fit Content</para></td></tr><tr id="resource_defaults-561-row-060"><td id="resource_defaults-561-entry-119" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-118">FitGraphBounds</para></td><td id="resource_defaults-561-entry-120" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-119">Fit Graph Bounds</para></td></tr><tr id="resource_defaults-561-row-061"><td id="resource_defaults-561-entry-121" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-120">GroupSelection</para></td><td id="resource_defaults-561-entry-122" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-121">Group Selection</para></td></tr><tr id="resource_defaults-561-row-062"><td id="resource_defaults-561-entry-123" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-122">GroupSelectionKey</para></td><td id="resource_defaults-561-entry-124" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-123">Ctrl+G</para></td></tr><tr id="resource_defaults-561-row-063"><td id="resource_defaults-561-entry-125" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-124">IncreaseZoom</para></td><td id="resource_defaults-561-entry-126" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-125">Zoom In</para></td></tr><tr id="resource_defaults-561-row-064"><td id="resource_defaults-561-entry-127" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-126">Move.RedoName</para></td><td id="resource_defaults-561-entry-128" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-127">Move Items</para></td></tr><tr id="resource_defaults-561-row-065"><td id="resource_defaults-561-entry-129" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-128">Move.UndoName</para></td><td id="resource_defaults-561-entry-130" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-129">Move Items</para></td></tr><tr id="resource_defaults-561-row-066"><td id="resource_defaults-561-entry-131" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-130">MoveDown</para></td><td id="resource_defaults-561-entry-132" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-131">Move Down</para></td></tr><tr id="resource_defaults-561-row-067"><td id="resource_defaults-561-entry-133" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-132">MoveDownKey</para></td><td id="resource_defaults-561-entry-134" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-133">Down</para></td></tr><tr id="resource_defaults-561-row-068"><td id="resource_defaults-561-entry-135" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-134">MoveFocusBack</para></td><td id="resource_defaults-561-entry-136" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-135">Move Focus Backward</para></td></tr><tr id="resource_defaults-561-row-069"><td id="resource_defaults-561-entry-137" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-136">MoveFocusBackKey</para></td><td id="resource_defaults-561-entry-138" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-137">Ctrl+Left</para></td></tr><tr id="resource_defaults-561-row-070"><td id="resource_defaults-561-entry-139" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-138">MoveFocusDown</para></td><td id="resource_defaults-561-entry-140" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-139">Move Focus Down</para></td></tr><tr id="resource_defaults-561-row-071"><td id="resource_defaults-561-entry-141" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-140">MoveFocusDownKey</para></td><td id="resource_defaults-561-entry-142" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-141">Ctrl+Down</para></td></tr><tr id="resource_defaults-561-row-072"><td id="resource_defaults-561-entry-143" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-142">MoveFocusForward</para></td><td id="resource_defaults-561-entry-144" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-143">Move Focus Forward</para></td></tr><tr id="resource_defaults-561-row-073"><td id="resource_defaults-561-entry-145" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-144">MoveFocusForwardKey</para></td><td id="resource_defaults-561-entry-146" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-145">Ctrl+Right</para></td></tr><tr id="resource_defaults-561-row-074"><td id="resource_defaults-561-entry-147" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-146">MoveFocusUp</para></td><td id="resource_defaults-561-entry-148" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-147">Move Focus Up</para></td></tr><tr id="resource_defaults-561-row-075"><td id="resource_defaults-561-entry-149" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-148">MoveFocusUpKey</para></td><td id="resource_defaults-561-entry-150" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-149">Ctrl+Up</para></td></tr><tr id="resource_defaults-561-row-076"><td id="resource_defaults-561-entry-151" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-150">MoveHandle.RedoName</para></td><td id="resource_defaults-561-entry-152" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-151">Move Handle</para></td></tr><tr id="resource_defaults-561-row-077"><td id="resource_defaults-561-entry-153" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-152">MoveHandle.UndoName</para></td><td id="resource_defaults-561-entry-154" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-153">Move Handle</para></td></tr><tr id="resource_defaults-561-row-078"><td id="resource_defaults-561-entry-155" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-154">MoveLeft</para></td><td id="resource_defaults-561-entry-156" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-155">Move Left</para></td></tr><tr id="resource_defaults-561-row-079"><td id="resource_defaults-561-entry-157" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-156">MoveLeftKey</para></td><td id="resource_defaults-561-entry-158" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-157">Left</para></td></tr><tr id="resource_defaults-561-row-080"><td id="resource_defaults-561-entry-159" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-158">MoveRight</para></td><td id="resource_defaults-561-entry-160" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-159">Move Right</para></td></tr><tr id="resource_defaults-561-row-081"><td id="resource_defaults-561-entry-161" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-160">MoveRightKey</para></td><td id="resource_defaults-561-entry-162" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-161">Right</para></td></tr><tr id="resource_defaults-561-row-082"><td id="resource_defaults-561-entry-163" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-162">MoveToPageDown</para></td><td id="resource_defaults-561-entry-164" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-163">Move Page Down</para></td></tr><tr id="resource_defaults-561-row-083"><td id="resource_defaults-561-entry-165" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-164">MoveToPageDownKey</para></td><td id="resource_defaults-561-entry-166" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-165">PageDown</para></td></tr><tr id="resource_defaults-561-row-084"><td id="resource_defaults-561-entry-167" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-166">MoveToPageUp</para></td><td id="resource_defaults-561-entry-168" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-167">Move Page Up</para></td></tr><tr id="resource_defaults-561-row-085"><td id="resource_defaults-561-entry-169" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-168">MoveToPageUpKey</para></td><td id="resource_defaults-561-entry-170" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-169">PageUp</para></td></tr><tr id="resource_defaults-561-row-086"><td id="resource_defaults-561-entry-171" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-170">MoveUp</para></td><td id="resource_defaults-561-entry-172" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-171">Move Up</para></td></tr><tr id="resource_defaults-561-row-087"><td id="resource_defaults-561-entry-173" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-172">MoveUpKey</para></td><td id="resource_defaults-561-entry-174" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-173">Up</para></td></tr><tr id="resource_defaults-561-row-088"><td id="resource_defaults-561-entry-175" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-174">New</para></td><td id="resource_defaults-561-entry-176" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-175">New</para></td></tr><tr id="resource_defaults-561-row-089"><td id="resource_defaults-561-entry-177" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-176">NewKey</para></td><td id="resource_defaults-561-entry-178" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-177">Ctrl+N</para></td></tr><tr id="resource_defaults-561-row-090"><td id="resource_defaults-561-entry-179" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-178">NodeDropInputMode.NodeDropped.RedoName</para></td><td id="resource_defaults-561-entry-180" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-179">Add Node</para></td></tr><tr id="resource_defaults-561-row-091"><td id="resource_defaults-561-entry-181" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-180">NodeDropInputMode.NodeDropped.UndoName</para></td><td id="resource_defaults-561-entry-182" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-181">Remove Node</para></td></tr><tr id="resource_defaults-561-row-092"><td id="resource_defaults-561-entry-183" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-182">Open</para></td><td id="resource_defaults-561-entry-184" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-183">Open</para></td></tr><tr id="resource_defaults-561-row-093"><td id="resource_defaults-561-entry-185" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-184">OpenFileFailed.Caption</para></td><td id="resource_defaults-561-entry-186" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-185">Error Loading File</para></td></tr><tr id="resource_defaults-561-row-094"><td id="resource_defaults-561-entry-187" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-186">OpenFileFailed.Message</para></td><td id="resource_defaults-561-entry-188" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-187">There was a problem during the loading of the file.</para></td></tr><tr id="resource_defaults-561-row-095"><td id="resource_defaults-561-entry-189" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-188">Paste.RedoName</para></td><td id="resource_defaults-561-entry-190" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-189">Redo Paste</para></td></tr><tr id="resource_defaults-561-row-096"><td id="resource_defaults-561-entry-191" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-190">Paste.UndoName</para></td><td id="resource_defaults-561-entry-192" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-191">Undo Paste</para></td></tr><tr id="resource_defaults-561-row-097"><td id="resource_defaults-561-entry-193" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-192">Paste</para></td><td id="resource_defaults-561-entry-194" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-193">Paste</para></td></tr><tr id="resource_defaults-561-row-098"><td id="resource_defaults-561-entry-195" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-194">PasteKey</para></td><td id="resource_defaults-561-entry-196" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-195">Ctrl+V</para></td></tr><tr id="resource_defaults-561-row-099"><td id="resource_defaults-561-entry-197" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-196">Print</para></td><td id="resource_defaults-561-entry-198" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-197">Print</para></td></tr><tr id="resource_defaults-561-row-100"><td id="resource_defaults-561-entry-199" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-198">PrintKey</para></td><td id="resource_defaults-561-entry-200" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-199">Ctrl+P</para></td></tr><tr id="resource_defaults-561-row-101"><td id="resource_defaults-561-entry-201" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-200">PrintPreview</para></td><td id="resource_defaults-561-entry-202" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-201">PrintPreview</para></td></tr><tr id="resource_defaults-561-row-102"><td id="resource_defaults-561-entry-203" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-202">PrintPreviewKey</para></td><td id="resource_defaults-561-entry-204" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-203">Ctrl+F2</para></td></tr><tr id="resource_defaults-561-row-103"><td id="resource_defaults-561-entry-205" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-204">Redo</para></td><td id="resource_defaults-561-entry-206" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-205">Redo</para></td></tr><tr id="resource_defaults-561-row-104"><td id="resource_defaults-561-entry-207" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-206">RedoKey</para></td><td id="resource_defaults-561-entry-208" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-207">Ctrl+Y</para></td></tr><tr id="resource_defaults-561-row-105"><td id="resource_defaults-561-entry-209" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-208">RemoveBend.RedoName</para></td><td id="resource_defaults-561-entry-210" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-209">Remove Bend</para></td></tr><tr id="resource_defaults-561-row-106"><td id="resource_defaults-561-entry-211" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-210">RemoveBend.UndoName</para></td><td id="resource_defaults-561-entry-212" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-211">Add Bend</para></td></tr><tr id="resource_defaults-561-row-107"><td id="resource_defaults-561-entry-213" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-212">RemoveEdge.RedoName</para></td><td id="resource_defaults-561-entry-214" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-213">Remove Edge</para></td></tr><tr id="resource_defaults-561-row-108"><td id="resource_defaults-561-entry-215" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-214">RemoveEdge.UndoName</para></td><td id="resource_defaults-561-entry-216" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-215">Add Edge</para></td></tr><tr id="resource_defaults-561-row-109"><td id="resource_defaults-561-entry-217" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-216">RemoveLabel.RedoName</para></td><td id="resource_defaults-561-entry-218" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-217">Remove Label</para></td></tr><tr id="resource_defaults-561-row-110"><td id="resource_defaults-561-entry-219" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-218">RemoveLabel.UndoName</para></td><td id="resource_defaults-561-entry-220" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-219">Add Label</para></td></tr><tr id="resource_defaults-561-row-111"><td id="resource_defaults-561-entry-221" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-220">RemoveNode.RedoName</para></td><td id="resource_defaults-561-entry-222" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-221">Remove Node</para></td></tr><tr id="resource_defaults-561-row-112"><td id="resource_defaults-561-entry-223" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-222">RemoveNode.UndoName</para></td><td id="resource_defaults-561-entry-224" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-223">Add Node</para></td></tr><tr id="resource_defaults-561-row-113"><td id="resource_defaults-561-entry-225" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-224">RemovePort.RedoName</para></td><td id="resource_defaults-561-entry-226" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-225">Remove Port</para></td></tr><tr id="resource_defaults-561-row-114"><td id="resource_defaults-561-entry-227" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-226">RemovePort.UndoName</para></td><td id="resource_defaults-561-entry-228" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-227">Add Port</para></td></tr><tr id="resource_defaults-561-row-115"><td id="resource_defaults-561-entry-229" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-228">RemoveStripe.RedoName</para></td><td id="resource_defaults-561-entry-230" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-229">Add Stripe</para></td></tr><tr id="resource_defaults-561-row-116"><td id="resource_defaults-561-entry-231" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-230">RemoveStripe.UndoName</para></td><td id="resource_defaults-561-entry-232" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-231">Remove Stripe</para></td></tr><tr id="resource_defaults-561-row-117"><td id="resource_defaults-561-entry-233" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-232">ReparentStripe.RedoName</para></td><td id="resource_defaults-561-entry-234" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-233">Reparent Stripe</para></td></tr><tr id="resource_defaults-561-row-118"><td id="resource_defaults-561-entry-235" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-234">ReparentStripe.UndoName</para></td><td id="resource_defaults-561-entry-236" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-235">Reparent Stripe</para></td></tr><tr id="resource_defaults-561-row-119"><td id="resource_defaults-561-entry-237" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-236">ResizeNode.RedoName</para></td><td id="resource_defaults-561-entry-238" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-237">Resize Node</para></td></tr><tr id="resource_defaults-561-row-120"><td id="resource_defaults-561-entry-239" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-238">ResizeNode.UndoName</para></td><td id="resource_defaults-561-entry-240" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-239">Resize Node</para></td></tr><tr id="resource_defaults-561-row-121"><td id="resource_defaults-561-entry-241" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-240">Save</para></td><td id="resource_defaults-561-entry-242" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-241">Save</para></td></tr><tr id="resource_defaults-561-row-122"><td id="resource_defaults-561-entry-243" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-242">SaveAs</para></td><td id="resource_defaults-561-entry-244" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-243">Save As…​</para></td></tr><tr id="resource_defaults-561-row-123"><td id="resource_defaults-561-entry-245" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-244">SaveFileFailed.Caption</para></td><td id="resource_defaults-561-entry-246" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-245">Error Saving File</para></td></tr><tr id="resource_defaults-561-row-124"><td id="resource_defaults-561-entry-247" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-246">SaveFileFailed.Message</para></td><td id="resource_defaults-561-entry-248" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-247">There was a problem during the saving of the file.</para></td></tr><tr id="resource_defaults-561-row-125"><td id="resource_defaults-561-entry-249" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-248">ScrollPageDown</para></td><td id="resource_defaults-561-entry-250" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-249">Scroll Page Down</para></td></tr><tr id="resource_defaults-561-row-126"><td id="resource_defaults-561-entry-251" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-250">ScrollPageDownKey</para></td><td id="resource_defaults-561-entry-252" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-251">PageDown</para></td></tr><tr id="resource_defaults-561-row-127"><td id="resource_defaults-561-entry-253" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-252">ScrollPageLeft</para></td><td id="resource_defaults-561-entry-254" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-253">Scroll Page Left</para></td></tr><tr id="resource_defaults-561-row-128"><td id="resource_defaults-561-entry-255" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-254">ScrollPageRight</para></td><td id="resource_defaults-561-entry-256" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-255">Scroll Page Right</para></td></tr><tr id="resource_defaults-561-row-129"><td id="resource_defaults-561-entry-257" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-256">ScrollPageUp</para></td><td id="resource_defaults-561-entry-258" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-257">Scroll Page Up</para></td></tr><tr id="resource_defaults-561-row-130"><td id="resource_defaults-561-entry-259" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-258">ScrollPageUpKey</para></td><td id="resource_defaults-561-entry-260" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-259">PageUp</para></td></tr><tr id="resource_defaults-561-row-131"><td id="resource_defaults-561-entry-261" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-260">SelectAll</para></td><td id="resource_defaults-561-entry-262" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-261">Select All</para></td></tr><tr id="resource_defaults-561-row-132"><td id="resource_defaults-561-entry-263" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-262">SelectAllKey</para></td><td id="resource_defaults-561-entry-264" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-263">Ctrl+A</para></td></tr><tr id="resource_defaults-561-row-133"><td id="resource_defaults-561-entry-265" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-264">SelectItem</para></td><td id="resource_defaults-561-entry-266" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-265">Select Item</para></td></tr><tr id="resource_defaults-561-row-134"><td id="resource_defaults-561-entry-267" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-266">SetCurrentItem</para></td><td id="resource_defaults-561-entry-268" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-267">Set Current Item</para></td></tr><tr id="resource_defaults-561-row-135"><td id="resource_defaults-561-entry-269" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-268">SetEdgeStyle.RedoName</para></td><td id="resource_defaults-561-entry-270" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-269">Change Edge Style</para></td></tr><tr id="resource_defaults-561-row-136"><td id="resource_defaults-561-entry-271" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-270">SetEdgeStyle.UndoName</para></td><td id="resource_defaults-561-entry-272" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-271">Change Edge Style</para></td></tr><tr id="resource_defaults-561-row-137"><td id="resource_defaults-561-entry-273" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-272">SetLabelModelParameter.RedoName</para></td><td id="resource_defaults-561-entry-274" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-273">Change Label Position</para></td></tr><tr id="resource_defaults-561-row-138"><td id="resource_defaults-561-entry-275" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-274">SetLabelModelParameter.UndoName</para></td><td id="resource_defaults-561-entry-276" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-275">Change Label Position</para></td></tr><tr id="resource_defaults-561-row-139"><td id="resource_defaults-561-entry-277" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-276">SetLabelStyle.RedoName</para></td><td id="resource_defaults-561-entry-278" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-277">Change Label Style</para></td></tr><tr id="resource_defaults-561-row-140"><td id="resource_defaults-561-entry-279" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-278">SetLabelStyle.UndoName</para></td><td id="resource_defaults-561-entry-280" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-279">Change Label Style</para></td></tr><tr id="resource_defaults-561-row-141"><td id="resource_defaults-561-entry-281" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-280">SetLabelText.RedoName</para></td><td id="resource_defaults-561-entry-282" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-281">Change Label Text</para></td></tr><tr id="resource_defaults-561-row-142"><td id="resource_defaults-561-entry-283" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-282">SetLabelText.UndoName</para></td><td id="resource_defaults-561-entry-284" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-283">Change Label Text</para></td></tr><tr id="resource_defaults-561-row-143"><td id="resource_defaults-561-entry-285" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-284">SetLeaf.RedoName</para></td><td id="resource_defaults-561-entry-286" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-285">Convert Back to Group Node</para></td></tr><tr id="resource_defaults-561-row-144"><td id="resource_defaults-561-entry-287" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-286">SetLeaf.UndoName</para></td><td id="resource_defaults-561-entry-288" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-287">Convert to Normal Node</para></td></tr><tr id="resource_defaults-561-row-145"><td id="resource_defaults-561-entry-289" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-288">SetLocationModelParameter.RedoName</para></td><td id="resource_defaults-561-entry-290" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-289">Change Port Location</para></td></tr><tr id="resource_defaults-561-row-146"><td id="resource_defaults-561-entry-291" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-290">SetLocationModelParameter.UndoName</para></td><td id="resource_defaults-561-entry-292" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-291">Change Port Location</para></td></tr><tr id="resource_defaults-561-row-147"><td id="resource_defaults-561-entry-293" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-292">SetNodeStyle.RedoName</para></td><td id="resource_defaults-561-entry-294" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-293">Change Node Style</para></td></tr><tr id="resource_defaults-561-row-148"><td id="resource_defaults-561-entry-295" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-294">SetNodeStyle.UndoName</para></td><td id="resource_defaults-561-entry-296" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-295">Change Node Style</para></td></tr><tr id="resource_defaults-561-row-149"><td id="resource_defaults-561-entry-297" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-296">SetNonLeaf.RedoName</para></td><td id="resource_defaults-561-entry-298" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-297">Convert Back to Normal Node</para></td></tr><tr id="resource_defaults-561-row-150"><td id="resource_defaults-561-entry-299" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-298">SetNonLeaf.UndoName</para></td><td id="resource_defaults-561-entry-300" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-299">Convert to Group Node</para></td></tr><tr id="resource_defaults-561-row-151"><td id="resource_defaults-561-entry-301" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-300">SetParent.RedoName</para></td><td id="resource_defaults-561-entry-302" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-301">Change Parent</para></td></tr><tr id="resource_defaults-561-row-152"><td id="resource_defaults-561-entry-303" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-302">SetParent.UndoName</para></td><td id="resource_defaults-561-entry-304" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-303">Change Parent</para></td></tr><tr id="resource_defaults-561-row-153"><td id="resource_defaults-561-entry-305" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-304">SetPorts.RedoName</para></td><td id="resource_defaults-561-entry-306" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-305">Reconnect Edge</para></td></tr><tr id="resource_defaults-561-row-154"><td id="resource_defaults-561-entry-307" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-306">SetPorts.UndoName</para></td><td id="resource_defaults-561-entry-308" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-307">Reconnect Edge</para></td></tr><tr id="resource_defaults-561-row-155"><td id="resource_defaults-561-entry-309" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-308">SetPortStyle.RedoName</para></td><td id="resource_defaults-561-entry-310" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-309">Change Port Style</para></td></tr><tr id="resource_defaults-561-row-156"><td id="resource_defaults-561-entry-311" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-310">SetPortStyle.UndoName</para></td><td id="resource_defaults-561-entry-312" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-311">Change Port Style</para></td></tr><tr id="resource_defaults-561-row-157"><td id="resource_defaults-561-entry-313" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-312">SetPreferredLabelSize.RedoName</para></td><td id="resource_defaults-561-entry-314" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-313">Change Preferred Label Size</para></td></tr><tr id="resource_defaults-561-row-158"><td id="resource_defaults-561-entry-315" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-314">SetPreferredLabelSize.UndoName</para></td><td id="resource_defaults-561-entry-316" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-315">Change Preferred Label Size</para></td></tr><tr id="resource_defaults-561-row-159"><td id="resource_defaults-561-entry-317" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-316">SetStripeInsets.RedoName</para></td><td id="resource_defaults-561-entry-318" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-317">Change Stripe Insets</para></td></tr><tr id="resource_defaults-561-row-160"><td id="resource_defaults-561-entry-319" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-318">SetStripeInsets.UndoName</para></td><td id="resource_defaults-561-entry-320" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-319">Change Stripe Insets</para></td></tr><tr id="resource_defaults-561-row-161"><td id="resource_defaults-561-entry-321" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-320">SetStripeMinimumSize.RedoName</para></td><td id="resource_defaults-561-entry-322" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-321">Change Minimum Stripe Size</para></td></tr><tr id="resource_defaults-561-row-162"><td id="resource_defaults-561-entry-323" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-322">SetStripeMinimumSize.UndoName</para></td><td id="resource_defaults-561-entry-324" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-323">Change Minimum Stripe Size</para></td></tr><tr id="resource_defaults-561-row-163"><td id="resource_defaults-561-entry-325" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-324">SetStripeSize.RedoName</para></td><td id="resource_defaults-561-entry-326" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-325">Change Stripe Size</para></td></tr><tr id="resource_defaults-561-row-164"><td id="resource_defaults-561-entry-327" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-326">SetStripeSize.UndoName</para></td><td id="resource_defaults-561-entry-328" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-327">Change Stripe Size</para></td></tr><tr id="resource_defaults-561-row-165"><td id="resource_defaults-561-entry-329" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-328">SetStripeStyle.RedoName</para></td><td id="resource_defaults-561-entry-330" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-329">Change Stripe Style</para></td></tr><tr id="resource_defaults-561-row-166"><td id="resource_defaults-561-entry-331" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-330">SetStripeStyle.UndoName</para></td><td id="resource_defaults-561-entry-332" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-331">Change Stripe Style</para></td></tr><tr id="resource_defaults-561-row-167"><td id="resource_defaults-561-entry-333" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-332">ToggleGroupState</para></td><td id="resource_defaults-561-entry-334" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-333">Toggle Group State</para></td></tr><tr id="resource_defaults-561-row-168"><td id="resource_defaults-561-entry-335" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-334">ToggleGroupStateKey</para></td><td id="resource_defaults-561-entry-336" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-335">Ctrl+Multiply</para></td></tr><tr id="resource_defaults-561-row-169"><td id="resource_defaults-561-entry-337" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-336">ToggleItemSelection</para></td><td id="resource_defaults-561-entry-338" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-337">Toggle Selection</para></td></tr><tr id="resource_defaults-561-row-170"><td id="resource_defaults-561-entry-339" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-338">ToggleItemSelectionKey</para></td><td id="resource_defaults-561-entry-340" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-339">Ctrl+Space</para></td></tr><tr id="resource_defaults-561-row-171"><td id="resource_defaults-561-entry-341" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-340">Unavailable</para></td><td id="resource_defaults-561-entry-342" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-341">Unavailable</para></td></tr><tr id="resource_defaults-561-row-172"><td id="resource_defaults-561-entry-343" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-342">Undo</para></td><td id="resource_defaults-561-entry-344" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-343">Undo</para></td></tr><tr id="resource_defaults-561-row-173"><td id="resource_defaults-561-entry-345" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-344">UndoKey</para></td><td id="resource_defaults-561-entry-346" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-345">Ctrl+Z</para></td></tr><tr id="resource_defaults-561-row-174"><td id="resource_defaults-561-entry-347" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-346">UngroupSelection</para></td><td id="resource_defaults-561-entry-348" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-347">Ungroup Selection</para></td></tr><tr id="resource_defaults-561-row-175"><td id="resource_defaults-561-entry-349" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-348">UngroupSelectionKey</para></td><td id="resource_defaults-561-entry-350" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-349">Ctrl+U</para></td></tr><tr id="resource_defaults-561-row-176"><td id="resource_defaults-561-entry-351" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-350">UpdateContentRect</para></td><td id="resource_defaults-561-entry-352" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-351">Update Content Rectangle</para></td></tr><tr id="resource_defaults-561-row-177"><td id="resource_defaults-561-entry-353" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-352">Zoom</para></td><td id="resource_defaults-561-entry-354" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-353">Zoom</para></td></tr><tr id="resource_defaults-561-row-178"><td id="resource_defaults-561-entry-355" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-354">ZoomToCurrentItem</para></td><td id="resource_defaults-561-entry-356" align="left" valign="top"><para class="dguide-para" id="resource_defaults-561-simpara-355">Zoom To Current Item</para></td></tr></tbody>'
}]}]},{tagname:"section",id:"customizing_concepts_commands",title:"Commands",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-001",content:"yFiles for HTML features a commanding infrastructure very similar in concept to that present in\nMicrosoft’s Windows Presentation Foundation (WPF). This infrastructure provides a\nflexible mechanism for input handling where a so-called command is used to decouple an\ninput event (resulting from some user interaction) from the actual logic that performs\nthe corresponding action."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-002",content:'The WPF commanding is described here: <a href="https://docs.microsoft.com/en-us/dotnet/articles/framework/wpf/advanced/commanding-overview" target="_blank">Commanding Overview (.NET Framework documentation)</a>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-003",content:"Commands effectively separate the invocation, interaction, and implementation from each other.\nA command is just an abstract concept of an interaction to perform, e.g. increase the zoom level, or copy to clipboard.\nThe actual implementation for that command lies with the component it is invoked on as target.\nCommands are connected to their actual implementation via a command binding."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-004",content:'This also means that commands can become available or unavailable\ndepending on how the <span class="api">GraphComponent</span> is configured.\nE.g. editing commands cannot be executed unless <span class="api">GraphEditorInputMode</span> is set as the\n<span class="api">GraphComponent</span>’s input mode, simply because the implementation for those\ncommands are provided as part of the <span class="api">GraphEditorInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-005",content:'Commands in yFiles for HTML are of type <api-link id="customizing_concepts_commands-562-api-link-001" data-member="" data-text="ICommand" data-type="yfiles.input.ICommand"></api-link> and the command\nare managed by <api-link id="customizing_concepts_commands-562-api-link-002" data-member="" data-text="KeyboardInputMode" data-type="yfiles.input.KeyboardInputMode"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-006",content:'The <a href="#/dguide/ex_commands_R1">Executing commands on a target</a> example shows how commands can be executed on a <span class="api">GraphComponent</span> to\nincrease the zoom level. The command is the <api-link id="customizing_concepts_commands-562-api-link-003" data-member="INCREASE_ZOOM" data-text="ICommand.INCREASE_ZOOM" data-type="yfiles.input.ICommand"></api-link>,\nit is matched by a command binding\nprovided by default by the <span class="api">GraphComponent</span> type itself, i.e. that it is available, no matter whether\n<span class="api">GraphEditorInputMode</span> or <span class="api">GraphViewerInputMode</span> are used or not.'},{tagname:"example",id:"ex_commands_R1",title:"Executing commands on a target",content:'<pre class="programlisting javascript" id="customizing_concepts_commands-562-programlisting-001" language="javascript" format="linespecific"><code>// Executes the INCREASE_ZOOM command on the GraphComponent.\r\n// The parameter value given is optional and not provided, here, which means that a default value is\r\n// chosen as the factor.\r\nyfiles.input.ICommand.INCREASE_ZOOM.execute({ target: myGraphComponent })\r\n\r\n// Executes the INCREASE_ZOOM command on the GraphControl using the factor 2.\r\nyfiles.input.ICommand.INCREASE_ZOOM.execute({\r\n  parameter: 2,\r\n  target: myGraphComponent\r\n})\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-007",content:'The predefined commands from the command library\ncan be found as static properties on <api-link id="customizing_concepts_commands-562-api-link-004" data-member="" data-text="ICommand" data-type="yfiles.input.ICommand"></api-link>.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-008",content:'Default command bindings are commonly provided by the <span class="api">GraphComponent</span> (some of them by\ninheritance), but further bindings are added by several input modes like\n<api-link id="customizing_concepts_commands-562-api-link-005" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-006" data-member="" data-text="GraphViewerInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link>, etc.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-009",content:"The following table lists some of the predefined command bindings."},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_command_bindings",rowsep:1,content:'<caption>Predefined command bindings</caption><colgroup><col style="width:20%;"><col style="width:80%;"></colgroup><thead id="customizing_concepts_commands-562-thead-001"><tr id="customizing_concepts_commands-562-row-001"><th id="customizing_concepts_commands-562-entry-001" align="left" valign="top">\nClass\n</th><th id="customizing_concepts_commands-562-entry-002" align="left" valign="top">\nProvided Command Bindings\n</th></tr></thead><tbody id="customizing_concepts_commands-562-tbody-001"><tr id="customizing_concepts_commands-562-row-002"><td id="customizing_concepts_commands-562-entry-003" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-010"><api-link id="customizing_concepts_commands-562-api-link-007" data-member="" data-text="CanvasComponent" data-type="yfiles.view.CanvasComponent"></api-link></para></td><td id="customizing_concepts_commands-562-entry-004" align="left" valign="top"><para><ul id="customizing_concepts_commands-562-itemizedlist-001"><li id="customizing_concepts_commands-562-listitem-001"><p id="customizing_concepts_commands-562-simpara-011">zoom factor manipulation:\n<api-link id="customizing_concepts_commands-562-api-link-008" data-member="INCREASE_ZOOM" data-text="INCREASE_ZOOM" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-009" data-member="DECREASE_ZOOM" data-text="DECREASE_ZOOM" data-type="yfiles.input.ICommand"></api-link>, and\n<api-link id="customizing_concepts_commands-562-api-link-010" data-member="ZOOM" data-text="ZOOM" data-type="yfiles.input.ICommand"></api-link></p></li><li id="customizing_concepts_commands-562-listitem-002"><p id="customizing_concepts_commands-562-simpara-012">keyboard actions: <api-link id="customizing_concepts_commands-562-api-link-011" data-member="SCROLL_PAGE_UP" data-text="SCROLL_PAGE_UP" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-012" data-member="SCROLL_PAGE_DOWN" data-text="SCROLL_PAGE_DOWN" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-013" data-member="SCROLL_PAGE_LEFT" data-text="SCROLL_PAGE_LEFT" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-014" data-member="SCROLL_PAGE_RIGHT" data-text="SCROLL_PAGE_RIGHT" data-type="yfiles.input.ICommand"></api-link></p></li><li id="customizing_concepts_commands-562-listitem-003"><p id="customizing_concepts_commands-562-simpara-013">and content rect handling:\n<api-link id="customizing_concepts_commands-562-api-link-015" data-member="FIT_CONTENT" data-text="FIT_CONTENT" data-type="yfiles.input.ICommand"></api-link> /\n<api-link id="customizing_concepts_commands-562-api-link-016" data-member="UPDATE_CONTENT_RECT" data-text="UPDATE_CONTENT_RECT" data-type="yfiles.input.ICommand"></api-link></p></li></ul></para></td></tr><tr id="customizing_concepts_commands-562-row-003"><td id="customizing_concepts_commands-562-entry-005" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-014"><api-link id="customizing_concepts_commands-562-api-link-017" data-member="" data-text="GraphComponent" data-type="yfiles.view.GraphComponent"></api-link></para></td><td id="customizing_concepts_commands-562-entry-006" align="left" valign="top"><para><ul id="customizing_concepts_commands-562-itemizedlist-002"><li id="customizing_concepts_commands-562-listitem-004"><p id="customizing_concepts_commands-562-simpara-015">file operations (only when enabled using <api-link id="customizing_concepts_commands-562-api-link-018" data-member="" data-text="GraphMLSupport" data-type="yfiles.graphml.GraphMLSupport"></api-link>):\n<api-link id="customizing_concepts_commands-562-api-link-019" data-member="OPEN" data-text="OPEN" data-type="yfiles.input.ICommand"></api-link>, and\n<api-link id="customizing_concepts_commands-562-api-link-020" data-member="SAVE" data-text="SAVE" data-type="yfiles.input.ICommand"></api-link></p></li><li id="customizing_concepts_commands-562-listitem-005"><p id="customizing_concepts_commands-562-simpara-016">fitting the view: <api-link id="customizing_concepts_commands-562-api-link-021" data-member="FIT_GRAPH_BOUNDS" data-text="FIT_GRAPH_BOUNDS" data-type="yfiles.input.ICommand"></api-link></p></li><li id="customizing_concepts_commands-562-listitem-006"><p id="customizing_concepts_commands-562-simpara-017">handling the current item in the canvas: <api-link id="customizing_concepts_commands-562-api-link-022" data-member="SET_CURRENT_ITEM" data-text="SET_CURRENT_ITEM" data-type="yfiles.input.ICommand"></api-link>\nand <api-link id="customizing_concepts_commands-562-api-link-023" data-member="ZOOM_TO_CURRENT_ITEM" data-text="ZOOM_TO_CURRENT_ITEM" data-type="yfiles.input.ICommand"></api-link></p></li></ul></para></td></tr><tr id="customizing_concepts_commands-562-row-004"><td id="customizing_concepts_commands-562-entry-007" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-018"><api-link id="customizing_concepts_commands-562-api-link-024" data-member="" data-text="GraphEditorInputMode" data-type="yfiles.input.GraphEditorInputMode"></api-link></para></td><td id="customizing_concepts_commands-562-entry-008" align="left" valign="top"><para><ul id="customizing_concepts_commands-562-itemizedlist-003"><li id="customizing_concepts_commands-562-listitem-007"><p id="customizing_concepts_commands-562-simpara-019">selection: <api-link id="customizing_concepts_commands-562-api-link-025" data-member="SELECT_ITEM" data-text="SELECT_ITEM" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-026" data-member="DESELECT_ITEM" data-text="DESELECT_ITEM" data-type="yfiles.input.ICommand"></api-link> etc.</p></li><li id="customizing_concepts_commands-562-listitem-008"><p id="customizing_concepts_commands-562-simpara-020">clipboard support:\n<api-link id="customizing_concepts_commands-562-api-link-027" data-member="CUT" data-text="CUT" data-type="yfiles.input.ICommand"></api-link>, <api-link id="customizing_concepts_commands-562-api-link-028" data-member="COPY" data-text="COPY" data-type="yfiles.input.ICommand"></api-link>, and\n<api-link id="customizing_concepts_commands-562-api-link-029" data-member="PASTE" data-text="PASTE" data-type="yfiles.input.ICommand"></api-link></p></li><li id="customizing_concepts_commands-562-listitem-009"><p id="customizing_concepts_commands-562-simpara-021">Undo/Redo support:\n<api-link id="customizing_concepts_commands-562-api-link-030" data-member="UNDO" data-text="UNDO" data-type="yfiles.input.ICommand"></api-link> and <api-link id="customizing_concepts_commands-562-api-link-031" data-member="REDO" data-text="REDO" data-type="yfiles.input.ICommand"></api-link></p></li></ul></para></td></tr><tr id="customizing_concepts_commands-562-row-005"><td id="customizing_concepts_commands-562-entry-009" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-022"><api-link id="customizing_concepts_commands-562-api-link-032" data-member="" data-text="GraphViewerInputMode" data-type="yfiles.input.GraphViewerInputMode"></api-link></para></td><td id="customizing_concepts_commands-562-entry-010" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-023">Command bindings for selection: <api-link id="customizing_concepts_commands-562-api-link-033" data-member="SELECT_ITEM" data-text="SELECT_ITEM" data-type="yfiles.input.ICommand"></api-link>,\n<api-link id="customizing_concepts_commands-562-api-link-034" data-member="DESELECT_ITEM" data-text="DESELECT_ITEM" data-type="yfiles.input.ICommand"></api-link> etc.</para></td></tr><tr id="customizing_concepts_commands-562-row-006"><td id="customizing_concepts_commands-562-entry-011" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-024"><api-link id="customizing_concepts_commands-562-api-link-035" data-member="" data-text="NavigationInputMode" data-type="yfiles.input.NavigationInputMode"></api-link></para></td><td id="customizing_concepts_commands-562-entry-012" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-025">For keyboard actions to move/extend the selection and to move the focus\nindicator.</para></td></tr><tr id="customizing_concepts_commands-562-row-007"><td id="customizing_concepts_commands-562-entry-013" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-026"><api-link id="customizing_concepts_commands-562-api-link-036" data-member="" data-text="CreateEdgeInputMode" data-type="yfiles.input.CreateEdgeInputMode"></api-link></para></td><td id="customizing_concepts_commands-562-entry-014" align="left" valign="top"><para class="dguide-para" id="customizing_concepts_commands-562-simpara-027"><api-link id="customizing_concepts_commands-562-api-link-037" data-member="BEGIN_EDGE_CREATION" data-text="BEGIN_EDGE_CREATION" data-type="yfiles.input.ICommand"></api-link>; only available,\nif the input mode is installed in a <span class="api">CanvasComponent</span> and enabled.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-028",content:"The other dimension of input handling, namely determining whether a command can be\nexecuted or not, is taken care of by the combination of command and command binding in\nthe same way."},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands-562-simpara-029",content:'The following example shows how to test whether a command can be executed on a\n<span class="api">GraphComponent</span>. With the result of the test you can enable or disable a button in the UI, for example.'},{tagname:"example",id:"ex_commands_R2",title:"Determining availability of a command on a target",content:'<pre class="programlisting javascript" id="customizing_concepts_commands-562-programlisting-002" language="javascript" format="linespecific"><code>// Test whether the INCREASE_ZOOM command on the GraphComponent is available,\r\n// respectively, whether it can be executed with the given parameter value.\r\nlet enableButton = yfiles.input.ICommand.INCREASE_ZOOM.canExecute(2, myGraphComponent)\n</code></pre>'},{tagname:"section",id:"customizing_concepts_commands_custom",title:"Custom Command Bindings",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands_custom-563-simpara-001",content:'Command bindings can be created programmatically and associated with the <span class="api">GraphComponent</span> with the\nhelp of the <api-link id="customizing_concepts_commands_custom-563-api-link-001" data-member="" data-text="KeyboardInputMode" data-type="yfiles.input.KeyboardInputMode"></api-link> class.'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands_custom-563-simpara-002",content:"The following example shows how a new command can be created:"},{tagname:"example",id:"ex_commands_R3",title:"Creating a new command",content:'<pre class="programlisting javascript" id="customizing_concepts_commands_custom-563-programlisting-001" language="javascript" format="linespecific"><code>// first we create a new command implementation\r\nlet testCommand = yfiles.input.ICommand.createCommand("Test")\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands_custom-563-simpara-003",content:'Adding a command binding to a <span class="api">GraphComponent</span> can be done with the\nhelp of the <span class="api">KeyboardInputMode</span> class:'},{tagname:"example",id:"ex_commands_R4",title:"Adding a command binding to a GraphComponent using KeyboardInputMode",content:'<pre class="programlisting javascript" id="customizing_concepts_commands_custom-563-programlisting-002" language="javascript" format="linespecific"><code>// then the command binding that makes the connection of a command to the respective\r\n// handler functions.\r\nconst cb = keyboardInputMode.addCommandBinding(\r\n  testCommand,\r\n  (command, parameter, target) => console.log("executing " + command.toString() + " with " + parameter),\r\n  (command, parameter, target) => parameter !== null\r\n)\r\n// Finally we create keybindings to connect commands and parameters with key gestures\r\nkeyboardInputMode.addKeyBinding(yfiles.view.Key.K, yfiles.view.ModifierKeys.CONTROL, testCommand, "Go!")\r\nkeyboardInputMode.addKeyBinding(yfiles.view.Key.K, yfiles.view.ModifierKeys.CONTROL\r\n  | yfiles.view.ModifierKeys.SHIFT, testCommand, "Go Back!")\n</code></pre>'}]},{tagname:"section",id:"customizing_concepts_commands_swing",title:"Commands and HTML Widgets",children:[{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands_swing-564-simpara-001",content:"To enable easy usage of Commands in HTML5 web apps, a simple pattern can be applied"},{tagname:"example",id:"ex_commands_R5",title:"Using Commands with Buttons",content:"<pre class=\"programlisting javascript\" id=\"customizing_concepts_commands_swing-564-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// create a new CommandAction using the zoom command\r\nlet button = document.getElementById(\"zoomOneToOneButton\")\r\nlet command = yfiles.input.ICommand.ZOOM\r\nlet parameter = 1\r\nlet target = myGraphComponent\r\n\r\n// use our helper function to bind the button to the command\r\nbindCommand(button, command, parameter, target)\r\n\r\nfunction bindCommand(button, command, parameter, target) {\r\n  // listen for possible changes\r\n  command.addCanExecuteChangedListener(() => {\r\n    if (command.canExecute(parameter, target)) {\r\n      button.removeAttribute('disabled')\r\n    } else {\r\n      button.setAttribute('disabled', 'disabled')\r\n    }\r\n  })\r\n\r\n  // execute the command on click\r\n  button.addEventListener('click', () => {\r\n    if (command.canExecute(parameter, target)) {\r\n      command.execute(parameter, target)\r\n    }\r\n  })\r\n\r\n  // set the initial state\r\n  if (!command.canExecute(parameter, target)) {\r\n    button.setAttribute('disabled', 'disabled')\r\n  }\r\n}\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"customizing_concepts_commands_swing-564-simpara-002",content:"With this setup in place, clicking the widget finds the\ncorresponding logic to execute the command on the target and invokes it as described\nabove. Furthermore, the button will automatically be enabled or\ndisabled depending on whether the command can currently be executed or not."}]}]}]},{tagname:"section",id:"advanced",title:"Advanced Concepts",children:[{tagname:"section",id:"filtering",xreflabel:"Filtering",title:"Filtering: Hiding Graph Elements",children:[{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-001",content:"The readability of complex diagrams can often be increased by hiding the parts of the graph which are currently\nless important for the viewer. One concept to reach this goal is filtering."},{tagname:"figure","class":"image",title:"Detailed graph vs. filtered graph",id:"filtering-565-figure-001","float":0,children:[{tagname:"img",src:"assets/filtering_example_full.b6bfb513.jpg",alt:"",title:'<para class="dguide-para">Unfiltered graph</para>'},{tagname:"img",src:"assets/filtering_example_filtered.5cf47b57.jpg",alt:"",title:'<para class="dguide-para">Filtered graph</para>'}]},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-002",content:'Filtering is achieved by defining conditions which must be fulfilled for graph elements to show up.\nTechnically, the original graph is wrapped in a <api-link id="filtering-565-api-link-001" data-member="" data-text="FilteredGraphWrapper" data-type="yfiles.graph.FilteredGraphWrapper"></api-link> which only shows items\nfulfilling these conditions. Elements which do not fulfill the conditions (and dependent elements,\ne.g. edges ending at a hidden node) are hidden. To be hidden not only means they are not displayed, but they\nare not even contained in the graph’s item collections. Note that the original graph is not altered.'},{tagname:"para","class":"dguide-para note",id:"filtering-565-note-001",content:'<p id="filtering-565-simpara-003">Elements which depend on other elements are also hidden if the element they depend on is hidden.\nFor example, an edge which fulfills the condition for being shown will still be hidden if its source\nor target node is hidden.</p>'},{tagname:"para","class":"dguide-para note",id:"filtering-565-note-002",content:'<p id="filtering-565-simpara-004">Labels and ports cannot be filtered explicitly. They will be shown or hidden along with their owner.</p>'},{tagname:"para","class":"dguide-para tip",id:"filtering-565-tip-001",content:'<p id="filtering-565-simpara-005">A special kind of filtering is the concept of collapsing and expanding group nodes which is\nshown in chapter <a href="#/dguide/folding">Folding</a>.</p>'},{tagname:"heading",id:"_working_with_filtering",renderas:"sect3",content:"Working with Filtering"},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-006",content:'Filtering is achieved using a special <span class="api">IGraph</span> implementation, the\n<api-link id="filtering-565-api-link-002" data-member="" data-text="FilteredGraphWrapper" data-type="yfiles.graph.FilteredGraphWrapper"></api-link>. The <span class="api">FilteredGraphWrapper</span> is a decorator for\nanother <span class="api">IGraph</span> instance. The decorated graph is referred to as the <span class="def">full graph</span>\nor <span class="def">wrapped graph</span>. You need to pass it as a constructor argument. Afterwards you can access it via the read-only\n<api-link id="filtering-565-api-link-003" data-member="wrappedGraph" data-text="wrappedGraph" data-type="yfiles.graph.GraphWrapperBase"></api-link> property.'},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-007",content:'The <span class="api">FilteredGraphWrapper</span> exposes only a subset of the items in its wrapped graph.\nThe elements to be either exposed or hidden are determined by two predicate functions, one for nodes and one for edges.\nYou need to pass the predicate functions as constructor arguments. Afterwards you can access them via the read-only\nproperties <api-link id="filtering-565-api-link-004" data-member="nodePredicate" data-text="nodePredicate" data-type="yfiles.graph.FilteredGraphWrapper"></api-link> and\n<api-link id="filtering-565-api-link-005" data-member="edgePredicate" data-text="edgePredicate" data-type="yfiles.graph.FilteredGraphWrapper"></api-link>. Dependent elements are exposed only if the elements\nthey depend on are exposed. Node labels, for example, are only exposed if their owner is exposed.\nAlso, edges ending at hidden nodes will be hidden, too, even if the edge predicate returns <code>true</code> for them.'},{tagname:"example",id:"filtering-565-example-001",title:"Setting up a FilteredGraphWrapper",content:'<pre class="programlisting javascript" id="filtering-565-programlisting-001" language="javascript" format="linespecific"><code>let graph = graphComponent.graph\r\nlet wrapper = new yfiles.graph.FilteredGraphWrapper(\r\n  // the original graph to wrap\r\n  graph,\r\n  // only show nodes whose level is above a certain value\r\n  node => node.tag.level > levelToBeShown,\r\n  // show all edges (actually all edges whose source and target is shown)\r\n  edge => true\r\n)\r\n// set the filtered graph as the graph to work on\r\ngraphComponent.graph = wrapper\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-008",content:'The <span class="api">FilteredGraphWrapper</span> exposes a filtered view of the wrapped graph, i.e. it exposes\na real subset (not a copy) of the elements of the original graph:'},{tagname:"para",content:'<ul id="filtering-565-itemizedlist-001"><li id="filtering-565-listitem-001"><p id="filtering-565-simpara-009">Elements of the filtered graph are referentially equal to their corresponding elements in the original graph.</p></li><li id="filtering-565-listitem-002"><p id="filtering-565-simpara-010">When a graph element is created in the filtered graph, this change is immediately reflected in the original graph.</p></li><li id="filtering-565-listitem-003"><p id="filtering-565-simpara-011">When a graph element is created in the original graph, it will show up immediately in the filtered\ngraph if (and only if) it meets the conditions for being shown.</p></li><li id="filtering-565-listitem-004"><p id="filtering-565-simpara-012">Creating a node in the filtered graph will not have an effect on the filtered graph if the newly created node\ndoes not fulfill the conditions for being shown. The node will be created in the original graph, though.\nThe same applies to edges.</p></li><li id="filtering-565-listitem-005"><p id="filtering-565-simpara-013">Graph events from the original graph will be forwarded if and only if the associated element is exposed by\nthe filtered graph.</p></li><li id="filtering-565-listitem-006"><p id="filtering-565-simpara-014">If you try to modify or remove an element in/from the filtered graph which is present in the original graph but not in the\nfiltered graph, you will get an exception.</p></li><li id="filtering-565-listitem-007"><p id="filtering-565-simpara-015">Modifications or removal of graph elements in/from the original graph are immediately reflected in the filtered graph\nif the modified element is shown.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-016",content:'The filtering conditions are only evaluated upon creation of the <span class="api">FilteredGraphWrapper</span> instance\nor for newly created elements. To update the graph after changes in the conditions, you need to explicitly trigger a re-evaluation:'},{tagname:"para",content:'<dl id="filtering-565-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="filtering-565-term-001"><api-link id="filtering-565-api-link-006" data-member="nodePredicateChanged()" data-text="nodePredicateChanged():&#xA0;void" data-type="yfiles.graph.FilteredGraphWrapper"></api-link></dt><dd id="filtering-565-listitem-008">\n<p id="filtering-565-simpara-017">Re-evaluates the predicate for all nodes. This also includes re-evaluation for incident edges of nodes whose visibility\nhas changed.</p>\n</dd>\n<dt id="filtering-565-term-002"><api-link id="filtering-565-api-link-007" data-member="edgePredicateChanged()" data-text="edgePredicateChanged():&#xA0;void" data-type="yfiles.graph.FilteredGraphWrapper"></api-link></dt><dd id="filtering-565-listitem-009">\n<p id="filtering-565-simpara-018">Re-evaluates the predicates for all edges.</p>\n</dd>\n<dt id="filtering-565-term-003"><api-link id="filtering-565-api-link-008" data-member="nodePredicateChanged(yfiles.graph.INode)" data-text="nodePredicateChanged(node:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.FilteredGraphWrapper"></api-link></dt><dd id="filtering-565-listitem-010">\n<p id="filtering-565-simpara-019">Re-evaluates the predicate for the given node. This also includes re-evaluation for incident edges whose visibility\nmight be affected.</p>\n</dd>\n<dt id="filtering-565-term-004"><api-link id="filtering-565-api-link-009" data-member="edgePredicateChanged(yfiles.graph.IEdge)" data-text="edgePredicateChanged(edge:&#xA0;IEdge):&#xA0;void" data-type="yfiles.graph.FilteredGraphWrapper"></api-link></dt><dd id="filtering-565-listitem-011">\n<p id="filtering-565-simpara-020">Re-evaluates the predicate for the given edge.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"filtering-565-simpara-021",content:'If a node becomes visible after a predicate change, a <span class="api">NodeCreated</span> event is dispatched\nas if the node was newly created (see also <a href="#/dguide/customizing_graph-graph_events">Reacting to Graph Changes</a>). Similarly,\n<span class="api">NodeRemoved</span> events are dispatched for all nodes which become hidden after a predicate\nchange. The same applies to all other graph elements.'}]},{tagname:"section",id:"folding",title:"Folding",children:[{tagname:"para","class":"dguide-para note",id:"folding-566-note-001",content:'<p id="folding-566-simpara-001">To fully understand this chapter it is important to be familiar with the concept of <span class="def">grouping</span> or <span class="def">group nodes</span>\nas introduced in <a href="#/dguide/graph_model-grouping">the graph model</a> chapter.</p>'},{tagname:"para","class":"dguide-para",id:"folding-566-simpara-002",content:'<span class="def">Folding</span> is an extension to the grouping concept. It adds the functionality of <span class="def">collapsing</span> (closing) and <span class="def">expanding</span>\n(opening) group nodes. Collapsing a group node means that its <span class="def">content</span> is hidden and the group node\nitself becomes a <span class="def">normal</span>, i.e. non-group or <span class="def">leaf</span>, node. For clarification, we refer to collapsed group nodes\nas <span class="def">folder nodes</span> or <span class="def">folders</span>. Additionally, the yFiles for HTML folding support allows <span class="def">browsing into</span>\ngroup or folder nodes, i.e. displaying their contents as separate graph.'},{tagname:"figure","class":"image",title:"Concepts of folding",id:"folding-566-figure-001","float":0,children:[{tagname:"img",src:"assets/folding-concepts-01.1a1cc651.jpg",alt:"",title:'<para class="dguide-para">(1) Group node (expanded)</para>'},{tagname:"img",src:"assets/folding-concepts-02.5cc69427.jpg",alt:"",title:'<para class="dguide-para">(2) Folder node (collapsed group)</para>'},{tagname:"img",src:"assets/folding-concepts-03.8c6d3e51.jpg",alt:"",title:'<para class="dguide-para">(3) Content of the group</para>'}]},{tagname:"para","class":"dguide-para",id:"folding-566-simpara-003",content:"The above figure illustrates that concept: Diagram (1) shows a group node (labeled “Group”) with two children,\nnodes 3 and 4. In diagram (2) the group is collapsed and the children are hidden.\nThe folder can have a different color,\na different size, and even a different label (“Folder”) to emphasize its different state.\nSince the children are hidden, the edges from the outer nodes to the nodes 3 and 4 now connect to the folder node."},{tagname:"para","class":"dguide-para",id:"folding-566-simpara-004",content:"Diagram (3) shows the content of the group as a separate diagram. Note that the\nconnections from these nodes to the outer nodes are not part of this diagram."},{tagname:"para","class":"dguide-para note",id:"folding-566-note-002",content:'<p id="folding-566-simpara-005">Edge-to-edge connections are not supported in a folding-enabled graph. In particular, if such\nconnections are present in the master graph, they will be preserved but they are not shown in any folding views.</p>'},{tagname:"para","class":"dguide-para",id:"folding-566-simpara-006",content:'In the following, we first explain the basics of <a href="#/dguide/folding-working_with_folding">working with folding</a>,\nintroduce the <a href="#/dguide/folding-styles">predefined style for collapsible groups</a>,\nand describe how to <a href="#/dguide/folding-interaction">enable user interaction</a>.\nIn the remainder of this chapter, we explain specific aspects and underlying concepts of folding in more detail.'},{tagname:"section",id:"folding-working_with_folding",title:"Working with Folding",children:[{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-001",content:'To properly hide children when collapsing and restore the contents when expanding, folding works with\ntwo graph instances. The <span class="def">master graph</span> is the complete unfolded graph: it contains all normal\nnodes, all groups, all edges, and all of their labels and ports. The graph in the graph component\nthat supports collapsing and expanding is a (modified) copy of the master graph. It is called the\n<span class="def">view graph</span>.'},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-002",content:'To make sure that the state of both graphs is correctly synchronized, yFiles provides the types\n<span class="api">FoldingManager</span> and <span class="api">IFoldingView</span>.\nA <api-link id="folding-working_with_folding-567-api-link-001" data-member="" data-text="FoldingManager" data-type="yfiles.graph.FoldingManager"></api-link> stores the master graph and serves as a factory for the folding views.\nAn <api-link id="folding-working_with_folding-567-api-link-002" data-member="" data-text="IFoldingView" data-type="yfiles.graph.IFoldingView"></api-link> stores the view graph and manages the mapping from elements\nof the master graph to elements in the view graph and vice versa.'},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-003",content:'See the section <a href="#/dguide/folding-technical_background">Folding Revisited</a> for more details.'},{tagname:"heading",id:"_enabling_folding",renderas:"sect4",content:"Enabling Folding"},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-004",content:'To enable folding, create a new instance of <api-link id="folding-working_with_folding-567-api-link-003" data-member="" data-text="FoldingManager" data-type="yfiles.graph.FoldingManager"></api-link>. If you have an\ninitial graph, set it as master graph of your manager. Then, create a folding view with the manager.\nEach folding view contains one view graph and that graph supports folding.\nFinally, set the view graph to your graph component.'},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-005",content:"The following example summarizes these steps."},{tagname:"example",id:"folding-working_with_folding-567-example-001",title:"Enable folding for the GraphComponent’s Graph",content:'<pre class="programlisting javascript" id="folding-working_with_folding-567-programlisting-001" language="javascript" format="linespecific"><code>// first create the folding manager\r\nlet foldingManager = new yfiles.graph.FoldingManager()\r\n// create the folding view with the manager\r\nlet view = foldingManager.createFoldingView()\r\n// each view contains a folding-enabled graph, the view graph\r\nlet viewGraph = view.graph\r\n// the view graph is the graph to display\r\ngraphComponent.graph = viewGraph\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-006",content:"Once enabled, you can get the view graph of a folding view and vice versa with these properties:"},{tagname:"para",content:'<dl id="folding-working_with_folding-567-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-working_with_folding-567-term-001"><api-link id="folding-working_with_folding-567-api-link-004" data-member="foldingView" data-text="IGraph.foldingView:&#xA0;IFoldingView" data-type="yfiles.graph.IGraph"></api-link></dt><dd id="folding-working_with_folding-567-listitem-001">\n<p id="folding-working_with_folding-567-simpara-007">Gets the corresponding <span class="api">IFoldingView</span> instance if the graph is a view graph.\nReturns <code>null</code> otherwise.</p>\n</dd>\n<dt id="folding-working_with_folding-567-term-002"><api-link id="folding-working_with_folding-567-api-link-005" data-member="graph" data-text="IFoldingView.graph:&#xA0;IGraph" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-working_with_folding-567-listitem-002">\n<p id="folding-working_with_folding-567-simpara-008">Gets the view graph of this folding view.</p>\n</dd>\n</dl>'},{tagname:"heading",id:"_collapsing_and_expanding_groups",renderas:"sect4",content:"Collapsing and Expanding Groups"},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-009",content:'<span class="api">IFoldingView</span> provides the methods for expanding and collapsing group nodes:'},{tagname:"para",content:'<dl id="folding-working_with_folding-567-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="folding-working_with_folding-567-term-003"><api-link id="folding-working_with_folding-567-api-link-006" data-member="collapse(yfiles.graph.INode)" data-text="collapse(groupNode:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-working_with_folding-567-listitem-003">\n<p id="folding-working_with_folding-567-simpara-010">Collapses the given group node, i.e. removes its children from the view graph and changes the visual appearance\nto the folder state.\nThis method does nothing if the node is not a group or if the node is already collapsed.</p>\n</dd>\n<dt id="folding-working_with_folding-567-term-004"><api-link id="folding-working_with_folding-567-api-link-007" data-member="expand(yfiles.graph.INode)" data-text="expand(groupNode:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-working_with_folding-567-listitem-004">\n<p id="folding-working_with_folding-567-simpara-011">Opens the given folder node, i.e. re-adds its children to the view graph and changes the visual appearance\nto the group state.</p>\n<p id="folding-working_with_folding-567-simpara-012">This method does nothing if the node is not a folder or if the node is already expanded.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"folding-working_with_folding-567-simpara-013",content:'In addition, you can create folder nodes, i.e. group nodes which are initially collapsed,\nwith the <api-link id="folding-working_with_folding-567-api-link-008" data-member="createFolderNode(yfiles.graph.INode,yfiles.geometry.Rect,yfiles.styles.INodeStyle,Object)" data-text="createFolderNode" data-type="yfiles.graph.IFoldingView"></api-link>\nmethod of <span class="api">IFoldingView</span>.'},{tagname:"para","class":"dguide-para note",id:"folding-working_with_folding-567-note-001",content:'<p id="folding-working_with_folding-567-simpara-014">A folder node can have a different layout, visual appearance, and even different labels than its\n(expanded) group node. Thus, changing any of these properties does not affect its expanded state.\nInstead, when the collapsed group is expanded again, it will have its original layout, style, and labels.\nThe same applies to the incident edges of a folder node.</p>'}]},{tagname:"section",id:"folding-styles",title:"Styles for Folding",children:[{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-001",content:"Basically any node style can be used to represent group and folder nodes, and the styles for\na group node’s collapsed state and expanded state can be different."},{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-002",content:'With folding it is quite common,\nthough, that the visual representation of group nodes provides some kind of handle to enable a user\nto interactively toggle between the collapsed and expanded states.\nClass <api-link id="folding-styles-568-api-link-001" data-member="" data-text="CollapsibleNodeStyleDecorator" data-type="yfiles.styles.CollapsibleNodeStyleDecorator"></api-link> is a special node style that\ndecorates any other node style with such a collapse/expand handle.'},{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-003",content:"By default, this handle is rendered as a plus sign (<code>+</code>) when in collapsed\nstate, and a minus sign (<code>-</code>) when in expanded state. The following figure shows the group node\nrepresentation for an expanded empty group node and a collapsed group node side by side:"},{tagname:"figure","class":"image",title:"Group node representation using CollapsibleNodeStyleDecorator",id:"folding-styles-568-figure-001","float":0,children:[{tagname:"img",src:"assets/folding-collapsible_style.e01582bb.jpg",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-004",content:"The following example presents the setup for the group node style shown above."},{tagname:"example",id:"folding-styles-568-example-001",title:"Setting the default group node style",content:'<pre class="programlisting javascript" id="folding-styles-568-programlisting-001" language="javascript" format="linespecific"><code>// create the style to decorate\r\nlet decoratedStyle = new yfiles.styles.PanelNodeStyle()\r\n// decorate the style and set as default style for group nodes\r\ngraph.groupNodeDefaults.style = new yfiles.styles.CollapsibleNodeStyleDecorator(decoratedStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para note",id:"folding-styles-568-note-001",content:'<p id="folding-styles-568-simpara-005"><span class="api">CollapsibleNodeStyleDecorator</span> needs to be set to the group node in the\nmaster graph.</p>'},{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-006",content:'<api-link id="folding-styles-568-api-link-002" data-member="" data-text="CollapsibleNodeStyleDecorator" data-type="yfiles.styles.CollapsibleNodeStyleDecorator"></api-link> provides several properties to control the\nlocation of the toggle handle. The visualization of the handle can be changed with\n<a href="#/dguide/custom-styles_customize-predefined-styles">a custom renderer</a>.'},{tagname:"para","class":"dguide-para",id:"folding-styles-568-simpara-007",content:'The representations of a group node’s collapsed state and expanded state can be different.\nBy default, however, the initial style that is used to render a folder node in a folding view is the\nstyle of the original (expanded) group node from the master graph.\nSee the section <a href="#/dguide/folding-folder_state">Maintaining the Folder Node State</a> for details.'}]},{tagname:"section",id:"folding-interaction",title:"User Interaction",children:[{tagname:"para","class":"dguide-para",id:"folding-interaction-569-simpara-001",content:'In addition to the user interaction that is supported for <a href="#/dguide/interaction-grouping">grouping</a>, you can\npress <kbd>Ctrl</kbd>+<kbd>-</kbd> to collapse a selected group node and <kbd>Ctrl</kbd>+<kbd>+</kbd> to expand it.\nThis can be configured on the child input mode <api-link id="folding-interaction-569-api-link-001" data-member="" data-text="NavigationInputMode" data-type="yfiles.input.NavigationInputMode"></api-link>\nof both <span class="api">GraphEditorInputMode</span> and <span class="api">GraphViewerInputMode</span>.'},{tagname:"para",content:'<dl id="folding-interaction-569-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-interaction-569-term-001"><api-link id="folding-interaction-569-api-link-002" data-member="allowCollapseGroup" data-text="NavigationInputMode.allowCollapseGroup" data-type="yfiles.input.NavigationInputMode"></api-link></dt><dd id="folding-interaction-569-listitem-001">\n<p id="folding-interaction-569-simpara-002">Enables or disables the <span class="def">collapse group</span> shortcut <kbd>Ctrl</kbd>+<kbd>-</kbd>.</p>\n</dd>\n<dt id="folding-interaction-569-term-002"><api-link id="folding-interaction-569-api-link-003" data-member="allowExpandGroup" data-text="NavigationInputMode.allowExpandGroup" data-type="yfiles.input.NavigationInputMode"></api-link></dt><dd id="folding-interaction-569-listitem-002">\n<p id="folding-interaction-569-simpara-003">Enables or disables the <span class="def">expand group</span> shortcut <kbd>Ctrl</kbd>+<kbd>+</kbd>.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para tip",id:"folding-interaction-569-tip-001",content:'<p id="folding-interaction-569-simpara-004">By default, these actions are enabled on <span class="api">GraphEditorInputMode</span> and\ndisabled on <span class="api">GraphViewerInputMode</span> since we consider them graph modifications.\nIf your use case requires these actions, enabling them for <span class="api">GraphViewerInputMode</span>\nis perfectly fine.</p>'}]},{tagname:"section",id:"folding-technical_background",title:"Folding Revisited",children:[{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-001",content:'In this section, we provide more details for the types introduced above in section\n<a href="#/dguide/folding-working_with_folding">Working with Folding</a>.'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-002",content:'Recall that the <api-link id="folding-technical_background-570-api-link-001" data-member="" data-text="FoldingManager" data-type="yfiles.graph.FoldingManager"></api-link> stores the master graph and has a factory method\nfor instances of <api-link id="folding-technical_background-570-api-link-002" data-member="" data-text="IFoldingView" data-type="yfiles.graph.IFoldingView"></api-link>. The latter stores one view graph,\nprovides the collapse and expand methods for its graph, and manages the\nmapping from elements of the master graph to elements in its view graph and vice versa.'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-003",content:'<span class="api">FoldingManager</span> keeps track of the folding views it has created and can manage\nan arbitrary number of folding views. Typically however you’ll need just one of them for displaying\nin your <span class="api">GraphComponent</span>. If you have several views, each one can have different folded groups and\neven show a <a href="#/dguide/folding-local_root">different part of the master graph</a>.'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-004",content:"All views are synchronized. This means that changes in a view graph are immediately propagated to\nthe master graph. Similarly, changes in the master graph are immediately propagated to all views."},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-005",content:'A folder can have a different layout and style, and different labels and ports than its corresponding\nmaster item. These properties of a folder are stored in the <api-link id="folding-technical_background-570-api-link-003" data-member="" data-text="FolderNodeState" data-type="yfiles.graph.FolderNodeState"></api-link> class,\nand shared between all folders of the same master node for all folded views. Similar states exist for\nedges that are incident to a folder, and the labels and ports of folders.\nThese states are called <span class="def">folding states</span>, and sometimes <span class="def">view states</span>.\nAll of them are managed by <span class="api">FoldingManager</span> and described in more detail\nin the following section <a href="#/dguide/folding-folding_states">The State of Folded Elements</a>.'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-006",content:'The following figure summarizes these relations of <span class="api">FoldingManager</span>,\n<span class="api">IFoldingView</span>, their graphs, and the folding states.'},{tagname:"figure","class":"image",title:"Interactions between FoldingManager and its views",id:"folding-technical_background-570-figure-001","float":0,children:[{tagname:"img",src:"assets/folding-folding_manager.961d6c48.jpg",alt:"folding folding manager",title:'<para class="dguide-para"></para>'}]},{tagname:"heading",id:"__anchor_id_folding_local_root_xreflabel_folding_local_root_displaying_a_group_s_contents",renderas:"sect4",content:'<anchor id="folding-local_root" xreflabel="[folding-local_root]"></anchor> Displaying a Group’s Contents'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-007",content:'<span class="api">IFoldingView</span> can display the contents of a group or folder as an\nindependent graph. You can use this feature to allow your users to <span class="def">browse into</span> or\n<span class="def">enter</span> a group or folder, for example.'},{tagname:"para",content:'<dl id="folding-technical_background-570-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-technical_background-570-term-001"><api-link id="folding-technical_background-570-api-link-004" data-member="localRoot" data-text="IFoldingView.localRoot:&#xA0;INode" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-technical_background-570-listitem-001">\n<p id="folding-technical_background-570-simpara-008">Specifies the root of the view graph.\nSetting a group of the master graph limits the view graph to the contents of that group (excluding the group itself).\nSetting it to <code>null</code> results in the complete view graph.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"folding-technical_background-570-note-001",content:'<p id="folding-technical_background-570-simpara-009">This property is named with regards to the <a href="#/dguide/graph_model-grouping">grouping hierarchy</a> in which\neach group is the <span class="def">root</span> of its content.</p>'},{tagname:"para","class":"dguide-para",id:"folding-technical_background-570-simpara-010",content:'In case that the current root node is removed from the master graph, the\nfolding view’s <api-link id="folding-technical_background-570-api-link-005" data-member="invalid" data-text="invalid" data-type="yfiles.graph.IFoldingView"></api-link> property becomes <code>true</code> and the view can no\nlonger be edited. By default, however, the <api-link id="folding-technical_background-570-api-link-006" data-member="autoSwitchToAncestor" data-text="autoSwitchToAncestor" data-type="yfiles.graph.IFoldingView"></api-link>\nproperty makes sure that the local root is automatically changed such that an ancestor of the original\nroot is used as the view’s new root.'}]},{tagname:"section",id:"folding-master_view",title:"Working with Master and View",children:[{tagname:"para","class":"dguide-para",id:"folding-master_view-571-simpara-001",content:"With folding, it’s important to take care of the graph you’re working with, either master graph\nor view graph. For some tasks, it doesn’t matter but others can (or at least should) be done on only\none of them.\nIn the following, we first explain the conversion between the items of the two graphs in more detail\nand then list common tasks and the corresponding graph to use."},{tagname:"para","class":"dguide-para",id:"folding-master_view-571-simpara-002",content:'The elements in the master graph are referred to as <span class="def">master item</span> or <span class="def">master element</span>\nwhereas the elements in the view graph are referred to as <span class="def">view item</span>.\nEach view item has one corresponding master item but one view edge can represent more than one master edge.\nThis depends on the options for <a href="#/dguide/folding-converting_folding_edges">creating view edges</a>.'},{tagname:"section",id:"folding-master_view_conversion",title:"Converting Master and View Items",children:[{tagname:"para","class":"dguide-para",id:"folding-master_view_conversion-572-simpara-001",content:'<api-link id="folding-master_view_conversion-572-api-link-001" data-member="" data-text="IFoldingView" data-type="yfiles.graph.IFoldingView"></api-link> provides the following methods to convert between master and view items.'},{tagname:"para",content:'<dl id="folding-master_view_conversion-572-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-master_view_conversion-572-term-001"><api-link id="folding-master_view_conversion-572-api-link-002" data-member="getMasterItem(T)" data-text="getMasterItem&lt;T&gt;(item:&#xA0;T):&#xA0;T" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-master_view_conversion-572-listitem-001">\n<p id="folding-master_view_conversion-572-simpara-002">Returns the corresponding master item for a given view item.\nReturns <code>null</code> if a view item has no master item (labels of folder nodes, for example).\nFor view edges which correspond to more than one master edge this method\nreturns the main master edge.</p>\n</dd>\n<dt id="folding-master_view_conversion-572-term-002"><api-link id="folding-master_view_conversion-572-api-link-003" data-member="getMasterEdges(yfiles.graph.IEdge)" data-text="getMasterEdges(foldingEdge:&#xA0;IEdge):&#xA0;IEnumerable&lt;IEdge&gt;" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-master_view_conversion-572-listitem-002">\n<p id="folding-master_view_conversion-572-simpara-003">Returns all corresponding master edges for a given view edge.</p>\n</dd>\n<dt id="folding-master_view_conversion-572-term-003"><api-link id="folding-master_view_conversion-572-api-link-004" data-member="getViewItem(T)" data-text="getViewItem&lt;T&gt;(item:&#xA0;T):&#xA0;T" data-type="yfiles.graph.IFoldingView"></api-link></dt><dd id="folding-master_view_conversion-572-listitem-003">\n<p id="folding-master_view_conversion-572-simpara-004">Returns the corresponding view item for a given master item if such a view item exists.\nReturns <code>null</code> if the element is currently not in the view graph\n(a child node of a collapsed group, for example).</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"folding-master_view_conversion-572-simpara-005",content:'The master graph models your complete business data and is not affected by collapse and expand\nactions of users. Therefore you should use it for all tasks that concern the whole model.\nIn contrast, the view graph is the one that is visible in the <span class="api">GraphComponent</span>. Automatic layouts\nare typically applied to this graph, and code that customizes user interaction and visualization\noriginally gets view items.'}]},{tagname:"section",id:"folding-master_graph_task",title:"Tasks for the Master Graph",children:[{tagname:"para","class":"dguide-para",id:"folding-master_graph_task-573-simpara-001",content:"The following tasks are typically done on the master graph."},{tagname:"para",content:'<ul id="folding-master_graph_task-573-itemizedlist-001"><li id="folding-master_graph_task-573-listitem-001"><p id="folding-master_graph_task-573-simpara-002">If you store graph elements for later use, keep references to master items. Otherwise,\nsome of the stored items might no longer be part of the (view) graph if a user collapses more groups.</p></li><li id="folding-master_graph_task-573-listitem-002"><p id="folding-master_graph_task-573-simpara-003">An <a href="#/dguide/customizing_graph-binding_data">IMapper&lt;K,V></a> which is registered at\nthe master graph’s <span class="api">mapperRegistry</span> will be available in all view graphs, too.\nIn a view graph, the mappers are automatically wrapped such that you can use view items to query the values.</p><p id="folding-master_graph_task-573-simpara-004">This does not apply the other way around. Mappers registered for a view graph are not available in\nthe master graph.</p></li><li id="folding-master_graph_task-573-listitem-003"><p id="folding-master_graph_task-573-simpara-005">Enable support for undo and redo on the master graph. In addition, mappers and other data structures\nthat are used by undo customization should work with master items.</p></li><li id="folding-master_graph_task-573-listitem-004"><p id="folding-master_graph_task-573-simpara-006">Set the <a href="#/dguide/folding-styles">style that displays the collapse/expand handle</a> for the master nodes.</p></li></ul>'}]},{tagname:"section",id:"folding-view_graph_task",title:"Tasks for the View Graph",children:[{tagname:"para","class":"dguide-para",id:"folding-view_graph_task-574-simpara-001",content:"The following tasks are typically done on the view graph."},{tagname:"para",content:'<ul id="folding-view_graph_task-574-itemizedlist-001"><li id="folding-view_graph_task-574-listitem-001"><p id="folding-view_graph_task-574-simpara-002">Reacting on user action events is done on the view. However, if you store elements in your event\nlisteners, convert the provided view items to master items and store these.</p></li><li id="folding-view_graph_task-574-listitem-002"><p id="folding-view_graph_task-574-simpara-003">Especially, working with the selection is done on the view.</p></li><li id="folding-view_graph_task-574-listitem-003"><p id="folding-view_graph_task-574-simpara-004">Automatic layouts are applied to the view graph. As described above, mappers registered at the\nmaster graph are automatically usable in the view graph and thus such mappers can be used to\nconfigure the layout. Mappers that are just used for the next layout calculation should be created\nfor the view graph.</p></li></ul>'}]}]},{tagname:"section",id:"folding-folding_states",title:"The State of Folded Elements",children:[{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-001",content:'A folder can have a different layout, style, and tag, and different labels and ports than its corresponding\nmaster item. These properties of a folder are stored in the <api-link id="folding-folding_states-575-api-link-001" data-member="" data-text="FolderNodeState" data-type="yfiles.graph.FolderNodeState"></api-link> class.'},{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-002",content:'Similarly, (view) edges that connect to folders can have different source and target ports and bends,\na different style and tag, and different labels and ports than any of its corresponding master edge(s).\nThese properties are stored in the <api-link id="folding-folding_states-575-api-link-002" data-member="" data-text="FoldingEdgeState" data-type="yfiles.graph.FoldingEdgeState"></api-link> class.'},{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-003",content:'In addition, all ports and labels of folders, and all bends, ports, and labels of edges of folders\nhave similar state classes, namely <api-link id="folding-folding_states-575-api-link-003" data-member="" data-text="FoldingPortState" data-type="yfiles.graph.FoldingPortState"></api-link>,\n<api-link id="folding-folding_states-575-api-link-004" data-member="" data-text="FoldingLabelState" data-type="yfiles.graph.FoldingLabelState"></api-link>, and <api-link id="folding-folding_states-575-api-link-005" data-member="" data-text="FoldingBendState" data-type="yfiles.graph.FoldingBendState"></api-link>.\nNote that these elements have no master item. They only exist in the folder node states and the\nfolding edge states.'},{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-004",content:'All these states are managed by <span class="api">FoldingManager</span>. You can get the node and\nedge states from it with the following methods. The states of labels, ports, and bends are\navailable on the respective node state or edge state.'},{tagname:"para",content:'<dl id="folding-folding_states-575-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-folding_states-575-term-001"><api-link id="folding-folding_states-575-api-link-006" data-member="getFolderNodeState(yfiles.graph.INode)" data-text="getFolderNodeState(masterNode:&#xA0;INode):&#xA0;FolderNodeState" data-type="yfiles.graph.FoldingManager"></api-link></dt><dd id="folding-folding_states-575-listitem-001">\n<p id="folding-folding_states-575-simpara-005">Returns the state of the folder(s) that corresponds to the given master node.</p>\n</dd>\n<dt id="folding-folding_states-575-term-002"><api-link id="folding-folding_states-575-api-link-007" data-member="getFoldingEdgeState(yfiles.graph.FoldingEdgeStateId)" data-text="getFoldingEdgeState(id:&#xA0;FoldingEdgeStateId):&#xA0;FoldingEdgeState" data-type="yfiles.graph.FoldingManager"></api-link></dt><dd id="folding-folding_states-575-listitem-002">\n<p id="folding-folding_states-575-simpara-006">Returns the state of the edge(s) that corresponds to the given edge ID. This ID depends on the\nmaster edge, and its source and target nodes.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"folding-folding_states-575-note-001",content:'<p id="folding-folding_states-575-simpara-007">Some of these states are shared between multiple views of the same master. This is described in\nmore detail in the following section <a href="#/dguide/folding-folding_states_multiple_views">Shared Folding States of Multiple Views</a>.</p>'},{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-008",content:"Properties like the style can be directly set to the folding states. Setting a property will be immediately\nreflected in all managed views which show the node in collapsed state. Also, when a group node is collapsed\nits folder node’s properties will be set according to the folding state. The following example shows\nhow to get the folding state for a node and set a new style to that state:"},{tagname:"example",id:"folding-folding_states-575-example-001",title:"Setting the style for a collapsed node",content:"<pre class=\"programlisting javascript\" id=\"folding-folding_states-575-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>// 'graph' is the folding enabled view graph\r\n// 'groupNode' is the group node to set the folder style to\r\n// 'groupNode' is contained in 'graph'\r\n\r\n// get the folding view for the graph\r\nlet view = graph.foldingView\r\n// the manager which manages the views\r\nlet manager = view.manager\r\n// get the view state from the manager using the master node of 'groupNode'\r\nlet state = manager.getFolderNodeState(view.getMasterItem(groupNode))\r\nlet folderStyle = new yfiles.styles.PanelNodeStyle()\r\nfolderStyle.color = yfiles.view.Color.LIGHT_GRAY\r\nfolderStyle.labelInsetsColor = yfiles.view.Color.GRAY\r\nstate.style = new yfiles.styles.CollapsibleNodeStyleDecorator(folderStyle)\n</code></pre>"},{tagname:"para","class":"dguide-para",id:"folding-folding_states-575-simpara-009",content:'The folding states are created or updated by <span class="def">converters</span> provided by the\n<span class="api">FoldingManager</span> whenever a group is collapsed. This is described in detail\nfor folders and their edges in the following sections.'},{tagname:"section",id:"folding-folder_state",title:"Maintaining the Folder Node State",children:[{tagname:"para","class":"dguide-para",id:"folding-folder_state-576-simpara-001",content:'The instance of <api-link id="folding-folder_state-576-api-link-001" data-member="" data-text="IFolderNodeConverter" data-type="yfiles.graph.IFolderNodeConverter"></api-link> that is provided by the\n<api-link id="folding-folder_state-576-api-link-002" data-member="folderNodeConverter" data-text="FoldingManager.folderNodeConverter" data-type="yfiles.graph.FoldingManager"></api-link> property\ndetermines the properties of the folder node state whenever a group is collapsed.'},{tagname:"para","class":"dguide-para",id:"folding-folder_state-576-simpara-002",content:'For this, <span class="api">IFolderNodeConverter</span> provides these two methods:'},{tagname:"para",content:'<dl id="folding-folder_state-576-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="folding-folder_state-576-term-001"><api-link id="folding-folder_state-576-api-link-003" data-member="initializeFolderNodeState(yfiles.graph.FolderNodeState,yfiles.graph.IFoldingView,yfiles.graph.INode,yfiles.graph.INode)" data-text="initializeFolderNodeState(state:&#xA0;FolderNodeState, foldingView:&#xA0;IFoldingView, viewNode:&#xA0;INode, masterNode:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.IFolderNodeConverter"></api-link></dt><dd id="folding-folder_state-576-listitem-001">\n<p id="folding-folder_state-576-simpara-003">Called when a group node is collapsed the first time, i.e. when no <span class="api">FolderNodeState</span> exists, yet.</p>\n</dd>\n<dt id="folding-folder_state-576-term-002"><api-link id="folding-folder_state-576-api-link-004" data-member="updateFolderNodeState(yfiles.graph.FolderNodeState,yfiles.graph.IFoldingView,yfiles.graph.INode,yfiles.graph.INode)" data-text="updateFolderNodeState(state:&#xA0;FolderNodeState, foldingView:&#xA0;IFoldingView, viewNode:&#xA0;INode, masterNode:&#xA0;INode):&#xA0;void" data-type="yfiles.graph.IFolderNodeConverter"></api-link></dt><dd id="folding-folder_state-576-listitem-002">\n<p id="folding-folder_state-576-simpara-004">Called if a <span class="api">FolderNodeState</span> already exists when a group node is collapsed. Used to synchronize\nthe folding state of a folder with its potentially changed master node. Might do nothing if synchronization is not required.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"folding-folder_state-576-simpara-005",content:'<api-link id="folding-folder_state-576-api-link-005" data-member="" data-text="DefaultFolderNodeConverter" data-type="yfiles.graph.DefaultFolderNodeConverter"></api-link> is the default implementation of <span class="api">IFolderNodeConverter</span>.\nBy default, it sets the properties of the state to the one of the original group node except for the labels.\nIt provides plenty of configuration settings and callback methods to configure it to your needs.'}]},{tagname:"section",id:"folding-edge_state",title:"Maintaining the Folding Edge State",children:[{tagname:"para","class":"dguide-para",id:"folding-edge_state-577-simpara-001",content:'Similar to folder nodes, the instance of <api-link id="folding-edge_state-577-api-link-001" data-member="" data-text="IFoldingEdgeConverter" data-type="yfiles.graph.IFoldingEdgeConverter"></api-link>\nthat is provided by the <api-link id="folding-edge_state-577-api-link-002" data-member="foldingEdgeConverter" data-text="FoldingManager.foldingEdgeConverter" data-type="yfiles.graph.FoldingManager"></api-link> property\ndetermines the properties of the folding edge state whenever a group is collapsed.'},{tagname:"para","class":"dguide-para",id:"folding-edge_state-577-simpara-002",content:"However, in addition, that converter determines how many and which folding edges should be created\nat all. yFiles for HTML contains the following converters:"},{tagname:"para",content:'<dl id="folding-converting_folding_edges"><dt id="folding-edge_state-577-term-001"><api-link id="folding-edge_state-577-api-link-003" data-member="" data-text="DefaultFoldingEdgeConverter" data-type="yfiles.graph.DefaultFoldingEdgeConverter"></api-link></dt><dd id="folding-edge_state-577-listitem-001"><p id="folding-edge_state-577-simpara-003">Creates one folding edge for each master edge that connects to the contents of the collapsed group.</p></dd><dt id="folding-edge_state-577-term-002"><api-link id="folding-edge_state-577-api-link-004" data-member="" data-text="MergingFoldingEdgeConverter" data-type="yfiles.graph.MergingFoldingEdgeConverter"></api-link></dt><dd id="folding-edge_state-577-listitem-002"><p id="folding-edge_state-577-simpara-004">Creates at most one folding edge (two folding edges, if edge direction is not ignored) between each\npair of source node and target node. Conceptually, this implementations merges folding edges\nthat connect the same source node and target node in a folding view into one folding edge\n(two folding edges, if edge direction is not ignored).</p></dd><dt id="folding-edge_state-577-term-003"><api-link id="folding-edge_state-577-api-link-005" data-member="" data-text="ExcludingFoldingEdgeConverter" data-type="yfiles.graph.ExcludingFoldingEdgeConverter"></api-link></dt><dd id="folding-edge_state-577-listitem-003"><p id="folding-edge_state-577-simpara-005">Creates no folding edges at all.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"folding-edge_state-577-simpara-006",content:'By default the <span class="api">DefaultFoldingEdgeConverter</span> is used.'},{tagname:"para","class":"dguide-para",id:"folding-edge_state-577-simpara-007",content:'Both <span class="api">DefaultFoldingEdgeConverter</span> and <api-link id="folding-edge_state-577-api-link-006" data-member="" data-text="MergingFoldingEdgeConverter" data-type="yfiles.graph.MergingFoldingEdgeConverter"></api-link>\nprovide plenty of configuration settings and callback methods to configure them to your needs.'}]},{tagname:"section",id:"folding-folding_states_multiple_views",title:"Shared Folding States of Multiple Views",children:[{tagname:"para","class":"dguide-para",id:"folding-folding_states_multiple_views-578-simpara-001",content:"If you have more than one folding view for the same master, some of these states are shared by\nall views. As a consequence, view items of different views that share the same states have the\nsame layout, geometry, style, etc."},{tagname:"para","class":"dguide-para",id:"folding-folding_states_multiple_views-578-simpara-002",content:'In particular, the same <span class="api">FolderNodeState</span> is shared by all folders of the same\nmaster group in all folded views.'},{tagname:"para","class":"dguide-para",id:"folding-folding_states_multiple_views-578-simpara-003",content:'For edges, the <span class="api">FoldingEdgeStateId</span> is defined by the master edge, the source\nand target node, and the collapse/expand state of these nodes. In other words, two view edges of\nthe same master edge have the same ID if both their source and target nodes have the same\ncollapse/expand state.'},{tagname:"para","class":"dguide-para",id:"folding-folding_states_multiple_views-578-simpara-004",content:"Since the states of labels, ports, and bends are part of the node and edge state, their states are\nthe same if their owners share the same state."}]}]}]},{tagname:"section",id:"tables",title:"Tables",children:[{tagname:"para","class":"dguide-para",id:"tables-579-simpara-001",content:"Many application areas require a presentation of data where the nodes of a diagram\nare organized in a tabular way, i.e., where each node is associated to a specific\nrow and column in the grid-like structure of a table.\nSwimlane layouts are a popular example of such presentations."},{tagname:"para","class":"dguide-para",id:"tables-579-simpara-002",content:"The following figure shows samples of tabular presentations of diagrams:"},{tagname:"figure","class":"image",title:"Tabular data presentation",id:"fig_tables-tabular_data_presentation","float":0,children:[{tagname:"img",src:"assets/table_sample_swimlane.bb7e0992.png",alt:"",title:'<para class="dguide-para">Swimlane layout with four lanes from top to bottom</para>'},{tagname:"img",src:"assets/table_sample_bpmn.91756a2c.png",alt:"",title:'<para class="dguide-para">A diagram following the Business Process Modeling Notation (BPMN) where swimlanes are additionally subdivided by so-called milestones</para>'}]},{tagname:"para","class":"dguide-para",id:"tables-579-simpara-003",content:"The yFiles for HTML diagramming library contains comprehensive support for tabular data presentation,\nwhich builds on the general concept of grouped graphs.\nThe provided functionality covers the “look” as well as the “feel,” i.e., table\nstructures with rows and columns can be both rendered and also interactively edited.\nRows and columns can be:"},{tagname:"para",content:'<ul id="tables-579-itemizedlist-001"><li id="tables-579-listitem-001"><p id="tables-579-simpara-004">added,</p></li><li id="tables-579-listitem-002"><p id="tables-579-simpara-005">removed,</p></li><li id="tables-579-listitem-003"><p id="tables-579-simpara-006">resized, and also</p></li><li id="tables-579-listitem-004"><p id="tables-579-simpara-007">reordered.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tables-579-simpara-008",content:'Furthermore, the <a href="#/dguide/hierarchical_layout">hierarchical layout style</a>,\nmore precisely class <span class="api">HierarchicLayout</span>, provides advanced support for\nautomatic tabular layout.'},{tagname:"section",id:"tables-concepts",title:"Concepts",children:[{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-001",content:"The presentation of a diagram in a tabular way needs an additional element, namely\na table structure to encompass the proper nodes of the diagram.\nThis table structure is backed by a group node, and the diagram’s proper nodes,\ni.e., the actual content nodes, need to be set up so that they are child nodes of\nthis group node."},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-002",content:'Using a group node to hold the content nodes brings all advantages of this concept\nas described in <a href="#/dguide/graph_model-grouping">Grouping</a>.\nFor example, when the group node is moved, the child nodes move accordingly, thus\nmaintaining the visual clue that they are contained in the table group node.'},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-003",content:'The table structure, which typically shows some rows and columns within which the\ncontent nodes lie, directly results from the <a href="#/dguide/tables-table_model">table model</a>\nwhich actually defines these rows and columns.'},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-004",content:'The group node that is “behind” the table structure uses a <a href="#/dguide/tables-visual_representation">special node style implementation</a>\nto govern the actual rendering.\nThe visualization of individual rows and columns can be conveniently achieved by\nusing <a href="#/dguide/tables-stripe_styles">special style implementations</a>.'},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-005",content:'<a href="#/dguide/tables-user_interaction">User interaction</a> with the table structure\nis supported by a specialized input mode, which makes available support for resizing\nrows and columns, re-parenting them, or editing their labels, for example.'},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-006",content:"It is crucial to understand, however, that the content nodes of a diagram and the\ntable structure are only loosely coupled.\nMore precisely, the association of a content node to a row and a column is only\ndone on a geometric basis, i.e., the node’s center coordinates determine the row\n(column) that it belongs to."},{tagname:"para","class":"dguide-para",id:"tables-concepts-580-simpara-007",content:"This also means that when a content node is moved, for example, the representation\nof the table does not change in any way."}]},{tagname:"section",id:"tables-table_model",title:"Table Model",children:[{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-001",content:"Basically, the table model represents the blueprint for the rendering of the table structure.\nThe table model defines the rows and columns of a table, their sizes, and in particular\ntheir nesting structure, i.e., rows (columns) may have so-called child rows (columns)\nto support nested row (column) structures."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-002",content:'<a href="#/dguide/fig_tables-table_model">Table structure with nested rows and columns</a> shows a table structure with nested rows and columns.\nThe table has two top-level rows where one consists of two child rows.\nSimilarly, there are two top-level columns where one consists of two child columns.'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-003",content:"Note that there are no content nodes."},{tagname:"figure","class":"image",title:"Table structure with nested rows and columns",id:"fig_tables-table_model","float":0,children:[{tagname:"img",src:"assets/table_nested_structure.82270f50.png",alt:"",title:'<para class="dguide-para">Table structure with nested rows and columns</para>'}]},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-004",content:'The table model is constituted by the types listed in <a href="#/dguide/tab_tables-table_model_types">Table model types</a>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tables-table_model_types",rowsep:1,content:'<caption>Table model types</caption><colgroup><col style="width:25%;"><col style="width:75%;"></colgroup><tbody id="tables-table_model-581-tbody-001"><tr id="tables-table_model-581-row-001"><td id="tables-table_model-581-entry-001" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-005">Type name</para></td><td id="tables-table_model-581-entry-002" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-006">Description</para></td></tr><tr id="tables-table_model-581-row-002"><td id="tables-table_model-581-entry-003" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-007"><api-link id="tables-table_model-581-api-link-001" data-member="" data-text="ITable" data-type="yfiles.graph.ITable"></api-link></para></td><td id="tables-table_model-581-entry-004" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-008">Provides the virtual roots of the row and column hierarchies of a table model.\n  The <api-link id="tables-table_model-581-api-link-002" data-member="" data-text="Table" data-type="yfiles.graph.Table"></api-link> class is the default implementation.</para></td></tr><tr id="tables-table_model-581-row-003"><td id="tables-table_model-581-entry-005" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-009"><api-link id="tables-table_model-581-api-link-003" data-member="" data-text="IStripe" data-type="yfiles.graph.IStripe"></api-link></para></td><td id="tables-table_model-581-entry-006" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-010">Models common aspects of rows and columns in a table model.\n  This includes the layout, insets, (minimum) sizes, for example, and also support\n  for labels.</para></td></tr><tr id="tables-table_model-581-row-004"><td id="tables-table_model-581-entry-007" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-011"><api-link id="tables-table_model-581-api-link-004" data-member="" data-text="IRow" data-type="yfiles.graph.IRow"></api-link></para></td><td id="tables-table_model-581-entry-008" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-012">Models a row in a table model.\n  Note that <span class="api">IStripe</span> is the super interface.</para></td></tr><tr id="tables-table_model-581-row-005"><td id="tables-table_model-581-entry-009" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-013"><api-link id="tables-table_model-581-api-link-005" data-member="" data-text="IColumn" data-type="yfiles.graph.IColumn"></api-link></para></td><td id="tables-table_model-581-entry-010" align="left" valign="top"><para class="dguide-para" id="tables-table_model-581-simpara-014">Models a column in a table model.\n  Note that <span class="api">IStripe</span> is the super interface.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-015",content:'The <span class="api">ITable</span> implementation provides the virtual roots of the row and column hierarchies\nof a table model.\nThese allow to add top-level rows and columns, to which in turn child rows and child\ncolumns can be added to.'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-016",content:"The area that belongs to a row (column) is determined by its height (width) as well\nas by its position with respect to the order of rows (columns).\nA row (column) spans all columns (rows) of the table structure, i.e., its width\n(height) is the accumulated width (height) of all columns (rows)."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-017",content:"While the width of a row (height of a column) is determined implicitly, its height (width) can be set.\nThis size, however, is restricted by the row’s (column’s) minimum size.\nIn other words, a row (column) cannot be made smaller than its minimum size."},{tagname:"para",content:'<dl id="tables-table_model-581-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-table_model-581-term-001"><api-link id="tables-table_model-581-api-link-006" data-member="setSize(yfiles.graph.IStripe,number)" data-text="setSize(stripe:&#xA0;IStripe, size:&#xA0;number):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-table_model-581-listitem-001">\n<p id="tables-table_model-581-simpara-018">Sets the preferred size for a given <span class="api">IStripe</span>, i.e., the height of a row or the width\nof a column.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-019",content:"Also, if the row (column) contains any nested child rows (columns), setting the\nsize does not take effect, since it is implicitly constrained to the accumulated\nsizes of the nested rows (columns)."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-020",content:'For the same reason the actual bounds, or layout, of a row (column) also cannot be set explicitly.\nInstead, they are determined as a result of the table structure, which means they\nare calculated anew through the row’s (column’s) <api-link id="tables-table_model-581-api-link-007" data-member="layout" data-text="layout" data-type="yfiles.graph.IStripe"></api-link>\nproperty whenever necessary.'},{tagname:"figure","class":"image",title:"Insets in a table structure",id:"fig_tables-insets","float":0,children:[{tagname:"img",src:"assets/table_insets.30dff8f3.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-021",content:"From a geometric point of view, a table consists of its content area, which is determined\nby the geometry of its rows and columns, and the surrounding border area.\nThe border area is determined by the table insets, and may be used to display a\ntable description, for example."},{tagname:"para",content:'<dl id="tables-table_model-581-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="tables-table_model-581-term-002"><api-link id="tables-table_model-581-api-link-008" data-member="insets" data-text="insets" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-table_model-581-listitem-002">\n<p id="tables-table_model-581-simpara-022">Sets the table’s insets.\nThe insets define a border around the rows and columns of a table structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-023",content:"Similarly, rows and columns also have a content area and a border area.\nThe content area contains the content nodes of the row (column), respectively the\ncontent area of nested rows (columns)."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-024",content:"The border area which is determined by corresponding row (column) insets, however,\ndenotes both extra space outside of a row’s (column’s) content area as well as some\npadding inside the content area."},{tagname:"para",content:'<dl id="tables-table_model-581-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="tables-table_model-581-term-003"><api-link id="tables-table_model-581-api-link-009" data-member="setStripeInsets(yfiles.graph.IStripe,yfiles.geometry.Insets)" data-text="setStripeInsets(stripe:&#xA0;IStripe, insets:&#xA0;Insets):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-table_model-581-listitem-003">\n<p id="tables-table_model-581-simpara-025">Sets insets for a given <span class="api">IStripe</span>, i.e., a row or column.\nThe insets denote extra space to the left and right of a row’s content area, respectively\nat the top and bottom of a column’s content area.</p>\n<p id="tables-table_model-581-simpara-026">The top and bottom values (row) as well as the left and right values (column) denote\npadding space at the inside of the content area.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-027",content:"In a parent row (column), i.e., a row (column) with nested child rows (columns),\nthe content area of the child rows (columns) lies completely within the content\narea of the parent row (column)."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-028",content:"The border area of the parent row (column) is to the left and right of its nested\nchild rows (at the top and bottom of its nested child columns)."},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-029",content:"The actual insets and the actual size of a parent row (column) where nested child\nrows (columns) affect the parent row’s (column’s) preferred insets and size can\nbe queried using the following methods:"},{tagname:"para",content:'<dl id="tables-table_model-581-variablelist-004" class="techn_templ" role="techn_templ">\n<dt id="tables-table_model-581-term-004"><api-link id="tables-table_model-581-api-link-010" data-member="actualInsets" data-text="actualInsets:&#xA0;Insets" data-type="yfiles.graph.IStripe"></api-link></dt><dt id="tables-table_model-581-term-005"><api-link id="tables-table_model-581-api-link-011" data-member="actualSize" data-text="actualSize:&#xA0;number" data-type="yfiles.graph.IStripe"></api-link></dt><dd id="tables-table_model-581-listitem-004">\n<p id="tables-table_model-581-simpara-030">Convenience (read only) properties for interface <span class="api">IStripe</span> to get the actual insets\nand the actual size of a row or column.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-table_model-581-simpara-031",content:'Unless explicitly set, insets for new rows and columns are adopted from the default\nvalues as specified by the\n<api-link id="tables-table_model-581-api-link-012" data-member="rowDefaults" data-text="rowDefaults" data-type="yfiles.graph.ITable"></api-link>/<api-link id="tables-table_model-581-api-link-013" data-member="columnDefaults" data-text="columnDefaults" data-type="yfiles.graph.ITable"></api-link>\nprovided by the <span class="api">ITable</span> instance:'},{tagname:"para",content:'<dl id="tables-table_model-581-variablelist-005" class="techn_templ" role="techn_templ">\n<dt id="tables-table_model-581-term-006"><api-link id="tables-table_model-581-api-link-014" data-member="rowDefaults" data-text="rowDefaults" data-type="yfiles.graph.ITable"></api-link></dt><dt id="tables-table_model-581-term-007"><api-link id="tables-table_model-581-api-link-015" data-member="columnDefaults" data-text="columnDefaults" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-table_model-581-listitem-005">\n<p id="tables-table_model-581-simpara-032">Properties to manage the <api-link id="tables-table_model-581-api-link-016" data-member="" data-text="IStripeDefaults" data-type="yfiles.graph.IStripeDefaults"></api-link>\ninstances that hold default values for the rows and columns of a table structure.\nAmong other things, the default values also include the default insets that are\nused for newly created rows and columns.</p>\n</dd>\n</dl>'},{tagname:"section",id:"tables-working_with_the_table_model",title:"Working with the Table Model",children:[{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-001",content:'Creating a table model that uses the default <span class="api">ITable</span> implementation class <api-link id="tables-working_with_the_table_model-582-api-link-001" data-member="" data-text="Table" data-type="yfiles.graph.Table"></api-link>\ngoes as follows:'},{tagname:"example",id:"ex_tables-creating_a_table_model",title:"Creating a table model",content:'<pre class="programlisting javascript" id="tables-working_with_the_table_model-582-programlisting-001" language="javascript" format="linespecific"><code>// Creating a new table model using the default ITable implementation.\r\nconst table = new yfiles.graph.Table()\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-002",content:"To actually get a table model rendered, it needs yet two other things: a group node,\nto which the table model needs to be bound to, and an appropriate node style implementation\nthat can handle table models and that is set as the group node’s style."},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-003",content:'Binding the table model to a group node means making the table model available in\nthe group node’s look-up, so that it can be queried using the <a href="#/dguide/customizing_concepts_lookup">look-up mechanism</a>:'},{tagname:"para",content:'<pre class="programlisting javascript" id="tables-working_with_the_table_model-582-programlisting-002" language="javascript" format="linespecific"><code>const table = groupNode.lookup(yfiles.graph.ITable.$class)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-004",content:'This is important for properly handling <a href="#/dguide/tables-user_interaction">user interaction with a table structure</a>,\nfor example.'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-005",content:'Using class <api-link id="tables-working_with_the_table_model-582-api-link-002" data-member="" data-text="TableNodeStyle" data-type="yfiles.styles.TableNodeStyle"></api-link>,\nthe <a href="#/dguide/tables-visual_representation">predefined node style which support tables</a>,\nas the node style for a group node conveniently binds a table model\nto the group node as a side effect:'},{tagname:"example",id:"ex_tables-associate_table_with_node",title:"Associating a table model with a group node",content:'<pre class="programlisting javascript" id="tables-working_with_the_table_model-582-programlisting-003" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst table = getMyTable()\r\n\r\nconst tableStyle = new yfiles.styles.TableNodeStyle(table)\r\n\r\n// Create a top-level group node and bind, via the TableNodeStyle, the table to\r\n// it.\r\ngraph.createGroupNode(null, table.layout.toRect(), tableStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-006",content:'Upon initialization, a <span class="api">Table</span> instance holds an\nempty model that has no rows or columns. Rows and columns can be created using\nthe following <span class="api">Table</span> methods:'},{tagname:"para",content:'<dl id="tables-working_with_the_table_model-582-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-working_with_the_table_model-582-term-001"><api-link id="tables-working_with_the_table_model-582-api-link-003" data-member="createChildRow(yfiles.graph.IRow,number,number,yfiles.geometry.Insets,yfiles.styles.IStripeStyle,Object,number)" data-text="createChildRow(owner:&#xA0;IRow, height:&#xA0;number, minHeight:&#xA0;number, insets:&#xA0;Insets, style:&#xA0;IStripeStyle, tag:&#xA0;Object, index:&#xA0;number):&#xA0;IRow" data-type="yfiles.graph.ITable"></api-link></dt><dt id="tables-working_with_the_table_model-582-term-002"><api-link id="tables-working_with_the_table_model-582-api-link-004" data-member="createChildColumn(yfiles.graph.IColumn,number,number,yfiles.geometry.Insets,yfiles.styles.IStripeStyle,Object,number)" data-text="createChildColumn(owner:&#xA0;IColumn, width:&#xA0;number, minWidth:&#xA0;number, insets:&#xA0;Insets, style:&#xA0;IStripeStyle, tag:&#xA0;Object, index:&#xA0;number):&#xA0;IColumn" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-working_with_the_table_model-582-listitem-001">\n<p id="tables-working_with_the_table_model-582-simpara-007">Creates a new row (column) as a child of the given <span class="api">IRow</span> (<span class="api">IColumn</span>).</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-008",content:'<a href="#/dguide/ex_tables-adding_rows_and_columns">Adding rows and columns</a> illustrates a simple tabular presentation with\ntwo rows and columns together with its setup in code.'},{tagname:"example",id:"ex_tables-adding_rows_and_columns",title:"Adding rows and columns",content:'<figure class="image" title="A minimalistic table with 2 rows and columns" id="tables-working_with_the_table_model-582-figure-001" float="0"><img src="assets/table_sample_2x2.82d6f668.png" alt="A 2x2 table"><title><para class="dguide-para"></para></title></figure><pre class="programlisting javascript" id="tables-working_with_the_table_model-582-programlisting-004" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\n// Create a new table model and set insets on the table so that the rows and\r\n// columns stand out.\r\nconst table = new yfiles.graph.Table()\r\ntable.insets = new yfiles.geometry.Insets(10, 10, 10, 10)\r\n\r\nconst rowStyle = new yfiles.styles.ShapeNodeStyle({ fill: yfiles.view.Fill.TRANSPARENT })\r\ntable.rowDefaults.style = new yfiles.styles.NodeStyleStripeStyleAdapter(rowStyle)\r\nconst columnStyle = new yfiles.styles.ShapeNodeStyle({\r\n  fill: new yfiles.view.SolidColorFill(new yfiles.view.Color(139, 162, 220))\r\n})\r\ntable.columnDefaults.style = new yfiles.styles.NodeStyleStripeStyleAdapter(columnStyle)\r\n// Using no insets prevents column/row headers.\r\nconst insets = new yfiles.geometry.Insets(0)\r\ntable.columnDefaults.insets = insets\r\ntable.rowDefaults.insets = insets\r\ntable.columnDefaults.size = 30\r\ntable.rowDefaults.size = 30\r\n\r\n// Add top-level rows and columns. The table\'s size is then 2x2.\r\ntable.createRow()\r\ntable.createRow()\r\ntable.createColumn()\r\ntable.createColumn()\r\n\r\n// Using TableNodeStyle to render the table structure.\r\nconst tableStyle = new yfiles.styles.TableNodeStyle(table)\r\nconst backgroundStyle = new yfiles.styles.ShapeNodeStyle({\r\n  fill: new yfiles.view.SolidColorFill(new yfiles.view.Color(248, 236, 201))\r\n})\r\ntableStyle.backgroundStyle = backgroundStyle\r\n\r\n// Create a top-level group node and bind, via the TableNodeStyle, the table to\r\n// it.\r\ngraph.createGroupNode(null, table.layout.toRect(), tableStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-009",content:'Rows and columns can be deleted using the following method defined by the\n<span class="api">ITable</span> interface:'},{tagname:"para",content:'<dl id="tables-working_with_the_table_model-582-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="tables-working_with_the_table_model-582-term-003"><api-link id="tables-working_with_the_table_model-582-api-link-005" data-member="remove(yfiles.graph.IStripe)" data-text="remove(stripe:&#xA0;IStripe):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-working_with_the_table_model-582-listitem-002">\n<p id="tables-working_with_the_table_model-582-simpara-010">Removes a given <span class="api">IStripe</span>, i.e., a row or column.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-working_with_the_table_model-582-simpara-011",content:"The following convenience methods support recursively deleting rows or columns and\nenable resizing of the remaining rows or columns:"},{tagname:"para",content:'<dl id="tables-working_with_the_table_model-582-variablelist-003" class="techn_templ" role="techn_templ">\n<dt id="tables-working_with_the_table_model-582-term-004"><api-link id="tables-working_with_the_table_model-582-api-link-006" data-member="removeWithResize(yfiles.graph.IStripe)" data-text="removeWithResize(stripe:&#xA0;IStripe):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dt id="tables-working_with_the_table_model-582-term-005"><api-link id="tables-working_with_the_table_model-582-api-link-007" data-member="removeRecursively(yfiles.graph.IStripe)" data-text="removeRecursively(stripe:&#xA0;IStripe):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dt id="tables-working_with_the_table_model-582-term-006"><api-link id="tables-working_with_the_table_model-582-api-link-008" data-member="removeRecursivelyWithResize(yfiles.graph.IStripe)" data-text="removeRecursivelyWithResize(stripe:&#xA0;IStripe):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-working_with_the_table_model-582-listitem-003">\n<p id="tables-working_with_the_table_model-582-simpara-012">Convenience (extension) methods for interface <span class="api">ITable</span> to remove rows or columns.</p>\n</dd>\n</dl>'},{tagname:"section",id:"tables-undo_support",title:"Undo/Redo Support",children:[{tagname:"para","class":"dguide-para",id:"tables-undo_support-583-simpara-001",content:'Support for Undo/Redo operations for the tables in a diagram can be easily enabled\nusing the functionality in class <span class="api">Table</span> which is the default\nimplementation of interface <span class="api">ITable</span>:'},{tagname:"para",content:'<dl id="tables-undo_support-583-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-undo_support-583-term-001"><api-link id="tables-undo_support-583-api-link-001" data-member="installStaticUndoSupport(yfiles.graph.IGraph)" data-text="installStaticUndoSupport(graph:&#xA0;IGraph):&#xA0;void" data-type="yfiles.graph.Table"></api-link></dt><dd id="tables-undo_support-583-listitem-001">\n<p id="tables-undo_support-583-simpara-002">Enables Undo/Redo support for tables. Installs the undo support instance which is valid\non the graph at the time this method is called.</p>\n</dd>\n<dt id="tables-undo_support-583-term-002"><api-link id="tables-undo_support-583-api-link-002" data-member="installDynamicUndoSupport(yfiles.graph.IGraph)" data-text="installDynamicUndoSupport(graph:&#xA0;IGraph):&#xA0;void" data-type="yfiles.graph.Table"></api-link></dt><dd id="tables-undo_support-583-listitem-002">\n<p id="tables-undo_support-583-simpara-003">Enables Undo/Redo support for tables. Registers the graph from which the undo support will be queried.</p>\n</dd>\n</dl>'},{tagname:"example",id:"ex_tables-enabling_undo_support",title:"Enabling support for Undo/Redo operations for tables",content:'<pre class="programlisting javascript" id="tables-undo_support-583-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\n\r\nif (graph != null) {\r\n  // Enabling general undo support.\r\n  graph.undoEngineEnabled = true\r\n  // Using the undo support from the graph also for all future table instances.\r\n  yfiles.graph.Table.installStaticUndoSupport(graph)\r\n}\n</code></pre>'}]}]}]},{tagname:"section",id:"tables-visual_representation",title:"Visual Representation",children:[{
tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-001",content:'A table model’s visual representation is provided by a special node style implementation\nthat can handle table models, class <api-link id="tables-visual_representation-584-api-link-001" data-member="" data-text="TableNodeStyle" data-type="yfiles.styles.TableNodeStyle"></api-link>.'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-002",content:'Class <api-link id="tables-visual_representation-584-api-link-002" data-member="" data-text="TableNodeStyle" data-type="yfiles.styles.TableNodeStyle"></api-link> can be set as the style for a group node as follows:'},{tagname:"example",id:"tables-setting_tablenodestyle",title:"Setting a table node style with a group node",content:'<pre class="programlisting javascript" id="tables-visual_representation-584-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst table = getMyTable()\r\n\r\nconst tableStyle = new yfiles.styles.TableNodeStyle(table)\r\n\r\n// Create a top-level group node and bind, via the TableNodeStyle, the table to\r\n// it.\r\ngraph.createGroupNode(null, table.layout().toRect(), tableStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-003",content:'The <span class="api">ITable</span> instance that is set with the\n<span class="api">TableNodeStyle</span> instance defines the style’s table model.\nWhen the <span class="api">TableNodeStyle</span> instance is set\nas the style of a group node, this table model is used to render a table\nstructure that has the group node’s dimensions and location.'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-004",content:'As a side effect of setting the\n<span class="api">TableNodeStyle</span> instance as the style for\na group node, the table model is also conveniently bound to the group node.\nThis means that it is made available in the group node’s look-up, so that it can\nbe queried using the <a href="#/dguide/customizing_concepts_lookup">look-up mechanism</a>:'},{tagname:"para",content:'<pre class="programlisting javascript" id="tables-visual_representation-584-programlisting-002" language="javascript" format="linespecific"><code>const table = groupNode.lookup(yfiles.graph.ITable.$class)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-005",content:'This is important for properly handling <a href="#/dguide/tables-user_interaction">user interaction with a table structure</a>,\nfor example.'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-006",content:'Note that because of its table model, class\n<span class="api">TableNodeStyle</span> does not support style\nsharing among multiple group nodes.'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-007",content:'<span class="api">TableNodeStyle</span> governs the overall\nrendering of a table structure. It uses a separate node style implementation to\nrender the background behind all rows and columns:'},{tagname:"para",content:'<dl id="tables-visual_representation-584-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-visual_representation-584-term-001"><api-link id="tables-visual_representation-584-api-link-003" data-member="backgroundStyle" data-text="backgroundStyle" data-type="yfiles.styles.TableNodeStyle"></api-link></dt><dd id="tables-visual_representation-584-listitem-001">\n<p id="tables-visual_representation-584-simpara-008">Sets the node style that is used to render the background behind all rows and columns\nof a table structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-009",content:'Additionally, class <api-link id="tables-visual_representation-584-api-link-004" data-member="" data-text="TableNodeStyle" data-type="yfiles.styles.TableNodeStyle"></api-link>\ndefines the following property to determine the rendering order of rows and columns:'},{tagname:"para",content:'<dl id="tables-visual_representation-584-variablelist-002" class="techn_templ" role="techn_templ">\n<dt id="tables-visual_representation-584-term-002"><api-link id="tables-visual_representation-584-api-link-005" data-member="tableRenderingOrder" data-text="tableRenderingOrder" data-type="yfiles.styles.TableNodeStyle"></api-link></dt><dd id="tables-visual_representation-584-listitem-002">\n<p id="tables-visual_representation-584-simpara-010">Sets the rendering order of the rows and column of a table structure.\nBy default, columns are rendered first, then rows.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para note",id:"tables-visual_representation-584-note-001",content:'<p id="tables-visual_representation-584-simpara-011">The rendering order also affects the fill colors for rows and columns.\nUsing the default rendering order, for example, neither column fill colors nor border\nlines can be seen for non-transparent row fill colors.</p>'},{tagname:"para","class":"dguide-para",id:"tables-visual_representation-584-simpara-012",content:'The rendering order is also taken into account for <a href="#/dguide/tables-hit_testing">hit-testing</a>.'},{tagname:"section",id:"tables-visualization_of_rows_and_columns",title:"Rows and Columns",children:[{tagname:"para","class":"dguide-para",id:"tables-visualization_of_rows_and_columns-585-simpara-001",content:'The visual representation of rows and columns of a table structure is conveniently\nprovided by <a href="#/dguide/tables-stripe_styles">implementations</a>.\nStripe styles can be associated with <span class="api">IStripe</span> instances either at creation time or\nusing the following method defined in interface <span class="api">ITable</span>:'},{tagname:"para",content:'<dl id="tables-visualization_of_rows_and_columns-585-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-visualization_of_rows_and_columns-585-term-001"><api-link id="tables-visualization_of_rows_and_columns-585-api-link-001" data-member="setStyle(yfiles.graph.IStripe,yfiles.styles.IStripeStyle)" data-text="setStyle(stripe:&#xA0;IStripe, style:&#xA0;IStripeStyle):&#xA0;void" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-visualization_of_rows_and_columns-585-listitem-001">\n<p id="tables-visualization_of_rows_and_columns-585-simpara-002">Sets the style for an <span class="api">IStripe</span> instance, i.e., the row or column of a table structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-visualization_of_rows_and_columns-585-simpara-003",content:'The <api-link id="tables-visualization_of_rows_and_columns-585-api-link-002" data-member="" data-text="TableNodeStyle" data-type="yfiles.styles.TableNodeStyle"></api-link> that is set with the group node,\ndelegates the rendering of rows and columns to these row and column styles.'},{tagname:"section",id:"tables-stripe_styles",title:"Stripe Styles",children:[{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-001",content:'Stripe styles are responsible for the graphical rendering of rows and columns of a table.\nInterface <api-link id="tables-stripe_styles-586-api-link-001" data-member="" data-text="IStripeStyle" data-type="yfiles.styles.IStripeStyle"></api-link> is the common base type for actual implementations.'},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-002",content:'<a href="#/dguide/tab_tables-stripe_styles_predefined">Predefined stripe style implementations</a> lists the predefined stripe style\nimplementations present in package <api-link id="tables-stripe_styles-586-api-link-002" data-member="" data-text="yfiles.styles" data-type=""></api-link>.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tables-stripe_styles_predefined",rowsep:1,content:'<caption>Predefined stripe style implementations</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="tables-stripe_styles-586-thead-001"><tr id="tables-stripe_styles-586-row-001"><th id="tables-stripe_styles-586-entry-001" align="left" valign="top">\nType Name\n</th><th id="tables-stripe_styles-586-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tables-stripe_styles-586-tbody-001"><tr id="tables-stripe_styles-586-row-002"><td id="tables-stripe_styles-586-entry-003" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-003"><api-link id="tables-stripe_styles-586-api-link-003" data-member="" data-text="NodeStyleStripeStyleAdapter" data-type="yfiles.styles.NodeStyleStripeStyleAdapter"></api-link></para></td><td id="tables-stripe_styles-586-entry-004" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-004">Allows using a node style for the visual representation of a column or row.</para></td></tr><tr id="tables-stripe_styles-586-row-003"><td id="tables-stripe_styles-586-entry-005" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-005"><api-link id="tables-stripe_styles-586-api-link-004" data-member="" data-text="StripeStyleBase" data-type="yfiles.styles.StripeStyleBase"></api-link></para></td><td id="tables-stripe_styles-586-entry-006" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-006">Greatly simplifies stripe style customization using subclassing.</para></td></tr><tr id="tables-stripe_styles-586-row-004"><td id="tables-stripe_styles-586-entry-007" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-007"><api-link id="tables-stripe_styles-586-api-link-005" data-member="" data-text="TemplateStripeStyle" data-type="yfiles.styles.TemplateStripeStyle"></api-link></para></td><td id="tables-stripe_styles-586-entry-008" align="left" valign="top"><para class="dguide-para" id="tables-stripe_styles-586-simpara-008">Enables using template styles for the visual representation of a stripe.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-009",content:'The following figures show custom <span class="api">IStripeStyle</span> implementations that provide specialized\nrendering for rows and columns of table structures:'},{tagname:"figure","class":"image",title:"Custom row/column rendering",id:"fig_tables-stripe_styles_custom","float":0,children:[{tagname:"img",src:"assets/table_styles_nonalternating.491f1d29.png",alt:"",title:'<para class="dguide-para"></para>'},{tagname:"img",src:"assets/table_styles_alternating.7e5bec03.png",alt:"",title:'<para class="dguide-para"></para>'}]},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-010",content:'Rows and columns of a table structure can have labels whose position is determined by label models.\nThe following method defined in <span class="api">ITable</span> can be\nused to add labels to <span class="api">IStripe</span> instances:'},{tagname:"para",content:'<dl id="tables-stripe_styles-586-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-stripe_styles-586-term-001"><api-link id="tables-stripe_styles-586-api-link-006" data-member="addLabel(yfiles.graph.IStripe,string,yfiles.graph.ILabelModelParameter,yfiles.styles.ILabelStyle,yfiles.geometry.Size,Object)" data-text="addLabel(owner:&#xA0;IStripe, text:&#xA0;string, layoutParameter:&#xA0;ILabelModelParameter, style:&#xA0;ILabelStyle, preferredSize:&#xA0;Size, tag:&#xA0;Object):&#xA0;ILabel" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-stripe_styles-586-listitem-001">\n<p id="tables-stripe_styles-586-simpara-011">Adds a label to an <span class="api">IStripe</span> instance, i.e., to a row or column of a table structure.</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-012",content:'Class <api-link id="tables-stripe_styles-586-api-link-007" data-member="" data-text="StretchStripeLabelModel" data-type="yfiles.graph.StretchStripeLabelModel"></api-link>\nis specifically tailored to support positions for the labels of rows and columns in a table structure.\nIt is used as the default label model when adding labels to an <span class="api">IStripe</span>.'},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-013",content:"The following figure illustrates labels in a tabular presentation\nwith a single row and a single column together with their setup in code::"},{tagname:"example",id:"ex_tables-row_and_column_labels",title:"Row and column labels",content:'<figure class="image" title="Row and column labels at both ends of row and column, respectively" id="tables-stripe_styles-586-figure-002" float="0"><img src="assets/table_labels.ec5e55a2.png" alt="Row and column labels"><title><para class="dguide-para"></para></title></figure><pre class="programlisting javascript" id="tables-stripe_styles-586-programlisting-001" language="javascript" format="linespecific"><code>const graph = getMyGraph()\r\nconst table = getMyTable()\r\n\r\n// Setup of row and column default insets.\r\ntable.rowDefaults.insets = new yfiles.geometry.Insets(30, 5, 30, 5)\r\ntable.columnDefaults.insets = new yfiles.geometry.Insets(5, 30, 5, 30)\r\n\r\n// Create a single column.\r\nconst column = table.createColumn(100)\r\n// Add and configure two labels for the column.\r\ntable.addLabel(column, \'Column North\')\r\ntable.addLabel(column, \'Column South\', yfiles.graph.StretchStripeLabelModel.SOUTH)\r\n\r\n// Create a single row.\r\nconst row = table.createRow(100)\r\n// Add and configure two labels for the row.\r\ntable.addLabel(row, \'Row West\')\r\ntable.addLabel(row, \'Row East\', yfiles.graph.StretchStripeLabelModel.EAST)\r\n\r\n// Using TableNodeStyle to render the table structure.\r\nconst tableStyle = new yfiles.styles.TableNodeStyle(table)\r\nconst backgroundStyle = new yfiles.styles.ShapeNodeStyle({\r\n  fill: new yfiles.view.SolidColorFill(new yfiles.view.Color(248, 236, 201))\r\n})\r\ntableStyle.backgroundStyle = backgroundStyle\r\n\r\n// Create a top-level group node and bind, via the TableNodeStyle, the table to\r\n// it.\r\ngraph.createGroupNode(null, table.layout.toRect(), tableStyle)\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-stripe_styles-586-simpara-014",content:'Note that row labels that use <code><span class="api">WEST</span></code> are automatically\nrotated 90 degrees counterclockwise while row labels that use <code><span class="api">EAST</span></code>\nare rotated 90 degrees clockwise.'}]}]}]},{tagname:"section",id:"tables-user_interaction",title:"User Interaction",children:[{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-001",content:'Input mode class <api-link id="tables-user_interaction-587-api-link-001" data-member="" data-text="TableEditorInputMode" data-type="yfiles.input.TableEditorInputMode"></api-link>\nis a specialized controller that brings additional support for handling mouse gestures\nand keyboard interaction specific to the tabular representation of a diagram.'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-002",content:"The additional mouse gesture support covers, for example:"},{tagname:"para",content:'<ul id="tables-user_interaction-587-itemizedlist-001"><li id="tables-user_interaction-587-listitem-001"><p id="tables-user_interaction-587-simpara-003">Selecting rows and columns,</p></li><li id="tables-user_interaction-587-listitem-002"><p id="tables-user_interaction-587-simpara-004">resizing them, and</p></li><li id="tables-user_interaction-587-listitem-003"><p id="tables-user_interaction-587-simpara-005">changing their position in the order of rows (columns).</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-006",content:'<span class="api">TableEditorInputMode</span> can be used in\nconjunction with <a href="#/dguide/interaction-geim">GraphEditorInputMode }</a>\nas shown in the following code snippet, or can be used on its own.'},{tagname:"example",id:"ex_tables-enabling_tableeditorinputmode",title:"Enabling TableEditorInputMode to handle mouse gestures",content:'<pre class="programlisting javascript" id="tables-user_interaction-587-programlisting-001" language="javascript" format="linespecific"><code>const geim = getMyGraphEditorInputMode()\r\n\r\ngeim.add(new yfiles.input.TableEditorInputMode())\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-007",content:'Upon initialization, <span class="api">TableEditorInputMode</span> creates and installs the input modes listed\nin the following table as concurrent input modes.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tables-tableeditorinputmode_sub_modes",rowsep:1,content:'<caption>Input modes used by TableEditorInputMode</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="tables-user_interaction-587-thead-001"><tr id="tables-user_interaction-587-row-001"><th id="tables-user_interaction-587-entry-001" align="left" valign="top">\nType Name\n</th><th id="tables-user_interaction-587-entry-002" align="left" valign="top">\nDescription\n</th></tr></thead><tbody id="tables-user_interaction-587-tbody-001"><tr id="tables-user_interaction-587-row-002"><td id="tables-user_interaction-587-entry-003" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-008"><api-link id="tables-user_interaction-587-api-link-002" data-member="" data-text="ResizeStripeInputMode" data-type="yfiles.input.ResizeStripeInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-004" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-009">Handles resizing of rows and columns.</para></td></tr><tr id="tables-user_interaction-587-row-003"><td id="tables-user_interaction-587-entry-005" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-010"><api-link id="tables-user_interaction-587-api-link-003" data-member="" data-text="ReparentStripeInputMode" data-type="yfiles.input.ReparentStripeInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-006" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-011">Recognizes and handles row (column) re-parenting/reordering mouse gestures</para></td></tr><tr id="tables-user_interaction-587-row-004"><td id="tables-user_interaction-587-entry-007" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-012"><api-link id="tables-user_interaction-587-api-link-004" data-member="" data-text="ClickInputMode" data-type="yfiles.input.ClickInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-008" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-013">Recognizes mouse clicks, including double clicks. This child input mode is disabled if\n  <span class="api">TableEditorInputMode</span> is used as a\n  child input mode of <span class="api">GraphEditorInputMode</span>.</para></td></tr><tr id="tables-user_interaction-587-row-005"><td id="tables-user_interaction-587-entry-009" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-014"><api-link id="tables-user_interaction-587-api-link-005" data-member="" data-text="KeyboardInputMode" data-type="yfiles.input.KeyboardInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-010" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-015">Recognizes key events.</para></td></tr><tr id="tables-user_interaction-587-row-006"><td id="tables-user_interaction-587-entry-011" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-016"><api-link id="tables-user_interaction-587-api-link-006" data-member="" data-text="StripeDropInputMode" data-type="yfiles.input.StripeDropInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-012" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-017">Handles drag’n’drop operations of nodes onto the canvas.\n  Facilitates convenient creation of new rows and columns, including visual feedback for a user.\n  This child input mode is disabled if <span class="api">TableEditorInputMode</span> is used as a\n  child input mode of <span class="api">GraphEditorInputMode</span>.</para></td></tr><tr id="tables-user_interaction-587-row-007"><td id="tables-user_interaction-587-entry-013" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-018"><api-link id="tables-user_interaction-587-api-link-007" data-member="" data-text="TextEditorInputMode" data-type="yfiles.input.TextEditorInputMode"></api-link></para></td><td id="tables-user_interaction-587-entry-014" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction-587-simpara-019">Handles label editing. This child input mode is disabled if\n  <span class="api">TableEditorInputMode</span> is used as a\n  child input mode of <span class="api">GraphEditorInputMode</span>.</para></td></tr></tbody>'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-020",content:'If used in conjunction with\n<span class="api">GraphEditorInputMode</span>, the\n<span class="api">ClickInputMode</span>,\n<span class="api">KeyboardInputMode</span>, and\n<span class="api">TextEditorInputMode</span> child input modes\nof <span class="api">TableEditorInputMode</span> are disabled\nand the respective <span class="api">GraphEditorInputMode</span>\ncounterparts are enabled.'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-021",content:'Each of the input modes can be obtained or replaced using a like-named property\ndefined by <span class="api">TableEditorInputMode</span>.'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction-587-simpara-022",content:'In order for <span class="api">TableEditorInputMode</span> and\nits child input modes to properly recognize the connection between a table\nstructure/table model and its group node, they rely on the table model being\nbound to the group node.\nThe input modes query the group node’s look-up and expect to find a table model:'},{tagname:"para",content:'<pre class="programlisting javascript" id="tables-user_interaction-587-programlisting-002" language="javascript" format="linespecific"><code>const table = groupNode.lookup(yfiles.graph.ITable.$class)\n</code></pre>'},{tagname:"section",id:"tables-user_interaction_customization",title:"Interaction Customization",children:[{tagname:"para","class":"dguide-para",id:"tables-user_interaction_customization-588-simpara-001",content:'Class <span class="api">TableEditorInputMode</span> provides\nproperties and callbacks that allow for fine-grained\ncontrol over the support for user interaction.'},{tagname:"para","class":"dguide-para",id:"tables-user_interaction_customization-588-simpara-002",content:'<a href="#/dguide/tab_tables-user_interaction_customization">TableEditorInputMode customization</a> lists the customization\nproperties of class <span class="api">TableEditorInputMode</span>.\nMost of the properties support that combinations of stripe types can be specified\nusing the constants defined in the <api-link id="tables-user_interaction_customization-588-api-link-001" data-member="" data-text="StripeTypes" data-type="yfiles.graph.StripeTypes"></api-link>\nenumeration type.'},{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_tables-user_interaction_customization",rowsep:1,content:'<caption>TableEditorInputMode customization</caption><colgroup><col style="width:33%;"><col style="width:67%;"></colgroup><thead id="tables-user_interaction_customization-588-thead-001"><tr id="tables-user_interaction_customization-588-row-001"><th id="tables-user_interaction_customization-588-entry-001" align="left" valign="top">\nName\n</th><th id="tables-user_interaction_customization-588-entry-002" align="left" valign="top">\nPurpose\n</th></tr></thead><tbody id="tables-user_interaction_customization-588-tbody-001"><tr id="tables-user_interaction_customization-588-row-002"><td id="tables-user_interaction_customization-588-entry-003" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-003"><api-link id="tables-user_interaction_customization-588-api-link-002" data-member="clickSelectableItems" data-text="clickSelectableItems" data-type="yfiles.input.TableEditorInputMode"></api-link></para></td><td id="tables-user_interaction_customization-588-entry-004" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-004">A combination of <api-link id="tables-user_interaction_customization-588-api-link-003" data-member="" data-text="StripeTypes" data-type="yfiles.graph.StripeTypes"></api-link> that specifies whether rows and/or columns\n  can be selected by mouse clicks.</para></td></tr><tr id="tables-user_interaction_customization-588-row-003"><td id="tables-user_interaction_customization-588-entry-005" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-005"><api-link id="tables-user_interaction_customization-588-api-link-004" data-member="selectableItems" data-text="selectableItems" data-type="yfiles.input.TableEditorInputMode"></api-link></para></td><td id="tables-user_interaction_customization-588-entry-006" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-006">A combination of <api-link id="tables-user_interaction_customization-588-api-link-005" data-member="" data-text="StripeTypes" data-type="yfiles.graph.StripeTypes"></api-link> that specifies whether rows and/or columns can be selected.</para></td></tr><tr id="tables-user_interaction_customization-588-row-004"><td id="tables-user_interaction_customization-588-entry-007" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-007"><api-link id="tables-user_interaction_customization-588-api-link-006" data-member="labelEditableItems" data-text="labelEditableItems" data-type="yfiles.input.TableEditorInputMode"></api-link></para></td><td id="tables-user_interaction_customization-588-entry-008" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-008">A combination of <api-link id="tables-user_interaction_customization-588-api-link-007" data-member="" data-text="StripeTypes" data-type="yfiles.graph.StripeTypes"></api-link> that specifies whether labels of rows\n  and/or columns can be edited.</para></td></tr><tr id="tables-user_interaction_customization-588-row-005"><td id="tables-user_interaction_customization-588-entry-009" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-009"><api-link id="tables-user_interaction_customization-588-api-link-008" data-member="deletableItems" data-text="deletableItems" data-type="yfiles.input.TableEditorInputMode"></api-link></para></td><td id="tables-user_interaction_customization-588-entry-010" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-010">A combination of <api-link id="tables-user_interaction_customization-588-api-link-009" data-member="" data-text="StripeTypes" data-type="yfiles.graph.StripeTypes"></api-link> that specifies whether rows and/or columns can be deleted.</para></td></tr><tr id="tables-user_interaction_customization-588-row-006"><td id="tables-user_interaction_customization-588-entry-011" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-011"><api-link id="tables-user_interaction_customization-588-api-link-010" data-member="clickSelectableRegions" data-text="clickSelectableRegions" data-type="yfiles.input.TableEditorInputMode"></api-link></para></td><td id="tables-user_interaction_customization-588-entry-012" align="left" valign="top"><para class="dguide-para" id="tables-user_interaction_customization-588-simpara-012">A combination of <api-link id="tables-user_interaction_customization-588-api-link-011" data-member="" data-text="StripeSubregionTypes" data-type="yfiles.input.StripeSubregionTypes"></api-link>\n  that specifies the set of sub regions of rows and columns that can be selected by mouse clicks.</para></td></tr></tbody>'}]},{tagname:"section",id:"tables-hit_testing",title:"Hit-testing",children:[{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-001",content:'Hit-testing support in a table structure takes into account the overall rendering\norder of rows and columns (as defined by class <span class="api">TableNodeStyle</span>)\nas well as the complexities introduced by nested rows and columns.'},{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-002",content:'By default, the specific needs for hit-testing support in a table structure are\nprovided by the <api-link id="tables-hit_testing-589-api-link-001" data-member="" data-text="StripeHitTester" data-type="yfiles.input.StripeHitTester"></api-link> class.\nThe actual instance that is used is also available in the group node’s look-up.'},{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-003",content:'The following convenience methods in <span class="api">TableEditorInputMode</span> help in finding\nwhich part(s) of a table structure is (are) underneath a given location.\nThe <api-link id="tables-hit_testing-589-api-link-002" data-member="" data-text="StripeSubregion" data-type="yfiles.input.StripeSubregion"></api-link>\nclass encodes both the stripe, i.e., row or column, and the actual sub region within the stripe.'},{tagname:"para",content:'<dl id="tables-hit_testing-589-variablelist-001" class="techn_templ" role="techn_templ">\n<dt id="tables-hit_testing-589-term-001"><api-link id="tables-hit_testing-589-api-link-003" data-member="findStripe(yfiles.geometry.Point,yfiles.graph.StripeTypes,yfiles.input.StripeSubregionTypes,yfiles.view.CanvasComponent,system.Predicate)" data-text="findStripe" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-hit_testing-589-listitem-001">\n<p id="tables-hit_testing-589-simpara-004">Depending on the rendering order of rows and columns, returns the sub region of either\na row or a column that is underneath the given location.</p>\n</dd>\n<dt id="tables-hit_testing-589-term-002"><api-link id="tables-hit_testing-589-api-link-004" data-member="findStripes" data-text="findStripes" data-type="yfiles.graph.ITable"></api-link></dt><dd id="tables-hit_testing-589-listitem-002">\n<p id="tables-hit_testing-589-simpara-005">Returns an ordered list of sub regions of (nested) rows and columns that are underneath the given location.\nThe ordering takes into account the rendering order of rows and columns and also the nesting of child rows (columns).</p>\n</dd>\n</dl>'},{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-006",content:'The <api-link id="tables-hit_testing-589-api-link-005" data-member="" data-text="StripeSubregionTypes" data-type="yfiles.input.StripeSubregionTypes"></api-link> enumeration\ndefines constants for the different sub regions within a stripe.\nThe figure below depicts the default definitions of these\nsub regions together with their corresponding constants for the column of the table\nstructure in <a href="#/dguide/ex_tables-row_and_column_labels">Row and column labels</a>.'},{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-007",content:"The stripe sub regions for a row are defined analogously."},{tagname:"figure","class":"image",title:"Stripe sub regions in a column",id:"fig_tables-stripe_subregions","float":0,children:[{tagname:"img",src:"assets/table_subregions_stripe_column.852bb5e9.png",alt:"",title:'<para class="dguide-para">The column’s <api-link id="tables-hit_testing-589-api-link-006" data-member="STRIPE" data-text="STRIPE" data-type="yfiles.input.StripeSubregionTypes"></api-link> sub region,</para>'},{tagname:"img",src:"assets/table_subregions_header_column.810fdc4c.png",alt:"",title:'<para class="dguide-para"><api-link id="tables-hit_testing-589-api-link-007" data-member="HEADER" data-text="HEADER" data-type="yfiles.input.StripeSubregionTypes"></api-link> sub region,</para>'},{tagname:"img",src:"assets/table_subregions_leadingheader_column.609a8ae7.png",alt:"",title:'<para class="dguide-para"><api-link id="tables-hit_testing-589-api-link-008" data-member="LEADING_HEADER" data-text="LEADING_HEADER" data-type="yfiles.input.StripeSubregionTypes"></api-link> sub region,</para>'},{tagname:"img",src:"assets/table_subregions_trailingheader_column.5fd405ae.png",alt:"",title:'<para class="dguide-para"><api-link id="tables-hit_testing-589-api-link-009" data-member="TRAILING_HEADER" data-text="TRAILING_HEADER" data-type="yfiles.input.StripeSubregionTypes"></api-link> sub region.</para>'}]},{tagname:"para","class":"dguide-para",id:"tables-hit_testing-589-simpara-008",content:'The hit-testing for the sub regions can be handled through dedicated <api-link id="tables-hit_testing-589-api-link-010" data-member="" data-text="IHitTestable" data-type="yfiles.input.IHitTestable"></api-link>\nimplementations.\nThe <api-link id="tables-hit_testing-589-api-link-011" data-member="" data-text="IStripeHitTestHelper" data-type="yfiles.input.IStripeHitTestHelper"></api-link> interface\nbundles all stripe-related <span class="api">IHitTestable</span>\ninstances and makes the default implementations conveniently accessible.'}]},{tagname:"section",id:"_tutorial_demo_code_5",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"_tutorial_demo_code_5-590-simpara-001",content:'The <a href="..\\..\\demos\\complete\\tableeditor\\index.html" target="blank" class="demo-link" title="Shows the support for diagrams that are organized in a tabular way, for example in a grid or a swimlane layout.">Table Editor</a> demo\ndemonstrates user interaction and shows how to customize it.\nThe demo also presents a way to create new rows and columns via drag’n’drop gestures.'}]}]},{tagname:"section",id:"tables-layout",title:"Automatic Layout",children:[{tagname:"para","class":"dguide-para",id:"tables-layout-591-simpara-001",content:'Automatic layout for a diagram containing table structures that are modeled using\n<span class="api">ITable</span> implementations can be conveniently invoked using\n<api-link id="tables-layout-591-api-link-001" data-member="" data-text="LayoutExecutor" data-type="yfiles.layout.LayoutExecutor"></api-link>\nwhich performs all necessary setup.\nInternally, <span class="api">LayoutExecutor</span> uses the <api-link id="tables-layout-591-api-link-002" data-member="" data-text="TableLayoutConfigurator" data-type="yfiles.layout.TableLayoutConfigurator"></api-link> class.'},{tagname:"example",id:"ex_layout_tabular_data",title:"Using LayoutExecutor for automatic layout of table structures",content:'<pre class="programlisting javascript" id="tables-layout-591-programlisting-001" language="javascript" format="linespecific"><code>const graphComponent = getMyGraphComponent()\r\n\r\n// Configure HierarchicLayout.\r\nconst hl = new yfiles.hierarchic.HierarchicLayout()\r\nhl.componentLayoutEnabled = false\r\nhl.layoutOrientation = yfiles.layout.LayoutOrientation.LEFT_TO_RIGHT\r\nhl.orthogonalRouting = true\r\nhl.recursiveGroupLayering = false\r\nhl.nodePlacer.baryCenterMode = true\r\n\r\n// Start layout.\r\ntry {\r\n  const layoutExecutor = new yfiles.layout.LayoutExecutor(graphComponent, hl)\r\n  layoutExecutor.duration = new yfiles.lang.TimeSpan(500)\r\n  layoutExecutor.updateContentRect = true\r\n  layoutExecutor.tableLayoutConfigurator.compaction = false\r\n  layoutExecutor.start()\r\n} catch (e) {\r\n  console.log(\'Layout failed\')\r\n}\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"tables-layout-591-simpara-002",content:'<span class="api">TableLayoutConfigurator</span> converts relevant parts\nof the table structure into <span class="api">PartitionGrid</span>-based\ninformation that is understood by\n<a href="#/dguide/layout-table_layout_list">algorithms which support automatic tabular layout</a>.\nIn particular, this information includes:'},{tagname:"para",content:'<ul id="tables-layout-591-itemizedlist-001"><li id="tables-layout-591-listitem-001"><p id="tables-layout-591-simpara-003">the geometric information of all rows and columns, i.e., the top and bottom borders,\nleft and right borders, and insets, and also the</p></li><li id="tables-layout-591-listitem-002"><p id="tables-layout-591-simpara-004">row and column that each content node belongs to.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"tables-layout-591-simpara-005",content:"Note that the row and column is determined geometrically, by the node’s center coordinates."}]},{tagname:"section",id:"tables-tutorial",title:"Tutorial Demo Code",children:[{tagname:"para","class":"dguide-para",id:"tables-tutorial-592-simpara-001",content:'The following tutorial demo applications show how to create table models using\nthe <span class="api">Table</span> class and how to use the\n<span class="api">TableNodeStyle</span> node style implementation\nfor tabular data representation:'},{tagname:"para",content:'<ul id="tables-tutorial-592-itemizedlist-001"><li id="tables-tutorial-592-listitem-001"><p id="tables-tutorial-592-simpara-002">The <a href="..\\..\\demos\\complete\\tableeditor\\index.html" target="blank" class="demo-link" title="Shows the support for diagrams that are organized in a tabular way, for example in a grid or a swimlane layout.">Table Editor</a> demo\ndemonstrates user interaction and shows how to customize it.\nThe demo also presents a way to create new rows and columns via drag’n’drop gestures.</p></li></ul>'}]}]},{tagname:"section",id:"class_framework",title:"The yFiles Class Framework",children:[{tagname:"para","class":"dguide-para",id:"class_framework-593-simpara-001",content:'This chapter contains background information about the yFiles for HTML class framework. The knowledge presented here\nis not required in order to use the vast majority of the APIs. Be sure to read <a href="#/dguide/class_framework_usage">Working with the yFiles Class Framework</a> before\ncontinuing below.'},{tagname:"section",id:"framework_modules",title:"Modules and Namespaces",children:[{tagname:"para","class":"dguide-para",id:"framework_modules-594-simpara-001",content:"The yFiles Class Framework provides the function <code>yfiles.lang.module</code> to encapsulate the logic\nof creating a new namespace object, or appending to an existing one. This function creates the specified\nnamespace if it does not yet exist, and invokes the callback function.\nThe callback function can then attach functions, types, properties or fields to that object and\nthey will be available in the specified namespace object."},{tagname:"para","class":"dguide-para",id:"framework_modules-594-simpara-002",content:"The return value of the function is the innermost namespace container object."},{tagname:"example",id:"ex_modules_creation_usage",title:"Creating and using modules",content:'<pre class="programlisting javascript" id="framework_modules-594-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var module = yfiles.lang.module(\'my.module\', function(exports) {\n  exports.doSomething = function() { return \'Hello World\'; };\n});\nmy.module.doSomething() === \'Hello World\'; // true\nmy.module === module; // true</code></pre>'},{tagname:"para","class":"dguide-para",id:"framework_modules-594-simpara-003",content:"While not strictly required, using modules helps to reduce boilerplate code and prevent\npollution of the global namespace."},{tagname:"para","class":"dguide-para",id:"framework_modules-594-simpara-004",content:"Now that you have an understanding of modules, it’s time to learn about the\nyFiles Class Framework’s type system."}]},{tagname:"section",id:"framework_type_system",title:"Type System Overview",children:[{tagname:"para","class":"dguide-para",id:"framework_type_system-595-simpara-001",content:"The yFiles Class Framework uses constructor functions\nin combination with prototypal inheritance and type augmentation.\nIt is made up of five different types which can be combined to create robust objects that can be type checked\nand reflected at runtime: classes, interfaces, structures, enumerations, and attributes."},{tagname:"para","class":"dguide-para",id:"framework_type_system-595-simpara-002",content:"It supports the <code>new</code> operator as well as the <code>instanceof</code> operator where possible."},{tagname:"para","class":"dguide-para tip",id:"framework_type_system-595-tip-001",content:'<p id="framework_type_system-595-simpara-003">The <code>instanceof</code> operator cannot work for interfaces and enums. One can use the static <code>isInstance</code> function available\n  on the type to check whether a given value is of the respective type.</p>'},{tagname:"para","class":"dguide-para",id:"framework_type_system-595-simpara-004",content:"Every type defined using the yFiles Class Framework has the following static functions and properties:"},{tagname:"para",content:'<dl id="framework_type_system-595-variablelist-001"><dt id="framework_type_system-595-term-001">isInstance(object)</dt><dd id="framework_type_system-595-listitem-001"><p id="framework_type_system-595-simpara-005">Returns <code>true</code> if the object is an instance of the type.</p></dd><dt id="framework_type_system-595-term-002">$class</dt><dd id="framework_type_system-595-listitem-002"><p id="framework_type_system-595-simpara-006">Provides access to the <code>yfiles.lang.Class</code> instance that describes the type and\ncan be used for reflective access and meta-programming.\nThe following section introduces each of the five types that the class framework support.</p></dd></dl>'},{tagname:"para","class":"dguide-para note",id:"framework_type_system-595-note-001",content:'<p id="framework_type_system-595-simpara-007">The static <code>isInstance</code> method and <code>$class</code> property should only be used with types defined with the yFiles Class Framework.\nWe strongly advise to use the <code>instanceof</code> operator in conjunction with ES6 classes.</p>'},{tagname:"section",id:"type_system_classes",title:"Classes",children:[{tagname:"para","class":"dguide-para",id:"type_system_classes-596-simpara-001",content:"Classes are the most powerful types in a type system. They act as prototypes for their instances, can\ninherit from other classes and implement interfaces."},{tagname:"para","class":"dguide-para",id:"type_system_classes-596-simpara-002",content:"A class defined with the yFiles Class Framework consists of a (possibly) named constructor function with an appropriate\nprototype. By providing named constructors, you can have more than one constructor function for a class\nwithout having to write them differently from normal constructor functions."},{tagname:"para","class":"dguide-para note",id:"type_system_classes-596-note-001",content:'<p id="type_system_classes-596-simpara-003">The yFiles for HTML API does not make use of the named constructors feature. All constructors in the yFiles API\n  are regular constructors without a specific name.</p>'},{tagname:"para","class":"dguide-para",id:"type_system_classes-596-simpara-004",content:"Classes can have both static and instance functions, fields, and properties."},{tagname:"para","class":"dguide-para",id:"type_system_classes-596-simpara-005",content:"Every class has an additional static <code>$super</code> property which points to its parent class.\n<code>$super</code> can be used to invoke an overridden method definition:"},{tagname:"example",id:"type_system_classes-596-informalexample-001",content:'<pre class="programlisting javascript" id="type_system_classes-596-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>MyClass.$super.doSomething.call(this, arg1, arg2);</code></pre>'},{tagname:"para","class":"dguide-para",id:"type_system_classes-596-simpara-006",content:"All classes in the yFiles Class Framework inherit from at least\n<code>yfiles.lang.Object</code>, which provides useful methods like <code>memberwiseClone</code> and\n<code>getClass</code>.  The <code>memberwiseClone</code> method\nreturns a shallow copy of the object, and <code>getClass</code> returns the\n<code>yfiles.lang.Class</code> that represents the object’s type for meta-programming purposes."}]},{tagname:"section",id:"type_system_interfaces",title:"Interfaces",children:[{tagname:"para","class":"dguide-para",id:"type_system_interfaces-597-simpara-001",content:"At the most fundamental level, an interface is a description of the functionality of a type and does not come\nwith an implementation for that functionality. yFiles interfaces can optionally provide default implementations\nfor certain functionality that does not need to be implemented explicitly by implementing classes."},{tagname:"para","class":"dguide-para",id:"type_system_interfaces-597-simpara-002",content:'A class can implement multiple interfaces. There are rules in place to prevent\nthe “diamond inheritance problem” known from C++. Interface inheritance is explained in more detail in <a href="#/dguide/interface_inheritance">Interface Inheritance</a>.'},{tagname:"para","class":"dguide-para",id:"type_system_interfaces-597-simpara-003",content:'Interfaces cannot be trivially instantiated, they can only be implemented by classes. With the\n<a href="#/dguide/framework_quick_interface_implementation">quick interface definition feature</a>,\ncreating an instance of an anonymous type that implements that interface can be done nevertheless.'}]},{tagname:"section",id:"type_system_structs",title:"Structures",children:[{tagname:"para","class":"dguide-para",id:"type_system_structs-598-simpara-001",content:"Structures are similar to ordinary classes but mimic\nvalue types, or primitives, like the native <code>Number</code>, <code>Boolean</code>, etc.\nTechnically of course these are still classes and instances are passed by reference, but they use different semantics\nthan classes and behave differently when cloned using the <code>memberwiseClone</code> function."},{tagname:"para","class":"dguide-para",id:"type_system_structs-598-simpara-002",content:"When an instance of a structure is cloned, its values are cloned rather than referenced, so that when a primitive field\nof the cloned object is modified, the original object is not changed.\nSimilarly, when an instance of a regular class is cloned using <code>memberwiseClone</code>,\nall of its structure members are also cloned recursively."},{tagname:"para","class":"dguide-para",id:"type_system_structs-598-simpara-003",content:"Structures provide a static <code>createDefault</code> method, which creates a new instance\nof the structure without invoking any of its constructors, essentially creating an uninitialized instance\nof the structure."},{tagname:"para","class":"dguide-para",id:"type_system_structs-598-simpara-004",content:"A structure always extends <code>yfiles.lang.Struct</code>, which extends <code>yfiles.lang.Object</code> and\ncan implement any number of interfaces, but a structure cannot be inherited from."}]},{tagname:"section",id:"type_system_enums",title:"Enumerations",children:[{tagname:"para","class":"dguide-para",id:"type_system_enums-599-simpara-001",content:"Enumerations are an alternative to static number fields which allow easier usage of an API\nby grouping related values, making it clear exactly what options are available,\nand by helping to catch invalid or mistyped values."},{tagname:"para","class":"dguide-para",id:"type_system_enums-599-simpara-002",content:"The Enum implementation of the yFiles Class Framework does not try to do anything special or smart.\nIt simply contains a number of fields with primitive values, that can be used instead of magic constants or\nunrelated static fields."},{tagname:"para","class":"dguide-para",id:"type_system_enums-599-simpara-003",content:"Enumeration types can have additional static members, but since instances are technically just JavaScript numbers, they\ndo not provide specific instance members."}]},{tagname:"section",id:"type_system_attributes",title:"Attributes",children:[{tagname:"para","class":"dguide-para",id:"type_system_attributes-600-simpara-001",content:"Attributes provide meta information about types and their properties.\nThey are essentially classes but their constructor is only called when an attribute is actually used\nby the class framework, not when it is invoked.\nThis lazy construction allows use of attributes with very little performance hit."},{tagname:"para","class":"dguide-para",id:"type_system_attributes-600-simpara-002",content:"Access to attributes is provided by the reflection API of <code>yfiles.lang.Class</code>."},{tagname:"para","class":"dguide-para tip",id:"type_system_attributes-600-tip-001",content:'<p id="type_system_attributes-600-simpara-003">Unless you need to <a href="#/dguide/customizing_io_graphml">customize GraphML IO</a>, you probably never need to use Attributes.</p>'}]},{tagname:"section",id:"type_system_lazy_definition",title:"Lazy Type Definitions",children:[{tagname:"para","class":"dguide-para",id:"type_system_lazy_definition-601-simpara-001",content:"The types defined by the yFiles Class Framework need references to base classes and implemented interfaces\nat definition time to arrange the prototype chain, check the type, and reference default implementations for\nnon-abstract interface members."},{tagname:"para","class":"dguide-para",id:"type_system_lazy_definition-601-simpara-002",content:"To prevent circular references during the process of class definitions, it is possible to declare\nlazy type definitions.\nType definitions declared as lazy are evaluated at first access to their constructor. They must be contained\nin a <code>yfiles.lang.module</code> block and must have an associated namespace."},{tagname:"para","class":"dguide-para",id:"type_system_lazy_definition-601-simpara-003",content:"Now that you know the basic differences between the five types, let’s take a closer look at\nhow to define and use each type."}]}]},{tagname:"section",id:"framework_classes",title:"Classes",children:[{tagname:"section",id:"_defining_a_class_in_es5",title:"Defining a Class in ES5",children:[{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-001",content:"Classes are created by calling <code>yfiles.lang.Class</code> as a function, and storing the result in a\nvariable."},{tagname:"example",id:"ex_class_basic_definition",title:"Basic class definition",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Person = yfiles.lang.Class(\'Person\', {\n  constructor: function(name) {\n    this.name = name;\n  },\n\n  toString: function() {\n    return this.name;\n  }\n});\n\n// use:\nvar john = new Person(\'John Doe\');\nconsole.log(john.toString()); // -> John Doe</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-002",content:"The constructor must be named <code>constructor</code>. Custom methods can\nbe defined in the same way."},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-003",content:"The following identifiers are reserved and have a special meaning for the yFiles Class Framework:"},{tagname:"para",content:'<dl id="_defining_a_class_in_es5-603-variablelist-001"><dt id="_defining_a_class_in_es5-603-term-001">constructor</dt><dd id="_defining_a_class_in_es5-603-listitem-001"><p id="_defining_a_class_in_es5-603-simpara-004">The constructor function of the class or an object that defines multiple named constructor\nfunctions.</p></dd><dt id="_defining_a_class_in_es5-603-term-002">\'default\'</dt><dd id="_defining_a_class_in_es5-603-listitem-002"><p id="_defining_a_class_in_es5-603-simpara-005">Denotes the default constructor function of a class, when there are multiple named\nconstructors defined.\nNote that the quotation marks are part of the reserved name.\nProperty in the <code>constructor</code> object.</p></dd><dt id="_defining_a_class_in_es5-603-term-003">$static</dt><dd id="_defining_a_class_in_es5-603-listitem-003"><p id="_defining_a_class_in_es5-603-simpara-006">An object that describes static functions, properties, and fields that should be available\non the class, rather than on the instance.</p></dd><dt id="_defining_a_class_in_es5-603-term-004">$clinit</dt><dd id="_defining_a_class_in_es5-603-listitem-004"><p id="_defining_a_class_in_es5-603-simpara-007">A static function that is called by the yFiles Class Framework to perform additional\nclass initialization.\nThis is an optional property in the <code>$static</code> object,\nwhich is only supported for <a href="#/dguide/lazy_classes">lazily defined types</a>.</p></dd><dt id="_defining_a_class_in_es5-603-term-005">$meta</dt><dd id="_defining_a_class_in_es5-603-listitem-005"><p id="_defining_a_class_in_es5-603-simpara-008">An array, or a function that returns an array, of <code>yfiles.lang.Attribute</code> objects.</p></dd><dt id="_defining_a_class_in_es5-603-term-006">$extends</dt><dd id="_defining_a_class_in_es5-603-listitem-006"><p id="_defining_a_class_in_es5-603-simpara-009">The class from which to inherit.</p></dd><dt id="_defining_a_class_in_es5-603-term-007">$with</dt><dd id="_defining_a_class_in_es5-603-listitem-007"><p id="_defining_a_class_in_es5-603-simpara-010">An array of interfaces that the class implements.</p></dd><dt id="_defining_a_class_in_es5-603-term-008">$abstract</dt><dd id="_defining_a_class_in_es5-603-listitem-008"><p id="_defining_a_class_in_es5-603-simpara-011">A boolean value that specifies whether the class is abstract and does not define all\nrequired methods, fields, or properties.</p></dd></dl>'},{tagname:"example",id:"ex_class_static_members",title:"Static members",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var CookieFactory = yfiles.lang.Class(\'CookieFactory\', {\n  $static: {\n    createCookie: function() {\n      return \'A fresh chocolate chip cookie!\';\n    }\n  }\n});\nvar cookie = CookieFactory.createCookie();\nconsole.log(cookie); // -> A fresh chocolate chip cookie!</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-012",content:"Static members are not stored in the prototype object, rather they are directly accessible from the class.\nThe yFiles Class Framework adds them to the class’s native JavaScript constructor."},{tagname:"example",id:"ex_class_named_ctors",title:"Named constructors",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-003" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Point = yfiles.lang.Class(\'Point\', {\n  x: 0, y: 0, // some fields\n  constructor: {\n    \'default\': function(x, y) {\n      this.x = x;\n      this.y = y;\n    },\n    CopyOf: function(/**Point*/ p) {\n      this.x = p.x;\n      this.y = p.y;\n    },\n    CenterOf: function(/**Rect*/ r) {\n      // invokes default constructor instead of manual assignment\n      Point.call(this, r.x + r.width/2, r.y + r.height/2);\n    }\n  },\n\n  size: function() {\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n  }\n});\n// usage\nvar p = new Point(10, 10);\nvar p2 = new Point.CopyOf(p);\nvar p3 = new Point.CenterOf(new Rect(10, 10, 10, 10));</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-013",content:"Named constructors are a good alternative to using a single constructor that evaluates the\narguments to conditionally handle multiple types of input. A big benefit of using the yFiles\nClass Framework for this type of thing is that there is no\ndifference in how you write a named or a default/single constructor.  If using multiple constructors,\nsimply mark the default one as 'default' including quotation marks.\nAdditionally, <code>this</code> is\nset correctly and invoking another constructor has the syntax that you’d expect:\n<code>ClassName.ConstructorName.call(this, arguments)</code>."},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-014",content:'From the user’s perspective, named constructors resemble factory methods but with\nan explicit <code>new</code>. This\nfeature was inspired by <a href="http://www.dartlang.org" target="_blank">Google Dart</a>.'},{tagname:"example",id:"ex_class_super_call",title:"Calling the parent class",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-004" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Employee = yfiles.lang.Class(\'Employee\', {\n  $extends: Person, // inherits from Person defined earlier\n\n  constructor: function(name, company) {\n    // calls default parent class constructor\n    Employee.$super.constructor.call(this, name);\n    this.company = company;\n  },\n\n  toString: function() {\n    // calls parent toString implementation\n    return Employee.$super.toString.call(this) + \', \' + this.company;\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-015",content:"To call the parent class, simply use <code>Classname.$super.methodName.call</code>."},{tagname:"example",id:"ex_class_properties",title:"Defining properties",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-005" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Manager = yfiles.lang.Class(\'Manager\', {\n  $extends: Employee,\n\n  constructor: function(name, company, employees) {\n    // shorter way to call super constructor\n    Employee.call(this, name, company);\n    this._employees = employees;\n  },\n\n  // uses native JavaScript syntax for properties\n  get allEmployees() {\n    return this._employees;\n  },\n\n  // uses alternative class framework specific syntax\n  hasEmployees: {\n    get: function() {\n      return this._employees.length > 0;\n    }\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-016",content:"There are two ways of defining properties, but both syntactic variants do the same thing:\ncreate a read-only property and define and implement\nan accessor. Properties must have at least a setter or a getter, but can, and usually do, have both."},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-017",content:"The second, non-native, syntactic form is required when adding <code>yfiles.lang.Attribute</code> objects\nto a class member."},{tagname:"para","class":"dguide-para",id:"_defining_a_class_in_es5-603-simpara-018",content:"To get or set the value of a property of the parent class, use the following:"},{tagname:"example",id:"ex_class_super_properties",title:"Working with properties of the parent class",content:'<pre class="programlisting javascript" id="_defining_a_class_in_es5-603-programlisting-006" language="javascript" linenumbering="unnumbered" format="linespecific"><code>ClassName.$super.getOwnProperty("propertyName", this).get();\nClassName.$super.getOwnProperty("propertyName", this).set(value);</code></pre>'}]},{tagname:"section",id:"class_inheritance",title:"Class Inheritance",children:[{tagname:"para","class":"dguide-para",id:"class_inheritance-604-simpara-001",content:"Inherit from another class by adding an <code>$extends</code> member to the class definition."},{tagname:"para","class":"dguide-para",id:"class_inheritance-604-simpara-002",content:"A class inherits all non-static, non-constructor members of the class it extends.  That is, subclasses\ndo not automatically get the parent class’s constructors or static members."},{tagname:"para","class":"dguide-para",id:"class_inheritance-604-simpara-003",content:"If a non-abstract class inherits from an abstract class, it must implement all abstract members."}]},{tagname:"section",id:"interface_inheritance",title:"Interface Inheritance",children:[{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-001",content:"Interface inheritance allows a class to state that it conforms to a specific interface.  In contrast with\ntraditional interface inheritance, it allows the reuse of standard implementations of interface methods."},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-002",content:"A class which inherits from an interface with abstract members must implement all of the abstract members or\nbe declared as abstract. Otherwise an error is thrown when the debug library version is used and the behavior is\nundefined when the production version is used."},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-003",content:"If a class inherits from an interface with a non-abstract method and provides a method with the same name, the\nclass implementation always has precedence. The same is true for members that are inherited from\na base class, that is, the subclass implementation always has precedence."},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-004",content:"To inherit from an interface, use the <code>$with</code> member of a class definition."},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-005",content:"To inherit from multiple interfaces, use the <code>$with</code> member of a class definition with an array of interface references."},{tagname:"example",id:"ex_class_interface_inheritance",title:"Inheriting from multiple interfaces",content:'<pre class="programlisting javascript" id="interface_inheritance-605-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var List = yfiles.lang.Class(\'List\', {\n  $extends: AbstractList,\n  $with: [ICollection, IEnumerable, IList]\n  // ...\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-006",content:"This class states that it implements three interfaces: ICollection, IEnumerable, and IList.  It\nalso extends the AbstractList class."},{tagname:"para","class":"dguide-para important",id:"interface_inheritance-605-important-001",content:'<p id="interface_inheritance-605-simpara-007">JavaScript only allows for a single prototype value to be tested using the <code>instanceof</code>\noperator. Since the prototype is already used for class inheritance, it is not possible to test\nwhether an object implements a certain interface using the <code>instanceof</code> operator.\nInstead we use the <code>isInstance</code> method for this purpose.</p>'},{tagname:"example",id:"ex_class_trait_type_checking",title:"Type checking an object for interface inheritance",content:'<pre class="programlisting javascript" id="interface_inheritance-605-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>if (ICollection.isInstance(obj)) {\n  // obj inherits the ICollection interface\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-008",content:"The tested object must be an instance of at least\n<code>yfiles.lang.Object</code> for this test to work. Also, it is not sufficient to\nsimply implement all methods defined by the interface; it must inherit from the interface\nusing <code>$with</code>. The implementation\ndoes not check for the existence of the members on the instance but relies on type information stored\nin the object’s associated <code>yfiles.lang.Class</code> object. This approach is significantly faster however requires the use\nof the class framework. Instances that implement the interface by convention, only, are not considered instances\nin the sense of the class framework. If such “duck-typed” objects are passed to the yFiles library, they will not be recognized\ncorrectly and their implementations will not always be called properly."},{tagname:"para","class":"dguide-para",id:"interface_inheritance-605-simpara-009",content:"You can use the <code>isInstance</code> method on class, enumeration, structure, and annotation types, too."}]},{tagname:"section",id:"lazy_classes",title:"Lazy Classes",children:[{tagname:"para","class":"dguide-para",id:"lazy_classes-606-simpara-001",content:"Lazy classes are evaluated when they are first used or referenced. This offers two major benefits:"},{tagname:"para",content:'<ul id="lazy_classes-606-itemizedlist-001"><li id="lazy_classes-606-listitem-001"><p id="lazy_classes-606-simpara-002">Unused types are never evaluated</p></li><li id="lazy_classes-606-listitem-002"><p id="lazy_classes-606-simpara-003">The load order of the classes doesn’t matter</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"lazy_classes-606-simpara-004",content:"Using lazy classes can significantly improve your application’s load time, since most\nof your files can be loaded in parallel and the amount of code that runs during loading is\nmuch smaller, as only module definitions need to be processed."},{tagname:"example",id:"ex_class_lazy_definition",title:"Lazy class definition",content:'<pre class="programlisting javascript" id="lazy_classes-606-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.lang.module(\'myapp.model\', function(exports) {\n  exports.Person = new yfiles.ClassDefinition(function() {\n    // this part is not evaluated until necessary\n    return {\n      constructor: function(name) {\n        this.name = name;\n      },\n\n      toString: function() {\n        return this.name;\n      },\n\n      $static: {\n        $clinit: function() {\n          console.log(\'Person class has been created!\');\n        }\n      }\n    };\n  });\n});\n// at this point the class definition is evaluated and the type is created\nvar pete = new myapp.model.Person(\'Pete\');</code></pre>'},{tagname:"para","class":"dguide-para",id:"lazy_classes-606-simpara-005",content:"Lazy classes are evaluated as soon as they are used. In the above example, any access to\n<code>myapp.model.Person</code> triggers evaluation of the class."},{tagname:"para","class":"dguide-para",id:"lazy_classes-606-simpara-006",content:"After a lazy class has been evaluated and created, the yFiles Class Framework will invoke\nthe static <code>$clinit</code> class initialization function, if defined. This callback can be useful\nif you need to perform complex calculation for static class members or to reduce the number of dependencies\non other types during construction, which can further help to reduce cyclic references between types."}]}]},{tagname:"section",id:"framework_interfaces",title:"Interfaces",children:[{tagname:"section",id:"_defining_an_interface",title:"Defining an Interface",children:[{tagname:"para","class":"dguide-para",id:"_defining_an_interface-608-simpara-001",content:"Interfaces are defined using the <code>yfiles.lang.Interface</code> function."},{tagname:"example",id:"ex_trait_simple_definition",title:"Defining a simple interface",content:'<pre class="programlisting javascript" id="_defining_an_interface-608-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var IIterable = yfiles.lang.Interface(\'IIterable\', {\n  iterator: yfiles.lang.AbstractMethod\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_interface-608-simpara-002",content:"This example defines an interface with a single, abstract method. The yFiles Class Framework provides\n<code>yfiles.lang.Abstract</code>, <code>yfiles.lang.AbstractMethod</code> and\n<code>yfiles.lang.AbstractProperty</code> for documentation purposes, but doesn’t differentiate\nbetween them."},{tagname:"para","class":"dguide-para",id:"_defining_an_interface-608-simpara-003",content:"The primary difference between an interface in the class framework and\nmost interfaces used by other languages and technologies is that yFiles interfaces can define implementations of\nthe members they require."},{tagname:"example",id:"ex_trait_method",title:"Defining an interface with a concrete method",content:'<pre class="programlisting javascript" id="_defining_an_interface-608-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var IIterable = yfiles.lang.Interface(\'IIterable\', {\n  iterator: yfiles.lang.AbstractMethod,\n\n  forEach: function(fn, ctx) {\n    var it = this.iterator();\n    while(it.hasNext()) {\n      fn.call(ctx, it.next);\n    }\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_interface-608-simpara-004",content:"In this example, the interface <code>IIterable</code> requires its implementers to provide an\n<code>iterator</code> method. Every class that implements <code>IIterable</code> will get\na free <code>forEach</code> method in return but can optionally define its own optimized version of it."},{tagname:"example",id:"ex_trait_static_method",title:"Defining an interface with a static method",content:'<pre class="programlisting javascript" id="_defining_an_interface-608-programlisting-003" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var IList = yfiles.lang.Interface(\'IList\', {\n  $with: [ICollection],\n\n  add: yfiles.lang.AbstractMethod,\n\n  $static: {\n    of: function(arguments) {\n      var list = new ArrayList(); // choose default implementation\n      for(var i = 0, n = arguments.length; i &lt; n; i++) {\n        list.add(arguments[i]);\n      }\n      return list;\n    }\n  }\n});\nvar /**IList*/ mylist = IList.of(\'hello\', \'world\');</code></pre>'},{tagname:"para","class":"dguide-para note",id:"_defining_an_interface-608-note-001",content:'<p id="_defining_an_interface-608-simpara-005">While interfaces can have static members, these members are never inherited by classes or other interfaces.</p>'}]},{tagname:"section",id:"_interface_inheritance",title:"Interface Inheritance",children:[{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-001",content:"An interface can implement any number of other interfaces."},{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-002",content:"Since interfaces effectively allow for multiple inheritance of member definitions, the primary concern\nis how to resolve a conflict when a class implements two interfaces that\neach define the a member with the same name.  This problem is known as the diamond inheritance problem."},{tagname:"example",id:"ex_trait_diamond_inheritance",title:"Diamond inheritance resolution",content:'<pre class="programlisting javascript" id="_interface_inheritance-609-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var IShape = yfiles.lang.Interface(\'IShape\', {\n  area: yfiles.lang.AbstractProperty\n});\n\nvar IRectangle = yfiles.lang.Interface(\'IRectangle\', {\n  $with: [IShape], // inherit from IShape\n  width: yfiles.lang.AbstractProperty,\n  height: yfiles.lang.AbstractProperty,\n\n  get area() {\n    return this.width * this.height;\n  }\n});\n\nvar ISquare = yfiles.lang.Interface(\'ISquare\', {\n  $with: [IShape], // inherit from IShape\n\n  size: yfiles.lang.AbstractProperty,\n  get area() {\n    return this.size * this.size;\n  }\n});\n\nvar Square = yfiles.lang.Class(\'Square\', {\n  $with: [IRectangle, ISquare]\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-003",content:"The question is: which version of the\n<code>area</code> property is used in the <code>Square</code> class?\nThe yFiles Class Framework follows a simple rule to resolve this kind of problem: If in doubt, it’s\nabstract."},{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-004",content:"Because <code>IRectangle</code> and <code>ISquare</code> both implement <code>IShape</code>'s abstract\n<code>area</code> property, <code>Square</code>\nis responsible for defining its own implementation so that there is no ambiguity.\nSince it doesn’t, trying to access a <code>Square</code> instance’s area would result in a runtime error."},{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-005",content:"The implementation of an interface is always preferred over implementations of its base interfaces.\nThus, if <code>Square</code> were an interface and had an implementation of <code>area</code>, then its\nimplementation would be used instead of any of the ones defined by its base interfaces."},{tagname:"para","class":"dguide-para",id:"_interface_inheritance-609-simpara-006",content:"To summarize the inheritance rules of interfaces: in cases where two interfaces with the same member are\nimplemented by a subtype:"},{tagname:"para",content:'<ul id="_interface_inheritance-609-itemizedlist-001"><li id="_interface_inheritance-609-listitem-001"><p id="_interface_inheritance-609-simpara-007">If both method definitions are abstract, then the method is abstract.</p></li><li id="_interface_inheritance-609-listitem-002"><p id="_interface_inheritance-609-simpara-008">If one method definition is abstract and the other concrete, then the concrete method is used.</p></li><li id="_interface_inheritance-609-listitem-003"><p id="_interface_inheritance-609-simpara-009">If both method definitions are concrete:</p></li><li id="_interface_inheritance-609-listitem-004"><p id="_interface_inheritance-609-simpara-010">If the interfaces are implemented at the same level, then the method is abstract.</p></li><li id="_interface_inheritance-609-listitem-005"><p id="_interface_inheritance-609-simpara-011">If one of the interfaces is a sub-type of the other, then its method definition will be used.</p></li></ul>'}]},{tagname:"section",id:"_lazy_interfaces",title:"Lazy Interfaces",children:[{tagname:"para","class":"dguide-para",id:"_lazy_interfaces-610-simpara-001",content:"Interfaces can also be defined as lazy types with the same semantics as the other types, such as being\nnamespaced to a module. They are only\ncreated when they’re used. This feature allows for better startup time and helps to prevent cyclic dependencies."},{tagname:"example",id:"ex_trait_lazy_definition",title:"Lazy interface definition",content:'<pre class="programlisting javascript" id="_lazy_interfaces-610-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.lang.module(\'myapp.api\', function(exports) {\n  exports.CookieFactory = new yfiles.InterfaceDefinition(function() {\n    return {\n      $with: [myapp.api.Factory],\n      makeCookie: yfiles.lang.AbstractMethod\n    };\n  });\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_lazy_interfaces-610-simpara-002",content:"The <code>CookieFactory</code>, an interface which itself implements the <code>Factory</code> interface,\nis defined when it is first used."}]}]},{tagname:"section",id:"framework_structs",title:"Structures",children:[{tagname:"section",id:"_defining_a_structure",title:"Defining a Structure",children:[{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-001",content:"Structures are value types. They have the same definition as classes, except that they\nalways directly extend <code>yfiles.lang.Struct</code>. To create a new structure type, use\n<code>yfiles.lang.Struct</code> as a function."},{tagname:"example",id:"ex_struct_definition",title:"Structure definition",content:'<pre class="programlisting javascript" id="_defining_a_structure-612-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Rect = yfiles.lang.Struct(\'Rect\', {\n  $with: [IRectangle, ICloneable],\n  $topLeft: null,\n  width: 0, height: 0,\n\n  constructor: function(x, y, w, h) {\n    this.$topLeft = new PointD(x, y);\n    this.width = w;\n    this.height = h;\n  },\n\n  get topLeft() {\n    return this.$topLeft.clone();\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-002",content:"Structures are defined just like classes. They have the same semantics and work the same way with\none major difference:"},{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-003",content:"If a class or structure is cloned using <code>memberwiseClone</code>, all members that are structures are\ncloned as well."},{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-004",content:'In the above example, <code>$topLeft</code> is a <span class="api">Point</span>, which is a structure.\nIf we clone an instance of <code>Rect</code>, then the copy will have a cloned\n<code>$topLeft</code> member.\nNote that while structures have a built-in clone method, you are responsible for\nusing it to implement structure semantics.  That is, you must clone structures before passing them to a method\nor returning them from one.'},{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-005",content:"Structures also have more specialized versions of the <code>equals</code> and <code>hashCode</code>\nmethods. Two structure instances with the same values are equal and have the same\nhash code. This differs from the <code>yfiles.lang.Object</code> definitions for <code>equals</code> and\n<code>hashCode</code>,\nwhich ensure that only identical objects are the same."},{tagname:"example",id:"ex_struct_createDefault",title:"The createDefault method",content:'<pre class="programlisting javascript" id="_defining_a_structure-612-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var rect = RectD.createDefault();</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_a_structure-612-simpara-006",content:"All structure types have a <code>createDefault</code> method which creates a new, uninitialized instance\nof the structure without calling any of its constructors.  This is useful when you want to create the\nvariable earlier in your code, and instantiate it later."}]},{tagname:"section",id:"_lazy_structures",title:"Lazy Structures",children:[{tagname:"para","class":"dguide-para",id:"_lazy_structures-613-simpara-001",content:"A lazy structure has the same properties as a lazy class. It must be namespaced\nto a <code>yfiles.lang.module</code> and is evaluated at first use."},{tagname:"example",id:"ex_struct_lazy_definition",title:"Defining a lazy structure",content:'<pre class="programlisting javascript" id="_lazy_structures-613-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.lang.module(\'myapp.model\', function(exports) {\n  exports.Name = new yfiles.StructDefinition(function() {\n    return {\n      firstName: "", lastName: "",\n\n      constructor: function(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n      },\n\n      toString: function() {\n        return this.firstName + " " + this.lastName;\n      }\n    };\n  });\n});</code></pre>'}]}]},{tagname:"section",id:"framework_enums",title:"Enumerations",children:[{tagname:"section",id:"_defining_an_enumeration_type",title:"Defining an Enumeration Type",children:[{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-001",content:"Enums are enumerations of flags. They are easier to use than prefixed integer fields and the\nyFiles Class Framework supports a simple syntax to define such an enumeration type. Their usage makes\ncode more readable and makes it easier to catch typos and invalid values."},{tagname:"example",id:"ex_enum_basic_definition",title:"Basic Enum definition",content:'<pre class="programlisting javascript" id="_defining_an_enumeration_type-615-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var Priority = yfiles.lang.Enum(\'Priority\', {\n  LOW: 0, MEDIUM_LOW: 1, MEDIUM: 2, MEDIUM_HIGH: 3, HIGH: 4, VERY_HIGH: 5\n});\n\nswitch(bug.priority) {\n  case Priority.LOW: // ...\n    break;\n  case Priority.MEDIUM_LOW: // ...\n    break;\n  // ...\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-002",content:"All members of an enumeration are automatically static."},{tagname:"example",id:"ex_enum_automatic_values",title:"Automatically generate enumeration values",content:'<pre class="programlisting javascript" id="_defining_an_enumeration_type-615-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var _; // "defines" another name for undefined\nvar Priority = yfiles.lang.Enum(\'Priority\', {\n  LOW: _, MEDIUM_LOW: _, MEDIUM: _, MEDIUM_HIGH: _, HIGH: _, VERY_HIGH: _\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-003",content:"In this example, we have defined a shorter name for the <code>undefined</code> value in JavaScript:\n<code>_</code>. When the value of an enumeration member is undefined, it will be set to the next logical\nvalue. This will only work for integer fields and should not be mixed."},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-004",content:"Since most of the time an enumeration value is only a integer value, you can use “bitwise or” and “bitwise and”\nto create flagged enumerations. In this case, you must define the value of the fields yourself."},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-005",content:"The enumeration type also offers a few useful methods that can be used to convert values to strings and strings\nto values."},{tagname:"example",id:"ex_enum_usage",title:"Using an enumeration",content:'<pre class="programlisting javascript" id="_defining_an_enumeration_type-615-programlisting-003" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var priority = yfiles.lang.Enum.parse(Priority.$class, \'LOW\');\nif(priority === Priority.LOW) { // will be true\n  console.log(\'ok\'); // will be printed\n}\nconsole.log(yfiles.lang.Enum.getName(Priority.$class, priority)); // -> "LOW"</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-006",content:"The <code>yfiles.lang.Enum.parse</code> method takes parameters for the enumeration and value, with\nan optional third parameter: <code>ignoreCase</code>.\nIf this parameter is set to <code>true</code>, then the strings <code>'LOW'</code>, <code>'Low'</code>, <code>'low'</code>, etc. will all\nprovide the same value."},{tagname:"para","class":"dguide-para",id:"_defining_an_enumeration_type-615-simpara-007",content:"The <code>yfiles.lang.Enum.getName</code> method returns the string matching the specified value."}]},{tagname:"section",id:"_lazy_enumerations",title:"Lazy Enumerations",children:[{tagname:"para","class":"dguide-para",id:"_lazy_enumerations-616-simpara-001",content:"Lazy enumerations function similarly to lazy instantiation of other types.  They must be namespaced to a module,\nand provide benefits at startup time and in preventing circular references."},{tagname:"example",id:"ex_enum_lazy_definition",title:"Lazy enum definition",content:'<pre class="programlisting javascript" id="_lazy_enumerations-616-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.lang.module(\'myapp.model\', function(exports) {\n  exports.Priority = new yfiles.EnumDefinition(function() {\n    return {\n      LOW: 0, MEDIUM_LOW: 1, MEDIUM: 2, MEDIUM_HIGH: 3, HIGH: 4, VERY_HIGH: 5\n    };\n  });\n});</code></pre>'}]}]},{tagname:"section",id:"framework_attributes",title:"Attributes",children:[{tagname:"section",id:"_defining_an_attribute",title:"Defining an Attribute",children:[{tagname:"para","class":"dguide-para",id:"_defining_an_attribute-618-simpara-001",content:"Attributes contain meta information about namespaces, types, and type members. yFiles for HTML uses\nmeta information primarily for reading and writing GraphML file format, but other use cases exist."},{tagname:"para","class":"dguide-para",id:"_defining_an_attribute-618-simpara-002",content:"yFiles Class Framework attributes are closer to C# attributes than to Java annotations.\nThe major difference between both concepts is that attributes are actual classes which can extend other attributes,\nimplement interfaces and have methods and properties."},{tagname:"example",id:"ex_attribute_basic_definition",title:"Defining a basic attribute",content:'<pre class="programlisting javascript" id="_defining_an_attribute-618-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var FormTypeAttribute = yfiles.lang.Attribute(\'FormTypeAttribute\', {\n  type: "",\n  defaultValue: "",\n  constructor: function(type) {\n    this.type = type;\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_attribute-618-simpara-003",content:"This attribute could be used to annotate a data model so that you could generate a form for the model\nautomatically."},{tagname:"example",id:"_defining_an_attribute-618-informalexample-001",content:'<pre class="programlisting javascript" id="_defining_an_attribute-618-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var LoginFormModel = yfiles.lang.Class(\'LoginFormModel\', {\n  firstName: { // uses object with $meta instead of field\n    $meta: [FormTypeAttribute(\'text\')], // applies attribute\n    value: "" // follows PropertyDescriptor semantics\n  },\n  lastName: {\n    $meta: [FormTypeAttribute(\'text\')],\n    value: ""\n  },\n  stayLoggedIn: {\n    $meta: [FormTypeAttribute(\'checkbox\').init({defaultValue: true})], // defines arbitrary additional members\n    value: true\n  }\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"_defining_an_attribute-618-simpara-004",content:"Even though attributes are class types, they are used like functions, i.e. without the <code>new</code>\nkeyword. This helps to differentiate them from a normal class constructor, since they behave differently."},{tagname:"para","class":"dguide-para",id:"_defining_an_attribute-618-simpara-005",content:"While it may look like the previous sample created three instances of our <code>FormTypeAttribute</code>,\nit didn’t create any instances.  Attribute constructors are only invoked when attributes are read using reflection."}]},{tagname:"section",id:"attributes_lazy",title:"Lazy Attributes",children:[{tagname:"example",id:"ex_attribute_lazy_definition",title:"Defining a lazy attribute",content:'<pre class="programlisting javascript" id="attributes_lazy-619-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.lang.module(\'myapp.attributes\', function(exports) {\n  exports.CanBeNullAttribute = new yfiles.AttributeDefinition(function() {\n    return {\n      constructor: function() {}\n    };\n  });\n});</code></pre>'},{tagname:"para","class":"dguide-para",id:"attributes_lazy-619-simpara-001",content:"As with other types, lazy attributes must be namespaced to a module.\nThis attribute will only be constructed when it is first used."}]}]},{tagname:"section",id:"framework_additional",title:"Additional Support",children:[{tagname:"section",id:"_events",title:"Events",children:[{tagname:"para","class":"dguide-para",id:"_events-621-simpara-001",content:"The yFiles Class Framework is complemented by further support that provides convenience\nfunctionality around event handling."},{tagname:"para","class":"dguide-para",id:"_events-621-simpara-002",content:"Events can be easily subscribed to and unsubscribed from through associated methods\nfor adding and removing listener callbacks.\nThese methods take an event handler function as their parameter."},{tagname:"para","class":"dguide-para",id:"_events-621-simpara-003",content:'For example, the <api-link id="_events-621-api-link-001" data-member="QueryItemToolTip" data-text="QueryItemToolTip" data-type="yfiles.input.GraphViewerInputMode"></api-link>\nevent of class <span class="api">GraphViewerInputMode</span> can be easily subscribed to and unsubscribed\nfrom through the <code>addQueryItemToolTipListener</code> and <code>removeQueryItemToolTipListener</code>\nmethod, respectively.'},{tagname:"para","class":"dguide-para note",id:"_events-621-note-001",content:'<p id="_events-621-simpara-004">In the yFiles for HTML API documentation, the associated methods to add and remove\nlistener callbacks to events are currently listed along with the corresponding event.</p>'},{tagname:"para","class":"dguide-para",id:"_events-621-simpara-005",content:"By means of the <code>yfiles.lang.delegate</code> factory method, appropriate event\nhandler functions can be conveniently registered as implicit closures.\nThe <code>yfiles.lang.delegate</code> method wraps a given function together with\na target object which serves as the caller context for when the given function actually\ngets invoked."},{tagname:"para","class":"dguide-para",id:"_events-621-simpara-006",content:'The following code snippet from the <a href="..\\..\\demos\\view\\graphviewer\\index.html" target="blank" class="demo-link" title="Displays sample graphs from various application domains.">Graph Viewer</a>\ntutorial demo application shows how an event handler function is registered as a\nclosure with the current <code>this</code> context:'},{tagname:"example",id:"_events-621-example-001",title:"Registering an event listener",content:'<pre class="programlisting javascript" id="_events-621-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>var graphViewerInputMode = new yfiles.input.GraphViewerInputMode();\n\ngraphViewerInputMode.addQueryItemToolTipListener(\n    yfiles.lang.delegate(this.$onQueryItemToolTip, this)\n);</code></pre>'},{tagname:"para","class":"dguide-para",id:"_events-621-simpara-007",content:'When, in response to the <span class="api">QueryItemToolTip</span> event, the <code>$onQueryItemToolTip</code>\nlistener callback gets invoked, all uses of <code>this</code> within the callback’s\nbody actually access the object that the <code>this</code> referenced at invocation\ntime of the <code>yfiles.lang.delegate</code> factory method.'}]}]}]},{tagname:"section",id:"html_canvas",title:"Canvas Rendering",children:[{tagname:"para","class":"dguide-para",id:"html_canvas-622-simpara-001",content:"yFiles for HTML uses SVG for rendering. This has many advantages like styling with CSS, and providing animations and hover effects.\nAlso, moving or resizing elements can be very fast. For very large diagrams, on the other hand,\nthe SVG DOM gets very large which might result in a loss of performance."},{tagname:"para","class":"dguide-para",id:"html_canvas-622-simpara-002",content:'Therefore, yFiles provides alternative rendering methods that render into Canvas (<code>&lt;canvas></code>) elements using either\nthe JavaScript Canvas drawing API, or <a href="#/dguide/webgl">WebGL</a>. Drawing on a canvas can improve performance for large graphs with simple rendering.'},{tagname:"section",id:"_the_canvas_rendering_api",title:"The Canvas Rendering API",children:[{tagname:"para","class":"dguide-para",id:"_the_canvas_rendering_api-623-simpara-001",content:'Styles or renderers which use the canvas API have to implement their\n<api-link id="_the_canvas_rendering_api-623-api-link-001" data-member="createVisual(yfiles.view.IRenderContext)" data-text="createVisual" data-type="yfiles.view.IVisualCreator"></api-link> method to return a Visual\nwhich is a subclass of the abstract <api-link id="_the_canvas_rendering_api-623-api-link-002" data-member="" data-text="HtmlCanvasVisual" data-type="yfiles.view.HtmlCanvasVisual"></api-link>.\nImplementations of RenderVisual have to implement the\n<api-link id="_the_canvas_rendering_api-623-api-link-003" data-member="paint(yfiles.view.IRenderContext,CanvasRenderingContext2D)" data-text="paint" data-type="yfiles.view.HtmlCanvasVisual"></api-link> method.'},{tagname:"para",content:'<pre class="programlisting javascript" id="_the_canvas_rendering_api-623-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>class NodeRenderVisual extends yfiles.view.HtmlCanvasVisual {\n\n  constructor(/**yfiles.geometry.IRectangle*/ layout) {\n    super();\n    this.layout = layout;\n  }\n\n  /**\n   * Draw a simple rectangle with a solid orange fill.\n   */\n  paint(/**yfiles.view.IRenderContext*/ renderContext, /**CanvasRenderingContext2D*/ ctx) {\n    ctx.fillStyle = "rgba(255,140,0,1)";\n    var /**yfiles.geometry.IRectangle*/ l = this.layout;\n    ctx.fillRect(l.x, l.y, l.width, l.height);\n  }\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"_the_canvas_rendering_api-623-simpara-002",content:'The <api-link id="_the_canvas_rendering_api-623-api-link-004" data-member="paint(yfiles.view.IRenderContext,CanvasRenderingContext2D)" data-text="paint" data-type="yfiles.view.HtmlCanvasVisual"></api-link>\nmethod is called upon each repaint. Its <code>ctx</code> parameter is the canvas context\n(<code>canvas.getContext("2d")</code>) for the canvas to paint on.'},{tagname:"para","class":"dguide-para",id:"_the_canvas_rendering_api-623-simpara-003",content:'Using the canvas API for zoom-dependent, high-performance rendering is presented\nin the <a href="..\\..\\demos\\02-tutorial-custom-styles\\README.html" target="blank" class="demo-link" title="Shows the details of the implementation of custom styles for nodes, edges, labels, and ports.">Custom Styles Tutorial</a>;\nsee especially step 26.'},{tagname:"section",id:"_when_should_i_use_canvas_rendering",title:"When should I use canvas rendering?",children:[{tagname:"para","class":"dguide-para",id:"_when_should_i_use_canvas_rendering-624-simpara-001",content:"Canvas rendering has advantages for the following use cases:"},{tagname:"para",content:'<ul id="_when_should_i_use_canvas_rendering-624-itemizedlist-001"><li id="_when_should_i_use_canvas_rendering-624-listitem-001"><p id="_when_should_i_use_canvas_rendering-624-simpara-002">large diagrams</p></li><li id="_when_should_i_use_canvas_rendering-624-listitem-002"><p id="_when_should_i_use_canvas_rendering-624-simpara-003">simple rendering</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_when_should_i_use_canvas_rendering-624-simpara-004",content:"Canvas rendering is best for rendering many elements with a simple visualization. In other words, for\nlarge diagrams with few details. This makes it especially suitable for zoom-level dependent rendering\n(level-of-detail rendering):\nfor low zoom levels, when the number of visible elements is high and a simple visualization is sufficient,\nthe style renderer provides a canvas-based rendering whereas at higher zoom levels, it uses more sophisticated\nSVG-based styles (for example with fine details, gradients, drop shadows, etc.)."}]},{tagname:"section",id:"_when_should_i_avoid_canvas_rendering",title:"When should I avoid canvas rendering?",children:[{tagname:"para","class":"dguide-para",id:"_when_should_i_avoid_canvas_rendering-625-simpara-001",content:"Canvas rendering will not work at all, or at least might perform badly, in the following use cases:"},{tagname:"para",content:'<ul id="_when_should_i_avoid_canvas_rendering-625-itemizedlist-001"><li id="_when_should_i_avoid_canvas_rendering-625-listitem-001"><p id="_when_should_i_avoid_canvas_rendering-625-simpara-002"><strong id="_when_should_i_avoid_canvas_rendering-625-emphasis-001" class="bold" role="bold">Wrapping or decorating graph item styles</strong>:\nAll style decorators are SVG-based and expect that a decorated style creates\na visualisation that consists of an actual\n<api-link id="_when_should_i_avoid_canvas_rendering-625-api-link-001" data-member="svgElement" data-text="SVG element" data-type="yfiles.view.SvgVisual"></api-link>.\nAlthough <api-link id="_when_should_i_avoid_canvas_rendering-625-api-link-002" data-member="" data-text="HtmlCanvasVisual" data-type="yfiles.view.HtmlCanvasVisual"></api-link> extends\n<api-link id="_when_should_i_avoid_canvas_rendering-625-api-link-003" data-member="" data-text="Visual" data-type="yfiles.view.Visual"></api-link> it doesn’t provide such an element. Thus, decorating\nstyles which provide canvas rendering will fail.</p></li><li id="_when_should_i_avoid_canvas_rendering-625-listitem-002"><p id="_when_should_i_avoid_canvas_rendering-625-simpara-003"><strong id="_when_should_i_avoid_canvas_rendering-625-emphasis-002" class="bold" role="bold">Mixing SVG-based styles and Canvas-based styles</strong>:\nyFiles for HTML provides a hybrid rendering mechanism. It can render both canvas-based styles and SVG-based styles\nat the same time. Internally, render visuals are drawn on one canvas if possible.\nIf an SVG style is drawn in between canvas-based styles (with respect to their z-order)\nthe styles behind the SVG are drawn on one canvas and the ones before are drawn on another canvas.\nMixing canvas and SVG-based styles might thus result in generating a large number of canvas\nelements which will have a negative impact in memory consumption and performance.\nNote that nodes, edges, labels and decorations like handles are drawn on separate layers,\nthus mixing a canvas-based node style and a built-in label style won’t be a problem, for example.</p></li><li id="_when_should_i_avoid_canvas_rendering-625-listitem-003"><p id="_when_should_i_avoid_canvas_rendering-625-simpara-004"><strong id="_when_should_i_avoid_canvas_rendering-625-emphasis-003" class="bold" role="bold">Complex painting</strong>:\nSince the canvas has to be completely re-rendered at each repaint, a too complex rendering might reduce the performance\ncompared to SVG-based rendering.\nAnother drawback of canvas rendering is the handling of native mouse and touch events: the canvas will either catch all\nof these events or let them pass through. In the first case, SVG elements won’t get hover effects if a canvas level is\ndrawn in front. In the latter case, you will get hover effects even for elements which are hidden behind a canvas node.\nNote that the mouse and touch events provided by the <api-link id="_when_should_i_avoid_canvas_rendering-625-api-link-004" data-member="" data-text="CanvasComponent" data-type="yfiles.view.CanvasComponent"></api-link> are <strong id="_when_should_i_avoid_canvas_rendering-625-emphasis-004" class="bold" role="bold">not</strong> affected.</p></li></ul>'}]}]}]},{tagname:"section",id:"webgl",title:"WebGL Rendering",children:[{tagname:"para","class":"dguide-para",id:"webgl-626-simpara-001",content:'In addition to SVG and <a href="#/dguide/html_canvas">HTML canvas rendering</a>, yFiles for HTML offers WebGL rendering. This technology provides superior\nperformance for rendering lots of simple, similar items, making it suitable for displaying very large diagrams\n(e.g. "hairball graphs").\nThe downside is a more limited set of predefined styles and the lack of label styles, as text rendering is very\nexpensive when using WebGL. Also, implementing custom WebGL visualizations is much more complicated compared to SVG or\ncanvas styles.'
},{tagname:"para","class":"dguide-para",id:"webgl-626-simpara-002",content:'To see WebGL rendering in action, have a look at the <a href="..\\..\\demos\\view\\largegraphs\\index.html" target="blank" class="demo-link" title="Illustrates improvements in rendering performance for large graphs.">Large Graphs</a> demo.'},{tagname:"section",id:"_predefined_webgl_styles",title:"Predefined WebGL Styles",children:[{tagname:"para","class":"dguide-para",id:"_predefined_webgl_styles-627-simpara-001",content:"yFiles for HTML comes with the following predefined WebGL styles:"},{tagname:"para",content:'<dl id="_predefined_webgl_styles-627-variablelist-001"><dt id="_predefined_webgl_styles-627-term-001"><api-link id="_predefined_webgl_styles-627-api-link-001" data-member="" data-text="WebGLShapeNodeStyle" data-type="yfiles.styles.WebGLShapeNodeStyle"></api-link></dt><dd id="_predefined_webgl_styles-627-listitem-001"><p id="_predefined_webgl_styles-627-simpara-002">This is the WebGL variant of the <api-link id="_predefined_webgl_styles-627-api-link-002" data-member="" data-text="ShapeNodeStyle" data-type="yfiles.styles.ShapeNodeStyle"></api-link>,\noffering a selection of basic shapes for node visualizations.</p></dd><dt id="_predefined_webgl_styles-627-term-002"><api-link id="_predefined_webgl_styles-627-api-link-003" data-member="" data-text="WebGLImageNodeStyle" data-type="yfiles.styles.WebGLImageNodeStyle"></api-link></dt><dd id="_predefined_webgl_styles-627-listitem-002"><p id="_predefined_webgl_styles-627-simpara-003">This is the WebGL variant of the <api-link id="_predefined_webgl_styles-627-api-link-004" data-member="" data-text="ImageNodeStyle" data-type="yfiles.styles.ImageNodeStyle"></api-link>,\nwhich can display an image. Note that the image has to adhere to the same-origin policy (otherwise a blue rectangle is\nused as a fallback).</p></dd><dt id="_predefined_webgl_styles-627-term-003"><api-link id="_predefined_webgl_styles-627-api-link-005" data-member="" data-text="WebGLPolylineEdgeStyle" data-type="yfiles.styles.WebGLPolylineEdgeStyle"></api-link></dt><dd id="_predefined_webgl_styles-627-listitem-003"><p id="_predefined_webgl_styles-627-simpara-004">This is the WebGL variant of <api-link id="_predefined_webgl_styles-627-api-link-006" data-member="" data-text="PolylineEdgeStyle" data-type="yfiles.styles.PolylineEdgeStyle"></api-link>.</p></dd><dt id="_predefined_webgl_styles-627-term-004"><api-link id="_predefined_webgl_styles-627-api-link-007" data-member="" data-text="WebGLTaperedEdgeStyle" data-type="yfiles.styles.WebGLTaperedEdgeStyle"></api-link></dt><dd id="_predefined_webgl_styles-627-listitem-004"><p id="_predefined_webgl_styles-627-simpara-005">This edge style draws a simple tapered line from the center of the\nsource node to the center of the target node (both bends and ports are ignored). Very performant.</p></dd></dl>'}]},{tagname:"section",id:"_the_webgl_rendering_api",title:"The WebGL Rendering API",children:[{tagname:"para","class":"dguide-para important",id:"_the_webgl_rendering_api-628-important-001",content:'<p id="_the_webgl_rendering_api-628-simpara-001">In general, we advise against implementing custom item styles that use the WebGL rendering API, as it is hard to use the\nWebGL rendering pipeline efficiently from within the yFiles for HTML rendering engine. WebGL visualizations should rather be\nused for standalone visuals — e.g. background visuals, graph overlays, or custom high performance visualizations of the\nwhole graph structure.</p>'},{tagname:"para","class":"dguide-para",id:"_the_webgl_rendering_api-628-simpara-002",content:'Styles or renderers which use the WebGL API have to implement their\n<api-link id="_the_webgl_rendering_api-628-api-link-001" data-member="createVisual(yfiles.view.IRenderContext)" data-text="createVisual" data-type="yfiles.view.IVisualCreator"></api-link> method to return a Visual\nwhich is a subclass of the abstract <api-link id="_the_webgl_rendering_api-628-api-link-002" data-member="" data-text="WebGLVisual" data-type="yfiles.view.WebGLVisual"></api-link>.\nImplementations of WebGLVisual have to implement the\n<api-link id="_the_webgl_rendering_api-628-api-link-003" data-member="render(yfiles.view.IRenderContext,WebGLRenderingContext)" data-text="render" data-type="yfiles.view.WebGLVisual"></api-link> method.'},{tagname:"example",id:"_the_webgl_rendering_api-628-example-001",title:"Example WebGLVisual implementation",content:'<para class="dguide-para" id="_the_webgl_rendering_api-628-simpara-003">This visual draws the content bounds as a black rectangle. Note the usage of the predefined <code>viewTransform</code> matrix in\nthe vertex shader.</para><pre class="programlisting javascript" id="_the_webgl_rendering_api-628-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>class GraphBoundsVisual extends yfiles.view.WebGLVisual {\n  /**\n   * Draw a simple rectangle as large as the content bounds.\n   */\n  render(/**yfiles.view.IRenderContext*/ renderContext, /**WebGLRenderingContext*/ gl) {\n    const program = renderContext.webGLSupport.useProgram(`\n      attribute vec2 position;\n      void main() {\n        gl_Position = vec4(viewTransform * vec3(position, 1), 1);\n      }\n    `, `\n      precision mediump float;\n      void main() {\n        gl_FragColor = vec4(0, 0, 0, 1); // black\n      }\n    `);\n    if (!this.buffer) {\n      this.buffer = gl.createBuffer();\n      this.vertexBuffer = new Float32Array(8);\n    }\n\n    const contentRect = renderContext.canvasComponent.contentRect;\n\n    this.vertexBuffer[0] = contentRect.x;\n    this.vertexBuffer[1] = contentRect.y;\n    this.vertexBuffer[2] = contentRect.x + contentRect.width;\n    this.vertexBuffer[3] = contentRect.y;\n    this.vertexBuffer[4] = contentRect.x;\n    this.vertexBuffer[5] = contentRect.y + contentRect.height;\n    this.vertexBuffer[6] = contentRect.x + contentRect.width;\n    this.vertexBuffer[7] = contentRect.y + contentRect.height;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.vertexBuffer, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(gl.getAttribLocation(program, \'position\'));\n    gl.vertexAttribPointer(gl.getAttribLocation(program, \'position\'), 2, gl.FLOAT, false, 0, 0);\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"_the_webgl_rendering_api-628-simpara-004",content:'The <api-link id="_the_webgl_rendering_api-628-api-link-004" data-member="render(yfiles.view.IRenderContext,WebGLRenderingContext)" data-text="render" data-type="yfiles.view.WebGLVisual"></api-link>\nmethod is called upon each repaint. Its <code>gl</code> parameter is the WebGL context\n(<code>canvas.getContext("webgl")</code>) for the canvas to paint on.'},{tagname:"para","class":"dguide-para",id:"_the_webgl_rendering_api-628-simpara-005",content:'Using the WebGL API for zoom-dependent, high-performance rendering is presented\nin the <a href="..\\..\\demos\\view\\largegraphs\\index.html" target="blank" class="demo-link" title="Illustrates improvements in rendering performance for large graphs.">Large Graphs</a> demo.'},{tagname:"section",id:"_when_should_i_use_webgl_rendering",title:"When should I use WebGL rendering?",children:[{tagname:"para","class":"dguide-para",id:"_when_should_i_use_webgl_rendering-629-simpara-001",content:"WebGL rendering has advantages for the following use cases:"},{tagname:"para",content:'<ul id="_when_should_i_use_webgl_rendering-629-itemizedlist-001"><li id="_when_should_i_use_webgl_rendering-629-listitem-001"><p id="_when_should_i_use_webgl_rendering-629-simpara-002">very large diagrams</p></li><li id="_when_should_i_use_webgl_rendering-629-listitem-002"><p id="_when_should_i_use_webgl_rendering-629-simpara-003">simple rendering</p></li><li id="_when_should_i_use_webgl_rendering-629-listitem-003"><p id="_when_should_i_use_webgl_rendering-629-simpara-004">complex procedural graphics or particle effects</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"_when_should_i_use_webgl_rendering-629-simpara-005",content:'WebGL rendering is best for rendering many elements with a simple visualization. In other words, for very large diagrams\nwith few details. When compared to <a href="#/dguide/html_canvas">canvas rendering</a>, WebGL rendering offers even better performance and\ncomes with a selection of predefined styles. However, it requires greater effort to implement custom WebGL\nvisualizations that render efficiently and Internet Explorer 9/10 doesn’t support WebGL rendering.'},{tagname:"para","class":"dguide-para",id:"_when_should_i_use_webgl_rendering-629-simpara-006",content:"A typical use case for WebGL rendering is zoom-level dependent rendering (level-of-detail rendering):\nFor low zoom levels, when the number of visible elements is high and a simple visualization is sufficient,\nthe style renderer provides a WebGL-based rendering whereas at higher zoom levels, it uses more sophisticated\nSVG-based styles (for example with fine details, gradients, drop shadows, etc.)."}]},{tagname:"section",id:"_when_should_i_avoid_webgl_rendering",title:"When should I avoid WebGL rendering?",children:[{tagname:"para","class":"dguide-para",id:"_when_should_i_avoid_webgl_rendering-630-simpara-001",content:"WebGL rendering will not work at all, or at least might perform badly, in the following use cases:"},{tagname:"para",content:'<ul id="_when_should_i_avoid_webgl_rendering-630-itemizedlist-001"><li id="_when_should_i_avoid_webgl_rendering-630-listitem-001"><p id="_when_should_i_avoid_webgl_rendering-630-simpara-002"><strong id="_when_should_i_avoid_webgl_rendering-630-emphasis-001" class="bold" role="bold">Wrapping or decorating graph item styles</strong>:\nAll style decorators are SVG-based and expect that a decorated style creates\na visualisation that consists of an actual\n<api-link id="_when_should_i_avoid_webgl_rendering-630-api-link-001" data-member="svgElement" data-text="SVG element" data-type="yfiles.view.SvgVisual"></api-link>.\nAlthough <api-link id="_when_should_i_avoid_webgl_rendering-630-api-link-002" data-member="" data-text="WebGLVisual" data-type="yfiles.view.WebGLVisual"></api-link> extends\n<api-link id="_when_should_i_avoid_webgl_rendering-630-api-link-003" data-member="" data-text="Visual" data-type="yfiles.view.Visual"></api-link> it doesn’t provide such an element. Thus, decorating\nstyles which provide WebGL rendering will fail.</p></li><li id="_when_should_i_avoid_webgl_rendering-630-listitem-002"><p id="_when_should_i_avoid_webgl_rendering-630-simpara-003"><strong id="_when_should_i_avoid_webgl_rendering-630-emphasis-002" class="bold" role="bold">Mixing SVG-based styles and WebGL-based styles</strong>:\nyFiles for HTML provides a hybrid rendering mechanism. It can render both WebGL-based styles and SVG-based styles\nat the same time. Internally, WebGL visuals are drawn on one canvas if possible.\nIf an SVG style is drawn in between WebGL-based styles (with respect to their z-order)\nthe styles behind the SVG are drawn on one canvas and the ones before are drawn on another canvas.\nMixing canvas and SVG-based styles might thus result in generating a large number of canvas\nelements which will have a negative impact in memory consumption and performance.\nNote that nodes, edges, labels and decorations like handles are drawn on separate layers,\nthus mixing a WebGL-based node style and a built-in label style won’t be a problem, for example.</p></li><li id="_when_should_i_avoid_webgl_rendering-630-listitem-003"><p id="_when_should_i_avoid_webgl_rendering-630-simpara-004"><strong id="_when_should_i_avoid_webgl_rendering-630-emphasis-003" class="bold" role="bold">Complex painting</strong>:\nSince the canvas has to be completely re-rendered at each repaint, a too complex rendering might reduce the performance\ncompared to SVG-based rendering.\nAnother drawback of WebGL rendering is the handling of native mouse and touch events: the canvas will either catch all\nof these events or let them pass through. In the first case, SVG elements won’t get hover effects if a canvas level is\ndrawn in front. In the latter case, you will get hover effects even for elements which are hidden behind a canvas node.\nNote that the mouse and touch events provided by the <api-link id="_when_should_i_avoid_webgl_rendering-630-api-link-004" data-member="" data-text="CanvasComponent" data-type="yfiles.view.CanvasComponent"></api-link> are <strong id="_when_should_i_avoid_webgl_rendering-630-emphasis-004" class="bold" role="bold">not</strong> affected.</p></li></ul>'}]}]}]}]},{tagname:"section",id:"deployment",title:"Deployment",children:[{tagname:"section",id:"licensing",title:"Licensing",children:[{tagname:"para","class":"dguide-para",id:"licensing-631-simpara-001",content:"This chapter explains the license mechanism of yFiles for HTML and describes steps to successfully include\na valid license into a yFiles for HTML-based application."},{tagname:"section",id:"_general_concept",title:"General Concept",children:[{tagname:"para","class":"dguide-para",id:"_general_concept-632-simpara-001",content:"In order to run, a yFiles for HTML-based application needs a valid license that\ncontains encoded information on:"},{tagname:"para",content:'<ul id="_general_concept-632-itemizedlist-001"><li id="_general_concept-632-listitem-001"><p id="_general_concept-632-simpara-002">the authorized domains that the application can be served from</p></li><li id="_general_concept-632-listitem-002"><p id="_general_concept-632-simpara-003">whether the application can be served from localhost</p></li></ul>'},{tagname:"para","class":"dguide-para note",id:"_general_concept-632-note-001",content:'<p id="_general_concept-632-simpara-004">At application run time, the license needs to be present in the <code>yfiles</code> root namespace object.\nThe license’s format is JSON-based.</p>'},{tagname:"para","class":"dguide-para",id:"_general_concept-632-simpara-005",content:"The following example shows a (non-functional single developer) development license\nthat is added to the <code>yfiles</code> root namespace:"},{tagname:"example",id:"ex_license_file",title:"What license data looks like",content:'<pre class="programlisting javascript" id="_general_concept-632-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>{\n  "company": "yWorks GmbH",\n  "date": "05/08/2012",\n  "developer": "Joe Average",\n  "distribution": false,\n  "domains": [\n    "*"\n  ],\n  "fileSystemAllowed": true,\n  "licensefileversion": "1.1",\n  "localhost": true,\n  "oobAllowed": true,\n  "package": "complete",\n  "product": "yFiles for HTML",\n  "type": "singledeveloper",\n  "version": "1.3",\n  "watermark": "yFiles for HTML Development License",\n  "key": "90b9a98e11c9923878b2c6403ac60efc60fbacdc"\n};</code></pre>'}]},{tagname:"section",id:"license_registering",title:"Registering the License",children:[{tagname:"para","class":"dguide-para",id:"license_registering-633-simpara-001",content:"Although yFiles for HTML licenses are usually conveyed as separate files, and the\ndemos and tutorials load a separate license file to register the license information (<code>license.js</code>), it is not necessary\nto use a separate license file in your yFiles for HTML application."},{tagname:"para","class":"dguide-para",id:"license_registering-633-simpara-002",content:"Instead, the license data can just be defined programmatically on the <code>yfiles</code> root namespace object, as shown in the\nfollowing example."},{tagname:"example",id:"ex_license_registration",title:"Registering the license data",content:'<pre class="programlisting javascript" id="license_registering-633-programlisting-001" language="javascript" linenumbering="unnumbered" format="linespecific"><code>yfiles.license =  {\n  company: \'yWorks GmbH\',\n  date: \'05/08/2012\',\n  developer: \'Joe Average\',\n  ...\n}</code></pre>'},{tagname:"para","class":"dguide-para",id:"license_registering-633-simpara-003",content:"With AMD loading, all yFiles for HTML AMD modules return the <code>yfiles</code> root namespace object. Therefore, you can register the\nlicense like in the following example."},{tagname:"example",id:"ex_license_registration_amd",title:"Registering the license data with AMD modules",content:'<pre class="programlisting javascript" id="license_registering-633-programlisting-002" language="javascript" linenumbering="unnumbered" format="linespecific"><code>require([\'yfiles/view-component\'], yfiles => {\n    yfiles.license =  {\n      company: \'yWorks GmbH\',\n      date: \'05/08/2012\',\n      developer: \'Joe Average\',\n      ...\n    }\n  }\n);</code></pre>'},{tagname:"para","class":"dguide-para",id:"license_registering-633-simpara-004",content:"If you use the ES6 modules of the yFiles for HTML library, you typically don’t work with a reference to the <code>yfiles</code> root\nnamespace object. In this case, you can add the license data to the <code>value</code> property of the <code>yfiles.lang.License</code> object."},{tagname:"example",id:"ex_license_registration_es6",title:"Registering the license data with ES6 modules",content:'<pre class="programlisting javascript" id="license_registering-633-programlisting-003" language="javascript" linenumbering="unnumbered" format="linespecific"><code>import { License } from \'../../../lib/es6-modules/yfiles/lang.js\';\n\nLicense.value = {\n  company: \'yWorks GmbH\',\n  date: \'05/08/2012\',\n  developer: \'Joe Average\',\n  ...\n};</code></pre>'}]},{tagname:"section",id:"license_file_types",title:"Development vs. Distribution License",children:[{tagname:"para","class":"dguide-para",id:"license_file_types-634-simpara-001",content:"There are two different kinds of yFiles for HTML licenses that are strictly\nintended for one of two different situations:"},{tagname:"para",content:'<dl id="license_file_types-634-variablelist-001"><dt id="license_file_types-634-term-001">Development</dt><dd id="license_file_types-634-listitem-001"><p id="license_file_types-634-simpara-002">During application development, the development license can be used.\nIt allows unrestricted access and usage of the yFiles for HTML-based application in development but each\n<span class="api">CanvasComponent</span> will show a watermark to indicate the usage of the development license.</p></dd><dt id="license_file_types-634-term-002">Deployment</dt><dd id="license_file_types-634-listitem-002"><p id="license_file_types-634-simpara-003">For final deployment, the distribution license must be used.</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"license_file_types-634-simpara-004",content:"The license data is expected to be present in the following\nvariable in the <code>yfiles</code> namespace: <code>yfiles.license</code>."},{tagname:"para","class":"dguide-para important",id:"license_file_types-634-important-001",content:'<p id="license_file_types-634-simpara-005">It is most important that for final deployment of a yFiles for HTML-based application,\n<strong id="license_file_types-634-emphasis-001" class="bold" role="bold">the development license must not be included</strong>.\nInstead, <strong id="license_file_types-634-emphasis-002" class="bold" role="bold">the distribution license must be included</strong>.</p>'}]},{tagname:"section",id:"evaluation_license",title:"Pre-installed License in Evaluation Packages",children:[{tagname:"para","class":"dguide-para",id:"evaluation_license-635-simpara-001",content:"As part of the installation of the yFiles for HTML evaluation package, a development\nlicense that is valid for the evaluation period is bundled with the programming\nsamples and tutorials."},{tagname:"para","class":"dguide-para",id:"evaluation_license-635-simpara-002",content:"This license is in the file <code>license.js</code> in the yFiles for HTML\ninstallation directory, for example: <code>C:\\Users\\Me\\My Files\\yFiles for HTML 2.x\\demos\\resources\\license.js</code>"},{tagname:"para","class":"dguide-para",id:"evaluation_license-635-simpara-003",content:"All programming samples and tutorials use this physical location to reference the\nlicense."}]},{tagname:"section",id:"purchased_license",title:"Separate Licenses for Purchased yFiles for HTML Packages",children:[{tagname:"para","class":"dguide-para",id:"purchased_license-636-simpara-001",content:"In non-evaluation distributions of yFiles for HTML, there is no license installed.\nStill, the programming samples and tutorials use the same physical location in the\nyFiles for HTML installation directory to reference the license."},{tagname:"para","class":"dguide-para",id:"purchased_license-636-simpara-002",content:"Thus, to start developing, the development license that comes in addition to\na licensed yFiles for HTML package needs to be copied to this location and all samples,\netc. are set up."},{tagname:"para","class":"dguide-para note",id:"purchased_license-636-note-001",content:'<p id="purchased_license-636-simpara-003">A non-evaluation license file cannot be used to activate an evaluation version of\nyFiles for HTML.</p>'}]}]},{tagname:"section",id:"good_practices",title:"Good Practices",children:[{tagname:"para","class":"dguide-para",id:"good_practices-637-simpara-001",content:"This appendix holds tips for successfully deploying yFiles for HTML-based JavaScript\nweb applications."},{tagname:"section",id:"_web_browser_caching",title:"Web Browser Caching",children:[{tagname:"section",id:"_problem",title:"Problem",children:[{tagname:"para","class":"dguide-para",id:"_problem-639-simpara-001",content:"Although you are updating your web application’s JavaScript files, your users don’t\nsee your bug fixes and improvements, because they are not getting your new JavaScript\nfiles."}]},{tagname:"section",id:"_analysis_and_background",title:"Analysis and Background",children:[{tagname:"para","class":"dguide-para",id:"_analysis_and_background-640-simpara-001",content:"Your users’s web browsers serve stale content from their caches instead of requesting\nyour updated files from your web server."},{tagname:"para","class":"dguide-para",id:"_analysis_and_background-640-simpara-002",content:"To minimize web traffic and web page rendering latency, web browsers apply file\ncaching on their end.\nWhen opening a web page, the files that make up the page are stored locally, so\nthat, ideally, any subsequent request to display the same web page can be handled\nfrom this local cache."},{tagname:"para","class":"dguide-para",id:"_analysis_and_background-640-simpara-003",content:"Web servers, on the other hand, can specify per file if caching of a file is allowed\nor not, and also when a file’s validity expires, i.e., when a web browser should\ninvalidate its cached content and load information anew.\nThis is achieved by means of HTTP response header configurations."},{tagname:"para","class":"dguide-para",id:"_analysis_and_background-640-simpara-004",content:'The caching mechanism of a web browser uses an URL-based scheme to store files and\nto retrieve them later again.\nBasically, this means that when a file <code><a href="http://yourDomain.com/yourFile.js" target="_blank">http://yourDomain.com/yourFile.js</a></code>\nis requested and there is a valid entry in the web browser’s cache under this URL,\nthen the file associated with this entry will be served from the cache and there\nwill not be made any contact to the actual server at <code><a href="http://yourDomain.com/" target="_blank">http://yourDomain.com/</a></code>.'}]},{tagname:"section",id:"_solution",title:"Solution",children:[{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-001",content:"If you want to make sure that users of your web application"},{tagname:"para",content:'<ol id="_solution-641-orderedlist-001" numeration="arabic" inheritnum="ignore" continuation="restarts"><li id="_solution-641-listitem-001"><p id="_solution-641-simpara-002">always see the most up-to-date version of your application</p></li><li id="_solution-641-listitem-002"><p id="_solution-641-simpara-003">benefit from their web browser’s cache the most and hence put only the minimum amount\nof stress on your web server</p></li></ol>'},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-004",content:'then you can add a "versioning" scheme to your web application’s JavaScript files\nsimilar to how it is exercised in the yFiles for HTML demo applications.'},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-005",content:"The JavaScript files that make up the demo applications are stored in two directories\nwhere each directory name includes a versioning hash suffix: <code>l-a61bcf8f42b1</code>\nand <code>rs-a61bcf8f42b1</code>."},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-006",content:"The files in these directories are referenced from within the main HTML file of\na demo application:"},{tagname:"example",id:"ex_js_referencing",title:"Referencing the JavaScript files of a web application from within its main HTML file",content:"<pre class=\"programlisting html\" id=\"_solution-641-programlisting-001\" language=\"html\" linenumbering=\"unnumbered\" format=\"linespecific\"><code>&lt;script>\nrequire.config({\n  paths: {\n    yfiles: '../../l-a61bcf8f42b1/yfiles',\n    demo: '../../rs-a61bcf8f42b1'\n  }\n});\n\nrequire([\n    'yfiles/view-editor',\n    'demo/demo-util',\n    'demo/demo-styles',\n    'demo/demo-context-menu',\n    'yfiles/view-folding',\n    'yfiles/view-graphml',\n    'demo/license'],\n  (yfiles, app, DemoStyles, ContextMenu) => {\n    ...\n  }\n);\n&lt;/script></code></pre>"},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-007",content:"The versioning suffix added to the URLs of the JavaScript files directly addresses\nthe URL-based scheme of a web browser’s caching mechanism.\nWhenever the versioning suffix changes, the JavaScript file has a new URL, which\nis unknown to the web browser’s cache and thus the file is requested from the web\nserver."},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-008",content:"In conjunction with the versioning suffix, the JavaScript files’s cache expiration\ntime can be safely set to a time in the far future.\nThis means to benefit the most from the web browser’s cache and to reduce the load\non the web server to a minimum."},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-009",content:"In the following web server configuration the cache expiration time of JavaScript\nfiles is set like so:"},{tagname:"example",id:"ex_cache_expiration",title:"Cache expiration configuration",content:'<pre class="programlisting JavaScript" id="_solution-641-programlisting-002" language="JavaScript" linenumbering="unnumbered" format="linespecific"><code>ExpiresActive On\nExpiresDefault "access plus 1 day" # Applies to all files (i.e., also *.html).\nExpiresByType text/javascript "access plus 1 week" # Applies to *.js files.</code></pre>'},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-010",content:"Using this combined setup and configuration, whenever you update your web application\nand replace some of its JavaScript files, you only need to change the versioning\nsuffix that is part of the JavaScript files’s URLs."},{tagname:"para","class":"dguide-para",id:"_solution-641-simpara-011",content:"Your users will then only need a single forced reload of the HTML files of your\nweb application to reliably also get the latest versions of the JavaScript files."}]}]}]},{tagname:"section",id:"deployment_tool",title:"Deployment Tool",children:[{tagname:"para","class":"dguide-para",id:"deployment_tool-642-simpara-001",content:"This appendix describes the yFiles for HTML deployment tool which is located in the\ntop-level directory <code>deployment</code> of the yFiles for HTML package. It provides\nobfuscation and minification functionality that is tailored specifically\nto the structure of the yFiles for HTML library files and will therefore yield\nsuperior results when compared to generic minification tools."},{tagname:"section",id:"obfuscation_minification",title:"Obfuscation and Minification",children:[{tagname:"para","class":"dguide-para",id:"obfuscation_minification-643-simpara-001",content:"We highly recommend minifying and obfuscating the yFiles for HTML library\nprior to deploying your application on a public web server to reduce the\ndownload size of the library files for the end user. Note that, at the time of\nwriting, you are not required to use obfuscation, though."}]},{tagname:"section",id:"generate_different_module_headers",title:"Generate Different Module Headers",children:[{tagname:"para","class":"dguide-para",id:"generate_different_module_headers-644-simpara-001",content:'The yFiles for HTML package contains two sets of JavaScript modules: one in the\n<a href="https://github.com/umdjs/umd" target="_blank">Universal Module Definition (UMD)</a> format and one in the\n<a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" target="_blank">ES6 Modules</a> format. Both sets provide the same\nfeatures and API.'},{tagname:"para","class":"dguide-para",id:"generate_different_module_headers-644-simpara-002",content:"Although the UMD header should work fine for most applications, the deployment tool can also\nconvert it to a different module header. The output module type can be configured\nusing the <code>moduleType</code> config property. The following values are supported:"},{tagname:"para",content:'<dl id="generate_different_module_headers-644-variablelist-001"><dt id="generate_different_module_headers-644-term-001">keep</dt><dd id="generate_different_module_headers-644-listitem-001"><p id="generate_different_module_headers-644-simpara-003">Don’t change the module header at all - keep the default yFiles module header</p></dd><dt id="generate_different_module_headers-644-term-002">umd</dt><dd id="generate_different_module_headers-644-listitem-002"><p id="generate_different_module_headers-644-simpara-004">Write a standard UMD header</p></dd><dt id="generate_different_module_headers-644-term-003">amd</dt><dd id="generate_different_module_headers-644-listitem-003"><p id="generate_different_module_headers-644-simpara-005">Write a RequireJS/AMD header</p></dd><dt id="generate_different_module_headers-644-term-004">cjs</dt><dd id="generate_different_module_headers-644-listitem-004"><p id="generate_different_module_headers-644-simpara-006">Write a CommonJS header for use in e.g. NodeJS applications</p></dd></dl>'},{tagname:"para","class":"dguide-para",id:"generate_different_module_headers-644-simpara-007",content:"Note that when using the library in ES6 module format, only the <code>keep</code> option is allowed. Use the\nUMD version of the library if you need to specify a different module format."}]},{tagname:"section",id:"deployment_tool_define_prefix",title:"Prefix Define Calls",children:[{tagname:"para","class":"dguide-para",id:"deployment_tool_define_prefix-645-simpara-001",content:'Optionally, this tool can prefix usages of the global <code>define</code> function in yFiles modules\nand application sources with a custom prefix that is set to the option <code>definePrefix</code>.\nThis can prevent a name clash with a another "define" in the global namespace. The definition of the define function\nwould have to be <a href="http://requirejs.org/docs/faq-advanced.html#rename" target="_blank">adapted accordingly</a>.'}]},{tagname:"section",id:"transpile_all_demos_and_tutorials_to_es5",title:"Transpile All Demos and Tutorials to ES5",children:[{tagname:"para","class":"dguide-para",id:"transpile_all_demos_and_tutorials_to_es5-646-simpara-001",content:"As all yFiles for HTML demos and tutorials use ES6 syntax, they will only run\nin recent browsers. To run the demos in older browsers (e.g. Internet Explorer\n11), they need to be transpiled to ES5. The Gruntfile in this directory contains\na <code>demos-es5</code> task that will apply this conversion, and place the converted demos\nand tutorials in a top-level <code>demos-es5</code> folder."},{tagname:"para","class":"dguide-para note",id:"transpile_all_demos_and_tutorials_to_es5-646-note-001",content:'<p id="transpile_all_demos_and_tutorials_to_es5-646-simpara-002">This feature is not part of the yFiles for HTML deployment tool itself,\nbut it is added to the same Gruntfile for convenience.</p>'}]},{tagname:"section",id:"deployment_tool_details",title:"Details",children:[{tagname:"para","class":"dguide-para",id:"deployment_tool_details-647-simpara-001",content:"For more details on this tool, its usage, and step-by-step instructions, see\nthe <code>README.html</code> in the top-level directory <code>deployment</code>.\nIn addition, that directory contains a sample file for deploying one of the\ndemos that come with yFiles for HTML."}]}]},{tagname:"section",id:"deployment_shim",title:"ECMAScript 2015 Shim",children:[{tagname:"para","class":"dguide-para",id:"deployment_shim-648-simpara-001",content:'The yFiles for HTML library uses ECMAScript 2015 features that are not present in some of the supported\nbrowsers (e.g. <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">Promises</a>).\nTherefore, if your yFiles for HTML application should be compatible with older browsers that do not fully support\nECMAScript 2015, you will have to include a shim/polyfill JavaScript file that provides implementations for these\nfeatures.'},{tagname:"para","class":"dguide-para",id:"deployment_shim-648-simpara-002",content:"The yFiles for HTML package comes with a minimal shim file that provides just those features that are used by the\nyFiles for HTML library. This basic shim can be found next to the library modules at <code>lib/umd/yfiles/es2015-shim.js</code>."},{tagname:"para","class":"dguide-para",id:"deployment_shim-648-simpara-003",content:"To use the shim in your application, just reference it with a regular <code>&lt;script></code> tag:"},{tagname:"para",content:'<pre class="programlisting html" id="deployment_shim-648-programlisting-001" language="html" linenumbering="unnumbered" format="linespecific"><code>&lt;script src=\'lib/umd/yfiles/es2015-shim.js\'>&lt;/script>\'</code></pre>'},{tagname:"para","class":"dguide-para",id:"deployment_shim-648-simpara-004",content:'Note that this shim does not provide a full ES2015 environment by any means. For full ES2015 support, we recommend to\nuse one of the more exhaustive ES2015 shims that are available instead\n(e.g. the <a href="https://babeljs.io/docs/usage/polyfill/" target="_blank">Babel Polyfill</a>).'}]}]},{tagname:"section",id:"migration",title:"Migrating from yFiles for HTML 1.x",children:[{tagname:"para","class":"dguide-para",id:"migration-022-simpara-001",content:"This chapter presents the necessary steps to migrate applications based on\nyFiles for HTML 1.3 to yFiles for HTML 2.x."},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-002",content:"The 2.x release of yFiles for HTML updates the general API concepts to that of yFiles for Java 3.x and\nis an evolutionary step from yFiles for HTML 1.3 and older.\nWhile for the 1.0 release of yFiles for HTML API-compatibility and similarity with our WPF-, Silverlight-, and Windows Forms-based\nsolutions was an important point, the 2.x release makes the API a lot easier and pleasant to work with for developers\nthat come from a different background and expect an API that is more in line with what they are used to know from the modern\nJavaScript-based development."},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-003",content:"The 2.x release is backwards-incompatible to 1.3 but the most frequently used API has been preserved and the concepts are still the\nsame. Thus, a lot of code can be migrated easily or does not require any migration at all."},{tagname:"heading",id:"_library_content",renderas:"sect2",content:"Library Content"},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-004",content:"The yFiles for HTML 2.x library consists of the content in <code>lib/</code>, namely the library\nmodules in <code>lib/umd/yfiles/</code> and <code>lib/es6-modules/yfiles</code> as well as the stylesheet\n<code>lib/yfiles.css</code>. Despite the new module structure in 2.x, this is similar to 1.x.\nMake sure to replace both, the modules together with their implementations in\n<code>lib/umd/yfiles/impl</code> or <code>lib/es6-modules/yfiles/impl</code> and the stylesheet."},{tagname:"heading",id:"_migration_tool",renderas:"sect2",content:"Migration Tool"},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-005",content:'Version 2.x is not a drop-in replacement for yFiles for HTML 1.x. There are major\nbreaking API changes from the 1.x series that will make your current code not work\nwith the new library. However, porting your code is feasible and our\n<a href="https://github.com/yWorks/migrate-yfiles-app" target="_blank">automatic JavaScript source code conversion tool</a>\ncan assist you with this task and will reduce the time you’ll need to migrate your\ncode. It is available from <a href="https://github.com/yWorks/migrate-yfiles-app" target="_blank">our GitHub page</a>.'},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-006",content:"This tool analyzes the yFiles 1.3 API usages in your code. Usages of yFiles API\nthat has changed but has a direct replacement in 2.x will be changed automatically.\nOther usages will be annotated with suggested changes to help you getting familiar\nwith the new API."},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-007",content:"The tool will be updated in parallel to new releases. Please tell us if you find\nthat it could work better for your use-case. Your feedback helps us improving the\ntool."},{tagname:"para","class":"dguide-para",id:"migration-022-simpara-008",content:"The remainder of this chapter gives an overview of the design and API changes\nand describes the changes in detail subsequently."},{tagname:"section",id:"migration_general",title:"General",children:[{tagname:"section",id:"migration_classframework",title:"Changes to the Class Framework",children:[{tagname:"para","class":"dguide-para",id:"migration_classframework-650-simpara-001",content:'While the class framework is and was very powerful, yFiles for HTML 2.x does not use all of the advanced features of it anymore,\nmaking the API more in line with other popular JavaScript APIs. <a href="#/dguide/class_framework_usage">Working with the yFiles Class Framework</a> lists the most important\nthings you should know about the class framework.'},{tagname:"para","class":"dguide-para",id:"migration_classframework-650-simpara-002",content:"The following advanced features of the class framework are not used by the public API in the library anymore:"},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-001"><li id="migration_classframework-650-listitem-001"><p id="migration_classframework-650-simpara-003">Nested Types: Where previously interfaces, enumerations, and types could be nested in other interfaces and types,\nnested types have now all been moved to the top level. Where the naming of the type could be ambiguous, the names of the nested type has been adjusted.</p></li><li id="migration_classframework-650-listitem-002"><p id="migration_classframework-650-simpara-004">Named Constructors: Types created by the class framework could have multiple, named constructors, simulating constructor overloads known from\nother languages. Named constructors aren’t used in the new version of the library anymore. If a type has a constructor, the type itself is the only constructor.</p></li></ul>'},{tagname:"para","class":"dguide-para",id:"migration_classframework-650-simpara-005",content:"The following features have been added to the class framework and the library implementation that improve the developer experience when working with the APIs:"},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-002"><li id="migration_classframework-650-listitem-003"><p id="migration_classframework-650-simpara-006">Constructor and Method Overloads: Previously similar methods with varying parameter lists had been mapped to\nfunctions of varying names, often resulting in longish function names. Similar methods are now implemented as\noverloads of a single function of the canonic name in most cases: Optional parameters with default values and\ntrue overloads with completely varying parameter type lists as well as rest arguments are now supported by the library.\nParameter names have been made more consistent and in many places, "option" arguments\ncan be used to pass arguments to a function using a concise single argument JavaScript Object notation.</p></li></ul>'},{tagname:"example",id:"migration_classframework-650-informalexample-001",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-001" language="javascript" format="linespecific"><code>// no argument\r\ngraphComponent = new yfiles.view.GraphComponent()\r\n// string argument overload with css selector or element id\r\ngraphComponent = new yfiles.view.GraphComponent(\'#graphComponentDiv\')\r\n// element argument overload\r\ngraphComponent = new yfiles.view.GraphComponent(document.getElementById(\'someId\'))\r\n\r\n// no arguments\r\ngraphComponent.graph.createNode()\r\n// default/telescoping arguments\r\ngraphComponent.graph.createNode(\r\n  new yfiles.geometry.Rect(20, 20, 40, 40),\r\n  new yfiles.styles.ShapeNodeStyle()\r\n)\r\n// option arguments\r\ngraphComponent.graph.createNode({\r\n  style: new yfiles.styles.ShapeNodeStyle({\r\n    shape: yfiles.styles.ShapeNodeShape.HEXAGON\r\n  }),\r\n  layout: new yfiles.geometry.Rect(20, 20, 40, 40)\r\n})\n</code></pre>'},{tagname:"example",id:"migration_classframework-650-informalexample-002",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.graph.createNode({\r\n  layout: new yfiles.geometry.Rect(20, 20, 40, 40),\r\n  style: new yfiles.styles.ShapeNodeStyle({\r\n    fill: yfiles.view.Fill.BLUE,\r\n    shape: yfiles.styles.ShapeNodeShape.ROUND_RECTANGLE\r\n  })\r\n})\n</code></pre>'},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-003"><li id="migration_classframework-650-listitem-004"><p id="migration_classframework-650-simpara-007">Extra Arguments: Many factory-like methods and constructors that support the single "option" argument syntax in addition to the regular parameter list now also accept\nadditional arguments that translate into setting additional properties or populating collections on the result of the method call.\nThis allows for conveniently setting multiple properties on an instance of a type at construction time in the case of constructors or at creation time\nin the case of factory methods.</p></li></ul>'},{tagname:"example",id:"migration_classframework-650-informalexample-003",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-003" language="javascript" format="linespecific"><code>graphComponent.graph.createNode({\r\n  labels: [\r\n    {\r\n      text: \'One Label\',\r\n      style: new yfiles.styles.DefaultLabelStyle({\r\n        autoFlip: true,\r\n        clipText: false,\r\n        textFill: yfiles.view.Fill.BLUE,\r\n        wrapping: yfiles.view.TextWrapping.CHARACTER\r\n      })\r\n    },\r\n    { text: \'Second Label using defaults\' }\r\n  ]\r\n})\n</code></pre>'},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-004"><li id="migration_classframework-650-listitem-005"><p id="migration_classframework-650-simpara-008">Default Implementations for Methods and Properties: Interfaces can now contain default implementations of convenience methods as well\nas (computed) properties, which can be overridden by subclasses. This is known as "mixin" or "trait" behavior from other languages. Version 2.x\nuses default property implementations now where previously default getter style methods where used. This blurs the line between interface implementation\nand default mixins even more and results in a more consistent API where properties are more often implemented as properties and not as ordinary functions.</p></li></ul>'},{tagname:"example",id:"migration_classframework-650-informalexample-004",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-004" language="javascript" format="linespecific"><code>const rect = new yfiles.geometry.Rect(20, 30, 50, 50)\r\nconsole.log(rect.centerX + rect.topLeft.x)\n</code></pre>'},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-005"><li id="migration_classframework-650-listitem-006"><p id="migration_classframework-650-simpara-009">Easy Interface Implementation: For simple interfaces there is now a <a href="#/dguide/framework_quick_interface_implementation">convenient method</a>\navailable to create a proper implementations of the interface. The interface type\nnow declares a constructor which can take a single function if the interface only requires a single abstract function to be implemented. For interfaces that\ncontain more than one abstract member, an "option" argument needs to be passed to the interface constructor which contains an entry for each abstract member.</p></li></ul>'},{tagname:"example",id:"migration_classframework-650-informalexample-005",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-005" language="javascript" format="linespecific"><code>const hitTestable = new yfiles.input.IHitTestable((context, p) => p.x &lt; 200)\r\n\r\nconst infiniteEnumerable = new yfiles.collections.IEnumerable(\r\n  () =>\r\n    new yfiles.collections.IEnumerator({\r\n      get current() {\r\n        return 42\r\n      },\r\n      moveNext() {\r\n        return true\r\n      },\r\n      reset() {}\r\n    })\r\n)\r\n\r\nconsole.log(infiniteEnumerable.first(v => v > 13))\n</code></pre>'},{tagname:"para",content:'<ul id="migration_classframework-650-itemizedlist-006"><li id="migration_classframework-650-listitem-007"><p id="migration_classframework-650-simpara-010">ES6-compliant Subclassing: The yFiles class framework now supports the ES6 "class" keyword and also works with transpiled source code generated by Typescript and other\nES6 compliant source code translation tools. This means that the use of the yFiles class framework is now discouraged for the simple subclassing use-case. Instead the\ncorresponding <a href="#/dguide/framework_extending_classes">subclassing feature</a> of the language can be used and we encourage developers to use this mechanism when subclassing is required.</p></li></ul>'},{tagname:"example",id:"migration_classframework-650-informalexample-006",content:'<pre class="programlisting javascript" id="migration_classframework-650-programlisting-006" language="javascript" format="linespecific"><code>class MyGraphEditorInputMode extends yfiles.input.GraphEditorInputMode {\r\n  constructor() {\r\n    super()\r\n    this.moving = false\r\n  }\r\n\r\n  shouldMove(item) {\r\n    return this.moving && super.shouldMove(item)\r\n  }\r\n}\n</code></pre>'}]},{tagname:"section",id:"migration_collections",title:"Changes to the Collection Types",children:[{tagname:"para","class":"dguide-para",id:"migration_collections-651-simpara-001",content:"The collection subsystem that came with yFiles for HTML 1.3 has been simplified and made more consistent with the ECMAScript level 6 collections APIs:"},{tagname:"para",content:'<ul id="migration_collections-651-itemizedlist-001"><li id="migration_collections-651-listitem-001"><p id="migration_collections-651-simpara-002">On systems that have support for ECMAScript level 6 symbols, the new ECMAScript 6 level <code>for-of</code> construct can be used on all types that implement the\n<api-link id="migration_collections-651-api-link-001" data-member="" data-text="IEnumerable&lt;T&gt;" data-type="yfiles.collections.IEnumerable"></api-link> interface.</p></li></ul>'},{tagname:"example",id:"migration_collections-651-informalexample-001",content:'<pre class="programlisting javascript" id="migration_collections-651-programlisting-001" language="javascript" format="linespecific"><code>const groupNodes = graph.nodes.filter(graph.isGroupNode, graph)\r\n\r\nfor (const groupNode of groupNodes) {\r\n  for (const childNode of graph.getChildren(groupNode)) {\r\n    for (const label of childNode.labels) {\r\n      console.log(label.text)\r\n    }\r\n  }\r\n}\n</code></pre>'},{tagname:"para",content:'<ul id="migration_collections-651-itemizedlist-002"><li id="migration_collections-651-listitem-002"><p id="migration_collections-651-simpara-003">The "foreach" and other convenience methods on the IEnumerable type now all support <code>index</code> and <code>owner</code> optional parameters for their callbacks and support\npassing the <code>this</code> context to the callback functions via an optional parameter.</p></li></ul>'},{tagname:"example",id:"migration_collections-651-informalexample-002",content:'<pre class="programlisting javascript" id="migration_collections-651-programlisting-002" language="javascript" format="linespecific"><code>graphComponent.graph.nodes.forEach((n, index) => console.log(\'node \' + index + \': \' + n))\r\n\r\n// directly invoke console.log with node, index, and "graph.nodes" as arguments\r\ngraphComponent.graph.nodes.forEach(console.log, console)\n</code></pre>'},{tagname:"para",content:'<ul id="migration_collections-651-itemizedlist-003"><li id="migration_collections-651-listitem-003"><p id="migration_collections-651-simpara-004">The member and type names have been adjusted to adhere to the new ES6 Map and Set classes. <code>Dictionary</code> is now called <code>Map</code> and its accessors and convenience methods\nuse the names and signatures of the corresponding ES6 types where possible. The names for the list and enumerable implementations have also been adjusted to follow the ES6\ncollection type names.</p></li></ul>'},{tagname:"example",id:"migration_collections-651-informalexample-003",content:"<pre class=\"programlisting javascript\" id=\"migration_collections-651-programlisting-003\" language=\"javascript\" format=\"linespecific\"><code>const map = new yfiles.collections.Map()\r\n\r\nmap.set('key', 'value')\r\nmap.set('anotherKey', 'someValue')\r\n\r\nconsole.log(map.keys.some(k => k.length == 3))\r\nconsole.log(map.values.reduce('', (a, v) => a + v))\r\n\r\nmap.delete('key')\r\nconsole.log(map.size)\n</code></pre>"}]},{tagname:"section",id:"migration_types",title:"Changes to Helper Classes and Default Implementations",children:[{tagname:"para","class":"dguide-para",id:"migration_types-652-simpara-001",content:"Many default and convenience implementations of interfaces that did not add anything new to the API other than implementing the existing interface\nhave been refactored to be only available via constants or factory methods on the corresponding interface types. Types that are meant to be subclassed\nor which add more functionality than is available on the interface are still available."},{tagname:"example",id:"migration_types-652-informalexample-001",content:'<pre class="programlisting javascript" id="migration_types-652-programlisting-001" language="javascript" format="linespecific"><code>const inputMode = new yfiles.input.GraphEditorInputMode()\r\ninputMode.moveInputMode.hitTestable = yfiles.input.IHitTestable.NEVER\r\n\r\nnew yfiles.view.Animator(graphComponent).animate(\r\n  yfiles.view.IAnimation.createParallelAnimation(\r\n    yfiles.collections.List.fromArray([\r\n      new yfiles.view.ViewportAnimation(graphComponent, new yfiles.geometry.Rect(20, 30, 40, 50)),\r\n      yfiles.view.IAnimation.createNodeAnimation(\r\n        graph,\r\n        graph.nodes.first(),\r\n        new yfiles.geometry.Rect(20, 30, 40, 50),\r\n        yfiles.lang.TimeSpan.fromSeconds(2)\r\n      )\r\n    ])\r\n  )\r\n)\n</code></pre>'}]},{tagname:"section",id:"migration_promises",title:"Usage of Promises",children:[{tagname:"para","class":"dguide-para",id:"migration_promises-653-simpara-001",content:'Where previously in the API one-time callback methods had been used, now\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">Promises</a> are used. This enables a convenient and consistent\nprogramming pattern that is compatible with e.g.\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank">ECMAScript 2017’s async/await</a> feature.\nSince Promises are not part of all browser implementations, yet, a simple third-party-code-free shim for Promises is part of the yFiles for HTML package.'},{tagname:"example",id:"migration_promises-653-informalexample-001",content:'<pre class="programlisting javascript" id="migration_promises-653-programlisting-001" language="javascript" format="linespecific"><code>graphComponent\r\n  .morphLayout(new yfiles.organic.OrganicLayout())\r\n  .then(e => console.log(\'done!\'))\r\n  .catch(e => console.log(\'error during layout \' + e))\n</code></pre>'},{tagname:"example",id:"migration_promises-653-informalexample-002",content:'<pre class="programlisting javascript" id="migration_promises-653-programlisting-002" language="javascript" format="linespecific"><code>const support = new yfiles.graphml.GraphMLSupport()\r\n\r\nsupport\r\n  .saveFile(graphComponent.graph)\r\n  .then(graphml => console.log(\'saved successfully!\'))\r\n  .catch(e => console.log(\'error during save \' + e))\n</code></pre>'}]},{tagname:"section",id:"migration_graphml",title:"Major Version Change for GraphML",children:[{tagname:"para","class":"dguide-para",id:"migration_graphml-654-simpara-001",content:"The GraphML produced by yFiles for HTML 2.x has been updated to a new major version that is now consistent\nacross all yFiles family members. Types are separated into distinct XML namespaces.\nTypes that are shared between yFiles family members are in the <code>y</code> namespace.\nTypes that are specific to a product use a product specific namespace (<code>yjs</code> for yFiles for HTML)\nand use platform typical casing."},{tagname:"para","class":"dguide-para",id:"migration_graphml-654-simpara-002",content:"Files written using the default configuration of the GraphML file writing mechanism will not be\nparsed completely correct using an older, unmodified version of yFiles."},{tagname:"para","class":"dguide-para",id:"migration_graphml-654-simpara-003",content:"In order to provide backwards compatibility with older GraphML files, a demo is provided that\nshows how to configure the GraphML loading mechanism to also be able to load older GraphML files."}]},{tagname:"section",id:"migration_immutablestructs",title:"Geometry Support 'Struct' Classes",children:[{tagname:"para","class":"dguide-para",id:"migration_immutablestructs-655-simpara-001",content:"The <code>yfiles.geometry</code> namespace contains simple value types that describe\ngeometric entities like points, sizes, and rectangles. Previously the API allowed for modifying the values\nof these primitive types and their <code>Struct</code>-like nature demanded that in order to avoid that other code\nwill modify the values of such a struct that instead a <code>.clone()</code> of the values should be passed.\nThe types in question have now been made immutable so that cloning is no longer required to guarantee\nthat values will not be modified by library or application code. This improves performance but if you are not\nusing JavaScript <code>strict</code> mode, accidental modifications to these values will simply be ignored.\nWe recommend using <code>strict</code> mode in which case you will get an error if you try to accidentally modify struct values."},{tagname:"para","class":"dguide-para",id:"migration_immutablestructs-655-simpara-002",content:"Previously there were static functions available on those types for arithmetic operations. These have now\nbeen refactored as instance methods."},{tagname:"example",id:"migration_immutablestructs-655-informalexample-001",content:'<pre class="programlisting javascript" id="migration_immutablestructs-655-programlisting-001" language="javascript" format="linespecific"><code>const point = new yfiles.geometry.Point(42, 23)\r\nconst rect = new yfiles.geometry.Rect(1, 1, 40, 40)\r\n\r\nconst newPoint = point.add(new yfiles.geometry.Point(1337, 1337))\r\nconst largerRect = rect.add(newPoint)\r\nconst longerVector = newPoint.multiply(5)\r\n\r\npoint.x += 3 // this will now result in an error\n</code></pre>'}]},{tagname:"section",id:"migration_simplified_modules",title:"Restructured Javascript Modules",children:[{tagname:"para","class":"dguide-para",id:"migration_simplified_modules-656-simpara-001",content:'For yFiles for HTML 2.x the publicly visible JavaScript AMD and CommonJS modules structure has been simplified and their\ndependencies have been slightly refactored. See <a href="#/dguide/introduction-modules">yFiles for HTML Modules</a> for the new simplified module system\nand the dependencies.'},{tagname:"para","class":"dguide-para",id:"migration_simplified_modules-656-simpara-002",content:"The new names should make it obvious what functionality you get when you load the module. If unsure, consult the\ndocumentation of the types you are interested in. It contains a list of modules that when loaded provides the type.\nNote that loading one of the modules in the list is enough. It is not required to load all modules in the list."}]},{tagname:"section",id:"migration_noglobals",title:"Modules do not Introduce Globals Anymore",children:[{tagname:"para","class":"dguide-para",id:"migration_noglobals-657-simpara-001",content:"Previously by default loading the yFiles modules with a module loader, the <code>yfiles</code> root namespace got automatically\nregistered with the window or global namespace. This default behavior has changed. If you are loading the yfiles\nmodules using AMD or CommonJS, the modules now all yield the yfiles top-level namespace, except for <code>yfiles\\lang</code> which\ndirectly yields the <code>yfiles.lang</code> namespace."},{tagname:"example",id:"migration_noglobals-657-informalexample-001",content:"<pre class=\"programlisting javascript\" id=\"migration_noglobals-657-programlisting-001\" language=\"javascript\" format=\"linespecific\"><code>require(['yfiles/editor', 'yfiles/lang'], (yfiles, lang) => {\r\n  let graph = new yfiles.graph.DefaultGraph()\r\n  let demo = lang.module('demo')\r\n})\r\n\r\n// here, yfiles is not defined - neither now, nor when the require has resolved the modules\r\ntypeof yfiles === 'undefined' // true\r\ntypeof lang === 'undefined' // true\n</code></pre>"}]},{tagname:"section",id:"migration_nobuilt_ins_changed",title:"Built-in Types are no Longer Modified",children:[{tagname:"para","class":"dguide-para",id:"migration_nobuilt_ins_changed-658-simpara-001",content:"yFiles for HTML 1.x added small APIs like <code>toString()</code>, <code>hashCode()</code>, <code>getClass()</code>, <code>equals()</code>, and <code>compareTo()</code>\nto the prototypes of the built-in JavaScript types <code>Number</code>, <code>String</code>, <code>Boolean</code>, and <code>Object</code>.\nThis is no longer the case. The native type system is now left untouched."}]},{tagname:"section",id:"migration_grouping",title:"Grouping and Folding",children:[{tagname:"para","class":"dguide-para",id:"migration_grouping-659-simpara-001",content:"In yFiles for HTML 1.3 the ability to nest nodes into other nodes was an optional feature of the graph implementation that needed to be turned on explicitly and\nused a separate interface. With yFiles for HTML 2.x this functionality is now an inherent part of the main graph interface and the optional interface has been removed.\nSince grouping is now always available, the input mode implementations provide switches that prevent the user from interactively using this feature if this is not\ndesired in an application."},{tagname:"example",id:"migration_grouping-659-informalexample-001",content:'<pre class="programlisting javascript" id="migration_grouping-659-programlisting-001" language="javascript" format="linespecific"><code>// grouping is available directly from the graph interface\r\nconst groupNode = graph.createGroupNode()\r\n\r\nconst normalNode = graph.createNode()\r\nconst childNode = graph.createNode({ parent: groupNode })\r\ngraph.setParent(normalNode, groupNode)\r\nconsole.log(graph.getChildren(groupNode).size)\r\n\r\n// more advanced queries are available via helper type IGroupingSupport\r\nconsole.log(graph.getGroupingSupport().isDescendant(normalNode, groupNode))\n</code></pre>'},{tagname:"para","class":"dguide-para",id:"migration_grouping-659-simpara-002",content:"The more elaborate folding feature still uses separate interfaces, since more than one graph instance can be involved for this use case."}]},{tagname:"section",id:"migration_es6",title:"ECMAScript Level 6",children:[{tagname:"para","class":"dguide-para",id:"migration_es6-660-simpara-001",content:"yFiles for HTML 2.x is designed to work seamlessly with ECMAScript Levels 6 and 7, however the core library only requires an ECMAScript Level 5 runtime to work.\nMany of the demos have been adjusted to use ECMAScript Level 6 features and thus will not work out of the box in older browsers that do not have native\nsupport for the newer features in JavaScript. These demos work in all evergreen browsers, but a transpiler should be used to make those demos work in older browser\nimplementations. Most notably this affects all current versions of Internet Explorer. Edge can run the unmodified demo code."}]},{tagname:"section",id:"migration_layout",title:"Layout and Graph Analysis",children:[{tagname:"para","class":"dguide-para",id:"migration_layout-661-simpara-001",content:"yFiles for HTML 2.x offers a new and more convenient way to supply layout algorithms with configurations on a per item basis.\nWhere previously the recommended approach was to use the mapper registry to register mappings from items to supplemental layout data,\nthere are now convenience classes available that make declaring and applying supplemental layout data to graph items in a type-safe and\nmore discoverable way. This is a non-breaking change, since the old mechanism is still in place and may be used for custom layouts\nand more advanced layout customizations."},{tagname:"example",id:"migration_layout-661-informalexample-001",content:'<pre class="programlisting javascript" id="migration_layout-661-programlisting-001" language="javascript" format="linespecific"><code>const data = new yfiles.hierarchic.HierarchicLayoutData()\r\ndata.edgeDirectedness.mapper.set(graphComponent.graph.edges.first(), 0)\r\ndata.sourcePortConstraints.delegate = edge =>\r\n  edge.sourceNode.tag !== \'center\'\r\n    ? yfiles.layout.PortConstraint.create(yfiles.layout.PortSide.NORTH, true)\r\n    : null\r\ndata.partitionGridData.grid = new yfiles.layout.PartitionGrid(2, 2)\r\ndata.partitionGridData.cellIds.constant = data.partitionGridData.grid.createCellId(1, 1)\r\n\r\ngraphComponent.morphLayout({\r\n  layout: new yfiles.hierarchic.HierarchicLayout(),\r\n  layoutData: data\r\n})\n</code></pre>'}]}]},{tagname:"section",id:"migration-detailed_changes",title:"Detailed Changes",children:[{tagname:"section",id:"_general_2",title:"General",children:[{tagname:"para",content:'<ul id="_general_2-663-itemizedlist-001"><li id="_general_2-663-listitem-001"><p id="_general_2-663-simpara-001">The naming of classes, members, and parameters has been reviewed and is now both more consistent with other JavaScript APIs and more intuitive.</p></li><li id="_general_2-663-listitem-002"><p id="_general_2-663-simpara-002">The return type of several methods has been changed from IEnumerator&lt;T> to IEnumerable&lt;T>. All implementations of IEnumerable are JavaScript Iterables and thus can be used in for…​of loops etc.</p></li><li id="_general_2-663-listitem-003"><p id="_general_2-663-simpara-003">Replaced all usages of reference parameters with actual return values. Most prominent example of this change are the various #getTangent methods in IPathGeometry and GeneralPath that now return a Tangent object.</p></li><li id="_general_2-663-listitem-004"><p id="_general_2-663-simpara-004">All methods that take a parameter of type ICanvasContext, IRenderContext, IInputModeContext, IParseContext, IWriteContext, SnapContext, GraphSnapContext, or LabelSnapContext now have that parameter as their first parameter.</p></li><li id="_general_2-663-listitem-005"><p id="_general_2-663-simpara-005">Removed all types with name \'Extensions\' since these duplicated methods that are available on the corresponding types, too. This includes: OrientedRectangleExtensions, PointExtensions, RectangleExtensions, SizeExtensions, FoldingViewExtensions, GeomExtensions, GraphDecoratorExtensions, GraphExtensions, GroupedGraphExtensions, MapperRegistryExtensions, StripeExtensions, LookupExtensions, TableExtensions, ParseContextExtensions, WriteContextExtensions, RenderContextExtensions, RenderContextExtensions and XmlWriterExtensions.</p></li><li id="_general_2-663-listitem-006"><p id="_general_2-663-simpara-006">The Developer’s Guide has been completely revised. Now it consists of two parts: The first part covers the basics of @PRODUCT@, while the second part describes in detail how the behavior of the library can be adapted to the customer’s requirements.</p></li></ul>'},{tagname:"section",id:"_namespace_structure",title:"Namespace Structure",children:[{tagname:"para",content:'<ul id="_namespace_structure-664-itemizedlist-001"><li id="_namespace_structure-664-listitem-001"><p id="_namespace_structure-664-simpara-001">Classes of the viewer part have been reorganized into a simpler namespace structure.</p><para><ul id="_namespace_structure-664-itemizedlist-002"><li id="_namespace_structure-664-listitem-002"><p id="_namespace_structure-664-simpara-002">yfiles.graph contains types relate to the graph structure, including label models and port location models.</p></li><li id="_namespace_structure-664-listitem-003"><p id="_namespace_structure-664-simpara-003">yfiles.view was renamed from yfiles.canvas and contains types related to the GraphComponent and CanvasComponent, and to the visualization in general.</p></li><li id="_namespace_structure-664-listitem-004"><p id="_namespace_structure-664-simpara-004">yfiles.styles was renamed from yfiles.drawing and contains the style implementations.</p></li><li id="_namespace_structure-664-listitem-005"><p id="_namespace_structure-664-simpara-005">yfiles.input contains the types related to input modes.</p></li></ul></para></li><li id="_namespace_structure-664-listitem-006"><p id="_namespace_structure-664-simpara-006">Collections and geometry types remain in yfiles.collections and yfiles.geometry, respectively.</p></li><li id="_namespace_structure-664-listitem-007"><p id="_namespace_structure-664-simpara-007">The namespaces yfiles.model, yfiles.objectcollections, yfiles.support, and yfiles.system have been dissolved. A lot of their types were obsolete and have been removed, the remaining have been moved to more meaningful namespaces. Details are described below.</p></li><li id="_namespace_structure-664-listitem-008"><p id="_namespace_structure-664-simpara-008">Layout and analysis types are still in yfiles.layout, yfiles.algorithms, and the namespaces that correspond to\na specific layout style.</p></li></ul>'}]},{tagname:"section",id:"_factory_methods_instead_of_default_implementations",title:"Factory Methods Instead of Default Implementations",children:[{tagname:"para",content:'<ul id="_factory_methods_instead_of_default_implementations-665-itemizedlist-001"><li id="_factory_methods_instead_of_default_implementations-665-listitem-001"><p id="_factory_methods_instead_of_default_implementations-665-simpara-001">ICanvasContext: factory methods replace the removed class CanvasContext</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-002"><p id="_factory_methods_instead_of_default_implementations-665-simpara-002">IInputModeContext: factory methods replace the removed class SimpleInputModeContext</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-003"><p id="_factory_methods_instead_of_default_implementations-665-simpara-003">ILookup, IContextLookup and IContextLookupChainLink: factory methods were moved from the removed class Lookups</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-004"><p id="_factory_methods_instead_of_default_implementations-665-simpara-004">IContextLookupChainLink: factory methods replace the removed properties HidingLookupChainLink, FactoryLookupChainLink and AddingLookupChainLink.</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-005"><p id="_factory_methods_instead_of_default_implementations-665-simpara-005">IEnumerable: factory methods replace the removed classes EmptyEnumerable, CompositeEnumerable and CompositeEnumerator</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-006"><p id="_factory_methods_instead_of_default_implementations-665-simpara-006">IListEnumerable: factory methods replace the removed classes EmptyListEnumerable, ListEnumerable and ListEnumerableExtensions</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-007"><p id="_factory_methods_instead_of_default_implementations-665-simpara-007">IEventRecognizer: factory methods replace the removed classes EventRecognizers, EventRecognizerExtensions,  and EventRecognizerCallback.</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-008"><p id="_factory_methods_instead_of_default_implementations-665-simpara-008">IAnimation: factory methods replace the removed classes EasedAnimation, ParallelAnimation, GeneralPathAnimation, LayoutMorpher, LayoutMorpherWrapper, EdgeAnimation, LabelAnimation, NodeAnimation, and PortAnimation</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-009"><p id="_factory_methods_instead_of_default_implementations-665-simpara-009">IPortCandidateProvider: factory methods replace all existing implementations except AbstractPortCandidateProvider</p></li><li id="_factory_methods_instead_of_default_implementations-665-listitem-010"><p id="_factory_methods_instead_of_default_implementations-665-simpara-010">IEdgeReconnectionPortCandidateProvider: factory methods replace all existing implementations.</p></li></ul>'}]},{tagname:"section",id:"_moved_static_members_to_interfaces",title:"Moved Static Members to Interfaces",children:[{tagname:"para",content:'<ul id="_moved_static_members_to_interfaces-666-itemizedlist-001"><li id="_moved_static_members_to_interfaces-666-listitem-001"><p id="_moved_static_members_to_interfaces-666-simpara-001">ICommand: got constants of the removed classes GraphCommands, ApplicationCommands, ComponentCommands and NavigationCommands</p></li><li id="_moved_static_members_to_interfaces-666-listitem-002"><p id="_moved_static_members_to_interfaces-666-simpara-002">IArrow: got constants from the type Arrow.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-003"><p id="_moved_static_members_to_interfaces-666-simpara-003">IHitTestable/IMarqueeTestable/IVisibilityTest: got constants from removed classes HitTestable, MarqueeTestable and VisibilityTest</p></li><li id="_moved_static_members_to_interfaces-666-listitem-004"><p id="_moved_static_members_to_interfaces-666-simpara-004">ICanvasObjectDescriptor: got constants of the removed class CanvasObjectDescriptor.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-005"><p id="_moved_static_members_to_interfaces-666-simpara-005">IMapper: got factory methods of removed class Mappers.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-006"><p id="_moved_static_members_to_interfaces-666-simpara-006">IBoundsProvider: got constants of removed class BoundsProvider.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-007"><p id="_moved_static_members_to_interfaces-666-simpara-007">Class GraphItemTypes got constants of removed class GraphItemType.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-008"><p id="_moved_static_members_to_interfaces-666-simpara-008">Class Fill got constants of removed class Brushes.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-009"><p id="_moved_static_members_to_interfaces-666-simpara-009">Class Stroke got constants of removed class Pens.</p></li><li id="_moved_static_members_to_interfaces-666-listitem-010"><p id="_moved_static_members_to_interfaces-666-simpara-010">Class DashStyle got constants of removed class DashStyles.</p></li></ul>'}]}]},{tagname:"section",id:"_model",title:"Model",children:[{tagname:"section",id:"_igraph",title:"IGraph",children:[{tagname:"para",content:'<ul id="_igraph-668-itemizedlist-001"><li id="_igraph-668-listitem-001"><p id="_igraph-668-simpara-001">Support for grouped graphs has been simplified to a large extent:</p><para><ul id="_igraph-668-itemizedlist-002"><li id="_igraph-668-listitem-002"><p id="_igraph-668-simpara-002">IGraph now supports grouping by default. The #groupingSupported property has been removed from DefaultGraph. Grouping is now always enabled for graphs.</p></li><li id="_igraph-668-listitem-003"><p id="_igraph-668-simpara-003">The new property #allowGroupingOperations on GraphEditorInputMode allows for switching interactive grouping operations on or off. Grouping operations are disabled by default and have to be enabled explicitly if the input mode should support them.</p></li><li id="_igraph-668-listitem-004"><p id="_igraph-668-simpara-004">The grouping support interfaces IGroupedGraph and IHierarchy&lt;T> have been removed and folded with IGraph.</p></li><li id="_igraph-668-listitem-005"><p id="_igraph-668-simpara-005">IHierarchy&lt;T>\'s Root property is no longer available. The root of a grouping hierarchy is now represented by <code>null</code>.</p></li></ul></para></li><li id="_igraph-668-listitem-006"><p id="_igraph-668-simpara-006">Overhaul of IGraph’s #createNode, #createEdge, #addLabel, #addPort: Ambiguous overloads were removed, missing overloads were added and parameters were ordered to be consistent throughout all overloads.</p></li><li id="_igraph-668-listitem-007"><p id="_igraph-668-simpara-007">The names of the property setter methods have been changed so that it is easier to find the model item’s property they\naffect. For instance, #setNodeBounds is now #setNodeLayout, as the property it affects is INode#layout.</p></li><li id="_igraph-668-listitem-008"><p id="_igraph-668-simpara-008">IGraph’s #nodes, #edges, #labels, and #ports properties have been changed from ICollectionModel to IListEnumerable. To be notified of created or removed items, the corresponding IGraph events should be used instead.</p></li><li id="_igraph-668-listitem-009"><p id="_igraph-668-simpara-009">The properties #nodeLabels and #edgeLabels on IGraph have been replaced by non-abstract default implementations that delegate to the merged #labels property.</p></li><li id="_igraph-668-listitem-010"><p id="_igraph-668-simpara-010">The properties #collectionModel and #bends have been removed.</p></li><li id="_igraph-668-listitem-011"><p id="_igraph-668-simpara-011">The classes BendList and ListLabelCollection have been removed. Use ListEnumerable instead.</p></li><li id="_igraph-668-listitem-012"><p id="_igraph-668-simpara-012">IGraph now provides events for property changes on model items, e.g. #NodeStyleChanged, #NodeLayoutChanged, etc. Those events replace the dedicated change reporters available previously (e.g. INodeBoundsChangeReporter, ILabelTextChangeReporter, etc.) which have been removed.</p></li><li id="_igraph-668-listitem-013"><p id="_igraph-668-simpara-013">The signatures of event handlers throughout the IGraph API have been made consistent using properly typed EventArgs subtypes. Exceptions are a few events that are raised very often which retain an argument list to improve performance.</p></li><li id="_igraph-668-listitem-014"><p id="_igraph-668-simpara-014">The methods isLeaf/setLeaf and related properties and events have been replaced by isGroupNode/setIsGroupNode which have the exact opposite meaning from the old ones.</p></li><li id="_igraph-668-listitem-015"><p id="_igraph-668-simpara-015">The signature of IGraph#addBend has changed. The index parameter has been moved to the end and made optional.</p></li><li id="_igraph-668-listitem-016"><p id="_igraph-668-simpara-016">The IGraphStructure interface and its SimpleGraphStructure implementation have been removed, as well as DefaultGraph’s constructor that accepted an IGraphStructure.</p></li><li id="_igraph-668-listitem-017"><p id="_igraph-668-simpara-017">IGraph now extends the ITagOwner interface. Thus graphs now have a #tag property.</p></li></ul>'}]},{tagname:"section",id:"_defaultgraph",title:"DefaultGraph",children:[{tagname:"para",content:'<ul id="_defaultgraph-669-itemizedlist-001"><li id="_defaultgraph-669-listitem-001"><p id="_defaultgraph-669-simpara-001">DefaultGraph now raises removal events for labels, ports, and bends which are implicitly removed when their owner is removed.</p></li><li id="_defaultgraph-669-listitem-002"><p id="_defaultgraph-669-simpara-002">Various protected factory methods on DefaultGraph have been removed: #createNodeDefaults, #createEdgeDefaults and #createMapperRegistry, amongst others.</p></li><li id="_defaultgraph-669-listitem-003"><p id="_defaultgraph-669-simpara-003">The method #getBounds has been removed from DefaultGraph.</p></li><li id="_defaultgraph-669-listitem-004"><p id="_defaultgraph-669-simpara-004">The property #usePortCandidateProviders has been removed from both DefaultGraph and GraphSettings. Creating an edge using port candidate providers has to be done by manually querying the provider and calling #createEdge(IPort, IPort).</p></li></ul>'}]},{tagname:"section",id:"_folding",title:"Folding",children:[{tagname:"para",content:'<ul id="_folding-670-itemizedlist-001"><li id="_folding-670-listitem-001"><p id="_folding-670-simpara-001">The method #isInitiallyExpanded has been removed from IFoldedGraph. The methods #isInitiallyExpanded, #setInitiallyExpanded, and the property #defaultExpandedPredicate have been removed from FoldingManager.</p></li><li id="_folding-670-listitem-002"><p id="_folding-670-simpara-002">The #expand, #collapse and #isExpanded methods on IFoldingView (previously IFoldedGraph) now also work with nodes that belong to the master graph instead of the view graph. Thus the collapsed/expanded state can be set or queried for items that are currently not in the view graph.</p></li><li id="_folding-670-listitem-003"><p id="_folding-670-simpara-003">The interfaces IChangeDummyNodeAppearanceCallback, IChangeDummyEdgeAppearanceCallback, and IChangeLabeledItemAppearanceCallback as well as the FoldingManager#getChangeDummyAppearanceCallback methods have been removed. The view state properties can now directly be changed on the view state implementations returned by FoldingManager#getFolderNodeState and FoldingManager#getFoldingEdgeState, respectively.</p></li></ul>'}]},{tagname:"section",id:"_labels",title:"Labels",children:[{tagname:"para",content:'<ul id="_labels-671-itemizedlist-001"><li id="_labels-671-listitem-001"><p id="_labels-671-simpara-001">The #layout property of ILabel has been converted to a default property implementation.</p></li><li id="_labels-671-listitem-002"><p id="_labels-671-simpara-002">The order of the parameters of ILabelModel#getGeometry has been changed to ILabelModel#getGeometry(ILabel, ILabelModelParameter).</p></li><li id="_labels-671-listitem-003"><p id="_labels-671-simpara-003">FreeNodeLabelModel#createNodeCenterAnchored and FreeNodeLabelModel#createNodeLayoutAnchored have been removed.</p></li><li id="_labels-671-listitem-004"><p id="_labels-671-simpara-004">FreeNodeLabelModel#createDefaultParameter now uses the label’s center as its anchor point.</p></li><li id="_labels-671-listitem-005"><p id="_labels-671-simpara-005">The new edge label models EdgeSegmentLabelModel and EdgePathLabelModel have been added. EdgeSegmentLabelModel allows to create parameters for a segment index and segment ratio while EdgePathLabelModel creates parameters using a ratio of the edge path.</p><para><ul id="_labels-671-itemizedlist-002"><li id="_labels-671-listitem-006"><p id="_labels-671-simpara-006">The label models RotatingEdgeLabelModel, SliderEdgeLabelModel, SideSliderEdgeLabelModel, RotatedSliderEdgeLabelModel and RotatedSideSliderEdgeLabelModel have been removed.</p></li><li id="_labels-671-listitem-007"><p id="_labels-671-simpara-007">The label model parameter of the edge label defaults now uses the EdgeSegmentLabelModel.</p></li></ul></para></li></ul>'}]},{tagname:"section",id:"_ports",title:"Ports",children:[{tagname:"para",content:'<ul id="_ports-672-itemizedlist-001"><li id="_ports-672-listitem-001"><p id="_ports-672-simpara-001">Refactored property IPort#location to become a default implementation since it was only a convenience method to access the location from the IPortLocationModelParameter. To retrieve a live view of the location of a port, use the new default property IPort#dynamicLocation. To retrieve a simple snapshot of the current location instead, use IPort#getLocation.</p></li><li id="_ports-672-listitem-002"><p id="_ports-672-simpara-002">NodeScaledPortLocationModel has been replaced by FreeNodePortLocationModel that allows to specify the port location by a ratio of the node layout’s size and an additional offset.</p></li><li id="_ports-672-listitem-003"><p id="_ports-672-simpara-003">AnchoredPortLocationModel has been removed.</p></li></ul>'}]},{tagname:"section",id:"_table",title:"Table",children:[{tagname:"para",content:'<ul id="_table-673-itemizedlist-001"><li id="_table-673-listitem-001"><p id="_table-673-simpara-001">ITable:</p><para><ul id="_table-673-itemizedlist-002"><li id="_table-673-listitem-002"><p id="_table-673-simpara-002">The signature of #createRow and #createColumn has changed. The index parameter has been moved to the end and made optional.</p></li><li id="_table-673-listitem-003"><p id="_table-673-simpara-003">Events #StripeChanged and #StripeRemoved use StripeEventArgs now. The corresponding event raiser methods have been changed accordingly.</p></li><li id="_table-673-listitem-004"><p id="_table-673-simpara-004">Event #LabelRemoved uses LabelEventArgs now.</p></li><li id="_table-673-listitem-005"><p id="_table-673-simpara-005">added default implementations methods: #findColumn, #findRow, #getCellBounds</p></li></ul></para></li><li id="_table-673-listitem-006"><p id="_table-673-simpara-006">Class Table:</p><para><ul id="_table-673-itemizedlist-003"><li id="_table-673-listitem-007"><p id="_table-673-simpara-007">the table’s lookup decorator can now decorate stripe labels, too.</p></li><li id="_table-673-listitem-008"><p id="_table-673-simpara-008">removed methods: #createDefaultColumnStyle, #createDefaultColumnInsets, #createDefaultColumnLabelStyle, #createdDefaultColumnLabelModelParameter, #createColumnLabelDefaults, #createDefaultRowStyle, #createDefaultRowInsets, #createDefaultRowLabelStyle, #createdDefaultRowLabelModelParameter, #createRowLabelDefaults, #removeUndoSupport, some overloads of #createRow/#createColumn, some overloads of #addLabel</p></li><li id="_table-673-listitem-009"><p id="_table-673-simpara-009">Added properties #DEFAULT_STRIPE_LOOKUP, #DEFAULT_COLUMN_LOOKUP and #DEFAULT_ROW_LOOKUP that replace the removed classes with the same same.</p></li></ul></para></li><li id="_table-673-listitem-010"><p id="_table-673-simpara-010">TableExtensions: method #getElementsToMove has been removed</p></li><li id="_table-673-listitem-011"><p id="_table-673-simpara-011">Property IStripeSelection#selectedStripes has been removed. Use the individual properties for #selectedRows and #selectedColumns instead</p></li><li id="_table-673-listitem-012"><p id="_table-673-simpara-012">StripeSelection: the surplus overloads of #isSelected and #setSelected taking an IRow or IColumn have been removed.</p></li><li id="_table-673-listitem-013"><p id="_table-673-simpara-013">The static helper method #placeNodeInCell has been added to ITable to easily move a node into a specific table cell.</p></li></ul>'}]},{tagname:"section",id:"_undo_support",title:"Undo Support",children:[{tagname:"para",content:'<ul id="_undo_support-674-itemizedlist-001"><li id="_undo_support-674-listitem-001"><p id="_undo_support-674-simpara-001">Convenience default methods to enable/disable Undo have been added to IGraph.</p></li><li id="_undo_support-674-listitem-002"><p id="_undo_support-674-simpara-002">Setting the #tag property on model items and the graph now works with Undo.</p></li><li id="_undo_support-674-listitem-003"><p id="_undo_support-674-simpara-003">Undo operations for the removal of graph elements now keep the proper item order. This improves the consistency especially for layouts between undo operations.</p></li><li id="_undo_support-674-listitem-004"><p id="_undo_support-674-simpara-004">Overloads of the IGraph#beginEdit default method that work with IMementoSupport (either via ILookup or an IMementoSupportProvider) have been added.</p></li><li id="_undo_support-674-listitem-005"><p id="_undo_support-674-simpara-005">The overload of the IGraph#beginEdit default method that accepted an IEnumerable of IModelItems has been removed.</p></li><li id="_undo_support-674-listitem-006"><p id="_undo_support-674-simpara-006">IUndoSupport, MementoUndoUnit, MementoUndoableEdit, and MementoStateStruct have been removed.</p></li><li id="_undo_support-674-listitem-007"><p id="_undo_support-674-simpara-007">IUndoUnit: the methods #canUndo and #canRedo have been removed.</p></li><li id="_undo_support-674-listitem-008"><p id="_undo_support-674-simpara-008">The methods #undoImpl and #redoImpl on AbstractUndoUnit have been removed. Implementations should use #undo and #redo from the IUndoUnit interface instead.</p></li><li id="_undo_support-674-listitem-009"><p id="_undo_support-674-simpara-009">The properties #undoText and #redoText on UndoEngine have been removed.</p></li><li id="_undo_support-674-listitem-010"><p id="_undo_support-674-simpara-010">The interface IGraphUndoUnitSupport has been removed. Its methods #create…​UndoUnit have been moved to DefaultGraph as overridable methods. Developers who have created a custom implementation have to derive from DefaultGraph and override the corresponding method(s).</p></li></ul>'}]},{tagname:"section",id:"_geometry",title:"Geometry",children:[{tagname:"para","class":"dguide-para",id:"_geometry-675-simpara-001",content:"Namespace yfiles.geometry was simplified and cleaned up."},{tagname:"para",content:'<ul id="_geometry-675-itemizedlist-001"><li id="_geometry-675-listitem-001"><p id="_geometry-675-simpara-002">The basic geometry types PointD, SizeD, RectD and InsetsD have been made immutable and the "D" suffix has been removed.</p></li><li id="_geometry-675-listitem-002"><p id="_geometry-675-simpara-003">The classes ImmutablePoint, ImmutableSize, ImmutableRectangle and ImmutableOrientedRectangle have been removed. The immutable types Point, Size and Rect as well as the immutable instance provided by the new static method OrientedRectangle#createImmutable can be used instead.</p></li><li id="_geometry-675-listitem-003"><p id="_geometry-675-simpara-004">The interfaces IPointSetter and ISizeSetter have been removed. Instead their prior sub interfaces IMutablePoint and IMutableSize are used.</p></li><li id="_geometry-675-listitem-004"><p id="_geometry-675-simpara-005">The IReshapeable interface has been removed. The various overloads of the #reshape method have been implemented as default methods on IMutableRectangle instead.</p></li><li id="_geometry-675-listitem-005"><p id="_geometry-675-simpara-006">IMovable has been removed as well. Instead an IPositionHandler can be used.</p></li><li id="_geometry-675-listitem-006"><p id="_geometry-675-simpara-007">PointD#fromPoint, SizeD#fromSize and RectD#fromRectangle have been removed and replaced by the default methods IPoint#toPoint, ISize#toSize, and IRectangle#toRect.</p></li><li id="_geometry-675-listitem-007"><p id="_geometry-675-simpara-008">Various other geometry-related infrequently used or duplicate classes and interfaces have been removed.</p></li><li id="_geometry-675-listitem-008"><p id="_geometry-675-simpara-009">The static fields ImmutableSize#UNBOUND, ImmutableSize#EMPTY and ImmutableSize#ZERO have been added.</p></li></ul>'}]}]},{tagname:"section",id:"_controls_and_components",title:"Controls and Components",children:[{tagname:"para",content:'<ul id="_controls_and_components-676-itemizedlist-001"><li id="_controls_and_components-676-listitem-001"><p id="_controls_and_components-676-simpara-001">Renamed GraphControl, GraphOverviewControl, and CanvasControl to GraphComponent, GraphOverviewComponent, and CanvasComponent, respectively.</p></li><li id="_controls_and_components-676-listitem-002"><p id="_controls_and_components-676-simpara-002">Removed base class Control and its methods and events that duplicated plain JavaScript events (MouseEventArgs, TouchEventArgs, KeyEventArgs).\nThe yFiles-specific events Mouse2DEventArgs, Touch2DEventArgs, and CompoundKeyEventArgs are still present and have been renamed to MouseEventArgs, TouchEventArgs, and KeyEventArgs.</p></li><li id="_controls_and_components-676-listitem-003"><p id="_controls_and_components-676-simpara-003">Replaced TextBox with plain HTML5 TextArea. Made ScrollBar internal. It was never intended for usages outside of\nGraph/CanvasComponent.</p></li><li id="_controls_and_components-676-listitem-004"><p id="_controls_and_components-676-simpara-004">Moved load and save features from GraphComponent to GraphMLSupport.</p></li></ul>'},{tagname:"section",id:"_members_of_graphcomponent",title:"Members of GraphComponent",children:[{tagname:"para",content:'<ul id="_members_of_graphcomponent-677-itemizedlist-001"><li id="_members_of_graphcomponent-677-listitem-001"><p id="_members_of_graphcomponent-677-simpara-001">The ContentRect will now also be updated when creating edges, adding, editing or moving labels or deleting all graph item types.</p></li><li id="_members_of_graphcomponent-677-listitem-002"><p id="_members_of_graphcomponent-677-simpara-002">The CUT, COPY and PASTE commands are no longer handled and the respective methods have been removed as well. COPY command bindings are still supplied by GraphViewerInputMode and GraphEditorInputMode. CUT and PASTE command bindings are still supplied by GraphEditorInputMode.</p></li><li id="_members_of_graphcomponent-677-listitem-003"><p id="_members_of_graphcomponent-677-simpara-003">The UNDO and REDO commands are no longer handled and the respective methods have been removed as well. UNDO and REDO command bindings are still supplied by GraphEditorInputMode. Furthermore, the respective methods can still be called on the UndoEngine directly.</p></li><li id="_members_of_graphcomponent-677-listitem-004"><p id="_members_of_graphcomponent-677-simpara-004">Property #UndoabilityEnabled has been removed. Undo and Redo commands can be enabled on the GraphEditorInputMode.</p></li><li id="_members_of_graphcomponent-677-listitem-005"><p id="_members_of_graphcomponent-677-simpara-005">Property #ClipboardEnabled has been removed. Clipboard commands can be enabled on the GraphEditorInputMode.</p></li><li id="_members_of_graphcomponent-677-listitem-006"><p id="_members_of_graphcomponent-677-simpara-006">Method #getUndoEngine has been removed. The current UndoEngine can be retrieved from the GraphComponent#Graph.</p></li><li id="_members_of_graphcomponent-677-listitem-007"><p id="_members_of_graphcomponent-677-simpara-007">Event #SelectionChanged has been removed.</p></li><li id="_members_of_graphcomponent-677-listitem-008"><p id="_members_of_graphcomponent-677-simpara-008">The new property #LastEventLocation always contains the location of the last mouse event.</p></li><li id="_members_of_graphcomponent-677-listitem-009"><p id="_members_of_graphcomponent-677-simpara-009">The property #MouseWheelBehavior taking a value of type MouseWheelBehaviors replaces the previous property #AutoMouseWheelZoomEnabled.</p></li><li id="_members_of_graphcomponent-677-listitem-010"><p id="_members_of_graphcomponent-677-simpara-010">The ObjectProperty #fitContentViewMarginsProperty has been added that allows to observe when the property #FitContentViewMargins has been changed.</p></li><li id="_members_of_graphcomponent-677-listitem-011"><p id="_members_of_graphcomponent-677-simpara-011">The methods #add, #addCreator, #addGroup and #addGroupToGroup have been removed as the new methods #addChild and #addGroup of ICanvasObjectGroup provide a more intuitive way to add child elements to e.g. the GraphComponent#getBackgroundGroup.</p></li><li id="_members_of_graphcomponent-677-listitem-012"><p id="_members_of_graphcomponent-677-simpara-012">The property #InputModes has been removed. Developers who want to install multiple input modes on a CanvasComponent have to set a MultiplexingInputMode as CanvasComponent#InputMode and add their input modes to that mode.</p></li><li id="_members_of_graphcomponent-677-listitem-013"><p id="_members_of_graphcomponent-677-simpara-013">Method #collectCanvasObjects has been removed</p></li></ul>'}]}]},{tagname:"section",id:"_visualization",title:"Visualization",children:[{tagname:"section",id:"_styles",title:"Styles",children:[{tagname:"para",content:'<ul id="_styles-679-itemizedlist-001"><li id="_styles-679-listitem-001"><p id="_styles-679-simpara-001">Renamed SimpleAbstractNode/Edge/Port/LabelStyle to Node/Edge/Port/LabelStyleBase.\nIn addition, the type parameter of has been removed from all these types.</p></li><li id="_styles-679-listitem-002"><p id="_styles-679-simpara-002">Removed SimplePortStyle. Instead, use NodeStylePortStyleAdapter with ShapeNodeStyle.</p></li><li id="_styles-679-listitem-003"><p id="_styles-679-simpara-003">Renamed SimpleLabelStyle to DefaultLabelStyle.</p></li><li id="_styles-679-listitem-004"><p id="_styles-679-simpara-004">Renamed Typeface to Font and simplified the API of TextRenderSupport.</p></li><li id="_styles-679-listitem-005"><p id="_styles-679-simpara-005">Added the interface IStripeStyle for styles of IColumns and IRows. With NodeStyleStripeStyleAdapter, you can still use node styles as styles for columns and rows.</p></li><li id="_styles-679-listitem-006"><p id="_styles-679-simpara-006">Removed all Visuals except Visual, SvgVisual (was DefaultVisual), HtmlCanvasVisual (RenderVisual), and SvgVisualGroup (CanvasContainer). All of them can be replaced with SvgVisual and corresponding SVG elements.</p></li><li id="_styles-679-listitem-007"><p id="_styles-679-simpara-007">The style and style renderer hierarchies have been flattened</p><para><ul id="_styles-679-itemizedlist-002"><li id="_styles-679-listitem-008"><p id="_styles-679-simpara-008">Removed all sub-interfaces of INodeStyle, IEdgeStyle, ILabelStyle, and IPortStyle.</p></li><li id="_styles-679-listitem-009"><p id="_styles-679-simpara-009">Removed classes AbstractEdgeStyle, AbstractStyleRenderer, AbstractNodeStyleRenderer, AbstractEdgeStyleRenderer, AbstractLabelStyleRenderer, AbstractShapedNodeStyleRenderer, AbstractShapedLabelStyleRenderer, VoidVisualStyle, and VoidStyleRenderer</p></li><li id="_styles-679-listitem-010"><p id="_styles-679-simpara-010">Merged types AbstractTableNodeStyle and DynamicTableNodeStyle into TableNodeStyle.</p></li></ul></para></li><li id="_styles-679-listitem-011"><p id="_styles-679-simpara-011">Removed superfluous interfaces IUserTagProvider and ITableProvider, and all implementations.</p></li><li id="_styles-679-listitem-012"><p id="_styles-679-simpara-012">Removed superfluous constructors from all style implementations.</p></li><li id="_styles-679-listitem-013"><p id="_styles-679-simpara-013">All IStyleRenderer implementations: the accessibility of the #Style, #Layout, and #Item properties has been reduced to protected. In addition, the latter has been renamed to #Node, #Label, #Edge, or #Port respectively.</p></li><li id="_styles-679-listitem-014"><p id="_styles-679-simpara-014">Various changes to IModelItemInstaller and related interfaces and classes. Styles no longer implement IModelItemInstaller, simplifying certain custom style implementations.</p></li></ul>'}]},{tagname:"section",id:"_various_visualization_changes",title:"Various Visualization Changes",children:[{tagname:"para",content:'<ul id="_various_visualization_changes-680-itemizedlist-001"><li id="_various_visualization_changes-680-listitem-001"><p id="_various_visualization_changes-680-simpara-001">Customizing the visualization of handles etc. via data templating has been refactored. The new interface IVisualTemplate\nis similar to IVisualCreator and replaces the types IDataTemplate, DataTemplate, and the related visuals.</p></li><li id="_various_visualization_changes-680-listitem-002"><p id="_various_visualization_changes-680-simpara-002">The protected factory methods that supplied the initial value for GraphModelManager’s Installer properties (#EdgeStyleInstaller, #NodeStyleInstaller, etc.) have been removed.</p></li><li id="_various_visualization_changes-680-listitem-003"><p id="_various_visualization_changes-680-simpara-003">GraphModelManager#invalidate has been removed.</p></li><li id="_various_visualization_changes-680-listitem-004"><p id="_various_visualization_changes-680-simpara-004">Added a mechanism to support disposing and caching Visuals which are created by IVisualCreator#createVisual.\nAdd methods #setDisposeCallback, #childVisualRemoved, and #registerForChildrenIfNecessary to IRenderContext.</p></li><li id="_various_visualization_changes-680-listitem-005"><p id="_various_visualization_changes-680-simpara-005">The method IRenderContext#canvas has been pulled up to ICanvasContext and renamed to #canvasComponent.</p></li><li id="_various_visualization_changes-680-listitem-006"><p id="_various_visualization_changes-680-simpara-006">IRenderContext: the property #Transform has been removed</p></li><li id="_various_visualization_changes-680-listitem-007"><p id="_various_visualization_changes-680-simpara-007">Removed class RenderContext. Use ContextConfigurator#createRenderContext instead to retrieve an instance of IRenderContext.</p></li><li id="_various_visualization_changes-680-listitem-008"><p id="_various_visualization_changes-680-simpara-008">DefaultEdgePathCropper now uses the new method #handleEmptyPath if cropping the edge would result in an empty path. Per default this method only crops at the ports.</p></li><li id="_various_visualization_changes-680-listitem-009"><p id="_various_visualization_changes-680-simpara-009">DefaultEdgeIntersectionCalculator: a callback method #getNodeGeometry has been added.</p></li><li id="_various_visualization_changes-680-listitem-010"><p id="_various_visualization_changes-680-simpara-010">The property #CanvasObjectGroupProviderCallback on ModelManager has been replaced with the virtual method #getCanvasObjectGroup. The property #CanvasObjectGroupProviderCallback on ItemModelManager has been replaced with the property #CanvasObjectGroup and the virtual method #getCanvasObjectGroup; the default implementation just defers to the property, just like #getDescriptor.</p></li><li id="_various_visualization_changes-680-listitem-011"><p id="_various_visualization_changes-680-simpara-011">IGroupAction as well as ICanvasObjectGroup#getGroupAction have been removed as they had hardly any use.</p></li><li id="_various_visualization_changes-680-listitem-012"><p id="_various_visualization_changes-680-simpara-012">The interface ICanvasGroupProvider and the delegate CanvasObjectGroupProviderCallback have been removed. Accessing the individual CanvasObjectGroups can be done via the properties of CanvasComponent instead.</p></li><li id="_various_visualization_changes-680-listitem-013"><p id="_various_visualization_changes-680-simpara-013">Removed ICanvasObjectTreeEventSource and the corresponding classes CanvasObjectAddEventArgs, CanvasObjectRemoveEventArgs, CanvasObjectMoveEventArgs, and CanvasObjectInvalidateEventArgs.</p></li></ul>'
}]}]},{tagname:"section",id:"_input",title:"Input",children:[{tagname:"section",id:"_general_input_mode_refactorings",title:"General Input Mode refactorings",children:[{tagname:"para",content:'<ul id="_general_input_mode_refactorings-682-itemizedlist-001"><li id="_general_input_mode_refactorings-682-listitem-001"><p id="_general_input_mode_refactorings-682-simpara-001">The type hierarchy for input modes has been simplified considerably:</p><para><ul id="_general_input_mode_refactorings-682-itemizedlist-002"><li id="_general_input_mode_refactorings-682-listitem-002"><p id="_general_input_mode_refactorings-682-simpara-002">All input modes except OverviewInputMode, GraphViewerInputMode, and GraphEditorInputMode now directly implement IInputMode without any abstract base classes in between.</p></li><li id="_general_input_mode_refactorings-682-listitem-003"><p id="_general_input_mode_refactorings-682-simpara-003">IConcurrentInputMode has been removed and merged into IInputMode.</p><para><ul id="_general_input_mode_refactorings-682-itemizedlist-003"><li id="_general_input_mode_refactorings-682-listitem-004"><p id="_general_input_mode_refactorings-682-simpara-004">The #enabled property on the interface has been removed. It is still present on all concrete implementations.</p></li><li id="_general_input_mode_refactorings-682-listitem-005"><p id="_general_input_mode_refactorings-682-simpara-005">The concurrencyController property has been removed. Instead, a parameter of type ConcurrencyController has been added to the IInputMode#install method.</p></li></ul></para></li><li id="_general_input_mode_refactorings-682-listitem-006"><p id="_general_input_mode_refactorings-682-simpara-006">All abstract input mode base classes except AbstractInputMode have been removed. AbstractConcurrentInputMode has been merged into AbstractInputMode.</p></li><li id="_general_input_mode_refactorings-682-listitem-007"><p id="_general_input_mode_refactorings-682-simpara-007">AbstractInputMode: #requestMouse, #requestTouch, #releaseMouse, and #releaseTouch have been combined into #requestPointer and #releasePointer</p></li></ul></para></li><li id="_general_input_mode_refactorings-682-listitem-008"><p id="_general_input_mode_refactorings-682-simpara-008">Input mutex handling has been refactored considerably:</p><para><ul id="_general_input_mode_refactorings-682-itemizedlist-004"><li id="_general_input_mode_refactorings-682-listitem-009"><p id="_general_input_mode_refactorings-682-simpara-009">IInputMode’s concurrencyController property has been removed. Input modes now get a ConcurrencyController as parameter of their #install method.</p></li><li id="_general_input_mode_refactorings-682-listitem-010"><p id="_general_input_mode_refactorings-682-simpara-010">The ConcurrencyController has been refactored and is now only responsible for a single input mode. Its #active property indicates if the input mode currently has or may request the mutex.</p></li><li id="_general_input_mode_refactorings-682-listitem-011"><p id="_general_input_mode_refactorings-682-simpara-011">The class InputMutex has been removed.</p></li><li id="_general_input_mode_refactorings-682-listitem-012"><p id="_general_input_mode_refactorings-682-simpara-012">The #preferredCursor property has been moved from IInputMode to ConcurrencyController.</p></li><li id="_general_input_mode_refactorings-682-listitem-013"><p id="_general_input_mode_refactorings-682-simpara-013">The input mutex should be requested and released using the according methods on ConcurrencyController. Most input modes don’t provide the methods #hasMutex, #canRequestMutex, #requestMutex and #releaseMutex anymore.</p></li><li id="_general_input_mode_refactorings-682-listitem-014"><p id="_general_input_mode_refactorings-682-simpara-014">The #enabled property of IInputModes is not set to false anymore if another input mode acquires the mutex. Instead their ConcurrencyController is deactivated. This provides a clear separation between suppressing input modes (while another mode holds the mutex) and explicitly disabling a mode from code (via the #enabled property).</p></li><li id="_general_input_mode_refactorings-682-listitem-015"><p id="_general_input_mode_refactorings-682-simpara-015">As a consequence most input modes don’t provide the EnabledChanged event and the #onEnabled and #onDisabled protected methods anymore, but #onConcurrencyControllerActivated and #onConcurrencyControllerDeactivated instead.</p></li></ul></para></li><li id="_general_input_mode_refactorings-682-listitem-016"><p id="_general_input_mode_refactorings-682-simpara-016">IInputMode has a new property #priority which defines the installation priority of the input mode. Previously those were available as properties on GraphViewerInputMode, GraphEditorInputMode, and TableEditorInputMode. Those have been removed.</p></li><li id="_general_input_mode_refactorings-682-listitem-017"><p id="_general_input_mode_refactorings-682-simpara-017">IInputMode’s #stop method has been renamed to tryStop to make it more obvious that an implementation might return false to indicate that it did not actually stop.</p></li><li id="_general_input_mode_refactorings-682-listitem-018"><p id="_general_input_mode_refactorings-682-simpara-018">All input modes no longer raise Stopped and Canceled events. Developers who want to get notified when an input mode gets stopped or canceled have to override the #onStopped and #onCanceled methods. Also, the events Initializing and Initialized no longer exist. Input modes that need to perform one-time initialization on first #install can keep track of that themselves.</p></li><li id="_general_input_mode_refactorings-682-listitem-019"><p id="_general_input_mode_refactorings-682-simpara-019">MultiplexingInputMode: the #addConcurrent methods as well as the #add method which takes an additional priority parameter have been removed. There is only one #add method left, which takes an input mode as its only parameter. Priority is determined by the input mode’s #priority property. Whether an input mode runs exclusive or always active alongside other input modes is determined by the input mode’s ConcurrencyController which has an #exclusive property controlling that. This property is also available for all default IInputMode implementations.</p></li><li id="_general_input_mode_refactorings-682-listitem-020"><p id="_general_input_mode_refactorings-682-simpara-020">MultiplexingInputMode is now aware of changes to the priority of already installed input modes and will update the installation order accordingly when an input mode’s priority is changed.</p></li><li id="_general_input_mode_refactorings-682-listitem-021"><p id="_general_input_mode_refactorings-682-simpara-021">IInputModes in general</p><para><ul id="_general_input_mode_refactorings-682-itemizedlist-005"><li id="_general_input_mode_refactorings-682-listitem-022"><p id="_general_input_mode_refactorings-682-simpara-022">the setter for #graph and #graphSelection properties, if present, and its associated #set* methods have been removed. Both are now always retrieved from the input mode context dynamically.</p></li><li id="_general_input_mode_refactorings-682-listitem-023"><p id="_general_input_mode_refactorings-682-simpara-023">the read-only property #inputModeContext has been introduced to expose the IInputModeContext the mode is installed in.</p></li><li id="_general_input_mode_refactorings-682-listitem-024"><p id="_general_input_mode_refactorings-682-simpara-024">Many input modes now no longer have protected methods for state machine transitions. Instead those methods are mostly parameterless now.</p></li></ul></para></li></ul>'}]},{tagname:"section",id:"_grapheditorinputmode_and_graphviewerinputmode",title:"GraphEditorInputMode and GraphViewerInputMode",children:[{tagname:"para",content:'<ul id="_grapheditorinputmode_and_graphviewerinputmode-683-itemizedlist-001"><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-001"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-001">GraphViewerInputMode and GraphEditorInputMode have been made more similar regarding customization in the capabilities they both provide:</p><para><ul id="_grapheditorinputmode_and_graphviewerinputmode-683-itemizedlist-002"><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-002"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-002">GraphViewerInputMode now supports the same click and selection behavior as GraphEditorInputMode. This includes detail selection (Shift+Click) and cyclic selection (Alt+Click) as well as finer control over behavior like the #clickSelectableItems property and the #shouldClickSelect method.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-003"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-003">The methods #click and #doubleClick now take an IModelItem and ClickEventArgs as arguments and have no return value. Instead of returning a boolean, the #handled property on the ClickEventArgs should be set.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-004"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-004">Their #clickInputMode instances now delivers both left and right clicks at the same time.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-005"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-005">The default click actions that change the selection and create new nodes are only triggered on left mouse clicks now.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-006"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-006">An explicit hit test order for double clicks is provided that can be changed through the #doubleClickHitTestOrder property. By default, this hit test order prefers labels over other graph elements.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-007"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-007">GraphViewerInputMode now also has the #availableCommands property, already known from GraphEditorInputMode or NavigationInputMode.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-008"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-008">Several child input mode priorities in GraphViewerInputMode have been changed and most of them now have the same priorities as in GraphEditorInputMode</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-009"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-009">The new #CanvasClicked event reports clicks on an empty canvas location.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-010"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-010">The new property #selectablePredicate allows finer control over what particular items should be selectable without the need to create a custom subclass.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-011"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-011">The new method #createSelectionEventArgs creates SelectionEventArgs using the #graphSelection.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-012"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-012">The events MultiSelectionStarted and MultiSelectionFinished now use SelectionEventArgs&lt;IModelItem>.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-013"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-013">By default, graph items styled with a void style (VoidNodeStyle, VoidEdgeStyle, VoidLabelStyle, and VoidPortStyle) are not selected or focused anymore. The new property #voidStylesIgnored specifies whether this feature is enabled.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-014"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-014">GraphViewerInputMode now has improved support for marquee selection. Marquee selection is no longer turned on or off via #marqueeSelectableItems but instead directly on the MarqueeSelectionInputMode. The recognizer for marquee selection is Shift+Drag and the child input mode priorities have been adjusted accordingly so that marquee selection and viewport movement can co-exist. The child input mode still defaults to being disabled, though.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-015"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-015">GraphViewerInputMode now also has a KeyboardInputMode.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-016"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-016">GraphViewerInputMode now allows copying items (including the convenience method) and handles the command appropriately.</p></li></ul></para></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-017"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-017">Improved functionality of GraphEditorInputMode</p><para><ul id="_grapheditorinputmode_and_graphviewerinputmode-683-itemizedlist-003"><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-018"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-018">Changing the #showHandleItems property will now immediately update the currently visible handles.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-019"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-019">The new property #deletablePredicate allows finer control over what particular items should be deletable without the need to create a custom subclass.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-020"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-020">The new events #LabelAdding and #LabelEditing were added. Those allow fine-grained control over adding or editing labels and tie into the existing functionality provided by IEditLabelHelper.</p></li></ul></para></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-021"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-021">Clean-up of the old GraphEditorInputMode API</p><para><ul id="_grapheditorinputmode_and_graphviewerinputmode-683-itemizedlist-004"><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-022"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-022">The type of the property #orthogonalBendRemoval has been changed from boolean to OrthogonalEdgeEditingPolicy.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-023"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-023">The events DeletingSelection and DeletedSelection now use SelectionEventArgs&lt;IModelItem>.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-024"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-024">The constructor that take additional IGraph and IGraphSelection arguments have been removed, as well as the protected methods #setGraph, #setGraphComponent, #onGraphChanged and the protected setter for the #GraphSelection property. Instead, the IGraph instance is now always taken from the #InputModeContext and can’t be changed after the mode is installed.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-025"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-025">#createDefaultLabelConfiguration has been removed</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-026"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-026">#marqueeSelect&lt;T>(RectD,IEnumerable&lt;T>) has been removed.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-027"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-027">#SelectionModel has been removed. Instead the #GraphSelection property is used.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-028"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-028">#CollectionModel has been removed. Instead the model items of the #Graph property are used.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-029"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-029">#GraphInputModeController has been removed.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-030"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-030">The protected event handlers for ClickInputMode’s Clicked and DoubleClicked events have been removed.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-031"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-031">#findItem has been removed. An additional overload of #findItems without the context parameter has been added. To replicate the previous behavior of #findItem, #findItems can be called and the first element taken from the resulting enumeration.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-032"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-032">#shouldBeMovableForMoveInputMode has been removed.</p></li></ul></para></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-033"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-033">Improved GraphViewerInputMode API:</p><para><ul id="_grapheditorinputmode_and_graphviewerinputmode-683-itemizedlist-005"><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-034"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-034">Added support for the COPY command.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-035"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-035">Added support for multi-selection via Ctrl+Click and marquee selection. The latter is disabled by default.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-036"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-036">The click hit test order can now be configured by property #clickHitTestOrder.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-037"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-037">By default, clipboard commands are now disabled. This can be controlled with the new property #allowClipboardOperations.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-038"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-038">The ItemSelected event has been removed.</p></li><li id="_grapheditorinputmode_and_graphviewerinputmode-683-listitem-039"><p id="_grapheditorinputmode_and_graphviewerinputmode-683-simpara-039">#ClipboardCommandsEnabled has been removed.</p></li></ul></para></li></ul>'}]},{tagname:"section",id:"_createedgeinputmode",title:"CreateEdgeInputMode",children:[{tagname:"para",content:'<ul id="_createedgeinputmode-684-itemizedlist-001"><li id="_createedgeinputmode-684-listitem-001"><p id="_createedgeinputmode-684-simpara-001">CreateEdgeInputMode was refactored and streamlined:</p><para><ul id="_createedgeinputmode-684-itemizedlist-002"><li id="_createedgeinputmode-684-listitem-002"><p id="_createedgeinputmode-684-simpara-002">Orthogonal edge creation will be automatically enabled if orthogonal edge editing is enabled on the containing GraphEditorInputMode.</p></li><li id="_createedgeinputmode-684-listitem-003"><p id="_createedgeinputmode-684-simpara-003">Property #connectToCandidatesOnly was removed. Now edge creation always uses port candidates.</p></li><li id="_createedgeinputmode-684-listitem-004"><p id="_createedgeinputmode-684-simpara-004">The creation callbacks #nodeBasedEdgeCreationCallback and #portBasedEdgeCreationCallback have been replaced by the new #edgeCreator which is port-based.</p></li><li id="_createedgeinputmode-684-listitem-005"><p id="_createedgeinputmode-684-simpara-005">The methods #getSourcePortOwner, #getTargetPortOwner, #getSourceNode and #getTargetNode have been replaced by #getSource and #getTarget.</p></li><li id="_createedgeinputmode-684-listitem-006"><p id="_createedgeinputmode-684-simpara-006">The properties #sourcePortCandidate and #targetPortCandidate now are read-write.</p></li><li id="_createedgeinputmode-684-listitem-007"><p id="_createedgeinputmode-684-simpara-007">The methods #determineEdgeStyle, #assignSourcePortPosition, #assignEdgeStyle as well as the property #edgeStyle have been removed. Instead the new #edgeDefaults property can be used to customize the new edge.</p></li><li id="_createedgeinputmode-684-listitem-008"><p id="_createedgeinputmode-684-simpara-008">Property #useHitNodeTargetCandidatesOnly was replaced by the new #useHitItemsCandidatesOnly property.</p></li><li id="_createedgeinputmode-684-listitem-009"><p id="_createedgeinputmode-684-simpara-009">The type of the property #orthogonalEdgeCreation has been changed from boolean to OrthogonalEdgeEditingPolicy.</p></li><li id="_createedgeinputmode-684-listitem-010"><p id="_createedgeinputmode-684-simpara-010">The new property #dummyEdgeGraph is used to create the dummy edge that visualizes the edge during creation.</p></li><li id="_createedgeinputmode-684-listitem-011"><p id="_createedgeinputmode-684-simpara-011">The preview edge which is displayed during edge creation now shows the edge as it will be created, i.e. the preview edge has the same style, port visualization, and labels as the created edge will have.</p></li><li id="_createedgeinputmode-684-listitem-012"><p id="_createedgeinputmode-684-simpara-012">The property #snapToTargetCandidateOwner has been removed. The preview edge now is always being cropped at the candidate owner’s borders.</p></li><li id="_createedgeinputmode-684-listitem-013"><p id="_createedgeinputmode-684-simpara-013">A new property #cancelGestureOnInvalidTarget has been added that makes it possible to cancel the gesture immediately if ended on an invalid target.</p></li><li id="_createedgeinputmode-684-listitem-014"><p id="_createedgeinputmode-684-simpara-014">#edgeCreator callback now has a templateEdge parameter where all data for edge creation can be retrieved from. The source and target IPort parameters have been changed to IPortCandidates.</p></li><li id="_createedgeinputmode-684-listitem-015"><p id="_createedgeinputmode-684-simpara-015">#assignBends has been removed and its functionality folded into the default #edgeCreator implementation.</p></li><li id="_createedgeinputmode-684-listitem-016"><p id="_createedgeinputmode-684-simpara-016">The following methods have been removed: #isPortCandidateResolutionEnabled, #isValidEnd, #isValidBegin, #isCancelGesture, #isBendCreationEnforced, #isValidBend, #isSourceNodeDraggingFinished, #isRemoveBendEvent. Instead, use the corresponding #*EventRecognizer properties to customize the behavior.</p></li><li id="_createedgeinputmode-684-listitem-017"><p id="_createedgeinputmode-684-simpara-017">The following methods and properties have been removed: #createBend(PointD), #startCreateEdge, #onTargetLocationChanged, #getNodes, #nodeComparer, #portOwnerComparer.</p></li></ul></para></li></ul>'}]},{tagname:"section",id:"_other_input_modes",title:"Other Input Modes",children:[{tagname:"para",content:'<ul id="_other_input_modes-685-itemizedlist-001"><li id="_other_input_modes-685-listitem-001"><p id="_other_input_modes-685-simpara-001">AbstractContextMenuInputMode: Support for different context menu trigger events has been added. Currently only mouse (right-click) and keyboard (application / context menu key) are distinguished, more may be added in the future.</p></li><li id="_other_input_modes-685-listitem-002"><p id="_other_input_modes-685-simpara-002">ClickInputMode: The property #validClickHitCursor has been added. This cursor is used when hovering over a valid hit region.</p></li><li id="_other_input_modes-685-listitem-003"><p id="_other_input_modes-685-simpara-003">ClickInputMode: Added new method #preventNextDoubleClick that can be used in event handlers for single clicks to prevent that this click can become part of a double click event.</p></li><li id="_other_input_modes-685-listitem-004"><p id="_other_input_modes-685-simpara-004">CreateBendInputMode: The property #cancelEventRecognizer has been removed.</p></li><li id="_other_input_modes-685-listitem-005"><p id="_other_input_modes-685-simpara-005">HandleInputMode: The property #active has been removed. The mode can be manually deactivated using the #enabled property instead.</p></li><li id="_other_input_modes-685-listitem-006"><p id="_other_input_modes-685-simpara-006">HandleInputMode: The method #arm now has a handle parameter for the handle that is under the mouse cursor.</p></li><li id="_other_input_modes-685-listitem-007"><p id="_other_input_modes-685-simpara-007">NodeDropInputMode: Removed callback #nodeCreator, event #nodeCreated and method #getDraggedNode. Used callback #itemCreator, event #ItemCreated and property #DraggedItem from superclass ItemDropInputMode instead.</p></li><li id="_other_input_modes-685-listitem-008"><p id="_other_input_modes-685-simpara-008">OverviewInputMode now extends MultiplexingInputMode.</p></li><li id="_other_input_modes-685-listitem-009"><p id="_other_input_modes-685-simpara-009">OverviewInputMode can be customized more easily. Minor modes can be replaced and adjusted, as well as the list of available default command bindings can be modified.</p></li><li id="_other_input_modes-685-listitem-010"><p id="_other_input_modes-685-simpara-010">OverviewInputMode: The new property #margins specifies margins for the visible area of the bound GraphOverviewComponent. The new protected method #updateVisibleArea provides further means for customizing the visible area.</p></li><li id="_other_input_modes-685-listitem-011"><p id="_other_input_modes-685-simpara-011">MarqueeSelectionInputMode: The events DragStarting, DragStarted, Dragging, Dragged, DragFinishing, DragFinished, DragCanceling and DragCanceled now use MarqueeSelectionEventArgs that provide the current selection rectangle.</p></li><li id="_other_input_modes-685-listitem-012"><p id="_other_input_modes-685-simpara-012">MarqueeSelectionInputMode: The event MarqueeSelected has been removed. The DragFinished event can be used instead.</p></li><li id="_other_input_modes-685-listitem-013"><p id="_other_input_modes-685-simpara-013">MarqueeSelectionInputMode: Property #lastModifierState has been removed.</p></li><li id="_other_input_modes-685-listitem-014"><p id="_other_input_modes-685-simpara-014">MoveInputMode now provides a #QueryPositionHandler event that queries an IPositionHandler each time a drag is started.</p></li><li id="_other_input_modes-685-listitem-015"><p id="_other_input_modes-685-simpara-015">MoveViewportInputMode: Mouse cursor handling is now also done by protected methods #arm and #disarm, similar to other input modes.</p></li><li id="_other_input_modes-685-listitem-016"><p id="_other_input_modes-685-simpara-016">MultiplexingInputMode: The #childController property and #createChildConcurrencyController method have been removed.</p></li><li id="_other_input_modes-685-listitem-017"><p id="_other_input_modes-685-simpara-017">TableEditorInputMode: The new events #LabelAdding and #LabelEditing allow fine-grained control over adding or editing labels and tie into the existing functionality provided by IEditLabelHelper.</p></li><li id="_other_input_modes-685-listitem-018"><p id="_other_input_modes-685-simpara-018">TableEditorInputMode: The events DeletingSelection and DeletedSelection now use SelectionEventArgs&lt;IStripe>.</p></li><li id="_other_input_modes-685-listitem-019"><p id="_other_input_modes-685-simpara-019">TableEditorInputMode: now contains the property #allowMixedSelection which has been moved from the removed class CompositeStripeSelection.</p></li><li id="_other_input_modes-685-listitem-020"><p id="_other_input_modes-685-simpara-020">WaitInputMode#getMultiplexingInputMode has been removed.</p></li><li id="_other_input_modes-685-listitem-021"><p id="_other_input_modes-685-simpara-021">TextEditorInputMode: The events EditingStarted, EditingCanceled and TextEdited now use TextEventArgs.</p></li><li id="_other_input_modes-685-listitem-022"><p id="_other_input_modes-685-simpara-022">TextEditorInputMode: The properties #stopRecognizer, #cancelRecognizer and #lineBreakRecognizer have been added which allow for easy customization of the key gestures used to add new line breaks and to cancel or stop the text editing.</p></li></ul>'}]},{tagname:"section",id:"_label_editing",title:"Label Editing",children:[{tagname:"para",content:'<ul id="_label_editing-686-itemizedlist-001"><li id="_label_editing-686-listitem-001"><p id="_label_editing-686-simpara-001">IEditLabelHelper was refactored:</p><para><ul id="_label_editing-686-itemizedlist-002"><li id="_label_editing-686-listitem-002"><p id="_label_editing-686-simpara-002">#addLabel and #editLabel were replaced by the methods #onLabelAdding and #onLabelEditing which take the new LabelEditingEventArgs as only argument.</p></li><li id="_label_editing-686-listitem-003"><p id="_label_editing-686-simpara-003">The method IEditLabelHelper#configureTextEditorInputMode has been removed. It has been replaced by the property LabelEditingEventArgs#textEditorInputModeConfigurator.</p></li><li id="_label_editing-686-listitem-004"><p id="_label_editing-686-simpara-004">The customizations possible from IEditLabelHelper are the same as those from the LabelAdding and LabelEditing events on GraphEditorInputMode and TableEditorInputMode. IEditLabelHelper is conceptually used as another event handler for those events.</p></li><li id="_label_editing-686-listitem-005"><p id="_label_editing-686-simpara-005">The property #owner of the implementing class EditLabelHelper has been removed, along with the respective constructor. The label owner can usually be queried from the LabelEditingEventArgs. Custom subclasses can of course still opt to store the item they were created for and use that field.</p></li></ul></para></li><li id="_label_editing-686-listitem-006"><p id="_label_editing-686-simpara-006">If an IEditLabelHelper implementation is present in an ILabeledItem’s lookup, its #addLabel method is called to determine whether a label may be added and provide a suitable label instance. Additionally, the predicate method GraphEditorInputMode#shouldLabelBeAdded always has to return true, whether edit helpers are present or not. If the new label should be edited interactively after it’s creation (the default behavior), it also must be editable, following the rules above. Therefore an IEditLabelHelper implementation usually should allow editing of label instances that it has created itself in #onLabelAdding.</p></li><li id="_label_editing-686-listitem-007"><p id="_label_editing-686-simpara-007">The current label visual can be hidden while the text editor is shown to reduce visual clutter. This feature is enabled by default and can be controlled through the property GraphEditorInputMode#hidingLabelDuringEditing.</p></li></ul>'}]},{tagname:"section",id:"_snapping",title:"Snapping",children:[{tagname:"para",content:'<ul id="_snapping-687-itemizedlist-001"><li id="_snapping-687-listitem-001"><p id="_snapping-687-simpara-001">SnapContext:</p><para><ul id="_snapping-687-itemizedlist-002"><li id="_snapping-687-listitem-002"><p id="_snapping-687-simpara-002">A boolean parameter snappingDisabled has been added to the methods #handleMove and #dragFinished. This parameter has to be set to true to handle moves or finish a drag when snapping is temporarily disabled. This replaces the call to SnapContext#disableSnapping.</p></li><li id="_snapping-687-listitem-003"><p id="_snapping-687-simpara-003">The events Initializing, Initialized and CleanedUp as well as associated methods now use InputModeEventArgs.</p></li><li id="_snapping-687-listitem-004"><p id="_snapping-687-simpara-004">#VOID_INSTANCE has been removed.</p></li></ul></para></li><li id="_snapping-687-listitem-005"><p id="_snapping-687-simpara-005">GraphSnapContext:</p><para><ul id="_snapping-687-itemizedlist-003"><li id="_snapping-687-listitem-006"><p id="_snapping-687-simpara-006">The return type of #getMovementInfos has been changed to IListEnumerable&lt;MovementInfo> and the classes NodeMovementInfo, PortMovementInfo, BendMovementInfo and EdgeEndMovementInfo have been removed.</p></li><li id="_snapping-687-listitem-007"><p id="_snapping-687-simpara-007">The info parameter’s type of #addEdgeEndToBeMoved has been changed to the more general MovementInfo. A boolean parameter atSource has been added.</p></li><li id="_snapping-687-listitem-008"><p id="_snapping-687-simpara-008">The methods #addSameWidthEntries and #addSameHeightEntries now return an IListEnumerable&lt;Rect> containing the rectangles whose widths respectively heights are closest to the given size. The parameters resultingSize and rects have been removed.</p></li></ul></para></li><li id="_snapping-687-listitem-009"><p id="_snapping-687-simpara-009">IEdgeSnapResultProvider</p><para><ul id="_snapping-687-itemizedlist-004"><li id="_snapping-687-listitem-010"><p id="_snapping-687-simpara-010">The methods #initializeSnapping and #cleanupSnapping have been removed.</p></li><li id="_snapping-687-listitem-011"><p id="_snapping-687-simpara-011">The info parameter’s type of #CollectSnapResults has been changed to IListEnumerable&lt;MovementInfo>.</p></li></ul></para></li><li id="_snapping-687-listitem-012"><p id="_snapping-687-simpara-012">SnapResult now has more factory methods. The class SnapLineSnapResult has been replaced by a factory method as well.</p></li><li id="_snapping-687-listitem-013"><p id="_snapping-687-simpara-013">The Classes SnapLineContainer, SingleLineSnapLineContainer, EdgeSegmentSnapLineContainer, FixedDistanceSnapLineContainer, InBetweenSnapLineContainer have been removed.</p></li></ul>'}]},{tagname:"section",id:"_clipboard",title:"Clipboard",children:[{tagname:"para",content:'<ul id="_clipboard-688-itemizedlist-001"><li id="_clipboard-688-listitem-001"><p id="_clipboard-688-simpara-001">The GraphClipboard#clipboardContext property has been removed.</p></li><li id="_clipboard-688-listitem-002"><p id="_clipboard-688-simpara-002">The #copy methods in GraphCopier now have a new Point offset parameter that shifts nodes and bends by a given amount upon copying them.</p></li><li id="_clipboard-688-listitem-003"><p id="_clipboard-688-simpara-003">The signature of IClipboardIdProvider#getId has changed. The context parameter has been moved to the front.</p></li></ul>'}]},{tagname:"section",id:"_keyboardinputmode",title:"KeyboardInputMode",children:[{tagname:"para",content:'<ul id="_keyboardinputmode-689-itemizedlist-001"><li id="_keyboardinputmode-689-listitem-001"><p id="_keyboardinputmode-689-simpara-001">KeyboardInputMode has been drastically simplified along with all helper types and infrastructure around commands:</p><para><ul id="_keyboardinputmode-689-itemizedlist-002"><li id="_keyboardinputmode-689-listitem-002"><p id="_keyboardinputmode-689-simpara-002">Classes RoutedCommand, RoutedUICommand, and CommandManager have been removed, along with CanExecuteRoutedEventArgs and ExecutedRoutedEventArgs</p></li><li id="_keyboardinputmode-689-listitem-003"><p id="_keyboardinputmode-689-simpara-003">The ICommand interface has added the target parameter to the execute and canExecute methods</p></li><li id="_keyboardinputmode-689-listitem-004"><p id="_keyboardinputmode-689-simpara-004">ICommand now holds all available predefined commands as constants (with the "_COMMAND" suffix removed). It also contains a factory method that allows for creating an ICommand for use with KeyboardInputMode and the #invalidateRequerySuggested method from CommandManager.</p></li><li id="_keyboardinputmode-689-listitem-005"><p id="_keyboardinputmode-689-simpara-005">The #commandBindings and #inputBindings properties of CanvasComponent have been removed and functionality is now available via KeyboardInputMode, exclusively.</p></li><li id="_keyboardinputmode-689-listitem-006"><p id="_keyboardinputmode-689-simpara-006">KeyBoardInputMode now offers two ways to create between for keys presses and generic key gestures to commands and a single method to provide custom execution logic for a given command.\nAll of these methods (#addCommandBinding, #addKeyBinding, and #addRecognizerBinding) return the same new token type "KeyboardInputModeBinding" whose #remove method can be used to remove the binding again.</p></li><li id="_keyboardinputmode-689-listitem-007"><p id="_keyboardinputmode-689-simpara-007">There is also a single new method #removeCommand on KeyboardInputMode which removes all currently existing binding known for a given ICommand.</p></li></ul></para></li></ul>'}]},{tagname:"section",id:"_various_input_related_changes",title:"Various Input-related Changes",children:[{tagname:"para",content:'<ul id="_various_input_related_changes-690-itemizedlist-001"><li id="_various_input_related_changes-690-listitem-001"><p id="_various_input_related_changes-690-simpara-001">Events</p><para><ul id="_various_input_related_changes-690-itemizedlist-002"><li id="_various_input_related_changes-690-listitem-002"><p id="_various_input_related_changes-690-simpara-002">Mouse2DEventArgs and Touch2DEventArgs have been renamed to MouseEventArgs and ToucheEventArgs respectively. The original low-level event types of the same names have been removed.</p></li><li id="_various_input_related_changes-690-listitem-003"><p id="_various_input_related_changes-690-simpara-003">The properties #lastMouse2DEventArgs and #lastEventLocation have been removed from all input modes. Instead, the properties #lastMouseEvent and #lastEventLocation on CanvasComponent can be used.</p></li><li id="_various_input_related_changes-690-listitem-004"><p id="_various_input_related_changes-690-simpara-004">EdgeEventArgs now also contains the owner of the source and target port.</p></li><li id="_various_input_related_changes-690-listitem-005"><p id="_various_input_related_changes-690-simpara-005">ItemClickedEventArgs now also contains the location of the click.</p></li><li id="_various_input_related_changes-690-listitem-006"><p id="_various_input_related_changes-690-simpara-006">StripeEventArgs now also contains the Table for this event .</p></li><li id="_various_input_related_changes-690-listitem-007"><p id="_various_input_related_changes-690-simpara-007">OrthogonalEdgeEditingContext: The events Initializing, Initialized and CleanedUp as well as associated methods now use InputModeEventArgs.</p></li><li id="_various_input_related_changes-690-listitem-008"><p id="_various_input_related_changes-690-simpara-008">ICommand#ADJUST_GROUP_NODE_SIZE now always processes the nodes in bottom to top order instead of using the order in which the nodes were selected</p></li></ul></para></li><li id="_various_input_related_changes-690-listitem-009"><p id="_various_input_related_changes-690-simpara-009">All hit-testing methods as well as the methods in IPortSelectionTester and IBendSelectionTester now take an IInputModeContext instead of ICanvasContext as their context parameter</p></li><li id="_various_input_related_changes-690-listitem-010"><p id="_various_input_related_changes-690-simpara-010">IPositionHandler and IHandle implementations no longer also implement IPoint.</p></li><li id="_various_input_related_changes-690-listitem-011"><p id="_various_input_related_changes-690-simpara-011">IPositionHandler#setPosition has been removed. The interface is now used as flagging interface only.</p></li><li id="_various_input_related_changes-690-listitem-012"><p id="_various_input_related_changes-690-simpara-012">The classes DefaultPositionHandler and PointHandle have been removed</p></li><li id="_various_input_related_changes-690-listitem-013"><p id="_various_input_related_changes-690-simpara-013">GraphEditorInputMode#nodeCreator now has an additional parent parameter which can be used as the parent node for creating a new node. GraphEditorInputMode tries to find a group node at the click location to pass as parent to the #nodeCreator.</p></li><li id="_various_input_related_changes-690-listitem-014"><p id="_various_input_related_changes-690-simpara-014">Opening a context menu from the keyboard no longer uses the last known mouse pointer location for opening the context menu. Instead, the current selection or the current item are used.</p></li><li id="_various_input_related_changes-690-listitem-015"><p id="_various_input_related_changes-690-simpara-015">IPortCandidateProvider: The two method overloads #getSourcePortCandidatesForEdge and #getTargetPortCandidatesForEdge that had an IEdge parameter have been removed - the two remaining pairs have been merged into a single method with an optional argument for the opposite candidate.</p></li><li id="_various_input_related_changes-690-listitem-016"><p id="_various_input_related_changes-690-simpara-016">The property AbstractPortCandidateProvider#portOwner has been removed, along with the methods that made use of it.</p></li><li id="_various_input_related_changes-690-listitem-017"><p id="_various_input_related_changes-690-simpara-017">AbstractPortCandidateProvider: overloads of #createCandidate taking an IPort an optionally an IPortLocationModel have been removed.</p></li><li id="_various_input_related_changes-690-listitem-018"><p id="_various_input_related_changes-690-simpara-018">DefaultPortCandidate: a constructor overload taking the optional PortCandidateValidity additionally has been added.</p></li><li id="_various_input_related_changes-690-listitem-019"><p id="_various_input_related_changes-690-simpara-019">OrthogonalEdgeEditingContext#addMovedEdgeEnd: The movementInfo parameter’s type has been changed to the more general MovementInfo. A boolean parameter atSource has been added.</p></li><li id="_various_input_related_changes-690-listitem-020"><p id="_various_input_related_changes-690-simpara-020">PortRelocationHandle: The method #configureDummyEdge has been folded into #createDummyEdge.</p></li><li id="_various_input_related_changes-690-listitem-021"><p id="_various_input_related_changes-690-simpara-021">The methods IDragHandler#handleMove and IReshapeHandler#handleReshape don’t return anymore whether they had a visual effect.</p></li><li id="_various_input_related_changes-690-listitem-022"><p id="_various_input_related_changes-690-simpara-022">The classes InputModeController and GraphInputModeController have been removed.</p></li><li id="_various_input_related_changes-690-listitem-023"><p id="_various_input_related_changes-690-simpara-023">The abstract class EdgeEndMoveHandle has been removed.</p></li><li id="_various_input_related_changes-690-listitem-024"><p id="_various_input_related_changes-690-simpara-024">The StateMachine class as well as the associated types and infrastructure have been removed from the API.</p></li><li id="_various_input_related_changes-690-listitem-025"><p id="_various_input_related_changes-690-simpara-025">Table editing: when the delete command is executed and some graph items are selected together with a stripe all selected items (including the stripe) will be deleted (was: only the stripe was deleted).</p></li></ul>'}]}]},{tagname:"section",id:"_graphml",title:"GraphML",children:[{tagname:"para","class":"dguide-para",id:"_graphml-691-simpara-001",content:"The XML namespaces and GraphML naming conventions have been updated. The mapping from yfiles classes to the corresponding XML namespaces has been changed, as well as some of the naming conventions:"},{tagname:"para",content:'<ul id="_graphml-691-itemizedlist-001"><li id="_graphml-691-listitem-001"><p id="_graphml-691-simpara-002">All platform independent model classes are now mapped to "http://www.yworks.com/xml/yfiles-common/3.0". This includes the following types</p><para><ul id="_graphml-691-itemizedlist-002"><li id="_graphml-691-listitem-002"><p id="_graphml-691-simpara-003">all graph item types</p></li><li id="_graphml-691-listitem-003"><p id="_graphml-691-simpara-004">all default label models</p></li><li id="_graphml-691-listitem-004"><p id="_graphml-691-simpara-005">all port location models</p></li><li id="_graphml-691-listitem-005"><p id="_graphml-691-simpara-006">all "void" styles</p></li><li id="_graphml-691-listitem-006"><p id="_graphml-691-simpara-007">serialization for geometric primitives</p></li></ul></para></li><li id="_graphml-691-listitem-007"><p id="_graphml-691-simpara-008">All platform independent graphml support classes are now mapped to "http://www.yworks.com/xml/yfiles-common/markup/3.0".</p></li><li id="_graphml-691-listitem-008"><p id="_graphml-691-simpara-009">All platform independent framework classes are now mapped to "http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0". This includes the following types</p><para><ul id="_graphml-691-itemizedlist-003"><li id="_graphml-691-listitem-009"><p id="_graphml-691-simpara-010">primitive types (Number, Boolean, String)</p></li></ul></para></li><li id="_graphml-691-listitem-010"><p id="_graphml-691-simpara-011">All types and members in these namespaces use the XAML/C# naming convention in GraphML files:</p><para><ul id="_graphml-691-itemizedlist-004"><li id="_graphml-691-listitem-011"><p id="_graphml-691-simpara-012">UpperCamelCase for properties, fields, constants and enum members</p></li></ul></para></li><li id="_graphml-691-listitem-012"><p id="_graphml-691-simpara-013">All platform dependent library classes are now mapped to "http://www.yworks.com/xml/yfiles-for-html/2.0/xaml". These are mainly the types in namespace</p><para><ul id="_graphml-691-itemizedlist-005"><li id="_graphml-691-listitem-013"><p id="_graphml-691-simpara-014">yfiles.styles</p></li></ul></para></li><li id="_graphml-691-listitem-014"><p id="_graphml-691-simpara-015">All types and members in this namespace use the Javascript typical native naming convention in GraphML files:</p><para><ul id="_graphml-691-itemizedlist-006"><li id="_graphml-691-listitem-015"><p id="_graphml-691-simpara-016">actual type and property names (if applicable)</p></li><li id="_graphml-691-listitem-016"><p id="_graphml-691-simpara-017">UPPERCASE_UNDERSCORE for fields, constants and enum members</p></li></ul></para></li><li id="_graphml-691-listitem-017"><p id="_graphml-691-simpara-018">The performance of parsing GraphML files has been improved. The speed-up is especially notable for large graphs with several thousands of nodes.</p></li><li id="_graphml-691-listitem-018"><p id="_graphml-691-simpara-019">The following events have been added to signal the end of the write or parse process, respectively: GraphMLIOHandler#Parsed, GraphMLParser#Parsed, GraphMLIOHandler#Written, GraphMLWriter#Written, together with the corresponding event raiser methods.</p></li><li id="_graphml-691-listitem-019"><p id="_graphml-691-simpara-020">SerializationProperties:</p><para><ul id="_graphml-691-itemizedlist-007"><li id="_graphml-691-listitem-020"><p id="_graphml-691-simpara-021">The new serialization property #PARSE_LABEL_SIZE optionally disables parsing of the preferred size of a label.</p></li><li id="_graphml-691-listitem-021"><p id="_graphml-691-simpara-022">#WRITE_GRAPH_SETTINGS and #DISABLE_GRAPH_SETTINGS have been merged to a single #DISABLE_GRAPH_SETTINGS property which is interpreted according to the context where it is set.</p></li><li id="_graphml-691-listitem-022"><p id="_graphml-691-simpara-023">#INDENT_OUTPUT has been added that allows to define whether the XML output should be properly indented.</p></li></ul></para></li><li id="_graphml-691-listitem-023"><p id="_graphml-691-simpara-024">A few abstract base classes have been merged:</p><para><ul id="_graphml-691-itemizedlist-008"><li id="_graphml-691-listitem-024"><p id="_graphml-691-simpara-025">AbstractXmlWriter and DirectXmlWriter have been merged into XmlWriter</p></li><li id="_graphml-691-listitem-025"><p id="_graphml-691-simpara-026">AbstractMapperInputHandler and ComplexMapperInputHandler have been merged into MapperInputHandler</p></li><li id="_graphml-691-listitem-026"><p id="_graphml-691-simpara-027">AbstractMapperOutputHandler and ComplexMapperOutputHandler have been merged into MapperOutputHandler</p></li></ul></para></li><li id="_graphml-691-listitem-027"><p id="_graphml-691-simpara-028">TypeConverter and all subclasses have been removed and were replaced either by ValueSerializers or by implementations of the new interface IMarkupExtensionConverter</p></li><li id="_graphml-691-listitem-028"><p id="_graphml-691-simpara-029">The legacy interface IDeserializer was removed. For custom deserialization an event handler for GraphMLIOHandler#HandleDeserialization can be used.</p></li><li id="_graphml-691-listitem-029"><p id="_graphml-691-simpara-030">Removed: ArrayValueSerializer, NullXmlWriter</p></li><li id="_graphml-691-listitem-030"><p id="_graphml-691-simpara-031">IXamlNameMapper has been refactored to and #addXamlNamespaceMapping has been added to GraphMLIOHandler</p></li><li id="_graphml-691-listitem-031"><p id="_graphml-691-simpara-032">QueryOutputHandlersEventArgs: The overload of #addOutputHandler taking an object id has been removed</p></li><li id="_graphml-691-listitem-032"><p id="_graphml-691-simpara-033">XmlWriter: a property <code>indent</code> has been added that allow to define whether the XML output should be properly indented.</p></li><li id="_graphml-691-listitem-033"><p id="_graphml-691-simpara-034">XmlWriter: the constructor overload taking an InternalXmlWriter as well as the corresponding property #DelegateWriter have been removed.</p></li></ul>'}]},{tagname:"section",id:"_collections_and_utility_types",title:"Collections and Utility Types",children:[{tagname:"para","class":"dguide-para",id:"_collections_and_utility_types-692-simpara-001",content:"Replaced and removed a lot of the utility types."},{tagname:"para",content:'<ul id="_collections_and_utility_types-692-itemizedlist-001"><li id="_collections_and_utility_types-692-listitem-001"><p id="_collections_and_utility_types-692-simpara-002">Removed the yfiles.objectcollections namespace. It contained only obsolete interfaces.</p></li><li id="_collections_and_utility_types-692-listitem-002"><p id="_collections_and_utility_types-692-simpara-003">Dissolved the yfiles.model namespace and moved its types to better matching namespaces like yfiles.collections and yfiles.view.</p></li><li id="_collections_and_utility_types-692-listitem-003"><p id="_collections_and_utility_types-692-simpara-004">Dissolved the yfiles.system and yfiles.support namespaces and removed a lot of their types since they were not really needed. The remain types have been moved to more meaningful namespaces, mainly yfiles.view.</p></li><li id="_collections_and_utility_types-692-listitem-004"><p id="_collections_and_utility_types-692-simpara-005">Removed EmptyCollection&lt;T>, EmptyList&lt;T>, CompositeEnumerable, CompositeEnumerator, CompositeListEnumerable, CompositeCollectionModel, SingleListEnumerable, SingletonCollection, SingletonList, DoubleCollection, and CollectionChangedEventArgs</p></li><li id="_collections_and_utility_types-692-listitem-005"><p id="_collections_and_utility_types-692-simpara-006">Removed CompositeHandle&lt;T> and CompositePositionHandler</p></li><li id="_collections_and_utility_types-692-listitem-006"><p id="_collections_and_utility_types-692-simpara-007">Removed method IMapper#removeValue. It depends on the specific implementation of the mapper whether a mapping can be removed. If an implementation provides a way to remove a mapping, that should be preferred over setting a null value.</p></li><li id="_collections_and_utility_types-692-listitem-007"><p id="_collections_and_utility_types-692-simpara-008">Replaced IMapperDelegate by plain functions.</p></li><li id="_collections_and_utility_types-692-listitem-008"><p id="_collections_and_utility_types-692-simpara-009">Removed ILookupCallback and ContextLookups. Use IContextLookup instead.</p></li><li id="_collections_and_utility_types-692-listitem-009"><p id="_collections_and_utility_types-692-simpara-010">Removed GenericYList, GenericListCell, and HashSet</p></li><li id="_collections_and_utility_types-692-listitem-010"><p id="_collections_and_utility_types-692-simpara-011">Removed ResourceKey and ComponentResourceKey in favour of string properties.</p></li><li id="_collections_and_utility_types-692-listitem-011"><p id="_collections_and_utility_types-692-simpara-012">Removed DefaultNodeLookup, DefaultEdgeLookup, DefaultPortLookup, DefaultLabelLookup, DefaultBendLookup and DefaultItemLookup. Instead the properties #DefaultNodeLookup, #DefaultEdgeLookup, #DefaultPortLookup, #DefaultLabelLookup and #DefaultBendLookup have been added to DefaultGraph.</p></li><li id="_collections_and_utility_types-692-listitem-012"><p id="_collections_and_utility_types-692-simpara-013">Removed ItemDecorator&lt;TModelItem>. Its members have been pushed down to its former sub-classes NodeDecorator, EdgeDecorator, LabelDecorator, PortDecorator, and BendDecorator.</p></li><li id="_collections_and_utility_types-692-listitem-013"><p id="_collections_and_utility_types-692-simpara-014">The events #ItemSelected and #ItemDeselected on ISelectionModel have been merged into the #ItemSelectionChanged event.</p></li><li id="_collections_and_utility_types-692-listitem-014"><p id="_collections_and_utility_types-692-simpara-015">EventHandler are now typed to the specific EventArgs that are used by the handler</p></li><li id="_collections_and_utility_types-692-listitem-015"><p id="_collections_and_utility_types-692-simpara-016">Moved method GeomSupport#createSmoothedPath to GeneralPath</p></li><li id="_collections_and_utility_types-692-listitem-016"><p id="_collections_and_utility_types-692-simpara-017">GeneralPath: Removed the #FillMode parameter from methods #createPath and #updatePath.</p></li></ul>'}]},{tagname:"section",id:"_layout",title:"Layout",children:[{tagname:"section",id:"_layout_execution",title:"Layout Execution",children:[{tagname:"para",content:'<ul id="_layout_execution-694-itemizedlist-001"><li id="_layout_execution-694-listitem-001"><p id="_layout_execution-694-simpara-001">LayoutExecutor:</p><para><ul id="_layout_execution-694-itemizedlist-002"><li id="_layout_execution-694-listitem-002"><p id="_layout_execution-694-simpara-002">The method #stop() now stops a running layout calculation as soon as possible and then immediately shows the result so far, skipping any animation. In addition, the new method #cancel() immediately cancels a running calculation and doesn’t change the GraphComponents’s #Graph unless the animation was already running.</p></li><li id="_layout_execution-694-listitem-003"><p id="_layout_execution-694-simpara-003">The property #abortHandler has been made read-only. There is a protected factory method #createAbortHandler which can be overridden to create a custom AbortHandler implementation.</p></li><li id="_layout_execution-694-listitem-004"><p id="_layout_execution-694-simpara-004">Labels are now taken into account for the final content rectangle and viewport animation</p></li><li id="_layout_execution-694-listitem-005"><p id="_layout_execution-694-simpara-005">The #finishedHandler property has been removed and the API now uses Promises instead for methods #start() and #stop() to signal failures or successful completion of the operation.</p></li><li id="_layout_execution-694-listitem-006"><p id="_layout_execution-694-simpara-006">The new property #considerViewportLimiter can be enabled to let the target viewport after a layout respect the ViewportLimiter of the GraphComponent. The ViewportAnimation has a new property #considerViewportLimiter for the same purpose.</p></li><li id="_layout_execution-694-listitem-007"><p id="_layout_execution-694-simpara-007">Classes LayoutExecutor and LayoutGraphAdapter now have a property #automaticEdgeGrouping that automatically configures edge groups for ports with multiple incoming or outgoing edges. This feature is enabled by default.</p></li><li id="_layout_execution-694-listitem-008"><p id="_layout_execution-694-simpara-008">Classes LayoutExecutor and LayoutGraphAdapter now have a property #fixPorts that automatically configures strong source and target port constraints for all edges in the graph. This feature is disabled by default.</p></li></ul></para></li><li id="_layout_execution-694-listitem-009"><p id="_layout_execution-694-simpara-009">LayoutGraphAdapter now adds data providers that map each node, edge, and label of a LayoutGraph to their corresponding IModelItem in the original IGraph. Especially, these data providers are available if a layout is run with a LayoutExecutor or the convenience methods #morphLayout or #applyLayout.</p></li></ul>'}]},{tagname:"section",id:"_layout_api",title:"Layout API",children:[{tagname:"para",content:'<ul id="_layout_api-695-itemizedlist-001"><li id="_layout_api-695-listitem-001"><p id="_layout_api-695-simpara-001">The legacy hierarchic layout yfiles.hierarchic.HierarchicLayouter, yfiles.hierarchic.HierarchicGroupLayouter, and the associated legacy interfaces ILayerer, IDrawer, IMementoSupport, ILayerSequencer, together with their implementations, have been removed. Instead, IncrementalHierarchicLayouter has been renamed to HierarchicLayout and is now the only implementation of the hierarchic layout style. All associated interfaces and implementations from the namespace yfiles.hierarchic.incremental have been moved up to yfiles.hierarchic.</p></li><li id="_layout_api-695-listitem-002"><p id="_layout_api-695-simpara-002">Legacy classes OrthogonalGroupLayouter and DirectedOrthogonalLayouter have been removed and their features have been incorporated in OrthogonalLayout.</p></li><li id="_layout_api-695-listitem-003"><p id="_layout_api-695-simpara-003">Legacy class OrthogonalEdgeRouter and all associated classes have been removed.</p></li><li id="_layout_api-695-listitem-004"><p id="_layout_api-695-simpara-004">Class HVTreeLayouter has been removed and its features have been incorporated into TreeLayout.</p></li><li id="_layout_api-695-listitem-005"><p id="_layout_api-695-simpara-005">Class DefaultGraphLayout has been removed.</p></li><li id="_layout_api-695-listitem-006"><p id="_layout_api-695-simpara-006">Class ParentEdgeAugmentationStage has been removed.</p></li><li id="_layout_api-695-listitem-007"><p id="_layout_api-695-simpara-007">Method Graph#moveSubgraph has been removed.</p></li><li id="_layout_api-695-listitem-008"><p id="_layout_api-695-simpara-008">CopiedLayoutIGraph was removed. An instance of the super type CopiedLayoutGraph with the same functionality can be obtained from factory method #createCopiedLayoutGraph in LayoutGraphAdapter.</p></li><li id="_layout_api-695-listitem-009"><p id="_layout_api-695-simpara-009">The method canLayout has been removed from all layout algorithms. Previously it pretty much always returned true.</p></li><li id="_layout_api-695-listitem-010"><p id="_layout_api-695-simpara-010">Introduced a new way to configure yFiles automatic layout algorithms. Class LayoutData and subclasses can be used to pass data to a layouter by setting properties instead of registering DataProvider on the graph which have to be filled with this data. This reduces the code needed to configure a layouter and is more flexible as well as reusable. As most subclasses of LayoutData are specialized for one layout algorithm, their properties provide a good overview which data can be passed to the algorithm.</p></li><li id="_layout_api-695-listitem-011"><p id="_layout_api-695-simpara-011">LayoutGraphAdapter: IMappers which use ILabels as key now are correctly translated into data providers for layout algorithms.</p></li></ul>'}]},{tagname:"section",id:"_renamed_types",title:"Renamed Types",children:[{tagname:"table","class":"",colsep:1,frame:"all",id:"tab_migration_layout_classes",rowsep:1,content:'<caption>Renamed layout classes</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead id="_renamed_types-696-thead-001"><tr id="_renamed_types-696-row-001"><th id="_renamed_types-696-entry-001" align="left" valign="top">\nyFiles for HTML 1.x\n</th><th id="_renamed_types-696-entry-002" align="left" valign="top">\nyFiles for HTML 2.x\n</th></tr></thead><tbody id="_renamed_types-696-tbody-001"><tr id="_renamed_types-696-row-002"><td colspan="2" id="_renamed_types-696-entry-003" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-001"><strong id="_renamed_types-696-emphasis-001" class="bold" role="bold">Main Interface</strong></para></td></tr><tr id="_renamed_types-696-row-003"><td id="_renamed_types-696-entry-004" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-002">ILayouter</para></td><td id="_renamed_types-696-entry-005" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-003">ILayoutAlgorithm</para></td></tr><tr id="_renamed_types-696-row-004"><td id="_renamed_types-696-entry-006" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-004">ILayouter.doLayout</para></td><td id="_renamed_types-696-entry-007" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-005">ILayoutAlgorithm.applyLayout</para></td></tr><tr id="_renamed_types-696-row-005"><td id="_renamed_types-696-entry-008" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-006">ILayouter.canLayout</para></td><td id="_renamed_types-696-entry-009" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-007">removed</para></td></tr><tr id="_renamed_types-696-row-006"><td colspan="2" id="_renamed_types-696-entry-010" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-008"><strong id="_renamed_types-696-emphasis-002" class="bold" role="bold">Major Layout Algorithms</strong></para></td></tr><tr id="_renamed_types-696-row-007"><td id="_renamed_types-696-entry-011" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-009">HierarchicLayouter</para></td><td id="_renamed_types-696-entry-012" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-010">removed</para></td></tr><tr id="_renamed_types-696-row-008"><td id="_renamed_types-696-entry-013" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-011">HierarchicGroupLayouter</para></td><td id="_renamed_types-696-entry-014" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-012">removed</para></td></tr><tr id="_renamed_types-696-row-009"><td id="_renamed_types-696-entry-015" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-013">IncrementalHierarchicLayouter</para></td><td id="_renamed_types-696-entry-016" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-014">HierarchicLayout</para></td></tr><tr id="_renamed_types-696-row-010"><td id="_renamed_types-696-entry-017" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-015">DirectedOrthogonalLayouter</para></td><td id="_renamed_types-696-entry-018" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-016">removed, functionality incorporated in OrthogonalLayout</para></td></tr><tr id="_renamed_types-696-row-011"><td id="_renamed_types-696-entry-019" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-017">OrthogonalGroupLayouter</para></td><td id="_renamed_types-696-entry-020" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-018">removed, functionality incorporated in OrthogonalLayout</para></td></tr><tr id="_renamed_types-696-row-012"><td id="_renamed_types-696-entry-021" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-019">OrthogonalLayouter</para></td><td id="_renamed_types-696-entry-022" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-020">OrthogonalLayout</para></td></tr><tr id="_renamed_types-696-row-013"><td id="_renamed_types-696-entry-023" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-021">OrthogonalEdgeRouter</para></td><td id="_renamed_types-696-entry-024" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-022">removed, functionality incorporated in EdgeRouter</para></td></tr><tr id="_renamed_types-696-row-014"><td id="_renamed_types-696-entry-025" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-023">OrganicLayouter</para></td><td id="_renamed_types-696-entry-026" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-024">ClassicOrganicLayout</para></td></tr><tr id="_renamed_types-696-row-015"><td id="_renamed_types-696-entry-027" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-025">SmartOrganicLayouter</para></td><td id="_renamed_types-696-entry-028" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-026">OrganicLayout</para></td></tr><tr id="_renamed_types-696-row-016"><td id="_renamed_types-696-entry-029" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-027">TreeLayouter</para></td><td id="_renamed_types-696-entry-030" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-028">ClassicTreeLayout</para></td></tr><tr id="_renamed_types-696-row-017"><td id="_renamed_types-696-entry-031" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-029">GenericTreeLayouter</para></td><td id="_renamed_types-696-entry-032" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-030">TreeLayout</para></td></tr><tr id="_renamed_types-696-row-018"><td id="_renamed_types-696-entry-033" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-031">HVTreeLayouter</para></td><td id="_renamed_types-696-entry-034" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-032">removed, functionality incorporated in TreeLayout</para></td></tr><tr id="_renamed_types-696-row-019"><td id="_renamed_types-696-entry-035" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-033">SALabeling</para></td><td id="_renamed_types-696-entry-036" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-034">GenericLabeling</para></td></tr><tr id="_renamed_types-696-row-020"><td id="_renamed_types-696-entry-037" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-035">GreedyMISLabeling</para></td><td id="_renamed_types-696-entry-038" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-036">removed, functionality incorporated in GenericLabeling</para></td></tr><tr id="_renamed_types-696-row-021"><td id="_renamed_types-696-entry-039" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-037">MultiPageLayouter</para></td><td id="_renamed_types-696-entry-040" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-038">MultiPageLayout</para></td></tr><tr id="_renamed_types-696-row-022"><td id="_renamed_types-696-entry-041" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-039">MultiPageLayout</para></td><td id="_renamed_types-696-entry-042" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-040">MultiPageLayoutResult</para></td></tr><tr id="_renamed_types-696-row-023"><td colspan="2" id="_renamed_types-696-entry-043" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-041"><strong id="_renamed_types-696-emphasis-003" class="bold" role="bold">Changes in alphabetical order</strong></para></td></tr><tr id="_renamed_types-696-row-024"><td id="_renamed_types-696-entry-044" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-042">AbstractLabelingAlgorithm</para></td><td id="_renamed_types-696-entry-045" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-043">AbstractLabeling</para></td></tr><tr id="_renamed_types-696-row-025"><td id="_renamed_types-696-entry-046" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-044">AbstractLayoutStage</para></td><td id="_renamed_types-696-entry-047" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-045">LayoutStageBase</para></td></tr><tr id="_renamed_types-696-row-026"><td id="_renamed_types-696-entry-048" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-046">ARTreeLayouter</para></td><td id="_renamed_types-696-entry-049" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-047">AspectRatioTreeLayout</para></td></tr><tr id="_renamed_types-696-row-027"><td id="_renamed_types-696-entry-050" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-048">BalloonLayouter</para></td><td id="_renamed_types-696-entry-051" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-049">BalloonLayout</para></td></tr><tr id="_renamed_types-696-row-028"><td id="_renamed_types-696-entry-052" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-050">BufferedLayouter</para></td><td id="_renamed_types-696-entry-053" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-051">BufferedLayout</para></td></tr><tr id="_renamed_types-696-row-029"><td id="_renamed_types-696-entry-054" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-052">CanonicMultiStageLayouter</para></td><td id="_renamed_types-696-entry-055" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-053">MultiStageLayout</para></td></tr><tr id="_renamed_types-696-row-030"><td id="_renamed_types-696-entry-056" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-054">CanonicMultiStageLayouter.LabelLayouter</para></td><td id="_renamed_types-696-entry-057" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-055">MultiStageLayout.Labeling</para></td></tr><tr id="_renamed_types-696-row-031"><td id="_renamed_types-696-entry-058" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-056">CanonicMultiStageLayouter.LabelLayouterEnabled</para></td><td id="_renamed_types-696-entry-059" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-057">MultiStageLayout.LabelingEnabled</para></td></tr><tr id="_renamed_types-696-row-032"><td id="_renamed_types-696-entry-060" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-058">CircularLayouter</para></td><td id="_renamed_types-696-entry-061" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-059">CircularLayout</para></td></tr><tr id="_renamed_types-696-row-033"><td id="_renamed_types-696-entry-062" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-060">CompactOrthogonalLayouter</para></td><td id="_renamed_types-696-entry-063" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-061">CompactOrthogonalLayout</para></td></tr><tr id="_renamed_types-696-row-034"><td id="_renamed_types-696-entry-064" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-062">ComponentLayouter</para></td><td id="_renamed_types-696-entry-065" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-063">ComponentLayout</para></td></tr><tr id="_renamed_types-696-row-035"><td id="_renamed_types-696-entry-066" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-064">FamilyTreeLayouter</para></td><td id="_renamed_types-696-entry-067" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-065">FamilyTreeLayout</para></td></tr><tr id="_renamed_types-696-row-036"><td id="_renamed_types-696-entry-068" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-066">GenericTreeLayouter</para></td><td id="_renamed_types-696-entry-069" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-067">TreeLayout</para></td></tr><tr id="_renamed_types-696-row-037"><td id="_renamed_types-696-entry-070" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-068">GroupedShuffleLayouter</para></td><td id="_renamed_types-696-entry-071" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-069">RecursiveShuffleLayout</para></td></tr><tr id="_renamed_types-696-row-038"><td id="_renamed_types-696-entry-072" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-070">GroupNodeHider</para></td><td id="_renamed_types-696-entry-073" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-071">HideGroupsStage</para></td></tr><tr id="_renamed_types-696-row-039"><td id="_renamed_types-696-entry-074" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-072">IncrementalHierarchicLayouter</para></td><td id="_renamed_types-696-entry-075" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-073">HierarchicLayout</para></td></tr><tr id="_renamed_types-696-row-040"><td id="_renamed_types-696-entry-076" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-074">com.yworks.yfiles.layout.hierarchic.incremental.HierarchicLayouter</para></td><td id="_renamed_types-696-entry-077" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-075">com.yworks.yfiles.layout.hierarchic.HierarchicLayoutCore</para></td></tr><tr id="_renamed_types-696-row-041"><td id="_renamed_types-696-entry-078" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-076">IncrementalHierarchicLayouter.createHierarchicLayouter</para></td><td id="_renamed_types-696-entry-079" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-077">HierarchicLayout.createHierarchicLayoutCore</para></td></tr><tr id="_renamed_types-696-row-042"><td id="_renamed_types-696-entry-080" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-078">IncrementalHierarchicLayouter.HierarchicLayouter</para></td><td id="_renamed_types-696-entry-081" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-079">HierarchicLayout.HierarchicLayoutCore</para></td></tr><tr id="_renamed_types-696-row-043"><td id="_renamed_types-696-entry-082" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-080">InteractiveOrganicLayouter.disableStages</para></td><td id="_renamed_types-696-entry-083" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-081">InteractiveOrganicLayout.disableAllStages</para></td></tr><tr id="_renamed_types-696-row-044"><td id="_renamed_types-696-entry-084" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-082">InteractiveOrganicLayouter.doLayout(long)</para></td><td id="_renamed_types-696-entry-085" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-083">InteractiveOrganicLayout.startLayout(long)</para></td></tr><tr id="_renamed_types-696-row-045"><td id="_renamed_types-696-entry-086" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-084">InteractiveOrganicLayouter</para></td><td id="_renamed_types-696-entry-087" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-085">InteractiveOrganicLayout</para></td></tr><tr id="_renamed_types-696-row-046"><td id="_renamed_types-696-entry-088" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-086">IsolatedGroupComponentLayouter</para></td><td id="_renamed_types-696-entry-089" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-087">IsolatedGroupComponentLayout</para></td></tr><tr id="_renamed_types-696-row-047"><td id="_renamed_types-696-entry-090" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-088">LayouterKeys</para></td><td id="_renamed_types-696-entry-091" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-089">LayoutKeys</para></td></tr><tr id="_renamed_types-696-row-048"><td id="_renamed_types-696-entry-092" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-090">LayoutTool</para></td><td id="_renamed_types-696-entry-093" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-091">LayoutGraphUtilities</para></td></tr><tr id="_renamed_types-696-row-049"><td id="_renamed_types-696-entry-094" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-092">MinNodeSizeStage</para></td><td id="_renamed_types-696-entry-095" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-093">MinimumNodeSizeStage</para></td></tr><tr id="_renamed_types-696-row-050"><td id="_renamed_types-696-entry-096" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-094">MISLabelingAlgorithm</para></td><td id="_renamed_types-696-entry-097" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-095">AbstractMISLabeling</para></td></tr><tr id="_renamed_types-696-row-051"><td id="_renamed_types-696-entry-098" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-096">NormalizingGraphElementOrderStage</para></td><td id="_renamed_types-696-entry-099" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-097">NormalizeGraphElementOrderStage</para></td></tr><tr id="_renamed_types-696-row-052"><td id="_renamed_types-696-entry-100" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-098">OrganicLayouter</para></td><td id="_renamed_types-696-entry-101" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-099">ClassicOrganicLayout</para></td></tr><tr id="_renamed_types-696-row-053"><td id="_renamed_types-696-entry-102" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-100">OrientationLayouter</para></td><td id="_renamed_types-696-entry-103" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-101">OrientationLayout</para></td></tr><tr id="_renamed_types-696-row-054"><td id="_renamed_types-696-entry-104" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-102">PartialLayouter</para></td><td id="_renamed_types-696-entry-105" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-103">PartialLayout</para></td></tr><tr id="_renamed_types-696-row-055"><td id="_renamed_types-696-entry-106" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-104">PartitionLayouter</para></td><td id="_renamed_types-696-entry-107" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-105">PartitionLayout</para></td></tr><tr id="_renamed_types-696-row-056"><td id="_renamed_types-696-entry-108" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-106">RadialLayouter</para></td><td id="_renamed_types-696-entry-109" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-107">RadialLayout</para></td></tr><tr id="_renamed_types-696-row-057"><td id="_renamed_types-696-entry-110" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-108">RecursiveGroupLayouter</para></td><td id="_renamed_types-696-entry-111" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-109">RecursiveGroupLayout</para></td></tr><tr id="_renamed_types-696-row-058"><td id="_renamed_types-696-entry-112" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-110">ReducedScopeStage</para></td><td id="_renamed_types-696-entry-113" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-111">ReduceScopeStage</para></td></tr><tr id="_renamed_types-696-row-059"><td id="_renamed_types-696-entry-114" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-112">RemoveOverlapsLayoutStage</para></td><td id="_renamed_types-696-entry-115" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-113">RemoveOverlapsStage</para></td></tr><tr id="_renamed_types-696-row-060"><td id="_renamed_types-696-entry-116" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-114">SALabeling</para></td><td id="_renamed_types-696-entry-117" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-115">GenericLabeling</para></td></tr><tr id="_renamed_types-696-row-061"><td id="_renamed_types-696-entry-118" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-116">SequentialLayouter</para></td><td id="_renamed_types-696-entry-119" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-117">SequentialLayout</para></td></tr><tr id="_renamed_types-696-row-062"><td id="_renamed_types-696-entry-120" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-118">SeriesParallelLayouter</para></td><td id="_renamed_types-696-entry-121" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-119">SeriesParallelLayout</para></td></tr><tr id="_renamed_types-696-row-063"><td id="_renamed_types-696-entry-122" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-120">ShuffleLayouter</para></td><td id="_renamed_types-696-entry-123" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-121">ShuffleLayout</para></td></tr><tr id="_renamed_types-696-row-064"><td id="_renamed_types-696-entry-124" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-122">SingleCycleLayouter</para></td><td id="_renamed_types-696-entry-125" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-123">SingleCycleLayout</para></td></tr><tr id="_renamed_types-696-row-065"><td id="_renamed_types-696-entry-126" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-124">SmartOrganicLayouter</para></td><td id="_renamed_types-696-entry-127" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-125">OrganicLayout</para></td></tr><tr id="_renamed_types-696-row-066"><td id="_renamed_types-696-entry-128" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-126">SplitEdgeLayoutStage</para></td><td id="_renamed_types-696-entry-129" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-127">SplitEdgeStage</para></td></tr><tr id="_renamed_types-696-row-067"><td id="_renamed_types-696-entry-130" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-128">SubgraphLayouter</para></td><td id="_renamed_types-696-entry-131" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-129">SubgraphLayout</para></td></tr><tr id="_renamed_types-696-row-068"><td id="_renamed_types-696-entry-132" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-130">TreeComponentLayouter</para></td><td id="_renamed_types-696-entry-133" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-131">TreeComponentLayout</para></td></tr><tr id="_renamed_types-696-row-069"><td id="_renamed_types-696-entry-134" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-132">TreeLayouter</para></td><td id="_renamed_types-696-entry-135" align="left" valign="top"><para class="dguide-para" id="_renamed_types-696-simpara-133">ClassicTreeLayout</para></td></tr></tbody>'}]}]}]}]},{tagname:"index",children:[{tagname:"primary",text:"automatic placement",children:[{tagname:"target",targetId:"label_placement"}]},{tagname:"primary",text:"binding data to",children:[{tagname:"target",targetId:"layout_graph_data_accessors"}]},{tagname:"primary",text:"buffered layout",children:[{tagname:"target",targetId:"layout-buffering"}]},{tagname:"primary",text:"candidate positions",children:[{tagname:"target",targetId:"label_placement-label_models"}]},{tagname:"primary",text:"class Edge",children:[{tagname:"secondary",text:"creating an instance",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"secondary",text:"provided functionality",children:[{tagname:"target",targetId:"layout_graph_edge"}]}]},{tagname:"primary",text:"class Graph",children:[{tagname:"secondary",text:"provided functionality",children:[{tagname:"target",targetId:"layout_graph_creation"}]}]},{tagname:"primary",text:"class Node",children:[{tagname:"secondary",text:"creating an instance",children:[{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"secondary",text:"provided functionality",children:[{tagname:"target",targetId:"layout_graph_node"}]}]},{tagname:"primary",text:"complexity",children:[{tagname:"secondary",text:"of common graph structure tasks",children:[{tagname:"target",targetId:"layout_graph_time_complexity"}]}]},{tagname:"primary",text:"creating",children:[{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"primary",text:"creating an instance",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"primary",text:"cursor",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"primary",text:"customized",children:[{tagname:"target",targetId:"layout_graph_customized_data_accessors"}]},{tagname:"primary",text:"data accessors",children:[{tagname:"secondary",text:"customized",children:[{tagname:"target",targetId:"layout_graph_customized_data_accessors"}]},{tagname:"secondary",text:"default map implementations",children:[{tagname:"target",targetId:"layout_graph_default_map"}]},{tagname:"secondary",text:"definition",children:[{tagname:"target",targetId:"layout_graph_data_accessors"}]},{tagname:"secondary",text:"index-based map implementations",children:[{tagname:"target",targetId:"layout_graph_customized_data_accessors"}]}]},{tagname:"primary",text:"data provider",children:[{tagname:"target",targetId:"layout_graph_data_accessors"},{tagname:"target",targetId:"layout_graph_maps"}]},{tagname:"primary",text:"default map implementations",children:[{tagname:"target",targetId:"layout_graph_default_map"}]},{tagname:"primary",text:"definition",children:[{tagname:"target",targetId:"layout_graph_data_accessors"}]},{tagname:"primary",text:"different scenarios",children:[{tagname:"target",targetId:"label_placement-scenarios"}]},{tagname:"primary",text:"edge",children:[{tagname:"secondary",text:"class Edge",children:[{tagname:"tertiary",text:"creating an instance",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_creation"}]}]},{tagname:"secondary",text:"seealso=graph elements",children:[{tagname:"tertiary",text:"class Edge",children:[{tagname:"target",targetId:"layout_graph_edge"}]}]}]},{tagname:"primary",text:"forward and backward",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"primary",text:"generic labeling",children:[{tagname:"target",targetId:"label_placement-generic_labeling"}]},{tagname:"primary",text:"graph",children:[{tagname:"secondary",text:"class Graph",children:[{tagname:"tertiary",text:"provided functionality",children:[{tagname:"target",targetId:"layout_graph_creation"}]}]}]},{tagname:"primary",text:"graph elements",children:[{tagname:"secondary",text:"binding data to",children:[{tagname:"target",targetId:"layout_graph_data_accessors"}]},{tagname:"secondary",text:"creating",children:[{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"secondary",text:"hiding",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_hiding_graph_elements"}]},{tagname:"secondary",text:"removing",children:[{tagname:"target",targetId:"layout_graph_creation"}]}]},{tagname:"primary",text:"hiding",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_hiding_graph_elements"}]},{tagname:"primary",text:"incoming",children:[{tagname:"target",targetId:"layout_graph_node"}]},{tagname:"primary",text:"index-based map implementations",children:[{tagname:"target",targetId:"layout_graph_customized_data_accessors"}]},{tagname:"primary",text:"integrated labeling",children:[{tagname:"target",targetId:"label_placement-integrated_labeling"}]},{tagname:"primary",text:"iteration",children:[{tagname:"secondary",text:"forward and backward",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"secondary",text:"low-level",children:[{tagname:"target",targetId:"layout_graph_collections"}]},{tagname:"secondary",text:"non-cursor",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"secondary",text:"using cursors",children:[{tagname:"target",targetId:"layout_graph_iteration"},{tagname:"tertiary",text:"removing elements",children:[{tagname:"target",targetId:"layout_graph_iteration"}]}]}]},{tagname:"primary",text:"label model",children:[{tagname:"target",targetId:"label_placement-label_models"},{tagname:"secondary",text:"candidate positions",children:[{tagname:"target",targetId:"label_placement-label_models"}]},{tagname:"secondary",text:"model parameter",children:[{tagname:"target",targetId:"label_placement-label_models"}]}]},{tagname:"primary",text:"labels",children:[{tagname:"secondary",text:"automatic placement",children:[{tagname:"target",targetId:"label_placement"}]},{tagname:"secondary",text:"different scenarios",children:[{tagname:"target",targetId:"label_placement-scenarios"}]},{tagname:"secondary",text:"generic labeling",children:[{tagname:"target",targetId:"label_placement-generic_labeling"}]},{tagname:"secondary",text:"integrated labeling",children:[{tagname:"target",targetId:"label_placement-integrated_labeling"}]},{tagname:"secondary",text:"label model",children:[{tagname:"target",targetId:"label_placement-label_models"},{tagname:"tertiary",text:"candidate positions",children:[{tagname:"target",targetId:"label_placement-label_models"}]},{tagname:"tertiary",text:"model parameter",children:[{tagname:"target",targetId:"label_placement-label_models"}]}]},{tagname:"secondary",text:"preferred placement (edge labels)",children:[{tagname:"target",targetId:"label_placement-preferred_placement"}]}]},{tagname:"primary",text:"layout",children:[{tagname:"secondary",text:"unbuffered vs. buffered",children:[{tagname:"target",targetId:"layout-buffering"}]}]},{tagname:"primary",text:"layout stage",children:[{tagname:"secondary",text:"buffered layout",children:[{tagname:"target",targetId:"layout-buffering"}]}]},{tagname:"primary",text:"low-level",children:[{tagname:"target",targetId:"layout_graph_collections"}]},{tagname:"primary",text:"map",children:[{tagname:"target",targetId:"layout_graph_data_accessors"},{tagname:"target",targetId:"layout_graph_maps"}]},{tagname:"primary",text:"model parameter",children:[{tagname:"target",targetId:"label_placement-label_models"}]},{tagname:"primary",text:"node",children:[{tagname:"secondary",text:"class Node",children:[{tagname:"tertiary",text:"creating an instance",children:[{tagname:"target",targetId:"layout_graph_creation"}]}]},{tagname:"secondary",text:"seealso=graph elements",children:[{tagname:"tertiary",text:"class Node",children:[{tagname:"target",targetId:"layout_graph_node"}]}]}]},{tagname:"primary",text:"non-cursor",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"primary",text:"of common graph structure tasks",children:[{tagname:"target",targetId:"layout_graph_time_complexity"}]},{tagname:"primary",text:"outgoing",children:[{tagname:"target",targetId:"layout_graph_node"}]},{tagname:"primary",text:"partitioned layout support",children:[{tagname:"target",targetId:"organic_layout-partitioned_layout"}]},{tagname:"primary",text:"preferred placement (edge labels)",children:[{tagname:"target",targetId:"label_placement-preferred_placement"}]},{tagname:"primary",text:"provided functionality",children:[{tagname:"target",targetId:"layout_graph_creation"},{tagname:"target",targetId:"layout_graph_node"},{tagname:"target",targetId:"layout_graph_edge"}]},{tagname:"primary",text:"removing",children:[{tagname:"target",targetId:"layout_graph_creation"}]},{tagname:"primary",text:"removing elements",children:[{tagname:"target",targetId:"layout_graph_iteration"}]},{tagname:"primary",text:"self-loop",children:[{tagname:"target",targetId:"layout_graph_node"},{tagname:"target",targetId:"layout_graph_edge"}]},{tagname:"primary",text:"specific layout support",children:[{tagname:"secondary",text:"partitioned layout support",children:[{tagname:"target",targetId:"organic_layout-partitioned_layout"}]}]},{tagname:"primary",text:"unbuffered vs. buffered",children:[{tagname:"target",targetId:"layout-buffering"}]},{tagname:"primary",text:"using cursors",children:[{tagname:"target",targetId:"layout_graph_iteration"},{tagname:"secondary",text:"removing elements",children:[{tagname:"target",targetId:"layout_graph_iteration"}]}]}]}]};
